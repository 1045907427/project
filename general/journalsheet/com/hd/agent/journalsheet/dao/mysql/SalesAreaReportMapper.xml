<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hd.agent.journalsheet.dao.SalesAreaReportMapper" >
	<sql id="getSaleAreaData_sql">
		(
		SELECT
		z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.goodssort,z.supplierid,z.adduserid,z.addusername,
		z.goodsid,z.brandid,z.branduser,z.supplieruser,z.branddept,z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice as price,z.costprice,
		SUM(z.ordernum) AS ordernum,SUM(z.ordertotalbox) AS ordertotalbox,SUM(z.orderamount) AS orderamount,SUM(z.ordernotaxamount) AS ordernotaxamount,
		SUM(z.initsendnum) AS initsendnum,SUM(z.initsendtotalbox) AS initsendtotalbox,SUM(z.initsendamount) AS initsendamount,SUM(z.initsendnotaxamount) AS initsendnotaxamount,
		SUM(z.sendnum) AS sendnum,SUM(z.sendtotalbox) AS sendtotalbox,SUM(z.sendamount) AS sendamount,SUM(z.sendnotaxamount) AS sendnotaxamount,sum(z.sendcostamount) as sendcostamount,
		SUM(z.returnnum) AS returnnum,SUM(z.returntotalbox) AS returntotalbox,SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.directreturnnum) AS directreturnnum,SUM(z.directreturntotalbox) AS directreturntotalbox,SUM(z.directreturnamount) AS directreturnamount,SUM(z.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(z.checkreturnnum) AS checkreturnnum,SUM(z.checkreturntotalbox) AS checkreturntotalbox,SUM(z.checkreturnamount) AS checkreturnamount,SUM(z.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(z.costamount) as costamount,sum(z.pushbalanceamount) as pushbalanceamount
		FROM
		(
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		t1.unitnum AS ordernum,t1.totalbox as ordertotalbox,t1.taxamount AS orderamount,t1.notaxamount AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		0 as costamount,0 as pushbalanceamount
		FROM t_sales_order t
		RIGHT JOIN t_sales_order_detail t1 ON t.id = t1.orderid
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate1 != null" >
		       		<![CDATA[and t.businessdate >= #{condition.businessdate1} ]]>
		   		</if>
		   		<if test="condition.businessdate2 != null" >
		      		<![CDATA[and t.businessdate <= #{condition.businessdate2} ]]>
		   	 	</if>
				<if test="condition.salesareaArr != null" >
		      	    and (
		      	    <foreach collection="condition.salesareaArr" item="salesareaitem" open="(" separator="or" close=")">
		  		      (t.salesarea like CONCAT(#{salesareaitem},'%') ) 
		  	        </foreach>  )
		      	</if>
				<if test="1==1">
				    and t.STATUS IN ('3', '4')
				</if>
			</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		t1.unitnum AS initsendnum,t1.totalbox as initsendtotalbox,t1.taxamount AS initsendamount,t1.notaxamount AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		0 as costamount,0 as pushbalanceamount
		FROM t_sales_dispatchbill t
		RIGHT JOIN t_sales_dispatchbill_detail t1 ON t.id = t1.billid
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate1 != null" >
		       		<![CDATA[and t.businessdate >= #{condition.businessdate1} ]]>
		   		</if>
		   		<if test="condition.businessdate2 != null" >
		      		<![CDATA[and t.businessdate <= #{condition.businessdate2} ]]>
		   	 	</if>
				<if test="condition.salesareaArr != null" >
		      	    and (
		      	    <foreach collection="condition.salesareaArr" item="salesareaitem" open="(" separator="or" close=")">
		  		      (t.salesarea like CONCAT(#{salesareaitem},'%') ) 
		  	        </foreach>  )
		      	</if>
				<if test="1==1">
				    and t.STATUS IN ('3', '4')
				</if>
			</trim>

		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		t1.unitnum AS sendnum,t1.totalbox as sendtotalbox,t1.taxamount AS sendamount,t1.notaxamount AS sendnotaxamount,t1.unitnum*t1.costprice as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate1 != null" >
		       		<![CDATA[and t.businessdate >= #{condition.businessdate1} ]]>
		   		</if>
		   		<if test="condition.businessdate2 != null" >
		      		<![CDATA[and t.businessdate <= #{condition.businessdate2} ]]>
		   	 	</if>
				<if test="condition.salesareaArr != null" >
		      	    and (
		      	    <foreach collection="condition.salesareaArr" item="salesareaitem" open="(" separator="or" close=")">
		  		      (t.salesarea like CONCAT(#{salesareaitem},'%') ) 
		  	        </foreach>  )
		      	</if>
				<if test="1==1">
				    and t.STATUS IN ('3', '4')
				</if>
			</trim>

		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		t1.unitnum AS returnnum,t1.totalbox as returntotalbox,t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,
		t1.unitnum AS directreturnnum,t1.totalbox as directreturntotalbox,t1.taxamount AS directreturnamount,t1.notaxamount AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate1 != null" >
		       		<![CDATA[and t.businessdate >= #{condition.businessdate1} ]]>
		   		</if>
		   		<if test="condition.businessdate2 != null" >
		      		<![CDATA[and t.businessdate <= #{condition.businessdate2} ]]>
		   	 	</if>
				<if test="condition.salesareaArr != null" >
		      	    and (
		      	    <foreach collection="condition.salesareaArr" item="salesareaitem" open="(" separator="or" close=")">
		  		      (t.salesarea like CONCAT(#{salesareaitem},'%') ) 
		  	        </foreach>  )
		      	</if>
				<if test="1==1">
				    and t.STATUS IN ('3', '4')
				    and ischeck='1'
					AND t.sourcetype = '2'
				</if>
			</trim>

		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid, t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice, t1.costprice,
		0 AS ordernum,0 as ordertotalbox, 0 AS orderamount, 0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox, 0 AS initsendamount, 0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox, 0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
		t1.unitnum AS returnnum,t1.totalbox as returntotalbox, t1.taxamount AS returnamount, t1.notaxamount AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
		t1.unitnum AS checkreturnnum,t1.totalbox as checkreturntotalbox, t1.taxamount AS checkreturnamount, t1.notaxamount AS checkreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate1 != null" >
		       		<![CDATA[and t.businessdate >= #{condition.businessdate1} ]]>
		   		</if>
		   		<if test="condition.businessdate2 != null" >
		      		<![CDATA[and t.businessdate <= #{condition.businessdate2} ]]>
		   	 	</if>
				<if test="condition.salesareaArr != null" >
		      	    and (
		      	    <foreach collection="condition.salesareaArr" item="salesareaitem" open="(" separator="or" close=")">
		  		      (t.salesarea like CONCAT(#{salesareaitem},'%') ) 
		  	        </foreach>  )
		      	</if>
				<if test="1==1">
				    and t.STATUS IN ('3', '4')
				    and ischeck='1'
					AND t.sourcetype = '2'
				</if>
			</trim>
			UNION ALL
			SELECT
			t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,'' as goodssort,t.supplierid,t.adduserid,t.addusername,
			t.brandid AS goodsid,t.brandid,t.branduser,t.supplieruser,t.branddept, '' AS unitid, '' AS unitname,'' as auxunitid,'' as auxunitname,0 as taxprice, 0 AS costprice,
			0 AS ordernum,0 as ordertotalbox, 0 AS orderamount, 0 AS ordernotaxamount,
			0 AS initsendnum,0 as initsendtotalbox, 0 AS initsendamount, 0 AS initsendnotaxamount,
			0 AS sendnum,0 as sendtotalbox, 0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
			0 AS returnnum,0 as returntotalbox, 0 AS returnamount, 0 AS returnnotaxamount,
			0 AS directreturnnum,0 as directreturntotalbox, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
			0 AS checkreturnnum,0 as checkreturntotalbox, 0 AS checkreturnamount, 0 AS checkreturnnotaxamount,
			0 as costamount,t.amount as pushbalanceamount
			FROM t_account_customer_push_balance t
				<trim prefix="where" prefixOverrides="and|or">
					<if test="condition.businessdate1 != null" >
			       		<![CDATA[and t.businessdate >= #{condition.businessdate1} ]]>
			   		</if>
			   		<if test="condition.businessdate2 != null" >
			      		<![CDATA[and t.businessdate <= #{condition.businessdate2} ]]>
			   	 	</if>
					<if test="condition.salesareaArr != null" >
			      	    and (
			      	    <foreach collection="condition.salesareaArr" item="salesareaitem" open="(" separator="or" close=")">
			  		      (t.salesarea like CONCAT(#{salesareaitem},'%') ) 
			  	        </foreach>  )
			      	</if>
					<if test="1==1">
					    and t.STATUS IN ('3', '4')
					</if>
				</trim>
		)z
			group by z.salesarea
		)
	</sql>
	<select id="getSalesAreaDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		SELECT t1.id,t1.pid,z.price,z.costprice,
		SUM(z.ordernum) AS ordernum,SUM(z.ordertotalbox) AS ordertotalbox,SUM(z.orderamount) AS orderamount,SUM(z.ordernotaxamount) AS ordernotaxamount,
		SUM(z.initsendnum) AS initsendnum,SUM(z.initsendtotalbox) AS initsendtotalbox,SUM(z.initsendamount) AS initsendamount,SUM(z.initsendnotaxamount) AS initsendnotaxamount,
		SUM(z.sendnum) AS sendnum,SUM(z.sendtotalbox) AS sendtotalbox,SUM(z.sendamount) AS sendamount,SUM(z.sendnotaxamount) AS sendnotaxamount,sum(z.sendcostamount) as sendcostamount,
		SUM(z.returnnum) AS returnnum,SUM(z.returntotalbox) AS returntotalbox,SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.directreturnnum) AS directreturnnum,SUM(z.directreturntotalbox) AS directreturntotalbox,SUM(z.directreturnamount) AS directreturnamount,SUM(z.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(z.checkreturnnum) AS checkreturnnum,SUM(z.checkreturntotalbox) AS checkreturntotalbox,SUM(z.checkreturnamount) AS checkreturnamount,SUM(z.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(z.costamount) as costamount,sum(z.pushbalanceamount) as pushbalanceamount
		from 
			<include refid="getSaleAreaData_sql"/> z
			right join t_base_sales_area t1 on  z.salesarea  like CONCAT(t1.id,'%')
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1==1">
				and t1.state = '1'
			</if>
		</trim>
	 	group by t1.id
	 	order by t1.id asc
	</select>

</mapper>