<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hd.agent.storage.dao.BigSaleOutMapper">

<!-- 大单发货单 -->
<sql id="Base_Column_List" >
  id, businessdate, status, remark, adduserid, addusername, adddeptid, adddeptname, 
  addtime, modifyuserid, modifyusername, modifytime, audituserid, auditusername, audittime, 
  stopuserid, stopusername, stoptime, closetime, printtimes, storageid
</sql>
<select id="getBigSaleOutList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.storage.model.BigSaleOut">
	select t.id, t.businessdate, t.status, t.remark, t.adduserid, t.addusername, t.adddeptid, t.adddeptname, 
	  t.addtime, t.modifyuserid, t.modifyusername, t.modifytime, t.audituserid, t.auditusername, t.audittime, 
	  t.stopuserid, t.stopusername, t.stoptime, t.closetime, t.printtimes, t.storageid
	from t_storage_bigsaleout t
	left join t_storage_bigsaleout_detail t1 on t.id = t1.billid
	<trim prefix="where" prefixOverrides="and|or">
      	<include refid="common.Page_dataSql"/>
      	<include refid="common.Page_querySql"/>
      	<if test="condition.id != null" >
         	 and t.id like CONCAT('%',#{condition.id},'%')
      	</if>
      	<if test="condition.storageid != null">
			 and t.storageid =#{condition.storageid}
		</if>
      	<if test="condition.status != null">
			 and t.status =#{condition.status}
		</if>
		<if test="condition.saleoutid != null">
			 and t1.saleoutid like CONCAT('%',#{condition.saleoutid},'%')
		</if>
		<if test="condition.orderid != null">
			 and t1.saleoutid IN (
				select s.id from t_storage_saleout s where s.saleorderid like CONCAT('%',#{condition.orderid},'%')
			)
		</if>
		<if test="condition.customerid != null">
			 and t1.saleoutid IN (
				select s.id from t_storage_saleout s where s.customerid = #{condition.customerid}
			)
		</if>
		<if test="condition.goodsid != null">
			 and t1.saleoutid IN (
				select DISTINCT sd.saleoutid from t_storage_saleout_detail sd where sd.goodsid = #{condition.goodsid}
			)
		</if>
      	<if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		</if>
		<if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		</if>
	</trim>
	group by t.id
	<include refid="common.Page_limit" />
</select>
<select id="getBigSaleOutCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
	select count(1) from (
		select t.id, t.businessdate, t.status, t.remark, t.adduserid, t.addusername, t.adddeptid, t.adddeptname, 
		  t.addtime, t.modifyuserid, t.modifyusername, t.modifytime, t.audituserid, t.auditusername, t.audittime, 
		  t.stopuserid, t.stopusername, t.stoptime, t.closetime, t.printtimes, t.storageid
		from t_storage_bigsaleout t
		left join t_storage_bigsaleout_detail t1 on t.id = t1.billid
		<trim prefix="where" prefixOverrides="and|or">
	      	<include refid="common.Page_dataSql"/>
	      	<include refid="common.Page_querySql"/>
	      	<if test="condition.id != null" >
	         	and t.id like CONCAT('%',#{condition.id},'%')
	      	</if>
	      	<if test="condition.storageid != null">
				 and t.storageid =#{condition.storageid}
			</if>
	      	<if test="condition.status != null">
				 and t.status =#{condition.status}
			</if>
			<if test="condition.saleoutid != null">
				 and t1.saleoutid like CONCAT('%',#{condition.saleoutid},'%')
			</if>
			<if test="condition.orderid != null">
				 and t1.saleoutid IN (
					select s.id from t_storage_saleout s where s.saleorderid like CONCAT('%',#{condition.orderid},'%')
				)
			</if>
			<if test="condition.customerid != null">
				 and t1.saleoutid IN (
					select s.id from t_storage_saleout s where s.customerid = #{condition.customerid}
				)
			</if>
			<if test="condition.goodsid != null">
				 and t1.saleoutid IN (
					select DISTINCT sd.saleoutid from t_storage_saleout_detail sd where sd.goodsid = #{condition.goodsid}
				)
			</if>
	      	<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
		</trim>
		group by t.id
	)z
</select>

<!-- 新增大单发货单 -->
<insert id="addBigSaleOut" parameterType="com.hd.agent.storage.model.BigSaleOut">
	insert into t_storage_bigsaleout
	<trim prefix="(" suffix=")" suffixOverrides=",">
		<if test="id != null" >
			id,
		</if>
		<if test="1==1" >
	        businessdate,
		</if>
		<if test="status != null" >
	        status,
	    </if>
		<if test="remark != null" >
    		remark,
	    </if>
	    <if test="adduserid != null" >
	      	adduserid,
	    </if>
	    <if test="addusername != null" >
	      	addusername,
	    </if>
	    <if test="adddeptid != null" >
	      	adddeptid,
	    </if>
	    <if test="adddeptname != null" >
	      	adddeptname,
	    </if>
	    <if test="1==1" >
	      	addtime,
	    </if>
	    <if test="printtimes != null" >
	      	printtimes,
	    </if>
	    <if test="storageid != null" >
	      	storageid,
	    </if>
	</trim>
	<trim prefix="values (" suffix=")" suffixOverrides=",">
		<if test="id != null" >
	      #{id},
	    </if>
	    <if test="1==1" >
	      CURDATE(),
	    </if>
	    <if test="status != null" >
	      #{status},
	    </if>
	    <if test="remark != null" >
	      #{remark},
	    </if>
	    <if test="adduserid != null" >
	      #{adduserid},
	    </if>
	    <if test="addusername != null" >
	      #{addusername},
	    </if>
	    <if test="adddeptid != null" >
	      #{adddeptid},
	    </if>
	    <if test="adddeptname != null" >
	      #{adddeptname},
	    </if>
	    <if test="1==1" >
	      now(),
	    </if>
	    <if test="printtimes != null" >
	      #{printtimes},
	    </if>
	    <if test="storageid != null" >
	      #{storageid},
	    </if>
	</trim>
</insert>
<update id="editBigSaleOut" parameterType="com.hd.agent.storage.model.BigSaleOut">
	update t_storage_bigsaleout
	<set>
	    <if test="status != null" >
	      status = #{status},
	    </if>
	    <if test="remark != null" >
	      remark = #{remark},
	    </if>
	    <if test="modifyuserid != null" >
	      modifyuserid = #{modifyuserid},
	    </if>
	    <if test="1 == 1" >
	      modifytime = now(),
	    </if>
	    <if test="printtimes != null" >
	      printtimes = #{printtimes},
	    </if>
	    <if test="storageid != null" >
	      storageid = #{storageid},
	    </if>
	    <if test="audituserid != null" >
	      audituserid = #{audituserid},
	    </if>
	    <if test="auditusername != null" >
	      auditusername = #{auditusername},
	    </if>
	    <if test="1 == 1" >
	      audittime = now(),
	    </if>
	    <if test="stopuserid != null" >
	      stopuserid = #{stopuserid},
	    </if>
	    <if test="stopusername != null" >
	      stopusername = #{stopusername},
	    </if>
	    <if test="1 == 1" >
	      stoptime = now(),
	    </if>
	    <if test="1 == 1" >
	      closetime = now(),
	    </if>
	</set>
	where id = #{id}
</update>
<update id="auditBigSaleOut" parameterType="com.hd.agent.storage.model.BigSaleOut">
	update t_storage_bigsaleout set
		status = '3',
		remark = #{remark},
		audituserid = #{audituserid},
		auditusername = #{auditusername},
		audittime = now()
	where id = #{id}
</update>
<update id="oppauditBigSaleOut" parameterType="com.hd.agent.storage.model.BigSaleOut">
	update t_storage_bigsaleout set
		status = '2',
		audituserid = '',
		auditusername = '',
		audittime = NULL
	where id = #{id}
</update>
<update id="stopBigSaleOut" parameterType="com.hd.agent.storage.model.BigSaleOut">
	update t_storage_bigsaleout set
		status = '5',
		stopuserid = #{stopuserid},
		stopusername = #{stopusername},
		stoptime = now()
	where id = #{id}
</update>
<update id="closeBigSaleOut" parameterType="java.lang.String">
	update t_storage_bigsaleout set
		status = '4',
		closetime = now()
	where id = #{id}
</update>
	<update id="updateCancelCloseBigSaleOut" parameterType="java.lang.String">
		update t_storage_bigsaleout set
		status = '5',
		closetime = NULL
		where id = #{id}
	</update>
<update id="updateBigSaleoutPrinttimes" parameterType="java.lang.String">
	update t_storage_bigsaleout set
		printtimes = #{printtimes}
	where id = #{id}
</update>
<delete id="deleteBigSaleOut" parameterType="java.lang.String">
	delete from t_storage_bigsaleout
	where id = #{id}
</delete>
	<select id="getCloseSaleoutByBigSaleOutId" parameterType="java.lang.String" resultType="int">
		SELECT count(1) from t_storage_saleout t
		where EXISTS (select DISTINCT t1.saleoutid from t_storage_bigsaleout_detail t1 where t.id = t1.saleoutid and t1.billid = #{id})
		and t.status = '4'
	</select>
<!-- 获取大单发货单信息 -->
<select id="getBigSaleOutInfo" parameterType="java.lang.String" resultType="com.hd.agent.storage.model.BigSaleOut">
	select <include refid="Base_Column_List"/> from t_storage_bigsaleout where id = #{id}
</select>

<!-- 大单发货单明细 -->
<select id="getBigSaleOutDetailList" parameterType="java.lang.String" resultType="com.hd.agent.storage.model.BigSaleOutDetail">
	select t.billid,t.saleoutid from t_storage_bigsaleout_detail t where billid = #{billid}
</select>
<insert id="addBigSaleOutDetail" parameterType="com.hd.agent.storage.model.BigSaleOutDetail">
	insert into t_storage_bigsaleout_detail
	<trim prefix="(" suffix=")" suffixOverrides=",">
		<if test="billid != null" >
    		billid,
	    </if>
	    <if test="saleoutid != null" >
	      	saleoutid,
	    </if>
	</trim>
	<trim prefix="values (" suffix=")" suffixOverrides=",">
	    <if test="billid != null" >
	      #{billid},
	    </if>
	    <if test="saleoutid != null" >
	      #{saleoutid},
	    </if>
	</trim>
</insert>
<select id="getBigSaleOutDetailSourceidList" resultType="java.lang.String">
	select DISTINCT saleoutid from t_storage_bigsaleout_detail
</select>
<select id="getBigSaleOutGoodsList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.storage.model.SaleoutDetail">
	SELECT
		z.goodsid, z.goodssort, z.brandid, z.branduser, z.branddept, z.supplierid, z.storageid, z.storagelocationid, z.batchno, z.produceddate, z.deadline,
		z.unitid, z.unitname, z.auxunitid, z.auxunitname, z.taxprice, z.notaxprice, z.inittaxprice, z.costprice, z.realcostprice, z.taxtype,
		SUM(z.unitnum) AS unitnum, SUM(z.realsendnum) AS realsendnum, SUM(z.returnnum) AS returnnum,
		SUM(z.auxinitnum) AS auxinitnum, SUM(z.auxnum) AS auxnum, SUM(z.auxremainder) AS auxremainder, SUM(z.auxrealsendnum) AS auxrealsendnum, SUM(z.auxreturnnum) AS auxreturnnum,
		SUM(z.inittaxamount) AS inittaxamount, SUM(z.initnotaxamount) AS initnotaxamount, SUM(z.taxamount) AS taxamount, SUM(z.notaxamount) AS notaxamount, SUM(z.tax) AS tax,
		SUM(z.realtaxamount) AS realtaxamount, SUM(z.returntaxamount) AS returntaxamount,
		SUM(z.realnotaxamount) AS realnotaxamount, SUM(z.returnnotaxamount) AS returnnotaxamount
	FROM
		(
		SELECT t.goodsid,t.goodssort,t.brandid,t.branduser,t.branddept,t.supplierid,t.storageid,t.storagelocationid,t.batchno,t.produceddate,t.deadline,
			t.unitid,t.unitname,t.auxunitid,t.auxunitname,t.taxprice,t.notaxprice,t.inittaxprice,t.costprice,t.realcostprice,t.taxtype,
			SUM(t.unitnum) as unitnum,SUM(t.realsendnum) as realsendnum,SUM(t.returnnum) AS returnnum,
			SUM(t.auxinitnum) as auxinitnum,FLOOR(SUM(t.unitnum)/mu.rate) AS auxnum,MOD(SUM(t.unitnum),mu.rate) AS auxremainder,
			SUM(t.auxrealsendnum) as auxrealsendnum,SUM(t.auxreturnnum) as auxreturnnum,SUM(t.inittaxamount) as inittaxamount,
			SUM(t.taxamount) as taxamount,SUM(t.realtaxamount) as realtaxamount,SUM(t.returntaxamount) as returntaxamount,
			SUM(t.initnotaxamount) as initnotaxamount,SUM(t.notaxamount) as notaxamount,SUM(t.realnotaxamount) as realnotaxamount,
			SUM(t.returnnotaxamount) as returnnotaxamount,SUM(t.tax) as tax
		 from t_storage_saleout_detail t
		 INNER JOIN t_base_goods_info_meteringunit mu ON t.goodsid = mu.goodsid and mu.isdefault = '1'
		 <trim prefix="where" prefixOverrides="and|or">
		 	<if test="condition.array != null" >
		 		and t.saleoutid in 
			 	<foreach collection="condition.array" index="index" item="item" open="(" separator="," close=")">
		            #{item}
		        </foreach>
	      	</if>
		 </trim>
		 GROUP BY t.goodsid
	)z
	 <if test="condition.isflag == null">
	 	GROUP BY z.goodsid
	 	<include refid="common.Page_limit" />
	 </if>
</select>
<select id="getBigSaleOutGoodsCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
	select count(1) from (
		SELECT z.goodsid FROM (
			SELECT t.goodsid,t.goodssort,t.brandid,t.branduser,t.branddept,t.supplierid,t.storageid,t.storagelocationid,t.batchno,t.produceddate,t.deadline,
				t.unitid,t.unitname,t.auxunitid,t.auxunitname,t.taxprice,t.notaxprice,t.inittaxprice,t.costprice,t.realcostprice,t.taxtype,
				SUM(t.unitnum) as unitnum,SUM(t.realsendnum) as realsendnum,SUM(t.returnnum) AS returnnum,
				SUM(t.auxinitnum) as auxinitnum,FLOOR(SUM(t.unitnum)/mu.rate) AS auxnum,MOD(SUM(t.unitnum),mu.rate) AS auxremainder,
				SUM(t.auxrealsendnum) as auxrealsendnum,SUM(t.auxreturnnum) as auxreturnnum,SUM(t.inittaxamount) as inittaxamount,
				SUM(t.taxamount) as taxamount,SUM(t.realtaxamount) as realtaxamount,SUM(t.returntaxamount) as returntaxamount,
				SUM(t.initnotaxamount) as initnotaxamount,SUM(t.notaxamount) as notaxamount,SUM(t.realnotaxamount) as realnotaxamount,
				SUM(t.returnnotaxamount) as returnnotaxamount,SUM(t.tax) as tax
			 from t_storage_saleout_detail t
			 INNER JOIN t_base_goods_info_meteringunit mu ON t.goodsid = mu.goodsid and mu.isdefault = '1'
			 <trim prefix="where" prefixOverrides="and|or">
			 	<if test="condition.array != null" >
			 		and t.saleoutid in 
				 	<foreach collection="condition.array" index="index" item="item" open="(" separator="," close=")">
			            #{item}
			        </foreach>
		      	</if>
			 </trim>
			 GROUP BY t.goodsid
		)z
		 <if test="condition.isflag == null">
		 	GROUP BY z.goodsid
		 </if>
	)z
</select>
<delete id="deleteBigSaleOutDetailByBillid" parameterType="java.lang.String">
	delete from t_storage_bigsaleout_detail
	where billid = #{billid}
</delete>

	<sql id="getBigSaleOutBrandPrintList_sql">
		SELECT t.saleoutid,t.goodsid,t1.customerid,t.brandid,t.branduser,t.branddept,t.supplierid,t.storageid,t.storagelocationid,t.batchno,t.produceddate,t.deadline,
		t.unitid,t.unitname,t.auxunitid,t.auxunitname,t.taxprice,t.notaxprice,t.inittaxprice,t.costprice,t.realcostprice,t.taxtype,
		t.unitnum,t.realsendnum,t.returnnum,
		t.auxinitnum,t.auxrealsendnum,t.auxreturnnum,
		t.auxnum, t.auxremainder,
		t.inittaxamount,t.initnotaxamount,
		t.returntaxamount,t.returnnotaxamount,
		t.realtaxamount,t.realnotaxamount,
		t.taxamount,t.notaxamount,t.tax,t.remark
		from t_storage_saleout_detail t
		LEFT JOIN t_storage_saleout t1 ON t.saleoutid = t1.id
		where t.saleoutid in (SELECT DISTINCT b.saleoutid from t_storage_bigsaleout_detail b where b.billid = #{bigsaleoutid})
	</sql>
	<!-- 整件分拣预览 -->
	<select id="getBigSaleOutGoodsListForPrint" parameterType="java.lang.String" resultType="com.hd.agent.storage.model.SaleoutDetail">
		SELECT z.goodsid,z.customerid,z.brandid,z.branduser,z.branddept,z.supplierid,z.storageid,z.storagelocationid,z.batchno,z.produceddate,z.deadline,
		z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice,z.notaxprice,z.inittaxprice,z.costprice,z.realcostprice,z.taxtype,
		SUM(z.unitnum) as unitnum,SUM(z.realsendnum) as realsendnum,SUM(z.returnnum) AS returnnum,
		SUM(z.auxinitnum) as auxinitnum,SUM(z.auxrealsendnum) as auxrealsendnum,SUM(z.auxreturnnum) as auxreturnnum,
		sum(z.auxnum) AS auxnum,sum(z.auxremainder) AS auxremainder,
		SUM(z.inittaxamount) as inittaxamount,SUM(z.initnotaxamount) as initnotaxamount,
		SUM(z.returntaxamount) as returntaxamount,SUM(z.returnnotaxamount) as returnnotaxamount,
		SUM(z.realtaxamount) as realtaxamount,SUM(z.realnotaxamount) as realnotaxamount,
		SUM(z.taxamount) as taxamount,SUM(z.notaxamount) as notaxamount,SUM(z.tax) as tax
		from ( <include refid="getBigSaleOutBrandPrintList_sql"/> ) z
		GROUP BY z.goodsid
		ORDER BY z.goodsid
	</select>
	<!-- 分拣单 -->
	<select id="getBigSaleOutSaleoutDetailListForPrint" parameterType="java.lang.String" resultType="com.hd.agent.storage.model.SaleoutDetail">
		SELECT t.saleoutid,t.isdiscount,t.goodsid,t1.customerid,t.brandid,t.branduser,t.branddept,t.supplierid,t.storageid,t.storagelocationid,t.batchno,t.produceddate,t.deadline,
		t.unitid,t.unitname,t.auxunitid,t.auxunitname,t.taxprice,t.notaxprice,t.inittaxprice,t.costprice,t.realcostprice,t.taxtype,
		t.unitnum,t.realsendnum,t.returnnum,
		t.auxinitnum,t.auxrealsendnum,t.auxreturnnum,
		t.auxnum, t.auxremainder,
		t.inittaxamount,t.initnotaxamount,
		t.returntaxamount,t.returnnotaxamount,
		t.realtaxamount,t.realnotaxamount,
		t.taxamount,t.notaxamount,t.tax,t.remark
		from t_storage_saleout_detail t
		LEFT JOIN t_storage_saleout t1 ON t.saleoutid = t1.id
		where t.isdiscount = '0' and t.saleoutid in (SELECT DISTINCT b.saleoutid from t_storage_bigsaleout_detail b where b.billid = #{bigsaleoutid})
		ORDER BY t1.id,t.goodsid
	</select>
	<!-- 按商品分客户数 -->
	<select id="getBigSaleOutGoodsCustomerListForPrint" parameterType="java.lang.String" resultType="com.hd.agent.storage.model.SaleoutDetail">
		SELECT z.goodsid,z.customerid,z.brandid,z.branduser,z.branddept,z.supplierid,z.storageid,z.storagelocationid,z.batchno,z.produceddate,z.deadline,
		z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice,z.notaxprice,z.inittaxprice,z.costprice,z.realcostprice,z.taxtype,
		SUM(z.unitnum) as unitnum,SUM(z.realsendnum) as realsendnum,SUM(z.returnnum) AS returnnum,
		SUM(z.auxinitnum) as auxinitnum,SUM(z.auxrealsendnum) as auxrealsendnum,SUM(z.auxreturnnum) as auxreturnnum,
		sum(z.auxnum) AS auxnum,sum(z.auxremainder) AS auxremainder,
		SUM(z.inittaxamount) as inittaxamount,SUM(z.initnotaxamount) as initnotaxamount,
		SUM(z.returntaxamount) as returntaxamount,SUM(z.returnnotaxamount) as returnnotaxamount,
		SUM(z.realtaxamount) as realtaxamount,SUM(z.realnotaxamount) as realnotaxamount,
		SUM(z.taxamount) as taxamount,SUM(z.notaxamount) as notaxamount,SUM(z.tax) as tax
		from ( <include refid="getBigSaleOutBrandPrintList_sql"/> ) z
		GROUP BY z.goodsid,z.customerid
		ORDER BY z.goodsid,z.customerid
	</select>
	<!-- 按商品分客户区块 -->
	<select id="getBigSaleOutGoodsSum" parameterType="java.lang.String" resultType="com.hd.agent.storage.model.SaleoutDetail">
		SELECT z.goodsid,z.unitid,z.unitname,z.auxunitid,z.auxunitname,
		SUM(z.unitnum) as unitnum,SUM(z.realsendnum) as realsendnum,SUM(z.returnnum) AS returnnum,
		SUM(z.auxinitnum) as auxinitnum,SUM(z.auxrealsendnum) as auxrealsendnum,SUM(z.auxreturnnum) as auxreturnnum,
		sum(z.auxnum) AS auxnum,sum(z.auxremainder) AS auxremainder,
		SUM(z.inittaxamount) as inittaxamount,SUM(z.initnotaxamount) as initnotaxamount,
		SUM(z.returntaxamount) as returntaxamount,SUM(z.returnnotaxamount) as returnnotaxamount,
		SUM(z.realtaxamount) as realtaxamount,SUM(z.realnotaxamount) as realnotaxamount,
		SUM(z.taxamount) as taxamount,SUM(z.notaxamount) as notaxamount,SUM(z.tax) as tax,count(DISTINCT z.customerid) as customernum
		from ( <include refid="getBigSaleOutBrandPrintList_sql"/> ) z
		GROUP BY z.goodsid
	</select>
	<select id="getBigSaleOutGoodsCustomerList" parameterType="java.lang.String" resultType="com.hd.agent.storage.model.SaleoutDetail">
		SELECT z.goodsid,z.customerid,z.brandid,z.branduser,z.branddept,z.supplierid,z.storageid,z.storagelocationid,z.batchno,z.produceddate,z.deadline,
		z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice,z.notaxprice,z.inittaxprice,z.costprice,z.realcostprice,z.taxtype,
		SUM(z.unitnum) as unitnum,SUM(z.realsendnum) as realsendnum,SUM(z.returnnum) AS returnnum,
		SUM(z.auxinitnum) as auxinitnum,SUM(z.auxrealsendnum) as auxrealsendnum,SUM(z.auxreturnnum) as auxreturnnum,
		sum(z.auxnum) AS auxnum,sum(z.auxremainder) AS auxremainder,
		SUM(z.inittaxamount) as inittaxamount,SUM(z.initnotaxamount) as initnotaxamount,
		SUM(z.returntaxamount) as returntaxamount,SUM(z.returnnotaxamount) as returnnotaxamount,
		SUM(z.realtaxamount) as realtaxamount,SUM(z.realnotaxamount) as realnotaxamount,
		SUM(z.taxamount) as taxamount,SUM(z.notaxamount) as notaxamount,SUM(z.tax) as tax
		from ( <include refid="getBigSaleOutBrandPrintList_sql"/> ) z
		where z.goodsid = #{goodsid}
		GROUP BY z.customerid
		ORDER BY z.brandid
	</select>
	<!-- 按品牌分商品 -->
	<select id="getBigSaleOutBrandSumList" parameterType="java.lang.String" resultType="com.hd.agent.storage.model.SaleoutDetail">
		SELECT z.brandid,z.unitid,z.unitname,z.auxunitid,z.auxunitname,
			SUM(z.unitnum) as unitnum,SUM(z.realsendnum) as realsendnum,SUM(z.returnnum) AS returnnum,
			SUM(z.auxinitnum) as auxinitnum,SUM(z.auxrealsendnum) as auxrealsendnum,SUM(z.auxreturnnum) as auxreturnnum,
			sum(z.auxnum) AS auxnum,sum(z.auxremainder) AS auxremainder,
			SUM(z.inittaxamount) as inittaxamount,SUM(z.initnotaxamount) as initnotaxamount,
			SUM(z.returntaxamount) as returntaxamount,SUM(z.returnnotaxamount) as returnnotaxamount,
			SUM(z.realtaxamount) as realtaxamount,SUM(z.realnotaxamount) as realnotaxamount,
			SUM(z.taxamount) as taxamount,SUM(z.notaxamount) as notaxamount,SUM(z.tax) as tax
		from ( <include refid="getBigSaleOutBrandPrintList_sql"/> ) z
		GROUP BY z.brandid
	</select>
	<select id="getBigSaleOutBrandGoodsList" parameterType="java.lang.String" resultType="com.hd.agent.storage.model.SaleoutDetail">
		SELECT z.goodsid,z.customerid,z.brandid,z.branduser,z.branddept,z.supplierid,z.storageid,z.storagelocationid,z.batchno,z.produceddate,z.deadline,
			z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice,z.notaxprice,z.inittaxprice,z.costprice,z.realcostprice,z.taxtype,
			SUM(z.unitnum) as unitnum,SUM(z.realsendnum) as realsendnum,SUM(z.returnnum) AS returnnum,
			SUM(z.auxinitnum) as auxinitnum,SUM(z.auxrealsendnum) as auxrealsendnum,SUM(z.auxreturnnum) as auxreturnnum,
			sum(z.auxnum) AS auxnum,sum(z.auxremainder) AS auxremainder,
			SUM(z.inittaxamount) as inittaxamount,SUM(z.initnotaxamount) as initnotaxamount,
			SUM(z.returntaxamount) as returntaxamount,SUM(z.returnnotaxamount) as returnnotaxamount,
			SUM(z.realtaxamount) as realtaxamount,SUM(z.realnotaxamount) as realnotaxamount,
			SUM(z.taxamount) as taxamount,SUM(z.notaxamount) as notaxamount,SUM(z.tax) as tax
		from ( <include refid="getBigSaleOutBrandPrintList_sql"/> ) z
		where z.brandid = #{brandid}
		GROUP BY z.goodsid
	</select>
<select id="getBigSaleOutCustomerGoodsNumList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.storage.model.SaleoutDetail">
	SELECT t.customerid,t.pcustomerid,t1.goodsid,t1.goodssort,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.storageid,t1.storagelocationid,t1.batchno,t1.produceddate,t1.deadline,
			t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.notaxprice,t1.inittaxprice,t1.costprice,t1.realcostprice,t1.taxtype,
			SUM(t1.unitnum) as unitnum,SUM(t1.realsendnum) as realsendnum,SUM(t1.returnnum) AS returnnum,
			SUM(t1.auxinitnum) as auxinitnum,FLOOR(SUM(t1.unitnum)/mu.rate) AS auxnum,MOD(SUM(t1.unitnum),mu.rate) AS auxremainder,
			SUM(t1.auxrealsendnum) as auxrealsendnum,SUM(t1.auxreturnnum) as auxreturnnum,SUM(t1.inittaxamount) as inittaxamount,
			SUM(t1.taxamount) as taxamount,SUM(t1.realtaxamount) as realtaxamount,SUM(t1.returntaxamount) as returntaxamount,
			SUM(t1.initnotaxamount) as initnotaxamount,SUM(t1.notaxamount) as notaxamount,SUM(t1.realnotaxamount) as realnotaxamount,
			SUM(t1.returnnotaxamount) as returnnotaxamount,SUM(t1.tax) as tax
	from t_storage_saleout t
	LEFT JOIN t_storage_saleout_detail t1 ON t.id = t1.saleoutid
	LEFT JOIN t_base_goods_info_meteringunit mu ON t1.goodsid = mu.goodsid and mu.isdefault = '1'
	 <trim prefix="where" prefixOverrides="and|or">
	 	<if test="condition.array != null" >
	 		and t1.saleoutid in 
		 	<foreach collection="condition.array" index="index" item="item" open="(" separator="," close=")">
	            #{item}
	        </foreach>
      	</if>
      	<if test="condition.goodsid != null" >
      		and t1.goodsid = #{condition.goodsid}
      	</if>
	 </trim>
	 <if test="condition.isflag == null">
	 	GROUP BY t.customerid
	 </if>
</select>
<select id="getBigSaleOutCustomerGoodsNumCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
	select count(1) from(
		SELECT t.customerid,t.pcustomerid,t1.goodsid,t1.goodssort,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.storageid,t1.storagelocationid,t1.batchno,t1.produceddate,t1.deadline,
				t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.notaxprice,t1.inittaxprice,t1.costprice,t1.realcostprice,t1.taxtype,
				SUM(t1.unitnum) as unitnum,SUM(t1.realsendnum) as realsendnum,SUM(t1.returnnum) AS returnnum,
				SUM(t1.auxinitnum) as auxinitnum,FLOOR(SUM(t1.unitnum)/mu.rate) AS auxnum,MOD(SUM(t1.unitnum),mu.rate) AS auxremainder,
				SUM(t1.auxrealsendnum) as auxrealsendnum,SUM(t1.auxreturnnum) as auxreturnnum,SUM(t1.inittaxamount) as inittaxamount,
				SUM(t1.taxamount) as taxamount,SUM(t1.realtaxamount) as realtaxamount,SUM(t1.returntaxamount) as returntaxamount,
				SUM(t1.initnotaxamount) as initnotaxamount,SUM(t1.notaxamount) as notaxamount,SUM(t1.realnotaxamount) as realnotaxamount,
				SUM(t1.returnnotaxamount) as returnnotaxamount,SUM(t1.tax) as tax
		from t_storage_saleout t
		LEFT JOIN t_storage_saleout_detail t1 ON t.id = t1.saleoutid
		LEFT JOIN t_base_goods_info_meteringunit mu ON t1.goodsid = mu.goodsid and mu.isdefault = '1'
		 <trim prefix="where" prefixOverrides="and|or">
		 	<if test="condition.array != null" >
		 		and t1.saleoutid in 
			 	<foreach collection="condition.array" index="index" item="item" open="(" separator="," close=")">
		            #{item}
		        </foreach>
	      	</if>
	      	<if test="condition.goodsid != null" >
	      		and t1.goodsid = #{condition.goodsid}
	      	</if>
		 </trim>
		 GROUP BY t.customerid
	)z
</select>
</mapper>

