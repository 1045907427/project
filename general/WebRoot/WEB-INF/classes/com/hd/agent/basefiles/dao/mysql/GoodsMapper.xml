<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hd.agent.basefiles.dao.GoodsMapper" >
<cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
  <!-- 计量单位 -->
  
  <sql id="MU_Column_List" >
    id, name, state, remark, adduserid, adddeptid, addtime, modifyuserid, modifytime, 
    openuserid, opentime, closeuserid, closetime
  </sql>
  <select id="getMeteringUnitByName" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.MeteringUnit">
      select * from t_base_goods_meteringunit  where name = #{name} limit 1
  </select>
  <select id="getMeteringUnitList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.MeteringUnit">
  	select
  	<include refid="MU_Column_List"/>
  	from t_base_goods_meteringunit
  	<trim prefix="where" prefixOverrides="and|or" >
   	  <if test="condition.id != null" >
         and id = #{condition.id}
      </if>
      <if test="condition.name != null" >
         and name like CONCAT('%',#{condition.name},'%')
      </if>
      <if test="condition.state != null" >
         and state = #{condition.state}
      </if>
      <include refid="common.Page_querySql"/>
      <include refid="common.Page_dataSql"/>
    </trim>
     <include refid="common.Page_limit" />
  </select>
  <select id="getMeteringUnitCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from t_base_goods_meteringunit
		<trim prefix="where" prefixOverrides="and|or" >
    	  <if test="condition.id != null" >
	         and id = #{condition.id}
	      </if>
	      <if test="condition.name != null" >
	         and name like CONCAT('%',#{condition.name},'%')
	      </if>
	      <if test="condition.state != null" >
	         and state = #{condition.state}
	      </if>
	      <include refid="common.Page_querySql"/>
	      <include refid="common.Page_dataSql"/>
	    </trim>
	</select>
  <!-- 新增计量单位 -->
  <insert id="addMeteringUnit" parameterType="com.hd.agent.basefiles.model.MeteringUnit">
  	insert into t_base_goods_meteringunit
    <trim prefix="(" suffix=")" suffixOverrides="," >
      id,
      <if test="name != null" >
        name,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="adduserid != null" >
        adduserid,
      </if>
      <if test="adddeptid != null" >
        adddeptid,
      </if>
      <if test="1 == 1" >
        addtime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <choose>
      	<when test="id != null">
      		#{id},
      	</when>
      	<otherwise>
      		uuid_short(),
      	</otherwise>
      </choose>
      <if test="name != null" >
        #{name},
      </if>
      <if test="state != null" >
        #{state},
      </if>
      <if test="remark != null" >
        #{remark},
      </if>
      <if test="adduserid != null" >
        #{adduserid},
      </if>
      <if test="adddeptid != null" >
        #{adddeptid},
      </if>
      <if test="1 == 1" >
        now(),
      </if>
    </trim>
  </insert>
  <!-- 修改计量单位 -->
  <update id="editMeteringUnit" parameterType="com.hd.agent.basefiles.model.MeteringUnit">
  	update t_base_goods_meteringunit
    <set >
      <if test="id != null" >
        id = #{id},
      </if>
      <if test="name != null" >
        name = #{name},
      </if>
      <if test="state != null" >
        state = #{state},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
      <if test="modifyuserid != null" >
        modifyuserid = #{modifyuserid},
      </if>
      <if test="1 == 1" >
        modifytime = now(),
      </if>
    </set>
    where id = #{oldId}
  </update>
	<!-- 获取计量单位信息  -->
	<select id="showMeteringUnitInfo" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.MeteringUnit">
		select * from t_base_goods_meteringunit
		where id = #{id}
	</select>
	<!-- 判断id是否重复 -->
	<select id="isRepeatMUID" parameterType="java.lang.String" resultType="java.lang.String">
		select id from t_base_goods_meteringunit
		where id = #{id}
	</select>
	<!-- 判断name是否重复 -->
	<select id="isRepeatMUName" parameterType="java.lang.String" resultType="java.lang.String">
		select name from t_base_goods_meteringunit
		where name = #{name}
	</select>
	<select id="retunMUIdByName" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.MeteringUnit">
		select * from t_base_goods_meteringunit
		where name = #{name}
	</select>
	<!-- 删除计量单位  -->
	<delete id="deleteMeteringUnit" parameterType="java.lang.String" >
    delete from t_base_goods_meteringunit
    where id = #{id}
  </delete>
  <!-- 启用计量单位 -->
  <update id="enableMeteringUnit" parameterType="java.util.Map">
  	update t_base_goods_meteringunit  set state = '1',openuserid = #{openuserid} 
  	where id = #{id}
  </update>
  <!-- 禁用计量单位 -->
  <update id="disableMeteringUnit" parameterType="java.util.Map">
  	update t_base_goods_meteringunit  set state = '0' ,closeuserid = #{closeuserid}
  	where id = #{id}
  </update>
  <!-- 获取记录单位列表（辅助计量-对外调用） -->
  <select id="getMUListForCombobox" resultType="com.hd.agent.basefiles.model.MeteringUnit">
  	select * from t_base_goods_meteringunit  where state = '1'
  </select>
  
  <!-- 商品品牌 -->
  
  <sql id="Brand_Column_List" >
    id, name, deptid, supplierid,defaulttaxtype, margin, state, remark, adduserid, addusername, adddeptid,
    adddeptname, addtime, modifyuserid, modifyusername, modifytime, openuserid, openusername, 
    opentime, closeuserid, closeusername, closetime,jsclusterid
  </sql>
  <!-- 获取商品牌列表combobox -->
  <select id="getBrandListForCombobox" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.Brand">
  	select id ,name ,deptid,supplierid,defaulttaxtype from t_base_goods_brand   
  	<trim prefix="where" prefixOverrides="and|or">
  		<if test="1 == 1">
  			and state = '1'
  		</if>
  		<if test="condition.list != null">
  			and id NOT in
  			<foreach collection="condition.list" index="index" item="item" open="(" separator="," close=")">
  				#{item}
  			</foreach>
  		</if>
  		<if test="condition.name != null">
  			and name like CONCAT('%',#{condition.name},'%')
  		</if>
  		<if test="condition.deptid != null">
  			and ( ${condition.deptid} )
  		</if>
  		<if test="condition.id != null">
  			and id = #{condition.id}
  		</if>
  	</trim>
  	<include refid="common.Page_limit" />
  </select>
   <!-- 获取商品牌列表 -->
  <select id="getBrandList"  resultType="com.hd.agent.basefiles.model.Brand">
  	select 
  	<include refid="Brand_Column_List"/> 
  	from t_base_goods_brand   
  </select>
  <!-- 获取商品列表数量 -->
  <select id="getBrandListForComboboxCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	select count(1) from (
  		select id ,name ,deptid,supplierid,defaulttaxtype from t_base_goods_brand   
	  	<trim prefix="where" prefixOverrides="and|or">
	  		<if test="1 == 1">
	  			and state = '1'
	  		</if>
	  		<if test="condition.list != null">
	  			and id NOT in
	  			<foreach collection="condition.list" index="index" item="item" open="(" separator="," close=")">
	  				#{item}
	  			</foreach>
	  		</if>
	  		<if test="condition.name != null">
	  			and name like CONCAT('%',#{condition.name},'%')
	  		</if>
	  		<if test="condition.deptid != null">
	  			and ( ${condition.deptid} )
	  		</if>
	  		<if test="condition.id != null">
	  			and id = #{condition.id}
	  		</if>
	  	</trim> 
  	)t
  </select>
  <!-- 获取商品品牌列表 -->
    <sql id="brandListPage_Where_Clause">
        <if test="condition.id != null" >
            and id = #{condition.id}
        </if>
        <if test="condition.name != null" >
            and name like CONCAT('%',#{condition.name},'%')
        </if>
        <if test="condition.deptid != null" >
            and deptid like '${condition.deptid}%'
        </if>
        <if test="condition.supplierid != null" >
            and supplierid = #{condition.supplierid}
        </if>
        <if test="condition.state != null" >
            and state = #{condition.state}
        </if>
        <if test="condition.jsclusterid != null" >
            and jsclusterid = #{condition.jsclusterid}
        </if>
    </sql>
  <select id="getBrandListPage" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.Brand">
  	select
  	<include refid="Brand_Column_List"/>
  	from t_base_goods_brand   
  	<trim prefix="where" prefixOverrides="and|or" >
        <include refid="brandListPage_Where_Clause" />
  	  <include refid="common.Page_querySql"/>
      <include refid="common.Page_dataSql"/>
  	</trim>
  	<include refid="common.Page_limit" />
  </select>
  <!-- 列表数量 -->
  <select id="getBrandListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	select count(1) from t_base_goods_brand   
  	<trim prefix="where" prefixOverrides="and|or" >
        <include refid="brandListPage_Where_Clause" />
  	  <include refid="common.Page_querySql"/>
      <include refid="common.Page_dataSql"/>
  	</trim>
  </select>
  <!-- 根据编号判断该商品品牌是否重复 -->
  <select id="isRepeatBrandById" parameterType="java.lang.String" resultType="int">
  	SELECT COUNT(1) FROM t_base_goods_brand    WHERE id = #{id}
  </select>
  <!-- 判断名称是否重复 -->
  <select id="isRepeatBrandName" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_brand    where name = #{name}
  </select>
  <select id="retunBrandIdByName" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Brand">
		select * from t_base_goods_brand   
		where name = #{name}
	</select>
  <!-- 新增商品品牌 -->
  <insert id="addBrand" parameterType="com.hd.agent.basefiles.model.Brand">
      insert into t_base_goods_brand   
      <trim prefix="(" suffix=")" suffixOverrides="," >
          id,
          <if test="name != null" >
              name,
          </if>
          <if test="deptid != null" >
              deptid,
          </if>
          <if test="supplierid != null" >
              supplierid,
          </if>
          <if test="defaulttaxtype != null" >
              defaulttaxtype,
          </if>
          <if test="margin != null" >
              margin,
          </if>
          <if test="state != null" >
              state,
          </if>
          <if test="remark != null" >
              remark,
          </if>
          <if test="adduserid != null" >
              adduserid,
          </if>
          <if test="addusername != null" >
              addusername,
          </if>
          <if test="adddeptid != null" >
              adddeptid,
          </if>
          <if test="adddeptname != null" >
              adddeptname,
          </if>
          <if test="1 == 1" >
              addtime,
          </if>
          <if test="jsclusterid != null" >
              jsclusterid,
          </if>
      </trim>
      <trim prefix="values (" suffix=")" suffixOverrides="," >
          <choose>
              <when test="id != null">
                  #{id},
              </when>
              <otherwise>
                  uuid_short(),
              </otherwise>
          </choose>
          <if test="name != null" >
              #{name},
          </if>
          <if test="deptid != null" >
              #{deptid},
          </if>
          <if test="supplierid != null" >
              #{supplierid},
          </if>
          <if test="defaulttaxtype != null" >
              #{defaulttaxtype},
          </if>
          <if test="margin != null" >
              #{margin},
          </if>
          <if test="state != null" >
              #{state},
          </if>
          <if test="remark != null" >
              #{remark},
          </if>
          <if test="adduserid != null" >
              #{adduserid},
          </if>
          <if test="addusername != null" >
              #{addusername},
          </if>
          <if test="adddeptid != null" >
              #{adddeptid},
          </if>
          <if test="adddeptname != null" >
              #{adddeptname},
          </if>
          <if test="1 == 1" >
              now(),
          </if>
          <if test="jsclusterid != null" >
              #{jsclusterid},
          </if>
      </trim>
  </insert>
  <!-- 修改商品品牌 -->
  <update id="editBrand" parameterType="com.hd.agent.basefiles.model.Brand">
      update t_base_goods_brand   
      <set >
          <if test="id != null" >
              id = #{id},
          </if>
          <if test="name != null" >
              name = #{name},
          </if>
          <if test="deptid != null" >
              deptid = #{deptid},
          </if>
          <if test="supplierid != null" >
              supplierid = #{supplierid},
          </if>
          <if test="defaulttaxtype != null" >
              defaulttaxtype = #{defaulttaxtype},
          </if>
          <if test="margin != null" >
              margin = #{margin},
          </if>
          <if test="state != null" >
              state = #{state},
          </if>
          <if test="remark != null" >
              remark = #{remark},
          </if>
          <if test="modifyuserid != null" >
              modifyuserid = #{modifyuserid},
          </if>
          <if test="modifyusername != null" >
              modifyusername = #{modifyusername},
          </if>
          <if test="1 == 1" >
              modifytime = now(),
          </if>
          <if test="jsclusterid != null" >
             jsclusterid = #{jsclusterid},
          </if>
      </set>
      where id = #{oldId}
  </update>
    <!-- 修改品牌金税信息 -->
    <update id="updateBrandInfoForJS" parameterType="com.hd.agent.basefiles.model.Brand">
        update t_base_goods_brand
        <set>
            <if test="modifyuserid != null" >
                modifyuserid = #{modifyuserid},
            </if>
            <if test="modifyusername != null" >
                modifyusername = #{modifyusername},
            </if>
            <if test="1 == 1" >
                modifytime = now(),
            </if>
            <if test="jsclusterid != null" >
                jsclusterid = #{jsclusterid},
            </if>
        </set>
        where id = #{id}
    </update>
  <!-- 删除商品品牌 -->
  <delete id="deleteBrand" parameterType="java.lang.String">
  	delete from t_base_goods_brand   
  	where id = #{id}
  </delete>
  <!-- 获取商品品牌详情 -->
  <select id="getBrandInfo" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Brand">
  	select
  	<include refid="Brand_Column_List"/>
  	from t_base_goods_brand   
  	where id = #{id}
  </select>
    <select id="getBrandInfoByName" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Brand">
        select
        <include refid="Brand_Column_List"/>
        from t_base_goods_brand   
        where name = #{name}
        limit 1
    </select>
  <!-- 启用商品品牌 -->
  <update id="enableBrand" parameterType="java.util.Map">
  	update t_base_goods_brand    
  	set state = '1',openuserid = #{openuserid},openusername = #{openusername}, opentime = now()
  	where id = #{id}
  </update>
  <!-- 禁用商品品牌 -->
  <update id="disableBrand" parameterType="java.util.Map">
  	update t_base_goods_brand    
  	set state = '0' ,closeuserid = #{closeuserid},closeusername = #{closeusername}, closetime = now()
  	where id = #{id}
  </update>
  <select id="getBrandListByDeptid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Brand">
  	SELECT id,NAME FROM t_base_goods_brand    WHERE deptid = #{deptid}
  </select>
  <select id="getBrandListByBrandids" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.Brand">
  	select id,name from t_base_goods_brand   
  	where id in 
  	<foreach collection="brandArr" index="index" item="item" open="(" separator="," close=")">
		#{item}
	</foreach>
  </select>
  <select id="getBrandListWithParentByDeptid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Brand">
  	SELECT id,NAME FROM t_base_goods_brand    WHERE deptid like concat(#{deptid},'%') and state = '1'
  </select>
  <select id="getBrandListWithParentByDeptidPage" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.Brand">
  	SELECT id,NAME FROM t_base_goods_brand   
  	<trim prefix="where" prefixOverrides="and|or" >
      <if test="condition.deptid != null" >
         and deptid like concat(#{condition.deptid},'%')
      </if>
      <if test="1 == 1" >
         and state = '1'
      </if>
  	</trim>
  	<include refid="common.Page_limit" />
  </select>
  <select id="getBrandListWithParentByDeptidCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	select count(1) from (
  		SELECT id,NAME FROM t_base_goods_brand   
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="condition.deptid != null" >
	         and deptid like concat(#{condition.deptid},'%')
	      </if>
	      <if test="1 == 1" >
	         and state = '1'
	      </if>
	  	</trim>
  	)z
  </select>
  <select id="getBrandListBySupplierid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Brand">
  	SELECT id,NAME,deptid FROM t_base_goods_brand    WHERE supplierid = #{supplierid}
  </select>
  <select id="getBrandListBySupplierids" resultType="com.hd.agent.basefiles.model.Brand">
  	SELECT DISTINCT id,NAME,deptid FROM t_base_goods_brand    
  	WHERE supplierid in
  	<foreach collection="supplieridArr" index="index" item="item" open="(" separator="," close=")">
  		#{item}
  	</foreach>
  	order by id
  </select>
    <select id="getBrandListByMap" parameterType="map"  resultType="com.hd.agent.basefiles.model.Brand">
        select
        <include refid="Brand_Column_List"/>
        from t_base_goods_brand   
        <trim prefix="where" prefixOverrides="and|or" >
            <if test="idarrs != null" >
                and FIND_IN_SET(id,#{idarrs})
            </if>
            <if test="state != null" >
                and state = #{state}
            </if>
            <if test="name != null" >
                and name = #{name}
            </if>
        </trim>
    </select>

    <!-- 品牌修改后更新冲差单 -->
    <update id="editBrandDeptChangeGoods" parameterType="map">
        update t_base_goods_info  g,t_base_goods_brand    t1
        SET g.deptid = t1.deptid,
        g.modifyuserid = #{modifyuserid},
        g.modifyusername = #{modifyusername},
        g.modifytime = now()
        where g.brand = t1.id
        and t1.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
    </update>
    <update id="editBrandChangePushBalance" parameterType="map">
        UPDATE t_account_customer_push_balance t,t_base_goods_brand    t1
        SET t.branddept = t1.deptid,
        t.supplierid = t1.supplierid
        WHERE t.brandid = t1.id
        and t1.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
    </update>
    <update id="editSalesInvoiceCauseOfSupplier" parameterType="map">
        UPDATE t_account_sales_invoice_detail t,t_base_goods_brand    t1
        SET t.supplierid = t1.supplierid,
        t.branddept = t1.deptid
        WHERE t.sourcetype = '3' and t.brandid = t1.id
        and t1.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
    </update>
    <update id="editSalesInvoiceBillCauseOfSupplier" parameterType="map">
        UPDATE t_account_sales_invoicebill_detail t,t_base_goods_brand    t1
        SET t.supplierid = t1.supplierid,
        t.branddept = t1.deptid
        WHERE t.sourcetype = '3' and t.brandid = t1.id
        and t1.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
    </update>
  <!-- 商品分类 -->
  <sql id="WC_Column_List" >
    id, name, state, remark, adduserid, adddeptid, addtime, modifyuserid, modifytime, openuserid, opentime, closeuserid, 
    closetime, thisid, thisname, leaf ,pid,addusername,modifyusername,openusername,closeusername,adddeptidname
  </sql>
  <!-- 根据pageMap中的条件获取商品分类列表 -->
  <select id="getWaresClassListPage" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.WaresClass">
  	select
  	<include refid="WC_Column_List"/>
  	from t_base_goods_waresclass
  	<trim prefix="where" prefixOverrides="and|or" >
  	  <if test="condition.id != null" >
         and id = #{condition.id}
      </if>
      <if test="condition.name != null" >
         and name like CONCAT('%',#{condition.name},'%')
      </if>
      <if test="condition.state != null" >
         and state = #{condition.state}
      </if>
  	  <include refid="common.Page_querySql"/>
      <include refid="common.Page_dataSql"/>
  	</trim>
  	<include refid="common.Page_limit" />
  </select>
  <!-- 根据pageMap中的条件获取商品分类数量 -->
  <select id="getWaresClassListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="java.lang.Integer">
  	select count(1) from t_base_goods_waresclass
  	<trim prefix="where" prefixOverrides="and|or" >
  	  <if test="condition.id != null" >
         and id = #{condition.id}
      </if>
      <if test="condition.name != null" >
         and name like CONCAT('%',#{condition.name},'%')
      </if>
      <if test="condition.state != null" >
         and state = #{condition.state}
      </if>
  	  <include refid="common.Page_querySql"/>
      <include refid="common.Page_dataSql"/>
  	</trim>
  </select>
  <!-- 获取树状商品分类列表 -->
  <select id="getWaresClassTreeList" resultType="com.hd.agent.basefiles.model.WaresClass">
  	select * from t_base_goods_waresclass
  </select>
  <select id="getWaresClassTreeOpenList" resultType="com.hd.agent.basefiles.model.WaresClass">
  	select * from t_base_goods_waresclass where state='1'
  </select>
  
  <!-- 编码是否重复 -->
  <select id="isRepeatWCID" parameterType="java.lang.String" resultType="java.lang.String">
  	select id from t_base_goods_waresclass where id = #{id}
  </select>
  <!-- 本级名称是否重复 -->
  <select id="isRepeatThisName" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_waresclass where thisname = #{thisname}
  </select>
  <select id="retunWCIdBythisname" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.WaresClass">
		select * from t_base_goods_waresclass
		where thisname = #{thisname}
	</select>
  <select id="returnWCListByName" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.WaresClass">
  		select * from t_base_goods_waresclass
		where name = #{name}
  </select>
  <!-- 新增商品分类 -->
  <insert id="addWaresClass" parameterType="com.hd.agent.basefiles.model.WaresClass">
  	insert into t_base_goods_waresclass
    <trim prefix="(" suffix=")" suffixOverrides="," >
      id,
      <if test="name != null" >
        name,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="adduserid != null" >
        adduserid,
      </if>
      <if test="addusername != null" >
        addusername,
      </if>
      <if test="adddeptid != null" >
        adddeptid,
      </if>
      <if test="adddeptidname != null" >
        adddeptidname,
      </if>
      <if test="1 == 1" >
        addtime,
      </if>
      <if test="thisid != null" >
        thisid,
      </if>
      <if test="thisname != null" >
        thisname,
      </if>
      <if test="leaf != null" >
        leaf,
      </if>
      <if test="pid != null" >
        pid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <choose>
      	<when test="id != null">
      		#{id},
      	</when>
      	<otherwise>
      		uuid_short(),
      	</otherwise>
      </choose>
      <if test="name != null" >
        #{name},
      </if>
      <if test="state != null" >
        #{state},
      </if>
      <if test="remark != null" >
        #{remark},
      </if>
      <if test="adduserid != null" >
        #{adduserid},
      </if>
      <if test="addusername != null" >
        #{addusername},
      </if>
      <if test="adddeptid != null" >
        #{adddeptid},
      </if>
      <if test="adddeptidname != null" >
        #{adddeptidname},
      </if>
      <if test="1 == 1" >
        now(),
      </if>
      <if test="thisid != null" >
        #{thisid},
      </if>
      <if test="thisname != null" >
        #{thisname},
      </if>
      <if test="leaf != null" >
        #{leaf},
      </if>
      <if test="pid != null" >
        #{pid},
      </if>
    </trim>
  </insert>
  <!-- 获取保存、暂存以外的商品分类 -->
  <select id="getWaresClassByState" resultType="com.hd.agent.basefiles.model.WaresClass">
  	select * from t_base_goods_waresclass where state != '2' and state != '3'
  </select>
  <!-- 判断是否存在上级编码，若存在则不为末级标志 -->
  <select id="isExistPidJudgeLeaf" parameterType="java.lang.String" resultType="java.lang.String">
  	select distinct pid from t_base_goods_waresclass
  	where pid = #{id}
  </select>
  <!-- 获取商品分类信息 -->
  <select id="getWaresClassInfo" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.WaresClass">
  	select
  	<include refid="WC_Column_List"/>
  	from t_base_goods_waresclass
  	where id = #{id}
  </select>
  <!-- 修改商品分类 -->
  <update id="editWaresClass" parameterType="com.hd.agent.basefiles.model.WaresClass">
  	update t_base_goods_waresclass
    <set >
      <if test="id != null" >
        id = #{id},
      </if>
      <if test="name != null" >
        name = #{name},
      </if>
      <if test="state != null" >
        state = #{state},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
      <if test="modifyuserid != null" >
        modifyuserid = #{modifyuserid},
      </if>
      <if test="modifyusername != null" >
        modifyusername = #{modifyusername},
      </if>
      <if test="1 == 1" >
        modifytime = now(),
      </if>
      <if test="thisid != null" >
        thisid = #{thisid},
      </if>
      <if test="thisname != null" >
        thisname = #{thisname},
      </if>
      <if test="leaf != null" >
        leaf = #{leaf},
      </if>
      <if test="pid != null" >
        pid = #{pid},
      </if>
    </set>
    where id = #{oldId}
  </update>
  <!-- 删除商品分类 -->
  <delete id="deleteWaresClass" parameterType="java.lang.String">
  	delete from t_base_goods_waresclass
  	where id = #{id}
  </delete>
  <!-- 启用商品分类 -->
  <update id="enableWaresClass" parameterType="java.util.Map">
  	update t_base_goods_waresclass
  	set openuserid = #{openuserid},openusername = #{openusername},state = '1',opentime = now()
  	where id = #{id}
  </update>
  <!-- 禁用商品分类 -->
  <update id="disableWaresClass" parameterType="com.hd.agent.basefiles.model.WaresClass">
  	update t_base_goods_waresclass
  	set closeuserid = #{closeuserid},closeusername = #{closeusername},state = '0',closetime = now()
  	where id = #{id}
  </update>
  <!-- 获取所有节点(子节点与父节点) -->
  <select id="getWaresClassListByPid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.WaresClass">
  	select * from t_base_goods_waresclass
  	where id LIKE CONCAT(#{id},'%')
  </select>
  <!-- 获取父节点下的所有子节点 -->
  <select id="getWaresClassChildListByPid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.WaresClass">
  	select * from t_base_goods_waresclass
  	where pid LIKE CONCAT(#{id},'%')
  </select>
  <update id="editWaresClassBatch" parameterType="java.util.List">
  	<foreach collection="list" index="index" item="item">
  		update t_base_goods_waresclass
	  	<set >
	      <if test="item.id != null" >
	        id = #{item.id},
	      </if>
	      <if test="item.name != null" >
	        name = #{item.name},
	      </if>
	      <if test="item.thisid != null" >
	        thisid = #{item.thisid},
	      </if>
	      <if test="item.thisname != null" >
	        thisname = #{item.thisname},
	      </if>
	      <if test="item.pid != null" >
	        pid = #{item.pid},
	      </if>
	    </set>
	    where id = #{item.oldId};
  	</foreach>
  </update>
  <select id="getWCWithoutName" resultType="com.hd.agent.basefiles.model.WaresClass">
  	select * from t_base_goods_waresclass WHERE name = '' order by id
  </select>
  
  <!-- 商品档案 -->
  
  <sql id="GoodsInfo_Column_List" >
        id, name,pinyin, state, remark, model, mainunit, goodstype, spell, brand,deptid, abclevel, defaultsort,
        barcode, boxbarcode, itemno, bstype,productfield, sortkey, isinoutstorage, storageid, storagelocation,
        isbatch, isstoragelocation, isshelflife, shelflife, shelflifeunit, highestbuyprice,
        lowestsaleprice, basesaleprice, highestinventory, lowestinventory, safeinventory,
        normalprice, checktype, checkdate, checkunit, defaultbuyer, defaultsaler, defaultsupplier,secondsupplier,
        defaulttaxtype, planmargin, newbuyprice, newsaleprice, newstorageprice, newbuydate,
        newsaledate, everybillaveragesales, newinstroragedate, newoutstoragedate, newinventory,
        newcheckdate, gshape, glength, gmlength, gwidth, gmwidth, ghight, gmhight, gdiameter,
        gmdiameter, grossweight, netweight,totalweight,totalvolume,singlevolume, kgweight, image,imageids,
        field01, field02, field03, field04, field05, field06, field07, field08, field09, field10, field11,
        field12, adduserid, addusername, adddeptid, adddeptname, addtime, modifyuserid, modifyusername,
        modifytime, openuserid, openusername, opentime, closeuserid, closeusername, closetime, physicsremark,
        newtotalbuynum,newtotalbuyamount,costaccountprice,minimum,jsgoodsid,jsgoodsmodifyuserid,
        jsgoodsmodifyusername,jsgoodsmodifytime,jstaxsortid
  </sql>
  <select id="getGoodsListByBrand" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo">
  	select * from t_base_goods_info  where brand = #{brand}
  </select>
   <select id="getGoodsListByDefaultSort" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo">
  	select * from t_base_goods_info  where defaultsort = #{defaultsort}
  </select>
  <select id="getGoodsListByBrandWithSupplierid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo">
  	select * from t_base_goods_info  where brand = #{brand} and defaultsupplier = #{supplierid}
  </select>
  <!-- 根据商品品牌获取商品档案列表 -->
  <select id="getGoodsListForCombobox" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo">
  	SELECT g.id,g.name, g.model, g.brand, g.mainunit,g.defaulttaxtype,g.storagelocation,g.storageid, g.barcode, g.isbatch,
  		g.isstoragelocation, g.field01, g.field02, g.field03, g.field04, g.field05, g.field06, g.field07, g.field08, g.field09 ,
  		b.name AS brandName ,g.highestbuyprice,g.newbuyprice,g.defaultsupplier,g.costaccountprice
	 FROM t_base_goods_info  g
	 LEFT JOIN t_base_goods_brand    b ON g.brand = b.id
	 <trim prefix="where" prefixOverrides="and|or">
	 	<if test="1 == 1" >
         	and g.state = '1'
      	</if>
      	<if test="brandid != null and brandid != ''" >
         	and g.brand = #{brandid}
      	</if>
	 </trim>
  </select>
  <select id="getGoodsInfoBySpellLimitOne" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo">
  	select * from t_base_goods_info  where spell = #{spell} limit 1
  </select>
  <select id="getGoodsInfoByBarcodeLimitOne" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo">
  	select * from t_base_goods_info  where barcode = #{barcode} limit 1
  </select>
    <select id="getGoodsInfoListByMap" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo">
        select * from t_base_goods_info
        <trim prefix="where" prefixOverrides="and|or">
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="spell != null">
                and spell = #{spell}
            </if>
            <if test="barcode != null" >
                and barcode = #{barcode}
            </if>
            <if test="jstaxsortid != null" >
                and jstaxsortid = #{jstaxsortid}
            </if>
            <if test="idarrs != null" >
                and find_in_set(id,#{idarrs})
            </if>
            <if test="namelike !=null">
                and name like concat('%',#{nameklike},'%')
            </if>
            <if test="jstaxsortidNotEmpty=='true' ">
                and (not jstaxsortid is null and length(jstaxsortid)>0)
            </if>
        </trim>
        <if test="getonedata !=null">
            limit 0,1
        </if>
    </select>
  <sql id="GoodsInfoListPage_sql">
      <trim prefix="where" prefixOverrides="and|or">
          <if test="condition.defaultsort != null and condition.defaultsort != ''">
              and defaultsort like CONCAT(#{condition.defaultsort},'%')
          </if>
          <if test="condition.name != null" >
              and name like CONCAT('%',#{condition.name},'%')
          </if>
          <if test="condition.id != null" >
              and (id like CONCAT('%',#{condition.id},'%') or barcode like CONCAT('%',#{condition.id},'%') or spell like CONCAT('%',#{condition.id},'%'))
          </if>
          <if test="condition.defaultsupplier != null" >
              and defaultsupplier = #{condition.defaultsupplier}
          </if>
          <if test="condition.secondsupplier != null" >
              and secondsupplier = #{condition.secondsupplier}
          </if>
          <if test="condition.state != null" >
              and state = #{condition.state}
          </if>
          <if test="condition.brandid != null" >
              and brand = #{condition.brandid}
          </if>
          <if test="condition.deptid != null" >
              and deptid like concat(#{condition.deptid},'%')
              <!--and brand IN (SELECT b.id AS brand FROM t_base_goods_brand    b WHERE b.deptid like concat(#{condition.deptid},'%'))-->
          </if>
          <if test="condition.idarrs != null" >
              and find_in_set(id,#{condition.idarrs})
          </if>
          <if test="condition.jsgoodsids != null" >
              and find_in_set(jsgoodsid,#{condition.jsgoodsids})
          </if>
          <if test="condition.jsgoodsid != null" >
              and jsgoodsid = #{condition.jsgoodsid}
          </if>
          <if test="condition.jstaxsortid != null" >
              and jstaxsortid = #{condition.jstaxsortid}
          </if>
          <include refid="common.Page_querySql"/>
          <include refid="common.Page_dataSql"/>
      </trim>
  </sql>
  <!-- 根据商品分类获取商品档案列表分页 -->
  <select id="getGoodsInfoListPage" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.GoodsInfo" useCache="false">
  	select
  	<include refid="GoodsInfo_Column_List"/>
  	from t_base_goods_info
    <include refid="GoodsInfoListPage_sql"/>
	<if test="condition.isflag == null">
		<include refid="common.Page_limit"/>
	</if>
  </select>
  <!-- 根据商品分类获取商品档案数量 -->
  <select id="getGoodsInfoListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	  select count(1) from t_base_goods_info
      <include refid="GoodsInfoListPage_sql"/>
  </select>
  <!-- 获取商品档案详情 -->
  <select id="getGoodsInfo" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo">
  	SELECT <include refid="GoodsInfo_Column_List"/> FROM t_base_goods_info  WHERE id = #{id}
  </select>
  <select id="getBaseGoodsInfo" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo">
  	SELECT 	id, name,remark, model, mainunit, goodstype, spell, brand,deptid, abclevel,barcode, boxbarcode, itemno, storageid,defaultsort,defaultsupplier, defaulttaxtype,productfield,highestbuyprice,newstorageprice,state,
		    basesaleprice,newbuyprice,isbatch,isshelflife, shelflife, shelflifeunit,field01, field02, field03, field04, field05, 
		    field06, field07, field08, field09, field10, field11, field12,grossweight, singlevolume,minimum,jsgoodsid,jstaxsortid
  	FROM t_base_goods_info  WHERE id = #{id}
  </select>
  <select id="getBaseGoodsInfoNoCache" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo" useCache="false">
  	SELECT 	id, name,remark, model, mainunit, goodstype, spell, brand,deptid, abclevel,barcode, boxbarcode, itemno, storageid,defaultsort, defaulttaxtype,productfield, 
		    isshelflife, shelflife, shelflifeunit,field01, field02, field03, field04, field05, 
		    field06, field07, field08, field09, field10, field11, field12,grossweight, singlevolume,minimum,jsgoodsid,jstaxsortid
  	FROM t_base_goods_info  WHERE id = #{id}
  </select>
  <!-- 根据条件获取已启用的商品信息列表 -->
  <select id="getGoodsInfoByCondition" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.GoodsInfo">
  	select
  	<include refid="GoodsInfo_Column_List"/>
  	from t_base_goods_info
  	<trim prefix="where" prefixOverrides="and|or">
      	<if test="condition.defaultsupplier != null" >
         	and defaultsupplier = #{condition.defaultsupplier}
      	</if>
      	<if test="condition.state != null" >
         	and state = #{condition.state}
      	</if>
	</trim>
  </select>
  <!-- 批量启用商品档案 -->
  <update id="enableGoodsInfos">
  	update t_base_goods_info
  	set state = '1', openuserid = #{openuserid}, openusername =#{openusername}, opentime = now()
  	where id in
  	<foreach collection="idsArr" item="item" open="(" separator="," close=")">
  		#{item}
  	</foreach>
  </update>
  <!-- 批量禁用商品档案 -->
  <update id="disableGoodsInfos">
  	update t_base_goods_info
  	set state = '0', closeuserid = #{closeuserid}, closeusername = #{closeusername}, closetime = now()
  	where id in
  	<foreach collection="idsArr" item="item" open="(" separator="," close=")">
  		#{item}
  	</foreach>
  </update>
  <!-- 批量删除商品档案 -->
  <delete id="deleteGoodsInfos">
  	delete from t_base_goods_info
  	where id in
  	<foreach collection="idsArr" item="item" open="(" separator="," close=")">
  		#{item}
  	</foreach>
  </delete>
  <!-- 新增商品 -->
  <insert id="addGoodsInfo" parameterType="com.hd.agent.basefiles.model.GoodsInfo">
  	insert into t_base_goods_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      id,
      <if test="name != null" >
        name,
      </if>
      <if test="pinyin != null" >
        pinyin,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="model != null" >
        model,
      </if>
      <if test="mainunit != null" >
        mainunit,
      </if>
      <if test="goodstype != null" >
        goodstype,
      </if>
      <if test="spell != null" >
        spell,
      </if>
      <if test="brand != null" >
        brand,
      </if>
      <if test="deptid != null" >
        deptid,
      </if>
      <if test="abclevel != null" >
        abclevel,
      </if>
      <if test="defaultsort != null" >
        defaultsort,
      </if>
      <if test="barcode != null" >
        barcode,
      </if>
      <if test="boxbarcode != null" >
        boxbarcode,
      </if>
      <if test="itemno != null" >
        itemno,
      </if>
      <if test="bstype != null" >
        bstype,
      </if>
      <if test="productfield != null" >
        productfield,
      </if>
      <if test="sortkey != null" >
        sortkey,
      </if>
      <if test="isinoutstorage != null" >
        isinoutstorage,
      </if>
      <if test="storageid != null" >
        storageid,
      </if>
      <if test="storagelocation != null" >
        storagelocation,
      </if>
      <if test="isbatch != null" >
        isbatch,
      </if>
      <if test="isstoragelocation != null" >
        isstoragelocation,
      </if>
      <if test="isshelflife != null" >
        isshelflife,
      </if>
      <if test="shelflife != null" >
        shelflife,
      </if>
      <if test="shelflifeunit != null" >
        shelflifeunit,
      </if>
      <if test="highestbuyprice != null" >
        highestbuyprice,
      </if>
      <if test="lowestsaleprice != null" >
        lowestsaleprice,
      </if>
      <if test="basesaleprice != null" >
        basesaleprice,
      </if>
      <if test="highestinventory != null" >
        highestinventory,
      </if>
      <if test="lowestinventory != null" >
        lowestinventory,
      </if>
      <if test="safeinventory != null" >
        safeinventory,
      </if>
      <if test="normalprice != null" >
        normalprice,
      </if>
      <if test="checktype != null" >
        checktype,
      </if>
      <if test="checkdate != null" >
        checkdate,
      </if>
      <if test="checkunit != null" >
        checkunit,
      </if>
      <if test="defaultbuyer != null" >
        defaultbuyer,
      </if>
      <if test="defaultsaler != null" >
        defaultsaler,
      </if>
      <if test="defaultsupplier != null" >
        defaultsupplier,
      </if>
      <if test="secondsupplier != null" >
        secondsupplier,
      </if>
      <if test="defaulttaxtype != null" >
        defaulttaxtype,
      </if>
      <if test="planmargin != null" >
        planmargin,
      </if>
      <if test="newbuyprice != null" >
        newbuyprice,
      </if>
      <if test="newsaleprice != null" >
        newsaleprice,
      </if>
      <if test="newstorageprice != null" >
        newstorageprice,
      </if>
      <if test="newbuydate != null" >
        newbuydate,
      </if>
      <if test="newsaledate != null" >
        newsaledate,
      </if>
      <if test="everybillaveragesales != null" >
        everybillaveragesales,
      </if>
      <if test="newinstroragedate != null" >
        newinstroragedate,
      </if>
      <if test="newoutstoragedate != null" >
        newoutstoragedate,
      </if>
      <if test="newinventory != null" >
        newinventory,
      </if>
      <if test="newcheckdate != null" >
        newcheckdate,
      </if>
      <if test="gshape != null" >
        gshape,
      </if>
      <if test="glength != null" >
        glength,
      </if>
      <if test="gmlength != null" >
        gmlength,
      </if>
      <if test="gwidth != null" >
        gwidth,
      </if>
      <if test="gmwidth != null" >
        gmwidth,
      </if>
      <if test="ghight != null" >
        ghight,
      </if>
      <if test="gmhight != null" >
        gmhight,
      </if>
      <if test="gdiameter != null" >
        gdiameter,
      </if>
      <if test="gmdiameter != null" >
        gmdiameter,
      </if>
      <if test="grossweight != null" >
        grossweight,
      </if>
      <if test="netweight != null" >
        netweight,
      </if>
      <if test="totalweight != null" >
        totalweight,
      </if>
      <if test="totalvolume != null" >
        totalvolume,
      </if>
      <if test="singlevolume != null" >
        singlevolume,
      </if>
      <if test="kgweight != null" >
        kgweight,
      </if>
      <if test="image != null" >
        image,
      </if>
      <if test="imageids != null" >
        imageids,
      </if>
      <if test="field01 != null" >
        field01,
      </if>
      <if test="field02 != null" >
        field02,
      </if>
      <if test="field03 != null" >
        field03,
      </if>
      <if test="field04 != null" >
        field04,
      </if>
      <if test="field05 != null" >
        field05,
      </if>
      <if test="field06 != null" >
        field06,
      </if>
      <if test="field07 != null" >
        field07,
      </if>
      <if test="field08 != null" >
        field08,
      </if>
      <if test="field09 != null" >
        field09,
      </if>
      <if test="adduserid != null" >
        adduserid,
      </if>
      <if test="addusername != null" >
        addusername,
      </if>
      <if test="adddeptid != null" >
        adddeptid,
      </if>
      <if test="adddeptname != null" >
        adddeptname,
      </if>
      <if test="1 == 1" >
        addtime,
      </if>
      <if test="physicsremark != null" >
        physicsremark,
      </if>
      <if test="field10 != null" >
        field10,
      </if>
      <if test="field11 != null" >
        field11,
      </if>
      <if test="field12 != null" >
        field12,
      </if>
      <if test="newtotalbuynum != null" >
        newtotalbuynum,
      </if>
      <if test="newtotalbuyamount != null" >
        newtotalbuyamount,
      </if>
      <if test="costaccountprice != null">
      	costaccountprice,
      </if>
      <if test="minimum != null">
      	minimum,
      </if>
        <if test="jsgoodsid != null" >
            jsgoodsid ,
        </if>
        <if test="jsgoodsmodifytime != null" >
            jsgoodsmodifytime,
        </if>
        <if test="jsgoodsmodifyuserid != null" >
            jsgoodsmodifyuserid,
        </if>
        <if test="jsgoodsmodifyusername != null" >
            jsgoodsmodifyusername,
        </if>
        <if test="jstaxsortid != null" >
            jstaxsortid,
        </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <choose>
      	<when test="id != null">
      		#{id},
      	</when>
      	<otherwise>
      		uuid_short(),
      	</otherwise>
      </choose>
      <if test="name != null" >
        #{name},
      </if>
      <if test="pinyin != null" >
        #{pinyin},
      </if>
      <if test="state != null" >
        #{state},
      </if>
      <if test="remark != null" >
        #{remark},
      </if>
      <if test="model != null" >
        #{model},
      </if>
      <if test="mainunit != null" >
        #{mainunit},
      </if>
      <if test="goodstype != null" >
        #{goodstype},
      </if>
      <if test="spell != null" >
        #{spell},
      </if>
      <if test="brand != null" >
        #{brand},
      </if>
      <if test="deptid != null" >
        #{deptid},
      </if>
      <if test="abclevel != null" >
        #{abclevel},
      </if>
      <if test="defaultsort != null" >
        #{defaultsort},
      </if>
      <if test="barcode != null" >
        #{barcode},
      </if>
      <if test="boxbarcode != null" >
        #{boxbarcode},
      </if>
      <if test="itemno != null" >
        #{itemno},
      </if>
      <if test="bstype != null" >
        #{bstype},
      </if>
      <if test="productfield != null" >
        #{productfield},
      </if>
      <if test="sortkey != null" >
        #{sortkey},
      </if>
      <if test="isinoutstorage != null" >
        #{isinoutstorage},
      </if>
      <if test="storageid != null" >
        #{storageid},
      </if>
      <if test="storagelocation != null" >
        #{storagelocation},
      </if>
      <if test="isbatch != null" >
        #{isbatch},
      </if>
      <if test="isstoragelocation != null" >
        #{isstoragelocation},
      </if>
      <if test="isshelflife != null" >
        #{isshelflife},
      </if>
      <if test="shelflife != null" >
        #{shelflife},
      </if>
      <if test="shelflifeunit != null" >
        #{shelflifeunit},
      </if>
      <if test="highestbuyprice != null" >
        #{highestbuyprice},
      </if>
      <if test="lowestsaleprice != null" >
        #{lowestsaleprice},
      </if>
      <if test="basesaleprice != null" >
        #{basesaleprice},
      </if>
      <if test="highestinventory != null" >
        #{highestinventory},
      </if>
      <if test="lowestinventory != null" >
        #{lowestinventory},
      </if>
      <if test="safeinventory != null" >
        #{safeinventory},
      </if>
      <if test="normalprice != null" >
        #{normalprice},
      </if>
      <if test="checktype != null" >
        #{checktype},
      </if>
      <if test="checkdate != null" >
        #{checkdate},
      </if>
      <if test="checkunit != null" >
        #{checkunit},
      </if>
      <if test="defaultbuyer != null" >
        #{defaultbuyer},
      </if>
      <if test="defaultsaler != null" >
        #{defaultsaler},
      </if>
      <if test="defaultsupplier != null" >
        #{defaultsupplier},
      </if>
      <if test="secondsupplier != null" >
        #{secondsupplier},
      </if>
      <if test="defaulttaxtype != null" >
        #{defaulttaxtype},
      </if>
      <if test="planmargin != null" >
        #{planmargin},
      </if>
      <if test="newbuyprice != null" >
        #{newbuyprice},
      </if>
      <if test="newsaleprice != null" >
        #{newsaleprice},
      </if>
      <if test="newstorageprice != null" >
        #{newstorageprice},
      </if>
      <if test="newbuydate != null" >
        #{newbuydate},
      </if>
      <if test="newsaledate != null" >
        #{newsaledate},
      </if>
      <if test="everybillaveragesales != null" >
        #{everybillaveragesales},
      </if>
      <if test="newinstroragedate != null" >
        #{newinstroragedate},
      </if>
      <if test="newoutstoragedate != null" >
        #{newoutstoragedate},
      </if>
      <if test="newinventory != null" >
        #{newinventory},
      </if>
      <if test="newcheckdate != null" >
        #{newcheckdate},
      </if>
      <if test="gshape != null" >
        #{gshape},
      </if>
      <if test="glength != null" >
        #{glength},
      </if>
      <if test="gmlength != null" >
        #{gmlength},
      </if>
      <if test="gwidth != null" >
        #{gwidth},
      </if>
      <if test="gmwidth != null" >
        #{gmwidth},
      </if>
      <if test="ghight != null" >
        #{ghight},
      </if>
      <if test="gmhight != null" >
        #{gmhight},
      </if>
      <if test="gdiameter != null" >
        #{gdiameter},
      </if>
      <if test="gmdiameter != null" >
        #{gmdiameter},
      </if>
      <if test="grossweight != null" >
        #{grossweight},
      </if>
      <if test="netweight != null" >
        #{netweight},
      </if>
      <if test="totalweight != null" >
        #{totalweight},
      </if>
      <if test="totalvolume != null" >
        #{totalvolume},
      </if>
      <if test="singlevolume != null" >
        #{singlevolume},
      </if>
      <if test="kgweight != null" >
        #{kgweight},
      </if>
      <if test="image != null" >
        #{image},
      </if>
      <if test="imageids != null" >
        #{imageids},
      </if>
      <if test="field01 != null" >
        #{field01},
      </if>
      <if test="field02 != null" >
        #{field02},
      </if>
      <if test="field03 != null" >
        #{field03},
      </if>
      <if test="field04 != null" >
        #{field04},
      </if>
      <if test="field05 != null" >
        #{field05},
      </if>
      <if test="field06 != null" >
        #{field06},
      </if>
      <if test="field07 != null" >
        #{field07},
      </if>
      <if test="field08 != null" >
        #{field08},
      </if>
      <if test="field09 != null" >
        #{field09},
      </if>
      <if test="adduserid != null" >
        #{adduserid},
      </if>
      <if test="addusername != null" >
        #{addusername},
      </if>
      <if test="adddeptid != null" >
        #{adddeptid},
      </if>
      <if test="adddeptname != null" >
        #{adddeptname},
      </if>
      <if test="1 == 1" >
        now(),
      </if>
      <if test="physicsremark != null" >
        #{physicsremark},
      </if>
      <if test="field10 != null" >
        #{field10},
      </if>
      <if test="field11 != null" >
        #{field11},
      </if>
      <if test="field12 != null" >
        #{field12},
      </if>
      <if test="newtotalbuynum != null" >
        #{newtotalbuynum},
      </if>
      <if test="newtotalbuyamount != null" >
        #{newtotalbuyamount},
      </if>
      <if test="costaccountprice != null">
      	#{costaccountprice},
      </if>
      <if test="minimum != null">
      	#{minimum},
      </if>
        <if test="jsgoodsid != null" >
             #{jsgoodsid},
        </if>
        <if test="jsgoodsmodifytime != null" >
             #{jsgoodsmodifytime},
        </if>
        <if test="jsgoodsmodifyuserid != null" >
             #{jsgoodsmodifyuserid},
        </if>
        <if test="jsgoodsmodifyusername != null" >
            #{jsgoodsmodifyusername},
        </if>
        <if test="jstaxsortid != null" >
            #{jstaxsortid},
        </if>
    </trim>
  </insert>
  <!-- 修改商品 -->
  <update id="editGoodsInfo" parameterType="com.hd.agent.basefiles.model.GoodsInfo">
  	update t_base_goods_info
    <set >
      <if test="id != null" >
        id = #{id},
      </if>
      <if test="name != null" >
        name = #{name},
      </if>
      <if test="pinyin != null" >
        pinyin = #{pinyin},
      </if>
      <if test="state != null" >
        state = #{state},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
      <if test="model != null" >
        model = #{model},
      </if>
      <if test="mainunit != null" >
        mainunit = #{mainunit},
      </if>
      <if test="goodstype != null" >
        goodstype = #{goodstype},
      </if>
      <if test="spell != null" >
        spell = #{spell},
      </if>
      <if test="brand != null" >
        brand = #{brand},
      </if>
      <if test="deptid != null" >
        deptid = #{deptid},
      </if>
      <if test="abclevel != null" >
        abclevel = #{abclevel},
      </if>
      <if test="defaultsort != null" >
        defaultsort = #{defaultsort},
      </if>
      <if test="barcode != null" >
        barcode = #{barcode},
      </if>
      <if test="boxbarcode != null" >
        boxbarcode = #{boxbarcode},
      </if>
      <if test="itemno != null" >
        itemno = #{itemno},
      </if>
      <if test="bstype != null" >
        bstype = #{bstype},
      </if>
      <if test="productfield != null" >
        productfield = #{productfield},
      </if>
      <if test="sortkey != null" >
        sortkey = #{sortkey},
      </if>
      <if test="isinoutstorage != null" >
        isinoutstorage = #{isinoutstorage},
      </if>
      <if test="storageid != null" >
        storageid = #{storageid},
      </if>
      <if test="storagelocation != null" >
        storagelocation = #{storagelocation},
      </if>
      <if test="isbatch != null" >
        isbatch = #{isbatch},
      </if>
      <if test="isstoragelocation != null" >
        isstoragelocation = #{isstoragelocation},
      </if>
      <if test="isshelflife != null" >
        isshelflife = #{isshelflife},
      </if>
      <if test="shelflife != null" >
        shelflife = #{shelflife},
      </if>
      <if test="shelflifeunit != null" >
        shelflifeunit = #{shelflifeunit},
      </if>
      <if test="highestbuyprice != null" >
        highestbuyprice = #{highestbuyprice},
      </if>
      <if test="lowestsaleprice != null" >
        lowestsaleprice = #{lowestsaleprice},
      </if>
      <if test="basesaleprice != null" >
        basesaleprice = #{basesaleprice},
      </if>
      <if test="highestinventory != null" >
        highestinventory = #{highestinventory},
      </if>
      <if test="lowestinventory != null" >
        lowestinventory = #{lowestinventory},
      </if>
      <if test="safeinventory != null" >
        safeinventory = #{safeinventory},
      </if>
      <if test="normalprice != null" >
        normalprice = #{normalprice},
      </if>
      <if test="checktype != null" >
        checktype = #{checktype},
      </if>
      <if test="checkdate != null" >
        checkdate = #{checkdate},
      </if>
      <if test="checkunit != null" >
        checkunit = #{checkunit},
      </if>
      <if test="defaultbuyer != null" >
        defaultbuyer = #{defaultbuyer},
      </if>
      <if test="defaultsaler != null" >
        defaultsaler = #{defaultsaler},
      </if>
      <if test="defaultsupplier != null" >
        defaultsupplier = #{defaultsupplier},
      </if>
      <if test="secondsupplier != null" >
        secondsupplier = #{secondsupplier},
      </if>
      <if test="defaulttaxtype != null" >
        defaulttaxtype = #{defaulttaxtype},
      </if>
      <if test="planmargin != null" >
        planmargin = #{planmargin},
      </if>
      <if test="newbuyprice != null" >
        newbuyprice = #{newbuyprice},
      </if>
      <if test="newsaleprice != null" >
        newsaleprice = #{newsaleprice},
      </if>
      <if test="newstorageprice != null" >
        newstorageprice = #{newstorageprice},
      </if>
      <if test="newbuydate != null" >
        newbuydate = #{newbuydate},
      </if>
      <if test="newsaledate != null" >
        newsaledate = #{newsaledate},
      </if>
      <if test="everybillaveragesales != null" >
        everybillaveragesales = #{everybillaveragesales},
      </if>
      <if test="newinstroragedate != null" >
        newinstroragedate = #{newinstroragedate},
      </if>
      <if test="newoutstoragedate != null" >
        newoutstoragedate = #{newoutstoragedate},
      </if>
      <if test="newinventory != null" >
        newinventory = #{newinventory},
      </if>
      <if test="newcheckdate != null" >
        newcheckdate = #{newcheckdate},
      </if>
      <if test="gshape != null" >
        gshape = #{gshape},
      </if>
      <if test="glength != null" >
        glength = #{glength},
      </if>
      <if test="gmlength != null" >
        gmlength = #{gmlength},
      </if>
      <if test="gwidth != null" >
        gwidth = #{gwidth},
      </if>
      <if test="gmwidth != null" >
        gmwidth = #{gmwidth},
      </if>
      <if test="ghight != null" >
        ghight = #{ghight},
      </if>
      <if test="gmhight != null" >
        gmhight = #{gmhight},
      </if>
      <if test="gdiameter != null" >
        gdiameter = #{gdiameter},
      </if>
      <if test="gmdiameter != null" >
        gmdiameter = #{gmdiameter},
      </if>
      <if test="grossweight != null" >
        grossweight = #{grossweight},
      </if>
      <if test="netweight != null" >
        netweight = #{netweight},
      </if>
      <if test="totalweight != null" >
        totalweight = #{totalweight},
      </if>
      <if test="totalvolume != null" >
        totalvolume = #{totalvolume},
      </if>
      <if test="singlevolume != null" >
        singlevolume = #{singlevolume},
      </if>
      <if test="kgweight != null" >
        kgweight = #{kgweight},
      </if>
      <if test="image != null" >
        image = #{image},
      </if>
      <if test="imageids != null" >
        imageids = #{imageids},
      </if>
      <if test="field01 != null" >
        field01 = #{field01},
      </if>
      <if test="field02 != null" >
        field02 = #{field02},
      </if>
      <if test="field03 != null" >
        field03 = #{field03},
      </if>
      <if test="field04 != null" >
        field04 = #{field04},
      </if>
      <if test="field05 != null" >
        field05 = #{field05},
      </if>
      <if test="field06 != null" >
        field06 = #{field06},
      </if>
      <if test="field07 != null" >
        field07 = #{field07},
      </if>
      <if test="field08 != null" >
        field08 = #{field08},
      </if>
      <if test="field09 != null" >
        field09 = #{field09},
      </if>
      <if test="modifyuserid != null" >
        modifyuserid = #{modifyuserid},
      </if>
      <if test="modifyusername != null" >
        modifyusername = #{modifyusername},
      </if>
      <if test="1 == 1" >
        modifytime = now(),
      </if>
      <if test="physicsremark != null" >
        physicsremark = #{physicsremark},
      </if>
      <if test="field10 != null" >
        field10 = #{field10},
      </if>
      <if test="field11 != null" >
        field11 = #{field11},
      </if>
      <if test="field12 != null" >
        field12 = #{field12},
      </if>
      <if test="newtotalbuynum != null" >
        newtotalbuynum = #{newtotalbuynum},
      </if>
      <if test="newtotalbuyamount != null" >
        newtotalbuyamount = #{newtotalbuyamount},
      </if>      
      <if test="costaccountprice != null">
      	costaccountprice = #{costaccountprice},
      </if>
      <if test="minimum != null">
      	minimum = #{minimum},
      </if>
        <if test="jsgoodsid != null" >
            jsgoodsid = #{jsgoodsid},
        </if>
        <if test="jsgoodsmodifytime != null" >
            jsgoodsmodifytime = #{jsgoodsmodifytime},
        </if>
        <if test="jsgoodsmodifyuserid != null" >
            jsgoodsmodifyuserid = #{jsgoodsmodifyuserid},
        </if>
        <if test="jsgoodsmodifyusername != null" >
            jsgoodsmodifyusername = #{jsgoodsmodifyusername},
        </if>
        <if test="jstaxsortid != null" >
            jstaxsortid = #{jstaxsortid},
        </if>
    </set>
    where id = #{oldId}
  </update>
  <update id="editMoreGoodsInfo" parameterType="com.hd.agent.basefiles.model.GoodsInfo">
  	update t_base_goods_info
    <set >
      <if test="name != null" >
        name = #{name},
      </if>
      <if test="state != null" >
        state = #{state},
      </if>
      <if test="brand != null and brand != ''" >
        brand = #{brand},
      </if>
      <if test="deptid != null and deptid != ''" >
        deptid = #{deptid},
      </if>
      <if test="defaultsort != null and defaultsort != ''" >
        defaultsort = #{defaultsort},
      </if>
      <if test="storageid != null and storageid != ''" >
        storageid = #{storageid},
      </if>
      <if test="storagelocation != null and storagelocation != ''" >
        storagelocation = #{storagelocation},
      </if>
      <if test="isbatch != null and isbatch != ''" >
        isbatch = #{isbatch},
      </if>
      <if test="isstoragelocation != null and isstoragelocation != ''" >
        isstoragelocation = #{isstoragelocation},
      </if>
      <if test="defaultbuyer != null and defaultbuyer != ''" >
        defaultbuyer = #{defaultbuyer},
      </if>
      <if test="defaultsaler != null and defaultsaler != ''" >
        defaultsaler = #{defaultsaler},
      </if>
      <if test="defaultsupplier != null and defaultsupplier != ''" >
        defaultsupplier = #{defaultsupplier},
      </if>
      <if test="secondsupplier != null and secondsupplier != ''" >
        secondsupplier = #{secondsupplier},
      </if>
        <if test="isshelflife != null and isshelflife != ''" >
            isshelflife = #{isshelflife},
        </if>
        <if test="shelflife != null" >
            shelflife = #{shelflife},
        </if>
        <if test="shelflifeunit != null and shelflifeunit != ''" >
            shelflifeunit = #{shelflifeunit},
        </if>
      <if test="defaulttaxtype != null and defaulttaxtype != ''" >
        defaulttaxtype = #{defaulttaxtype},
      </if>
      <if test="goodstype != null and goodstype != ''" >
        goodstype = #{goodstype},
      </if>
        <if test="bstype != null and bstype != ''" >
            bstype = #{bstype},
        </if>
        <if test="itemno != null and itemno != ''" >
            itemno = #{itemno},
        </if>
        <if test="productfield != null and productfield != ''" >
            productfield = #{productfield},
        </if>
      <if test="modifyuserid != null" >
        modifyuserid = #{modifyuserid},
      </if>
      <if test="modifyusername != null" >
        modifyusername = #{modifyusername},
      </if>
      <if test="1 == 1" >
        modifytime = now(),
      </if>
    </set>
    where id = #{oldId}
  </update>
  <update id="editGoodsImageInfo" parameterType="com.hd.agent.basefiles.model.GoodsInfo">
  	update t_base_goods_info
    <set>
    	<if test="image != null" >
        image = #{image},
      </if>
      <if test="imageids != null" >
        imageids = #{imageids},
      </if>
    </set>
    where id = #{id}
  </update>
  <!-- 判断商品ID是否重复或商品是否存在-->
  <select id="isRepeatGoodsInfoID" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info  where id = #{id}
  </select>
  <!-- 判断商品名称是否重复 -->
  <select id="isRepeatGoodsInfoName" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info  where name = #{name}
  </select>
  <!-- 判断条形码是否重复 -->
  <select id="isRepeatGoodsInfoBarcode" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info  where barcode = #{barcode}
  </select>
  <!-- 判断箱装条形码是否重复 -->
  <select id="isRepeatGoodsInfoBoxbarcode" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info  where boxbarcode = #{boxbarcode}
  </select>
  <!-- 判断货号是否重复 -->
  <select id="isRepeatGoodsInfoItemno" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info  where itemno = #{itemno}
  </select>
  <sql id="GoodsSelectListData_sql">
      select g.id,'0' as ptype, g.name,g.pinyin, g.state, g.remark,g.model, g.mainunit, g.goodstype, g.spell, g.brand,g.deptid, g.abclevel, g.defaultsort,
      g.barcode, g.boxbarcode, g.itemno, g.bstype,g.productfield, g.sortkey, g.isinoutstorage, g.storageid, g.storagelocation,
      g.isbatch, g.isstoragelocation, g.isshelflife, g.shelflife, g.shelflifeunit, g.highestbuyprice,
      g.lowestsaleprice, g.basesaleprice, g.highestinventory, g.lowestinventory, g.safeinventory,
      g.normalprice, g.checktype, g.checkdate, g.checkunit, g.defaultbuyer, g.defaultsaler, g.defaultsupplier,
      g.defaulttaxtype, g.planmargin, g.newbuyprice, g.newsaleprice, g.newstorageprice
      <if test="condition.customerid != null">
          ,cp.shopid as shopid, case when cg.id is null then '1' else '0' end isnew
      </if>
      from t_base_goods_info  g
      <if test="condition.storageid != null">
          left join t_storage_summary t on g.id=t.goodsid
      </if>
      <if test="condition.customerid != null">
          left join t_base_sales_customer_price cp on cp.goodsid=g.id
          and (cp.customerid=#{condition.customerid}
          <if test="condition.pcustomerid != null">
              or cp.customerid=#{condition.pcustomerid}
          </if>)
          left join t_base_sales_customer_goods cg on cg.goodsid = g.id and cg.customerid=#{condition.customerid}
      </if>
      <choose>
          <when test="condition.isBrandUser != null">
              LEFT JOIN t_base_personnel_brand pc on g.brand=pc.brandid and pc.personid=#{condition.personnelid}
          </when>
          <when test="condition.isSupplierUser !=null">
              LEFT JOIN t_base_personnel_supplier_brand pc on g.brand=pc.brandid and pc.personid=#{condition.personnelid}
          </when>
      </choose>
      <trim prefix="where" prefixOverrides="and|or">
          <choose>
              <when test="condition.isBrandUser != null">
                  <if test="condition.datasql != null" >
                      and (${condition.datasql} or pc.personid=#{condition.personnelid})
                  </if>
                  <if test="condition.datasql == null" >
                      and  pc.personid=#{condition.personnelid}
                  </if>
              </when>
              <when test="condition.isSupplierUser != null">
                  <if test="condition.datasql != null" >
                      and (${condition.datasql} or pc.personid=#{condition.personnelid})
                  </if>
                  <if test="condition.datasql == null" >
                      and  pc.personid=#{condition.personnelid}
                  </if>
              </when>
              <otherwise>
                  <if test="condition.datasql != null" >
                      and ${condition.datasql}
                  </if>
              </otherwise>
          </choose>
          <choose>
              <when test="condition.storageid != null">
                  <if test="condition.paramRuleSql != null">and (t.storageid=#{condition.storageid} or ${condition.paramRuleSql})</if>
                  <if test="condition.paramRuleSql == null">and t.storageid=#{condition.storageid}</if>
              </when>
              <when test="condition.storageid == null">
                  <if test="condition.paramRuleSql != null">and ${condition.paramRuleSql}</if>
              </when>
          </choose>
          <if test="condition.id != null" >
              and (g.pinyin like '%${condition.id}%' or g.name like '%${condition.id}%' or g.barcode like '%${condition.id}'
              or g.model like '${condition.id}%'
              or g.spell like '%${condition.id}%'
              or g.id like '${condition.id}%'
              <if test="condition.customerid != null">
                  or cp.shopid like '${condition.id}%'
              </if>
              <if test="condition.con != null">
                  or (
                  <trim prefix="" prefixOverrides="and|or">
                      <foreach collection="condition.con" index="index" item="item">
                          and g.name like '%${item}%'
                      </foreach>
                  </trim>
                  )
              </if>
              )
          </if>
          <choose>
              <when test="condition.isShowAll == 1">
                  and (g.state = '1' or g.state = '0')
              </when>
              <when test="condition.isShowAll == 2">
                  and g.state = '1'
              </when>
              <otherwise>
                  and g.state = '1'
              </otherwise>
          </choose>
          <if test="condition.queryAllBySupplier != null" >
              and (g.defaultsupplier = #{condition.queryAllBySupplier} or FIND_IN_SET(#{condition.queryAllBySupplier},g.secondsupplier))
          </if>
          <choose>
              <when test="condition.canBuySale == 1">
                  and (g.bstype='1' or g.bstype='2')	<!-- 购销、可购 -->
              </when>
              <when test="condition.canBuySale == 2">
                  and (g.bstype='1' or g.bstype='3')	<!-- 购销、可销 -->
              </when>
              <when test="condition.canBuySale == 3">
                  and g.bstype='2'	<!-- 只可采购 ，不包含销售-->
              </when>
              <when test="condition.canBuySale == 4">
                  and g.bstype='3'	<!-- 只可销售，不包含采购-->
              </when>
          </choose>

          <!-- 分销规则 start -->
          <if test="condition.okDistributions != null">
              and ( 1 = 2
              <foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.id in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.goodsid != '' and rd.goodsid is not null and rd.ruleid in(" close="))">
                  #{distribution.id }
              </foreach>
              <foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.brand in (select brandid from t_base_sales_distribution_rule_detail rd where rd.brandid != '' and rd.brandid is not null and rd.ruleid in(" close="))">
                  #{distribution.id }
              </foreach>
              <foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.defaultsort in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.goodssort != '' and rd.goodssort is not null and rd.ruleid in(" close="))">
                  #{distribution.id }
              </foreach>
              <foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.goodstype in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.goodstype != '' and rd.goodstype is not null and rd.ruleid in(" close="))">
                  #{distribution.id }
              </foreach>
              <foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.defaultsupplier in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.supplierid != '' and rd.supplierid is not null and rd.ruleid in(" close="))">
                  #{distribution.id }
              </foreach>
              )
          </if>
          <if test="condition.ngDistributions != null">
              <foreach collection="condition.ngDistributions" item="distribution" separator="" open="  " close="">
                  and
                  <choose>
                      <when test="distribution.goodsruletype == 1">
                          g.id not in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodsid != '' and rd.goodsid is not null )
                      </when>
                      <when test="distribution.goodsruletype == 2">
                          g.brand not in (select brandid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.brandid != '' and rd.brandid is not null )
                      </when>
                      <when test="distribution.goodsruletype == 3">
                          g.defaultsort not in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodssort != '' and rd.goodssort is not null )
                      </when>
                      <when test="distribution.goodsruletype == 4">
                          g.goodstype not in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodstype != '' and rd.goodstype is not null )
                      </when>
                      <when test="distribution.goodsruletype == 5">
                          g.defaultsupplier not in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.supplierid != '' and rd.supplierid is not null )
                      </when>
                      <otherwise>
                          1 = 2
                      </otherwise>
                  </choose>
              </foreach>
          </if>
          <!-- 分销规则 end -->
          group by g.id
      </trim>
      <if test="condition.isPromotion != null">
          UNION ALL
          select p.groupid as id,p.ptype,p.groupname as name,p.pinyin,p.status as state,p.remark,'' as model,'' as mainunit, '' as goodstype,'' as spell, '' as brand,'' as deptid, '' as abclevel, '' as defaultsort,
          GROUP_CONCAT(DISTINCT g.barcode) as barcode, GROUP_CONCAT(DISTINCT g.boxbarcode) as boxbarcode, '' as itemno, '' as bstype,'' as productfield, '' as sortkey, '' as isinoutstorage, '' as storageid, '' as storagelocation,
          '' as isbatch, '' as isstoragelocation, '' as isshelflife, '' as shelflife, '' as shelflifeunit, 0 as highestbuyprice,
          0 as lowestsaleprice, 0 as basesaleprice, 0 as highestinventory, 0 as lowestinventory, 0 as safeinventory,
          0 as normalprice, '' as checktype, '' as checkdate, '' as checkunit, '' as defaultbuyer, '' as defaultsaler, '' as defaultsupplier,
          '' as defaulttaxtype, '' as planmargin, 0 as newbuyprice, t1.price as newsaleprice, 0 as newstorageprice
          <if test="condition.customerid != null">
              ,'' as shopid, '' as isnew
          </if>
          from t_sales_promotion_package t2
          INNER JOIN t_sales_promotion_package_group p on t2.id=p.billid and ((p.limitnum>0 and p.remainnum>0) or p.limitnum=0)
          INNER JOIN t_sales_promotion_package_group_detail t1 on p.groupid=t1.groupid and p.billid=t1.billid
          LEFT JOIN t_base_goods_info  g on t1.goodsid=g.id
          <if test="condition.storageid != null">
              left join t_storage_summary t on g.id=t.goodsid
          </if>
          <choose>
              <when test="condition.isBrandUser != null">
                  LEFT JOIN t_base_personnel_brand pc on g.brand=pc.brandid and pc.personid=#{condition.personnelid}
              </when>
              <when test="condition.isSupplierUser !=null">
                  LEFT JOIN t_base_personnel_supplier_brand pc on g.brand=pc.brandid and pc.personid=#{condition.personnelid}
              </when>
          </choose>
          <trim prefix="where" prefixOverrides="and|or">
              <choose>
                  <when test="condition.isBrandUser != null">
                      <if test="condition.datasql != null" >
                          and (${condition.datasql} or pc.personid=#{condition.personnelid})
                      </if>
                      <if test="condition.datasql == null" >
                          and  pc.personid=#{condition.personnelid}
                      </if>
                  </when>
                  <when test="condition.isSupplierUser != null">
                      <if test="condition.datasql != null" >
                          and (${condition.datasql} or pc.personid=#{condition.personnelid})
                      </if>
                      <if test="condition.datasql == null" >
                          and  pc.personid=#{condition.personnelid}
                      </if>
                  </when>
                  <otherwise>
                      <if test="condition.datasql != null" >
                          and ${condition.datasql}
                      </if>
                  </otherwise>
              </choose>
              <choose>
                  <when test="condition.storageid != null">
                      <if test="condition.paramRuleSql != null">and (t.storageid=#{condition.storageid} or ${condition.paramRuleSql})</if>
                      <if test="condition.paramRuleSql == null">and t.storageid=#{condition.storageid}</if>
                  </when>
                  <when test="condition.storageid == null">
                      <if test="condition.paramRuleSql != null">and ${condition.paramRuleSql}</if>
                  </when>
              </choose>
              <if test="condition.id != null" >
                  and (g.pinyin like '%${condition.id}%' or g.name like '%${condition.id}%' or g.barcode like '%${condition.id}'
                  or g.spell like '%${condition.id}%'
                  or g.model like '${condition.id}%'
                  or g.id like '${condition.id}%' or p.groupid like '%${condition.id}%'
                  <if test="condition.con != null">
                      or (
                      <trim prefix="" prefixOverrides="and|or">
                          <foreach collection="condition.con" index="index" item="item">
                              and g.name like '%${item}%'
                          </foreach>
                      </trim>
                      )
                  </if>
                  )
              </if>
              <choose>
                  <when test="condition.isShowAll == 1">
                      and (g.state = '1' or g.state = '0')
                  </when>
                  <when test="condition.isShowAll == 2">
                      and g.state = '1'
                  </when>
                  <otherwise>
                      and g.state = '1'
                  </otherwise>
              </choose>
              <if test="condition.promotionMap != null " >
                  and (
                  <if test="1==1">
                      (t2.customertype = '0')
                  </if>
                  <if test="condition.promotionMap.customerid !=null">
                      or (t2.customertype = '1' and FIND_IN_SET(#{condition.promotionMap.customerid},t2.customerid))
                  </if>
                  <if test="condition.promotionMap.promotionsort !=null">
                      or (t2.customertype = '2' and FIND_IN_SET(#{condition.promotionMap.promotionsort},t2.customerid))
                  </if>
                  <if test="condition.promotionMap.customersort !=null">
                      or (t2.customertype = '3' and FIND_IN_SET(#{condition.promotionMap.customersort},t2.customerid))
                  </if>
                  <if test="condition.promotionMap.pricesort !=null">
                      or (t2.customertype = '4' and FIND_IN_SET(#{condition.promotionMap.pricesort},t2.customerid))
                  </if>
                  <if test="condition.promotionMap.salesarea !=null">
                      or (t2.customertype = '5' and FIND_IN_SET(#{condition.promotionMap.salesarea},t2.customerid))
                  </if>
                  <if test="condition.promotionMap.pcustomerid !=null">
                      or (t2.customertype = '6' and FIND_IN_SET(#{condition.promotionMap.pcustomerid},t2.customerid))
                  </if>
                  <if test="condition.promotionMap.credit !=null">
                      or (t2.customertype = '7' and FIND_IN_SET(#{condition.promotionMap.credit},t2.customerid))
                  </if>
                  <if test="condition.promotionMap.canceltype !=null">
                      or (t2.customertype = '8' and FIND_IN_SET(#{condition.promotionMap.canceltype},t2.customerid))
                  </if>
                  )
                  <![CDATA[and t2.status='3' and t2.begindate<=DATE_FORMAT(now(),'%Y-%m-%d') and t2.enddate>=DATE_FORMAT(now(),'%Y-%m-%d') ]]>
              </if>
              <if test="condition.queryAllBySupplier != null" >
                  and (g.defaultsupplier = #{condition.queryAllBySupplier} or FIND_IN_SET(#{condition.queryAllBySupplier},g.secondsupplier))
              </if>
              <choose>
                  <when test="condition.canBuySale == 1">
                      and (g.bstype='1' or g.bstype='2')	<!-- 购销、可购 -->
                  </when>
                  <when test="condition.canBuySale == 2">
                      and (g.bstype='1' or g.bstype='3')	<!-- 购销、可销 -->
                  </when>
                  <when test="condition.canBuySale == 3">
                      and g.bstype='2'	<!-- 只可采购 ，不包含销售-->
                  </when>
                  <when test="condition.canBuySale == 4">
                      and g.bstype='3'	<!-- 只可销售，不包含采购-->
                  </when>
              </choose>
              <if test="1==1">
                  and (p.ptype = '1' or p.ptype='2')
              </if>
          </trim>
          GROUP BY p.groupid
      </if>
  </sql>
  <select id="getGoodsSelectListData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.GoodsInfo" useCache="false">
  	select * from (
      <include refid="GoodsSelectListData_sql"/>
    ) z
    order by z.ptype desc,z.id asc
	<include refid="common.Page_limit"/>
  </select>
  <select id="getGoodsSelectListDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int" useCache="false">
  	select count(1) from (
      <include refid="GoodsSelectListData_sql"/>
  	) z
  </select>
    <select id="getGoodsSelectListDataSimple" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.GoodsInfo">
        select g.id,'0' as ptype, g.name,g.pinyin, g.state, g.remark,g.model, g.mainunit, g.goodstype, g.spell, g.brand,g.deptid, g.abclevel, g.defaultsort,
        g.barcode, g.boxbarcode, g.itemno, g.bstype,g.productfield, g.sortkey, g.isinoutstorage, g.storageid, g.storagelocation,
        g.isbatch, g.isstoragelocation, g.isshelflife, g.shelflife, g.shelflifeunit, g.highestbuyprice,
        g.lowestsaleprice, g.basesaleprice, g.highestinventory, g.lowestinventory, g.safeinventory,
        g.normalprice, g.checktype, g.checkdate, g.checkunit, g.defaultbuyer, g.defaultsaler, g.defaultsupplier,
        g.defaulttaxtype, g.planmargin, g.newbuyprice, g.newsaleprice, g.newstorageprice
        from t_base_goods_info g
        <trim prefix="where" prefixOverrides="and|or">
            <if test="condition.id != null" >
                and (g.id like '%${condition.id}%' or g.name like '%${condition.id}%' )
            </if>
        </trim>
        order by id
        limit 0 , 10
    </select>
  <!-- 回写商品信息 -->
  <update id="updateGoodsInfoWriteBack" parameterType="com.hd.agent.basefiles.model.GoodsInfo">
   	update t_base_goods_info
    <set >
      <if test="newbuyprice != null" >
        newbuyprice = #{newbuyprice},
      </if>
      <if test="newsaleprice != null" >
        newsaleprice = #{newsaleprice},
      </if>
      <if test="newstorageprice != null" >
        newstorageprice = #{newstorageprice},
      </if>
      <if test="newbuydate != null" >
        newbuydate = #{newbuydate},
      </if>
      <if test="newsaledate != null" >
        newsaledate = #{newsaledate},
      </if>
      <if test="everybillaveragesales != null" >
        everybillaveragesales = #{everybillaveragesales},
      </if>
      <if test="newinstroragedate != null" >
        newinstroragedate = #{newinstroragedate},
      </if>
      <if test="newoutstoragedate != null" >
        newoutstoragedate = #{newoutstoragedate},
      </if>
      <if test="newinventory != null" >
        newinventory = #{newinventory},
      </if>
      <if test="newcheckdate != null" >
        newcheckdate = #{newcheckdate},
      </if>
      <if test="newtotalbuynum != null" >
        newtotalbuynum = #{newtotalbuynum},
      </if>
      <if test="newtotalbuyamount != null" >
        newtotalbuyamount = #{newtotalbuyamount},
      </if>
      <if test="highestbuyprice != null" >
        highestbuyprice = #{highestbuyprice},
      </if>  
     </set>
     where id=#{id}
  </update>
  
    <!-- 商品档案修改后对应商品的对应合同价的箱价数据更新 -->
    <update id="editGoodsInfoChangeCustomerPriceCtcboxprice" parameterType="map">
        UPDATE t_base_sales_customer_price t,t_base_goods_info  g,t_base_goods_info_meteringunit  gm
        set t.ctcboxprice = t.price*gm.rate
        where t.goodsid = g.id and g.id = gm.goodsid and gm.isdefault = '1'
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
    </update>
  <!-- 商品修改后更新相关销售单据 -->
    <update id="editGoodsInfoChangeDemandDetail" parameterType="map">
        UPDATE t_sales_demand_detail t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.branddept = g.deptid,
        t.supplierid = g.defaultsupplier,
        t.goodssort = g.defaultsort
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGoodsInfoChangeDispatchbillDetail" parameterType="map">
        UPDATE t_sales_dispatchbill_detail t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.branddept = g.deptid,
        t.supplierid = g.defaultsupplier,
        t.goodssort = g.defaultsort
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGoodsInfoChangeOrderCarDetail" parameterType="map">
        UPDATE t_sales_order_car_detail t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.branddept = g.deptid,
        t.supplierid = g.defaultsupplier,
        t.goodssort = g.defaultsort
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGoodsInfoChangeOrderDetail" parameterType="map">
        UPDATE t_sales_order_detail t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.branddept = g.deptid,
        t.supplierid = g.defaultsupplier,
        t.goodssort = g.defaultsort
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGoodsInfoChangeReceiptDetail" parameterType="map">
        UPDATE t_sales_receipt_detail t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.branddept = g.deptid,
        t.supplierid = g.defaultsupplier,
        t.goodssort = g.defaultsort
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGoodsInfoChangeRejectbillDetail" parameterType="map">
        UPDATE t_sales_rejectbill_detail t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.branddept = g.deptid,
        t.supplierid = g.defaultsupplier,
        t.goodssort = g.defaultsort
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGoodsInfoChangeSaleoutDetail" parameterType="map">
        UPDATE t_storage_saleout_detail t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.branddept = g.deptid,
        t.supplierid = g.defaultsupplier,
        t.goodssort = g.defaultsort
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGoodsInfoChangeSalerejectEnterDetail" parameterType="map">
        UPDATE t_storage_salereject_enter_detail t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.branddept = g.deptid,
        t.supplierid = g.defaultsupplier,
        t.goodssort = g.defaultsort
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGoodsInfoChangeInvoiceDetail" parameterType="map">
        UPDATE t_account_sales_invoice_detail t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.branddept = g.deptid,
        t.supplierid = g.defaultsupplier,
        t.goodssort = g.defaultsort
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGoodsInfoChangeInvoiceBillDetail" parameterType="map">
        UPDATE t_account_sales_invoicebill_detail t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.branddept = g.deptid,
        t.supplierid = g.defaultsupplier,
        t.goodssort = g.defaultsort
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <!-- 进销存 -->
    <update id="editStorageDayCauseOfGoodsChange" parameterType="map">
        UPDATE t_report_storage_day t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.deptid = g.deptid,
        t.supplierid = g.defaultsupplier
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editStorageMonthCauseOfGoodsChange" parameterType="map">
        UPDATE t_report_storage_month t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.deptid = g.deptid,
        t.supplierid = g.defaultsupplier
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editStorageRealDayCauseOfGoodsChange" parameterType="map">
        UPDATE t_report_storage_day_real t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.deptid = g.deptid,
        t.supplierid = g.defaultsupplier
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editStorageRealMonthCauseOfGoodsChange" parameterType="com.hd.agent.basefiles.model.GoodsInfo">
        UPDATE t_report_storage_month_real t,t_base_goods_info  g
        set t.brandid = g.brand,
        t.deptid = g.deptid,
        t.supplierid = g.defaultsupplier
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <select id="getChangeDaysUpdateGoodsList" parameterType="map" resultType="com.hd.agent.basefiles.model.GoodsInfo">
        SELECT t.id, t.name,t.mainunit, t.brand,t.deptid, t.defaultsort,t1.meteringunitid as auxunitid
        FROM t_base_goods_info  t
        left JOIN t_base_goods_info_meteringunit  t1 ON t.id = t1.goodsid and t1.isdefault = '1'
        where t.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
    </select>
    <update id="editStorageDataCauseOfGoodsChange" parameterType="com.hd.agent.basefiles.model.GoodsInfo">
        update t_storage_summary
        set
        brandid = #{brand},
        branddept = #{deptid},
        unitid = #{mainunit},
        unitname = #{mainunitName},
        auxunitid = #{auxunitid},
        auxunitname = #{auxunitname}
        where goodsid = #{id};
        update t_storage_summary_batch
        set
        brandid = #{brand},
        branddept = #{deptid},
        unitid = #{mainunit},
        unitname = #{mainunitName},
        auxunitid = #{auxunitid},
        auxunitname = #{auxunitname}
        where goodsid = #{id};
    </update>
  <!-- 商品修改后更新采购单据 -->
  <update id="editGoodsInfoPurchaseArrivalOrder" parameterType="map">
  	UPDATE t_purchase_arrivalorder_detail t,t_base_goods_info  g
        set t.brandid = g.brand
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
  </update>
  <update id="editGoodsInfoPurchaseEnter" parameterType="map">
  	UPDATE t_storage_purchase_enter_detail t,t_base_goods_info  g
        set t.brandid = g.brand
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
  </update>
  <update id="editGoodsInfoPurchaserejectOut" parameterType="map">
  	UPDATE t_storage_purchasereject_out_detail t,t_base_goods_info  g
        set t.brandid = g.brand
        WHERE t.goodsid = g.id
        and g.modifytime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
  </update>
  
  <!-- 辅计量单位 -->
  <sql id="Base_MteringUnitInfoColumn_List" >
    id, goodsid, meteringunitid, type, mode, rate, remark,isdefault,barcode
  </sql>
  <!-- 根据商品编号获取辅计量单位列表 -->
  <select id="getMeteringUnitInfoList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.GoodsInfo_MteringUnitInfo">
  	select
  	<include refid="Base_MteringUnitInfoColumn_List"/>
  	from t_base_goods_info_meteringunit
  	<trim prefix="where" prefixOverrides="and|or">
  		<if test="condition.goodsid != null">
  			and goodsid = #{condition.goodsid}
  		</if>
  		<include refid="common.Page_dataSql"/>
  	</trim>
  </select>
  <!-- 根据商品档案编号获取辅助计量为列表 -->
  <select id="getMUListByGoodsId" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo_MteringUnitInfo">
  	select * from t_base_goods_info_meteringunit  where goodsid = #{goodsid}
  </select>
  <!--根据商品编号获取计量单位列表数量 -->
  <select id="getMUCountByGoodsId" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info_meteringunit  where goodsid = #{goodsid}
  </select>
  <!-- 根据商品编码、默认辅计量单位为是获取辅单位详情 -->
  <select id="getMUInfoByGoodsIdAndIsdefault" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo_MteringUnitInfo">
  	select * from t_base_goods_info_meteringunit  where goodsid = #{goodsid} and isdefault = '1'
  </select>
  <select id="getGoodsInfoMU" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo_MteringUnitInfo">
  	select * from t_base_goods_info_meteringunit  where goodsid = #{goodsid} and meteringunitid = #{meteringunitid}
  </select>
  <!-- 根据编号删除辅计量单位 -->
  <delete id="deleteMeteringUnitInfos">
  	delete from t_base_goods_info_meteringunit
  	where id in
  	<foreach collection="idsArr" item="item" open="(" separator="," close=")">
  		#{item}
  	</foreach>
  </delete>
  <!-- 批量新增辅计量单位 -->
  <insert id="addMeteringUnitInfos" parameterType="java.util.Map">
  	<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE">
  		select last_insert_id() as id 
  	</selectKey>
  	insert into t_base_goods_info_meteringunit  (goodsid, meteringunitid, type, mode, rate, remark, isdefault,barcode)
  	values
  	<foreach collection="meteringUnitListMap" item="item" separator=",">
  		(#{item.goodsid},#{item.meteringunitid},#{item.type},#{item.mode},#{item.rate},#{item.remark},#{item.isdefault},#{item.barcode})
  	</foreach>
  </insert>
  <!-- 修改辅计量单位 -->
  <update id="editMeteringUnitInfo" parameterType="com.hd.agent.basefiles.model.GoodsInfo_MteringUnitInfo">
  	 update t_base_goods_info_meteringunit
    <set >
      <if test="goodsid != null" >
        goodsid = #{goodsid},
      </if>
      <if test="meteringunitid != null" >
        meteringunitid = #{meteringunitid},
      </if>
      <if test="type != null" >
        type = #{type},
      </if>
      <if test="mode != null" >
        mode = #{mode},
      </if>
      rate = #{rate},
      <if test="remark != null" >
        remark = #{remark},
      </if>
      <if test="isdefault != null" >
        isdefault = #{isdefault},
      </if>
      <if test="barcode != null" >
        barcode = #{barcode},
      </if>
    </set>
    where id = #{id}
  </update>
  <!-- 根据商品编号删除辅计量单位 -->
  <delete id="deleteMereringUnitInfoByGoodsId" parameterType="java.lang.String">
  	delete from t_base_goods_info_meteringunit  where goodsid = #{goodsid}
  </delete>
  <!-- 根据商品编码删除默认计量单位为是的辅计量单位 -->
  <delete id="deleteMUInfoByGoodsidAndIsdefault" parameterType="java.lang.String">
  	delete from t_base_goods_info_meteringunit  where goodsid = #{goodsid} and isdefault = '1'
  </delete>
  <!-- 判断辅计量单位是否存在 -->
  <select id="isExistMeteringUnitInfo" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  	select count(1) from t_base_goods_info_meteringunit  where id = #{id}
  </select>
  <select id="isExistMUInfo" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info_meteringunit  where goodsid = #{goodsid} and meteringunitid = #{meteringunitid}
  </select>
  
  <!-- 价格套 -->
  <sql id="Base_PriceInfoColumn_List" >
  	<choose>
  	<when test="cols!=null">
		<include refid="common.Page_Column"/>
	</when>
	<when test="cols==null">
		id, goodsid, code, name, taxprice, taxtype, price,boxprice, remark
	</when>
	</choose>
  </sql>
  <select id="getPriceInfoByGoodsAndCode" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo_PriceInfo" useCache="false">
  	select id, goodsid, code, name, taxprice, taxtype, price,boxprice, remark from t_base_goods_info_price where goodsid=#{goodsid} and code=#{pricecode}
  </select>
  <!-- 根据商品编号获取价格套列表 -->
  <select id="getPriceInfoList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.GoodsInfo_PriceInfo">
  	select
  	<include refid="Base_PriceInfoColumn_List"/>
  	from t_base_goods_info_price
  	<trim prefix="where" prefixOverrides="and|or">
  		<if test="condition.goodsid != null">
  			and goodsid = #{condition.goodsid}
  		</if>
  		<include refid="common.Page_dataSql"/>
  	</trim>
  </select>
  <!-- 根据商品编码获取价格套管理列表数据 -->
  <select id="getPriceListByGoodsid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo_PriceInfo" useCache="false">
  	select * from t_base_goods_info_price where goodsid = #{goodsid}
  </select>
  <!-- 根据商品编码、价格套编码判断是否存在该价格套数据 -->
  <select id="getPriceDataByGoodsidAndCode" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo_PriceInfo">
  	select * from t_base_goods_info_price where goodsid = #{goodsid} and code = #{code} limit 1
  </select>
  <!-- 获取所有价格套数据，不包括taxprice为null和0的数据 -->
  <select id="getAllPriceInfoList" resultType="com.hd.agent.basefiles.model.GoodsInfo_PriceInfo">
  	select p.* from t_base_goods_info_price p
  	inner join t_base_goods_info  a on p.goodsid=a.id
  	<choose>
    	<when test="isBrandUser != null">
    		LEFT JOIN t_base_personnel_brand pc on a.brand=pc.brandid and pc.personid=#{personnelid}
    	</when>
    	<when test="isSupplierUser !=null">
    		LEFT JOIN t_base_personnel_supplier_brand pc on a.brand=pc.brandid and pc.personid=#{personnelid}
    	</when>
    </choose>
  	<trim prefix="where" prefixOverrides="and|or">
  		<choose>
	    	<when test="isBrandUser != null">
	    		 <if test="datasql != null" >
			         and (${datasql} or pc.personid=#{personnelid})
			     </if>
			     <if test="datasql == null" >
			         and  pc.personid=#{personnelid}
			     </if>
	    	</when>
	    	<when test="isSupplierUser != null">
	    		 <if test="datasql != null" >
			         and (${datasql} or pc.personid=#{personnelid})
			     </if>
			     <if test="datasql == null" >
			         and  pc.personid=#{personnelid}
			     </if>
	    	</when>
	    	<otherwise>
	    		<if test="datasql != null" >
		         and ${datasql}
		      	</if>
	    	</otherwise>
	    </choose>
        <if test="syncdate != null">
            and (p.addtime > #{syncdate}
            <if test="isBrandUser != null or isSupplierUser != null">
                or pc.addtime > #{syncdate}
            </if>)
        </if>
  		<if test="1==1">
  			and a.state='1' 
  		</if>
  	</trim>
      <if test="startNum != null">
          limit #{startNum} , #{rows}
      </if>
  </select>
    <select id="getAllPriceInfoListCount" resultType="int">
        select count(1) from (
            select p.* from t_base_goods_info_price p
            inner join t_base_goods_info  a on p.goodsid=a.id
            <choose>
                <when test="isBrandUser != null">
                    LEFT JOIN t_base_personnel_brand pc on a.brand=pc.brandid and pc.personid=#{personnelid}
                </when>
                <when test="isSupplierUser !=null">
                    LEFT JOIN t_base_personnel_supplier_brand pc on a.brand=pc.brandid and pc.personid=#{personnelid}
                </when>
            </choose>
            <trim prefix="where" prefixOverrides="and|or">
                <choose>
                    <when test="isBrandUser != null">
                        <if test="datasql != null" >
                            and (${datasql} or pc.personid=#{personnelid})
                        </if>
                        <if test="datasql == null" >
                            and  pc.personid=#{personnelid}
                        </if>
                    </when>
                    <when test="isSupplierUser != null">
                        <if test="datasql != null" >
                            and (${datasql} or pc.personid=#{personnelid})
                        </if>
                        <if test="datasql == null" >
                            and  pc.personid=#{personnelid}
                        </if>
                    </when>
                    <otherwise>
                        <if test="datasql != null" >
                            and ${datasql}
                        </if>
                    </otherwise>
                </choose>
                <if test="syncdate != null">
                    and (p.addtime > #{syncdate}
                    <if test="isBrandUser != null or isSupplierUser != null">
                        or pc.addtime > #{syncdate}
                    </if>)
                </if>
                <if test="1==1">
                    and a.state='1'
                </if>
            </trim>
        ) z
    </select>
  <!--根据商品编号获取价格套列表数量 -->
  <select id="getPriceCountByGoodsId" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info_price where goodsid = #{goodsid}
  </select>
  <!-- 根据编号批量删除价格套 -->
  <delete id="deletePriceInfos">
  	delete from t_base_goods_info_price
  	where id in
  	<foreach collection="idsArr" item="item" open="(" separator="," close=")">
  		#{item}
  	</foreach>
  </delete>
  <!-- 批量新增价格套 -->
  <insert id="addPriceInfos" parameterType="java.util.Map">
  	<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE">
  		select last_insert_id() as id 
  	</selectKey>
  	insert into t_base_goods_info_price ( goodsid, code, name, taxprice, taxtype, price, boxprice,remark,addtime)
  	values
  	<foreach collection="priceInfoMap" item="item" index="index" separator=",">
  		(#{item.goodsid}, #{item.code}, #{item.name}, #{item.taxprice}, #{item.taxtype}, #{item.price}, #{item.boxprice}, #{item.remark},now())
  	</foreach>
  </insert>
  <insert id="addPriceInfo" parameterType="com.hd.agent.basefiles.model.GoodsInfo_PriceInfo">
  	<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE">
  		select last_insert_id() as id 
  	</selectKey>
  	insert into t_base_goods_info_price
  	<trim prefix="(" suffix=")" suffixOverrides="," >
	  	<if test="goodsid != null">
	  		goodsid,
	  	</if>
	  	<if test="code != null">
	  		code,
	  	</if>
	  	<if test="name != null">
	  		name,
	  	</if>
	  	<if test="taxprice != null">
	  		taxprice,
	  	</if>
	  	<if test="taxtype != null">
	  		taxtype,
	  	</if>
	  	<if test="price != null">
	  		price,
	  	</if>
        <if test="boxprice != null">
            boxprice,
        </if>
	  	<if test="remark != null">
	  		remark,
	  	</if>
        <if test="1==1">
            addtime,
        </if>
  	</trim>
  	<trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="goodsid != null">
	  		#{goodsid},
	  	</if>
	  	<if test="code != null">
	  		#{code},
	  	</if>
	  	<if test="name != null">
	  		#{name},
	  	</if>
	  	<if test="taxprice != null">
	  		#{taxprice},
	  	</if>
	  	<if test="taxtype != null">
	  		#{taxtype},
	  	</if>
	  	<if test="price != null">
	  		#{price},
	  	</if>
        <if test="boxprice != null">
            #{boxprice},
        </if>
	  	<if test="remark != null">
	  		#{remark},
	  	</if>
        <if test="1==1">
           now(),
        </if>
    </trim>
  </insert>
  <!-- 修改价格套 -->
  <update id="editPriceInfo" parameterType="com.hd.agent.basefiles.model.GoodsInfo_PriceInfo">
  	update t_base_goods_info_price
    <set >
      <if test="goodsid != null" >
        goodsid = #{goodsid},
      </if>
      <if test="code != null" >
        code = #{code},
      </if>
      <if test="name != null" >
        name = #{name},
      </if>
      <if test="taxprice != null" >
        taxprice = #{taxprice},
      </if>
      <if test="taxtype != null" >
        taxtype = #{taxtype},
      </if>
      <if test="price != null" >
        price = #{price},
      </if>
      <if test="boxprice != null" >
        boxprice = #{boxprice},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
       <if test="1==1" >
            addtime = now(),
       </if>
    </set>
    where id = #{id}
  </update>
  <!-- 根据商品编号删除价格套 -->
  <delete id="deletePriceInfoByGoodsId" parameterType="java.lang.String">
  	delete from t_base_goods_info_price where goodsid = #{goodsid}
  </delete>
  <!-- 根据商品编码、价格套编码删除价格套管理数据 -->
  <delete id="deletePriceDataByGoodsidAndCode" parameterType="java.lang.String">
  	delete from t_base_goods_info_price where goodsid = #{goodsid} and code = #{code}
  </delete>
  <!-- 判断价格套是否存在 -->
  <select id="isExistPriceInfo" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  	select count(1) from t_base_goods_info_price where id = #{id}
  </select>
  <select id="isExistPriceInfoByGoodsidAndCode" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info_price where goodsid = #{goodsid} and code = #{code}
  </select>
  <!-- 判断价格套编码是否重复 -->
  <select id="isRepeatPriceInfoCode" parameterType="java.lang.String">
  	select count(1) from t_base_goods_info_price where code = #{code}
  </select>
  <!-- 根据价格套编码获取对应价格套列表 -->
  <select id="getPriceListByCode" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.GoodsInfo_PriceInfo">
  	SELECT t.*,g.name AS goodsname,g.brand as goodsbrand FROM t_base_goods_info_price t 
	LEFT JOIN t_base_goods_info  g ON t.goodsid=g.id
	<trim prefix="where" prefixOverrides="and|or">
		<if test="condition.code != null and condition.code != ''">
			t.code=#{condition.code}
		</if>
		<if test="condition.goodsname != null" >
         	and g.name like CONCAT('%',#{condition.goodsname},'%')
      	</if>
      	<if test="condition.goodsid != null" >
         	and t.goodsid like CONCAT('%',#{condition.goodsid},'%')
      	</if>
		<include refid="common.Page_querySql"/>
	</trim>
	<include refid="common.Page_limit"/>
  </select>
  <!-- 根据价格套编码获取对应价格套列表数量 -->
  <select id="getPriceListByCodeCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	select count(1) from (
  		SELECT t.*,g.name AS goodsname,g.brand as goodsbrand FROM t_base_goods_info_price t 
		LEFT JOIN t_base_goods_info  g ON t.goodsid=g.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.code != null and condition.code != ''">
				t.code=#{condition.code}
			</if>
			<if test="condition.goodsname != null" >
	         	and g.name like CONCAT('%',#{condition.goodsname},'%')
	      	</if>
	      	<if test="condition.goodsid != null" >
	         	and t.goodsid like CONCAT('%',#{condition.goodsid},'%')
	      	</if>
			<include refid="common.Page_querySql"/>
		</trim>
  	)t
  </select>
  <select id="getPriceListByTypeCode" resultType="com.hd.agent.basefiles.model.GoodsInfo_PriceInfo" parameterType="java.lang.String">
  	select *
    from t_base_goods_info_price
    where code = #{code}
  </select>
  <!-- 对应仓库 -->
  <sql id="Base_StorageInfoColumn_List" >
    id, goodsid, storageid, isdefault, highestinventory, lowestinventory, safeinventory, 
    checktype, checkdate, checkunit, lastcheckdate, remark
  </sql>
  <!-- 根据商品编号获取对应仓库列表 -->
  <select id="getStorageInfoList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.GoodsInfo_StorageInfo">
  	select
  	<include refid="Base_StorageInfoColumn_List"/>
  	from t_base_goods_info_storage
  	<trim prefix="where" prefixOverrides="and|or">
  		<if test="condition.goodsid != null">
  			and goodsid = #{condition.goodsid}
  		</if>
  		<include refid="common.Page_dataSql"/>
  	</trim>
  </select>
  <!--根据商品编号获取对应仓库列表数量 -->
  <select id="getStorageCountByGoodsId" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info_storage where goodsid = #{goodsid}
  </select>
  <!-- 根据商品编码、默认辅计量单位为是获取对应仓库详情 -->
  <select id="getStorageByGoodsidAndIsdefault" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo_StorageInfo">
  	select * from t_base_goods_info_storage where goodsid = #{goodsid} and isdefault = '1'
  </select>
  <select id="getStorageListByGoodsid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo_StorageInfo">
  	select * from t_base_goods_info_storage where goodsid = #{goodsid}
  </select>
  <!-- 根据商品编码、默认辅计量单位为是删除对应仓库 -->
  <delete id="deleteStorageByGoodsidAndIsdefault" parameterType="java.lang.String">
  	delete from t_base_goods_info_storage where goodsid = #{goodsid} and isdefault = '1'
  </delete>
  <!-- 根据编号删除对应仓库 -->
  <delete id="deleteStorageInfos">
  	delete from t_base_goods_info_storage
  	where id in
  	<foreach collection="idsArr" item="item" open="(" separator="," close=")">
  		#{item}
  	</foreach>
  </delete>
  <!-- 批量新增对应仓库 -->
  <insert id="addStorageInfos" parameterType="java.util.Map">
  	<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE">
  		select last_insert_id() as id 
  	</selectKey>
  	insert into t_base_goods_info_storage ( goodsid, storageid, isdefault, highestinventory, lowestinventory, safeinventory, 
    checktype, checkdate, checkunit, lastcheckdate, remark)
    values
    <foreach collection="storageInfoListMap" item="item" index="index" separator=",">
  		(#{item.goodsid},#{item.storageid},#{item.isdefault},#{item.highestinventory},#{item.lowestinventory},#{item.safeinventory},
  		#{item.checktype},#{item.checkdate},#{item.checkunit},#{item.lastcheckdate},#{item.remark})
  	</foreach>
  </insert>
  <!-- 批量修改对应仓库 -->
  <update id="editStorageInfo" parameterType="com.hd.agent.basefiles.model.GoodsInfo_StorageInfo">
  	update t_base_goods_info_storage
    <set >
      <if test="goodsid != null" >
        goodsid = #{goodsid},
      </if>
      <if test="storageid != null" >
        storageid = #{storageid},
      </if>
      <if test="isdefault != null" >
        isdefault = #{isdefault},
      </if>
      <if test="highestinventory != null" >
        highestinventory = #{highestinventory},
      </if>
      <if test="lowestinventory != null" >
        lowestinventory = #{lowestinventory},
      </if>
      <if test="safeinventory != null" >
        safeinventory = #{safeinventory},
      </if>
      <if test="checktype != null" >
        checktype = #{checktype},
      </if>
      <if test="checkdate != null" >
        checkdate = #{checkdate},
      </if>
      <if test="checkunit != null" >
        checkunit = #{checkunit},
      </if>
      <if test="lastcheckdate != null" >
        lastcheckdate = #{lastcheckdate},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
    </set>
    where id = #{id}
  </update>
  <!-- 根据商品编号删除对应仓库 -->
  <delete id="deleteStorageInfoByGoodsId" parameterType="java.lang.String">
  	delete from t_base_goods_info_storage where goodsid = #{goodsid}
  </delete>
  <!-- 判断辅对应仓库是否存在 -->
  <select id="isExistStorageInfo" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  	select count(1) from t_base_goods_info_storage where id = #{id} 
  </select>
  <select id="isExistStorageInfoByGoodsAndStorageid" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info_storage where goodsid = #{goodsid} and storageid = #{storageid}
  </select>
  <select id="getGoodsInfoStorageInfo" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo_StorageInfo">
  		select <include refid="Base_StorageInfoColumn_List"/>
  		from t_base_goods_info_storage where goodsid=#{goodsid} and storageid=#{storageid}
  </select>
  <!-- 对应库位 -->
  <sql id="Base_GoodsStorageLocation_List" >
    id, goodsid, storagelocationid, isdefault,boxnum, remark
  </sql>
   <!-- 根据商品编号获取对应库位列表 -->
  <select id="getGoodsStorageLocationList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.GoodsStorageLocation">
  	select
  	<include refid="Base_GoodsStorageLocation_List"/>
  	from t_base_goods_info_storagelocation
  	<trim prefix="where" prefixOverrides="and|or">
  		<if test="condition.goodsid != null">
  			and goodsid = #{condition.goodsid}
  		</if>
  		<include refid="common.Page_dataSql"/>
  	</trim>
  </select>
  <!-- 根据商品编码、默认辅计量单位为是获取对应分类详情 -->
  <select id="getSLByGoodsidAndIsdefault" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsStorageLocation">
  	select * from t_base_goods_info_storagelocation where goodsid = #{goodsid} and isdefault = '1'
  </select>
  <!-- 根据商品编码、默认辅计量单位为是删除对应分类 -->
  <delete id="deleteSLByGoodsidAndIsdefault" parameterType="java.lang.String">
  	delete from t_base_goods_info_storagelocation where goodsid = #{goodsid} and isdefault = '1'
  </delete>
  <!-- 根据编号删除对应库位 -->
  <delete id="deleteGoodsStorageLocation">
  	delete from t_base_goods_info_storagelocation
  	where id in
  	<foreach collection="idsArr" item="item" open="(" separator="," close=")">
  		#{item}
  	</foreach>
  </delete>
  <!-- 批量新增对应库位 -->
  <insert id="addGoodsStorageLocation" parameterType="java.util.Map">
  	<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE">
  		select last_insert_id() as id 
  	</selectKey>
  	insert into t_base_goods_info_storagelocation (goodsid, storagelocationid, isdefault,boxnum, remark)
    values
    <foreach collection="SLListMap" item="item" index="index" separator=",">
  		(#{item.goodsid},#{item.storagelocationid},#{item.isdefault},#{item.boxnum},#{item.remark})
  	</foreach>
  </insert>
  <!-- 批量修改对应库位 -->
  <update id="editGoodsStorageLocation" parameterType="com.hd.agent.basefiles.model.GoodsStorageLocation">
  	update t_base_goods_info_storagelocation
    <set >
      <if test="goodsid != null" >
        goodsid = #{goodsid},
      </if>
      <if test="storagelocationid != null" >
        storagelocationid = #{storagelocationid},
      </if>
      <if test="isdefault != null" >
        isdefault = #{isdefault},
      </if>
      <if test="boxnum != null" >
        boxnum = #{boxnum},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
    </set>
    where id = #{id}
  </update>
  <!-- 根据商品编号删除对应库位 -->
  <delete id="deleteGoodsStorageLocationByGoodsId" parameterType="java.lang.String">
  	delete from t_base_goods_info_storagelocation where goodsid = #{goodsid}
  </delete>
  <!-- 判断辅对应库位是否存在 -->
  <select id="isExistGoodsStorageLocation" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  	select count(1) from t_base_goods_info_storagelocation where id = #{id} 
  </select>
  <select id="isExistGoodsSL" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info_storagelocation where goodsid = #{goodsid} and storagelocationid = #{storagelocationid}
  </select>
  <!--根据商品编号获取对应仓库列表数量 -->
  <select id="getStorageLocationCountByGoodsId" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info_storagelocation where goodsid = #{goodsid}
  </select>
  <select id="getStorageLocationListByGoodsid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsStorageLocation">
  	select * from t_base_goods_info_storagelocation where goodsid = #{goodsid}
  </select>
  <select id="getGoodsStorageLocation" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsStorageLocation">
  	select * from t_base_goods_info_storagelocation where goodsid = #{goodsid} and storagelocationid = #{storagelocationid}
  </select>
  
  <!-- 对应分类 -->
  <sql id="Base_WaresClassInfoColumn_List" >
    id, goodsid, waresclass, isdefault, remark
  </sql>
  <!-- 根据商品编码获取对应分类列表 -->
  <select id="getWaresClassInfoList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.GoodsInfo_WaresClassInfo">
  	select
  	<include refid="Base_WaresClassInfoColumn_List"/>
  	from t_base_goods_info_waresclass
  	<trim prefix="where" prefixOverrides="and|or">
  		<if test="condition.goodsid != null">
  			and goodsid = #{condition.goodsid}
  		</if>
  		<include refid="common.Page_dataSql"/>
  	</trim>
  </select>
  <select id="getWCListByGoodsid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo_WaresClassInfo">
  	select * from t_base_goods_info_waresclass where goodsid = #{goodsid}
  </select>
   <!--根据商品编号获取对应分类列表数量 -->
  <select id="getWCCountByGoodsId" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info_waresclass where goodsid = #{goodsid}
  </select>
  <!-- 根据商品编码、默认辅计量单位为是获取对应分类详情 -->
  <select id="getWCByGoodsidAndIsdefault" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo_WaresClassInfo">
  	select * from t_base_goods_info_waresclass where goodsid = #{goodsid} and isdefault = '1'
  </select>
  <!-- 根据商品编码、默认辅计量单位为是删除对应分类 -->
  <delete id="deleteWCByGoodsidAndIsdefault" parameterType="java.lang.String">
  	delete from t_base_goods_info_waresclass where goodsid = #{goodsid} and isdefault = '1'
  </delete>
  <!-- 根据编号删除对应分类 -->
  <delete id="deleteWaresClassInfos">
  	delete from t_base_goods_info_waresclass
  	where id in
  	<foreach collection="idsArr" item="item" open="(" separator="," close=")">
  		#{item}
  	</foreach>
  </delete>
  <!-- 批量新增对应分类 -->
  <insert id="addWaresClassInfos" parameterType="java.util.Map">
  	<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE">
  		select last_insert_id() as id 
  	</selectKey>
  	insert into t_base_goods_info_waresclass (goodsid, waresclass, isdefault, remark)
  	values
  	<foreach collection="waresClassInfoListMap" item="item" index="index" separator=",">
  		(#{item.goodsid},#{item.waresclass},#{item.isdefault},#{item.remark})
  	</foreach>
  </insert>
  <!-- 修改对应分类 -->
  <update id="editWaresClassInfo" parameterType="com.hd.agent.basefiles.model.GoodsInfo_MteringUnitInfo">
  	 update t_base_goods_info_waresclass
    <set >
      <if test="goodsid != null" >
        goodsid = #{goodsid},
      </if>
      <if test="waresclass != null" >
        waresclass = #{waresclass},
      </if>
      <if test="isdefault != null" >
        isdefault = #{isdefault},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
    </set>
    where id = #{id}
  </update>
  <!-- 根据商品编号删除对应分类 -->
  <delete id="deleteWaresClassInfoByGoodsId" parameterType="java.lang.String">
  	delete from t_base_goods_info_waresclass where goodsid = #{goodsid}
  </delete>
  <!-- 判断对应分类是否存在 -->
  <select id="isExistWaresClassInfo" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  	select count(1) from t_base_goods_info_waresclass where id = #{id}
  </select>
  <select id="ixExistWCInfo" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_goods_info_waresclass where goodsid = #{goodsid} and waresclass = #{waresclass}
  </select>
  <select id="getGoodsWCInfo" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.GoodsInfo_WaresClassInfo">
  	select * from t_base_goods_info_waresclass where goodsid = #{goodsid} and waresclass = #{waresclass}
  </select>
  <!-- 以下方法用于手机端使用 -->
  <!-- 获取所有商品档案列表 -->
  <sql id="getAllGoodsInfoPhone_sql">
      SELECT a.id, a.name, a.basesaleprice AS price,a.newstorageprice inprice, a.spell, a.barcode, a.boxbarcode,a.model,GROUP_CONCAT( DISTINCT t.barcode) as sbarcode,a.isbatch, a.brand, a.defaultsort,a.goodstype,a.defaultsupplier as supplierid, a.mainunit AS unitid, c.name AS unitname, b.meteringunitid AS auxunitid, b.auxunitname AS auxunitname, b.mode, b.rate,a.minimum,
      <![CDATA[GROUP_CONCAT(if(t.usablenum>0,CONCAT(si.name,':',CONCAT(if(t.usablenum<0,'-',''),ABS(if(t.usablenum<0,ceil(t.usablenum/b.rate),floor(t.usablenum/b.rate))),b.auxunitname,if(t.usablenum<0,ceil(mod(t.usablenum,b.rate)),mod(t.usablenum,b.rate)),c.name)),null)) as remark]]>
      FROM t_base_goods_info  a
      LEFT JOIN (SELECT t1.goodsid, t1.meteringunitid, t1.mode, t1.rate, t1.isdefault, t2.name AS auxunitname FROM t_base_goods_info_meteringunit  t1, t_base_goods_meteringunit  t2 WHERE t1.meteringunitid = t2.id) b ON a.id = b.goodsid AND b.isdefault = '1' LEFT JOIN t_base_goods_meteringunit  c ON a.mainunit = c.id
      LEFT JOIN t_storage_summary t on a.id=t.goodsid
      <if test="dataSqlStorage != null">
          and ${dataSqlStorage}
      </if>
      LEFT JOIN t_base_storage_info si on t.storageid = si.id and si.state='1'
      <choose>
          <when test="isBrandUser != null">
              LEFT JOIN t_base_personnel_brand pc on a.brand=pc.brandid and pc.personid=#{personnelid}
          </when>
          <when test="isSupplierUser !=null">
              LEFT JOIN t_base_personnel_supplier_brand pc on a.brand=pc.brandid and pc.personid=#{personnelid}
          </when>
      </choose>
      <trim prefix="where" prefixOverrides="and|or">
          <choose>
              <when test="isBrandUser != null">
                  <if test="datasql != null" >
                      and (${datasql} or pc.personid=#{personnelid})
                  </if>
                  <if test="datasql == null" >
                      and  pc.personid=#{personnelid}
                  </if>
              </when>
              <when test="isSupplierUser != null">
                  <if test="datasql != null" >
                      and (${datasql} or pc.personid=#{personnelid})
                  </if>
                  <if test="datasql == null" >
                      and  pc.personid=#{personnelid}
                  </if>
              </when>
              <otherwise>
                  <if test="datasql != null" >
                      and ${datasql}
                  </if>
              </otherwise>
          </choose>

          <if test="syncdate != null">
              and (a.addtime > #{syncdate} or a.modifytime> #{syncdate} or a.opentime>#{syncdate}
              <if test="isBrandUser != null or isSupplierUser != null">
                  or pc.addtime > #{syncdate}
              </if>
              )
          </if>
          <if test="brandids != null">
              and  FIND_IN_SET(a.brand,#{brandids})
          </if>
          <if test="goodscon != null">
              and (a.id like '${goodscon}%' or a.name like '%${goodscon}%' or a.spell like '${goodscon}%' or a.pinyin like '${goodscon}%' or a.barcode like '%${goodscon}' or a.boxbarcode like '%${goodscon}')
          </if>
          <if test="1==1">
              and a.state='1'
          </if>
      </trim>
      GROUP BY a.id
  </sql>
  <select id="getAllGoodsInfoPhone" resultType="com.hd.agent.basefiles.model.PGoodsInfo" useCache="false">
      <include refid="getAllGoodsInfoPhone_sql"/>
      <if test="islimit !=null">
          limit #{startNum} , #{rows}
      </if>
  </select>
  <select id="getAllGoodsInfoPhoneCount" resultType="int" useCache="false">
      select count(1) from (
      <include refid="getAllGoodsInfoPhone_sql"/>
      ) z
  </select>
    <sql id="goodsInfoListFroPhone_sql">
        SELECT g.id,0 as ptype, g.name, g.spell, g.barcode, g.boxbarcode, g.brand, g.defaultsort
        FROM t_base_goods_info  g
        <choose>
            <when test="isBrandUser != null">
                LEFT JOIN t_base_personnel_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
            </when>
            <when test="isSupplierUser !=null">
                LEFT JOIN t_base_personnel_supplier_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
            </when>
        </choose>
        <trim prefix="where" prefixOverrides="and|or">
            <choose>
                <when test="isBrandUser != null">
                    <if test="datasql != null" >
                        and (${datasql} or pc.personid=#{personnelid})
                    </if>
                    <if test="datasql == null" >
                        and  pc.personid=#{personnelid}
                    </if>
                </when>
                <when test="isSupplierUser != null">
                    <if test="datasql != null" >
                        and (${datasql} or pc.personid=#{personnelid})
                    </if>
                    <if test="datasql == null" >
                        and  pc.personid=#{personnelid}
                    </if>
                </when>
                <otherwise>
                    <if test="datasql != null" >
                        and ${datasql}
                    </if>
                </otherwise>
            </choose>
            <if test="syncdate != null">
                and (g.addtime > #{syncdate} or g.modifytime> #{syncdate} or g.opentime>#{syncdate}
                <if test="isBrandUser != null or isSupplierUser != null">
                    or pc.addtime > #{syncdate}
                </if>
                )
            </if>
            <if test="brandids != null">
                and  FIND_IN_SET(g.brand,#{brandids})
            </if>
            <if test="goodscon != null">
                and (g.id like '${goodscon}%' or g.name like '%${goodscon}%' or g.spell like '%${goodscon}%' or g.pinyin like '${goodscon}%' or g.barcode like '%${goodscon}' or g.boxbarcode like '%${goodscon}'
                <if test="conarr != null">
                    or (
                    <trim prefix="" prefixOverrides="and|or">
                        <foreach collection="conarr" index="index" item="item">
                            and g.name like '%${item}%'
                        </foreach>
                    </trim>
                    )
                </if>
                )
            </if>
            <if test="1==1">
                and g.state='1' and (g.bstype='1' or g.bstype='3')
            </if>
            <!-- 分销规则 start -->
            <if test="okDistributions != null">
                and ( 1 = 2
                <foreach collection="okDistributions" item="distribution" separator="," open="or g.id in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.goodsid != '' and rd.goodsid is not null and rd.ruleid in(" close="))">
                    #{distribution.id }
                </foreach>
                <foreach collection="okDistributions" item="distribution" separator="," open="or g.brand in (select brandid from t_base_sales_distribution_rule_detail rd where rd.brandid != '' and rd.brandid is not null and rd.ruleid in(" close="))">
                    #{distribution.id }
                </foreach>
                <foreach collection="okDistributions" item="distribution" separator="," open="or g.defaultsort in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.goodssort != '' and rd.goodssort is not null and rd.ruleid in(" close="))">
                    #{distribution.id }
                </foreach>
                <foreach collection="okDistributions" item="distribution" separator="," open="or g.goodstype in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.goodstype != '' and rd.goodstype is not null and rd.ruleid in(" close="))">
                    #{distribution.id }
                </foreach>
                <foreach collection="okDistributions" item="distribution" separator="," open="or g.defaultsupplier in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.supplierid != '' and rd.supplierid is not null and rd.ruleid in(" close="))">
                    #{distribution.id }
                </foreach>
                )
            </if>
            <if test="ngDistributions != null">
                <foreach collection="ngDistributions" item="distribution" separator="" open="  " close="">
                    and
                    <choose>
                        <when test="distribution.goodsruletype == 1">
                            g.id not in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodsid != '' and rd.goodsid is not null )
                        </when>
                        <when test="distribution.goodsruletype == 2">
                            g.brand not in (select brandid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.brandid != '' and rd.brandid is not null )
                        </when>
                        <when test="distribution.goodsruletype == 3">
                            g.defaultsort not in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodssort != '' and rd.goodssort is not null )
                        </when>
                        <when test="distribution.goodsruletype == 4">
                            g.goodstype not in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodstype != '' and rd.goodstype is not null )
                        </when>
                        <when test="distribution.goodsruletype == 5">
                            g.defaultsupplier not in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.supplierid != '' and rd.supplierid is not null )
                        </when>
                        <otherwise>
                            1 = 2
                        </otherwise>
                    </choose>
                </foreach>
            </if>
        </trim>
        <if test="ispromotion==1">
            UNION ALL
            select p.groupid as id,p.ptype,p.groupname as name,
            '' as spell,GROUP_CONCAT(DISTINCT g.barcode) as barcode, GROUP_CONCAT(DISTINCT g.boxbarcode) as boxbarcode,
            GROUP_CONCAT(DISTINCT g.brand) as brand, GROUP_CONCAT(DISTINCT g.defaultsort) as defaultsort
            from t_sales_promotion_package t2
            INNER JOIN t_sales_promotion_package_group p on t2.id=p.billid and ((p.limitnum>0 and p.remainnum>0) or p.limitnum=0)
            INNER JOIN t_sales_promotion_package_group_detail t1 on p.groupid=t1.groupid and p.billid=t1.billid
            LEFT JOIN t_base_goods_info  g on t1.goodsid=g.id
            <choose>
                <when test="isBrandUser != null">
                    LEFT JOIN t_base_personnel_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
                </when>
                <when test="isSupplierUser !=null">
                    LEFT JOIN t_base_personnel_supplier_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
                </when>
            </choose>
            <trim prefix="where" prefixOverrides="and|or">
                <choose>
                    <when test="isBrandUser != null">
                        <if test="datasql != null" >
                            and (${datasql} or pc.personid=#{personnelid})
                        </if>
                        <if test="datasql == null" >
                            and  pc.personid=#{personnelid}
                        </if>
                    </when>
                    <when test="isSupplierUser != null">
                        <if test="datasql != null" >
                            and (${datasql} or pc.personid=#{personnelid})
                        </if>
                        <if test="datasql == null" >
                            and  pc.personid=#{personnelid}
                        </if>
                    </when>
                    <otherwise>
                        <if test="datasql != null" >
                            and ${datasql}
                        </if>
                    </otherwise>
                </choose>
                <if test="goodscon != null" >
                    and (g.pinyin like '%${goodscon}%' or g.name like '%${goodscon}%' or g.barcode like '%${goodscon}'
                    or g.spell like '%${goodscon}%'
                    or g.id like '${goodscon}%' or p.groupid like '%${goodscon}%'
                    <if test="conarr != null">
                        or (
                        <trim prefix="" prefixOverrides="and|or">
                            <foreach collection="conarr" index="index" item="item">
                                and g.name like '%${item}%'
                            </foreach>
                        </trim>
                        )
                    </if>
                    )
                </if>
                <if test="brandids != null">
                    and  FIND_IN_SET(g.brand,#{brandids})
                </if>
                <if test="1==1">
                    and g.state = '1' and (g.bstype='1' or g.bstype='3')
                    and (p.ptype = '1' or p.ptype='2')
                </if>
                <if test="promotionMap != null " >
                    and (
                    <if test="1==1">
                        (t2.customertype = '0')
                    </if>
                    <if test="promotionMap.customerid !=null">
                        or (t2.customertype = '1' and FIND_IN_SET(#{promotionMap.customerid},t2.customerid))
                    </if>
                    <if test="promotionMap.promotionsort !=null">
                        or (t2.customertype = '2' and FIND_IN_SET(#{promotionMap.promotionsort},t2.customerid))
                    </if>
                    <if test="promotionMap.customersort !=null">
                        or (t2.customertype = '3' and FIND_IN_SET(#{promotionMap.customersort},t2.customerid))
                    </if>
                    <if test="promotionMap.pricesort !=null">
                        or (t2.customertype = '4' and FIND_IN_SET(#{promotionMap.pricesort},t2.customerid))
                    </if>
                    <if test="promotionMap.salesarea !=null">
                        or (t2.customertype = '5' and FIND_IN_SET(#{promotionMap.salesarea},t2.customerid))
                    </if>
                    <if test="promotionMap.pcustomerid !=null">
                        or (t2.customertype = '6' and FIND_IN_SET(#{promotionMap.pcustomerid},t2.customerid))
                    </if>
                    <if test="promotionMap.credit !=null">
                        or (t2.customertype = '7' and FIND_IN_SET(#{promotionMap.credit},t2.customerid))
                    </if>
                    <if test="promotionMap.canceltype !=null">
                        or (t2.customertype = '8' and FIND_IN_SET(#{promotionMap.canceltype},t2.customerid))
                    </if>
                    )
                    <![CDATA[and t2.status='3' and t2.begindate<=DATE_FORMAT(now(),'%Y-%m-%d') and t2.enddate>=DATE_FORMAT(now(),'%Y-%m-%d') ]]>
                </if>
            </trim>
            GROUP BY p.groupid
        </if>

    </sql>
  <select id="getGoodsInfoListFroPhone" resultType="com.hd.agent.basefiles.model.PGoodsInfo" useCache="false">
  select * from ( <include refid="goodsInfoListFroPhone_sql"/>) z
   order by z.ptype desc,z.id asc
   limit #{startNum} , #{rows}
  </select>
    <select id="getGoodsInfoListFroPhoneCount" resultType="int" useCache="false">
        select count(1) from ( <include refid="goodsInfoListFroPhone_sql"/>) z
    </select>
    <sql id="customerGoodsInfoPhone_sql">
        SELECT g.id,0 as ptype, g.name, g.spell, g.barcode, g.boxbarcode, g.brand, g.defaultsort
        FROM t_base_goods_info  g
        inner join t_base_sales_customer_goods  cg on g.id =cg.goodsid and cg.customerid=#{customerid}
        <choose>
            <when test="isBrandUser != null">
                LEFT JOIN t_base_personnel_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
            </when>
            <when test="isSupplierUser !=null">
                LEFT JOIN t_base_personnel_supplier_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
            </when>
        </choose>
        <trim prefix="where" prefixOverrides="and|or">
            <choose>
                <when test="isBrandUser != null">
                    <if test="datasql != null" >
                        and (${datasql} or pc.personid=#{personnelid})
                    </if>
                    <if test="datasql == null" >
                        and  pc.personid=#{personnelid}
                    </if>
                </when>
                <when test="isSupplierUser != null">
                    <if test="datasql != null" >
                        and (${datasql} or pc.personid=#{personnelid})
                    </if>
                    <if test="datasql == null" >
                        and  pc.personid=#{personnelid}
                    </if>
                </when>
                <otherwise>
                    <if test="datasql != null" >
                        and ${datasql}
                    </if>
                </otherwise>
            </choose>
            <if test="syncdate != null">
                and (g.addtime > #{syncdate} or g.modifytime> #{syncdate} or g.opentime>#{syncdate}
                <if test="isBrandUser != null or isSupplierUser != null">
                    or pc.addtime > #{syncdate}
                </if>
                )
            </if>
            <if test="brandids != null">
                and  FIND_IN_SET(g.brand,#{brandids})
            </if>
            <if test="goodscon != null">
                and (g.id like '${goodscon}%' or g.name like '%${goodscon}%' or g.spell like '%${goodscon}%' or g.pinyin like '${goodscon}%' or g.barcode like '%${goodscon}' or g.boxbarcode like '%${goodscon}'
                <if test="conarr != null">
                    or (
                    <trim prefix="" prefixOverrides="and|or">
                        <foreach collection="conarr" index="index" item="item">
                            and g.name like '%${item}%'
                        </foreach>
                    </trim>
                    )
                </if>
                )
            </if>
            <if test="1==1">
                and g.state='1' and (g.bstype='1' or g.bstype='3')
            </if>
            <!-- 分销规则 start -->
            <if test="okDistributions != null">
                and ( 1 = 2
                <foreach collection="okDistributions" item="distribution" separator="," open="or g.id in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.goodsid != '' and rd.goodsid is not null and rd.ruleid in(" close="))">
                    #{distribution.id }
                </foreach>
                <foreach collection="okDistributions" item="distribution" separator="," open="or g.brand in (select brandid from t_base_sales_distribution_rule_detail rd where rd.brandid != '' and rd.brandid is not null and rd.ruleid in(" close="))">
                    #{distribution.id }
                </foreach>
                <foreach collection="okDistributions" item="distribution" separator="," open="or g.defaultsort in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.goodssort != '' and rd.goodssort is not null and rd.ruleid in(" close="))">
                    #{distribution.id }
                </foreach>
                <foreach collection="okDistributions" item="distribution" separator="," open="or g.goodstype in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.goodstype != '' and rd.goodstype is not null and rd.ruleid in(" close="))">
                    #{distribution.id }
                </foreach>
                <foreach collection="okDistributions" item="distribution" separator="," open="or g.defaultsupplier in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.supplierid != '' and rd.supplierid is not null and rd.ruleid in(" close="))">
                    #{distribution.id }
                </foreach>
                )
            </if>
            <if test="ngDistributions != null">
                <foreach collection="ngDistributions" item="distribution" separator="" open="  " close="">
                    and
                    <choose>
                        <when test="distribution.goodsruletype == 1">
                            g.id not in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodsid != '' and rd.goodsid is not null )
                        </when>
                        <when test="distribution.goodsruletype == 2">
                            g.brand not in (select brandid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.brandid != '' and rd.brandid is not null )
                        </when>
                        <when test="distribution.goodsruletype == 3">
                            g.defaultsort not in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodssort != '' and rd.goodssort is not null )
                        </when>
                        <when test="distribution.goodsruletype == 4">
                            g.goodstype not in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodstype != '' and rd.goodstype is not null )
                        </when>
                        <when test="distribution.goodsruletype == 5">
                            g.defaultsupplier not in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.supplierid != '' and rd.supplierid is not null )
                        </when>
                        <otherwise>
                            1 = 2
                        </otherwise>
                    </choose>
                </foreach>
            </if>
        </trim>
        <if test="ispromotion==1">
            UNION ALL
            select p.groupid as id,p.ptype,p.groupname as name,
            '' as spell,GROUP_CONCAT(DISTINCT g.barcode) as barcode, GROUP_CONCAT(DISTINCT g.boxbarcode) as boxbarcode,
            GROUP_CONCAT(DISTINCT g.brand) as brand, GROUP_CONCAT(DISTINCT g.defaultsort) as defaultsort
            from t_sales_promotion_package t2
            INNER JOIN t_sales_promotion_package_group p on t2.id=p.billid and ((p.limitnum>0 and p.remainnum>0) or p.limitnum=0)
            INNER JOIN t_sales_promotion_package_group_detail t1 on p.groupid=t1.groupid and p.billid=t1.billid
            LEFT JOIN t_base_goods_info  g on t1.goodsid=g.id
            <choose>
                <when test="isBrandUser != null">
                    LEFT JOIN t_base_personnel_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
                </when>
                <when test="isSupplierUser !=null">
                    LEFT JOIN t_base_personnel_supplier_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
                </when>
            </choose>
            <trim prefix="where" prefixOverrides="and|or">
                <choose>
                    <when test="isBrandUser != null">
                        <if test="datasql != null" >
                            and (${datasql} or pc.personid=#{personnelid})
                        </if>
                        <if test="datasql == null" >
                            and  pc.personid=#{personnelid}
                        </if>
                    </when>
                    <when test="isSupplierUser != null">
                        <if test="datasql != null" >
                            and (${datasql} or pc.personid=#{personnelid})
                        </if>
                        <if test="datasql == null" >
                            and  pc.personid=#{personnelid}
                        </if>
                    </when>
                    <otherwise>
                        <if test="datasql != null" >
                            and ${datasql}
                        </if>
                    </otherwise>
                </choose>
                <if test="goodscon != null" >
                    and (g.pinyin like '%${goodscon}%' or g.name like '%${goodscon}%' or g.barcode like '%${goodscon}'
                    or g.spell like '%${goodscon}%'
                    or g.id like '${goodscon}%' or p.groupid like '%${goodscon}%'
                    <if test="conarr != null">
                        or (
                        <trim prefix="" prefixOverrides="and|or">
                            <foreach collection="conarr" index="index" item="item">
                                and g.name like '%${item}%'
                            </foreach>
                        </trim>
                        )
                    </if>
                    )
                </if>
                <if test="brandids != null">
                    and  FIND_IN_SET(g.brand,#{brandids})
                </if>
                <if test="1==1">
                    and g.state = '1' and (g.bstype='1' or g.bstype='3')
                    and (p.ptype = '1' or p.ptype='2')
                </if>
                <if test="promotionMap != null " >
                    and (
                    <if test="1==1">
                        (t2.customertype = '0')
                    </if>
                    <if test="promotionMap.customerid !=null">
                        or (t2.customertype = '1' and FIND_IN_SET(#{promotionMap.customerid},t2.customerid))
                    </if>
                    <if test="promotionMap.promotionsort !=null">
                        or (t2.customertype = '2' and FIND_IN_SET(#{promotionMap.promotionsort},t2.customerid))
                    </if>
                    <if test="promotionMap.customersort !=null">
                        or (t2.customertype = '3' and FIND_IN_SET(#{promotionMap.customersort},t2.customerid))
                    </if>
                    <if test="promotionMap.pricesort !=null">
                        or (t2.customertype = '4' and FIND_IN_SET(#{promotionMap.pricesort},t2.customerid))
                    </if>
                    <if test="promotionMap.salesarea !=null">
                        or (t2.customertype = '5' and FIND_IN_SET(#{promotionMap.salesarea},t2.customerid))
                    </if>
                    <if test="promotionMap.pcustomerid !=null">
                        or (t2.customertype = '6' and FIND_IN_SET(#{promotionMap.pcustomerid},t2.customerid))
                    </if>
                    <if test="promotionMap.credit !=null">
                        or (t2.customertype = '7' and FIND_IN_SET(#{promotionMap.credit},t2.customerid))
                    </if>
                    <if test="promotionMap.canceltype !=null">
                        or (t2.customertype = '8' and FIND_IN_SET(#{promotionMap.canceltype},t2.customerid))
                    </if>
                    )
                    <![CDATA[and t2.status='3' and t2.begindate<=DATE_FORMAT(now(),'%Y-%m-%d') and t2.enddate>=DATE_FORMAT(now(),'%Y-%m-%d') ]]>
                </if>
            </trim>
            GROUP BY p.groupid
        </if>
    </sql>
  <select id="getCustomerGoodsInfoPhone" resultType="com.hd.agent.basefiles.model.PGoodsInfo" useCache="false">
  	select * from (<include refid="customerGoodsInfoPhone_sql"/>) z
   order by z.ptype desc,z.id asc
   limit #{startNum} , #{rows}
  </select>
    <select id="getCustomerGoodsInfoPhoneCount" resultType="int" useCache="false">
        select count(1) from (<include refid="customerGoodsInfoPhone_sql"/>) z
    </select>
    <sql id="customerNoSalesGoodsInfoPhone_sql">

        SELECT g.id,0 as ptype, g.name, g.spell, g.barcode, g.boxbarcode, g.brand, g.defaultsort
        FROM t_base_goods_info  g
        <choose>
            <when test="isBrandUser != null">
                LEFT JOIN t_base_personnel_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
            </when>
            <when test="isSupplierUser !=null">
                LEFT JOIN t_base_personnel_supplier_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
            </when>
        </choose>
        <trim prefix="where" prefixOverrides="and|or">
            <choose>
                <when test="isBrandUser != null">
                    <if test="datasql != null" >
                        and (${datasql} or pc.personid=#{personnelid})
                    </if>
                    <if test="datasql == null" >
                        and  pc.personid=#{personnelid}
                    </if>
                </when>
                <when test="isSupplierUser != null">
                    <if test="datasql != null" >
                        and (${datasql} or pc.personid=#{personnelid})
                    </if>
                    <if test="datasql == null" >
                        and  pc.personid=#{personnelid}
                    </if>
                </when>
                <otherwise>
                    <if test="datasql != null" >
                        and ${datasql}
                    </if>
                </otherwise>
            </choose>
            <if test="syncdate != null">
                and (g.addtime > #{syncdate} or g.modifytime> #{syncdate} or g.opentime>#{syncdate}
                <if test="isBrandUser != null or isSupplierUser != null">
                    or pc.addtime > #{syncdate}
                </if>
                )
            </if>
            <if test="brandids != null">
                and  FIND_IN_SET(g.brand,#{brandids})
            </if>
            <if test="goodscon != null">
                and (g.id like '${goodscon}%' or g.name like '%${goodscon}%' or g.spell like '%${goodscon}%' or g.pinyin like '${goodscon}%' or g.barcode like '%${goodscon}' or g.boxbarcode like '%${goodscon}'
                <if test="conarr != null">
                    or (
                    <trim prefix="" prefixOverrides="and|or">
                        <foreach collection="conarr" index="index" item="item">
                            and g.name like '%${item}%'
                        </foreach>
                    </trim>
                    )
                </if>
                )
            </if>
            <if test="1==1">
                and g.state='1' and (g.bstype='1' or g.bstype='3')
                and not EXISTS (select cg.goodsid from t_base_sales_customer_goods cg where cg.customerid=#{customerid} and g.id=cg.goodsid)
            </if>
            <!-- 分销规则 start -->
            <if test="distributionids != null">
                and ( 1 = 2
                <foreach collection="distributionids" item="distributionid" separator="," open="or g.id in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.goodsid != '' and rd.goodsid is not null and rd.ruleid in(" close="))">
                    #{distributionid }
                </foreach>
                <foreach collection="distributionids" item="distributionid" separator="," open="or g.brand in (select brandid from t_base_sales_distribution_rule_detail rd where rd.brandid != '' and rd.brandid is not null and rd.ruleid in(" close="))">
                    #{distributionid }
                </foreach>
                <foreach collection="distributionids" item="distributionid" separator="," open="or g.defaultsort in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.goodssort != '' and rd.goodssort is not null and rd.ruleid in(" close="))">
                    #{distributionid }
                </foreach>
                <foreach collection="distributionids" item="distributionid" separator="," open="or g.goodstype in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.goodstype != '' and rd.goodstype is not null and rd.ruleid in(" close="))">
                    #{distributionid }
                </foreach>
                <foreach collection="distributionids" item="distributionid" separator="," open="or g.defaultsupplier in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.supplierid != '' and rd.supplierid is not null and rd.ruleid in(" close="))">
                    #{distributionid }
                </foreach>
                )
            </if>
        </trim>
        <if test="ispromotion==1">
            UNION ALL
            select p.groupid as id,p.ptype,p.groupname as name,
            '' as spell,GROUP_CONCAT(DISTINCT g.barcode) as barcode, GROUP_CONCAT(DISTINCT g.boxbarcode) as boxbarcode,
            GROUP_CONCAT(DISTINCT g.brand) as brand, GROUP_CONCAT(DISTINCT g.defaultsort) as defaultsort
            from t_sales_promotion_package t2
            INNER JOIN t_sales_promotion_package_group p on t2.id=p.billid and ((p.limitnum>0 and p.remainnum>0) or p.limitnum=0)
            INNER JOIN t_sales_promotion_package_group_detail t1 on p.groupid=t1.groupid and p.billid=t1.billid
            LEFT JOIN t_base_goods_info  g on t1.goodsid=g.id
            <choose>
                <when test="isBrandUser != null">
                    LEFT JOIN t_base_personnel_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
                </when>
                <when test="isSupplierUser !=null">
                    LEFT JOIN t_base_personnel_supplier_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
                </when>
            </choose>
            <trim prefix="where" prefixOverrides="and|or">
                <choose>
                    <when test="isBrandUser != null">
                        <if test="datasql != null" >
                            and (${datasql} or pc.personid=#{personnelid})
                        </if>
                        <if test="datasql == null" >
                            and  pc.personid=#{personnelid}
                        </if>
                    </when>
                    <when test="isSupplierUser != null">
                        <if test="datasql != null" >
                            and (${datasql} or pc.personid=#{personnelid})
                        </if>
                        <if test="datasql == null" >
                            and  pc.personid=#{personnelid}
                        </if>
                    </when>
                    <otherwise>
                        <if test="datasql != null" >
                            and ${datasql}
                        </if>
                    </otherwise>
                </choose>
                <if test="goodscon != null" >
                    and (g.pinyin like '%${goodscon}%' or g.name like '%${goodscon}%' or g.barcode like '%${goodscon}'
                    or g.spell like '%${goodscon}%'
                    or g.id like '${goodscon}%' or p.groupid like '%${goodscon}%'
                    <if test="conarr != null">
                        or (
                        <trim prefix="" prefixOverrides="and|or">
                            <foreach collection="conarr" index="index" item="item">
                                and g.name like '%${item}%'
                            </foreach>
                        </trim>
                        )
                    </if>
                    )
                </if>
                <if test="brandids != null">
                    and  FIND_IN_SET(g.brand,#{brandids})
                </if>
                <if test="1==1">
                    and g.state = '1' and (g.bstype='1' or g.bstype='3')
                    and (p.ptype = '1' or p.ptype='2')
                </if>
                <if test="promotionMap != null " >
                    and (
                    <if test="1==1">
                        (t2.customertype = '0')
                    </if>
                    <if test="promotionMap.customerid !=null">
                        or (t2.customertype = '1' and FIND_IN_SET(#{promotionMap.customerid},t2.customerid))
                    </if>
                    <if test="promotionMap.promotionsort !=null">
                        or (t2.customertype = '2' and FIND_IN_SET(#{promotionMap.promotionsort},t2.customerid))
                    </if>
                    <if test="promotionMap.customersort !=null">
                        or (t2.customertype = '3' and FIND_IN_SET(#{promotionMap.customersort},t2.customerid))
                    </if>
                    <if test="promotionMap.pricesort !=null">
                        or (t2.customertype = '4' and FIND_IN_SET(#{promotionMap.pricesort},t2.customerid))
                    </if>
                    <if test="promotionMap.salesarea !=null">
                        or (t2.customertype = '5' and FIND_IN_SET(#{promotionMap.salesarea},t2.customerid))
                    </if>
                    <if test="promotionMap.pcustomerid !=null">
                        or (t2.customertype = '6' and FIND_IN_SET(#{promotionMap.pcustomerid},t2.customerid))
                    </if>
                    <if test="promotionMap.credit !=null">
                        or (t2.customertype = '7' and FIND_IN_SET(#{promotionMap.credit},t2.customerid))
                    </if>
                    <if test="promotionMap.canceltype !=null">
                        or (t2.customertype = '8' and FIND_IN_SET(#{promotionMap.canceltype},t2.customerid))
                    </if>
                    )
                    <![CDATA[and t2.status='3' and t2.begindate<=DATE_FORMAT(now(),'%Y-%m-%d') and t2.enddate>=DATE_FORMAT(now(),'%Y-%m-%d') ]]>
                </if>
            </trim>
            GROUP BY p.groupid
        </if>
    </sql>
  <select id="getCustomerNoSalesGoodsInfoPhone" resultType="com.hd.agent.basefiles.model.PGoodsInfo" useCache="false">
      select * from (<include refid="customerNoSalesGoodsInfoPhone_sql"/>) z
   order by z.ptype desc,z.id asc
   limit #{startNum} , #{rows}
  </select>
    <select id="getCustomerNoSalesGoodsInfoPhoneCount" resultType="int" useCache="false">
        select count(1) from (<include refid="customerNoSalesGoodsInfoPhone_sql"/>) z
    </select>
  <select id="getGoodsInfoPhoneByBrands" resultType="com.hd.agent.basefiles.model.PGoodsInfo">
  	SELECT a.id, a.name, a.basesaleprice AS price,a.newstorageprice inprice, a.spell, a.barcode, a.boxbarcode, a.brand, a.defaultsort, a.mainunit AS unitid, c.name AS unitname, b.meteringunitid AS auxunitid, b.auxunitname AS auxunitname, b.mode, b.rate FROM t_base_goods_info  a LEFT JOIN (SELECT t1.goodsid, t1.meteringunitid, t1.mode, t1.rate, t1.isdefault, t2.name AS auxunitname FROM t_base_goods_info_meteringunit  t1, t_base_goods_meteringunit  t2 WHERE t1.meteringunitid = t2.id) b ON a.id = b.goodsid AND b.isdefault = '1' LEFT JOIN t_base_goods_meteringunit  c ON a.mainunit = c.id 
  	where FIND_IN_SET(a.brand,#{brands}) and a.state = '1'
  </select>
  <!-- 获取品牌业务员可销售商品 -->
  <select id="getBrandSalerGoodsPhone" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PGoodsInfo" useCache="false">
  	SELECT a.id, a.name, a.basesaleprice AS price,a.newstorageprice inprice, a.spell, a.barcode, a.boxbarcode, a.brand, a.defaultsort, a.mainunit AS unitid, c.name AS unitname, b.meteringunitid AS auxunitid, b.auxunitname AS auxunitname, b.mode, b.rate FROM (
  		SELECT a.* FROM t_base_goods_info  a INNER JOIN t_base_personnel_brand b ON a.brand = b.brandid WHERE b.personid = #{0}
  	) a LEFT JOIN (SELECT t1.goodsid, t1.meteringunitid, t1.mode, t1.rate, t1.isdefault, t2.name AS auxunitname FROM t_base_goods_info_meteringunit  t1, t_base_goods_meteringunit  t2 WHERE t1.meteringunitid = t2.id) b ON a.id = b.goodsid AND b.isdefault = '1' LEFT JOIN t_base_goods_meteringunit  c ON a.mainunit = c.id where a.state = '1'
  </select>
  <select id="getStorageGoodsPhone" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PGoodsInfo" useCache="false">
  	SELECT a.id, a.name, a.basesaleprice AS price,a.newstorageprice inprice, a.spell, a.barcode, a.boxbarcode, a.brand, a.defaultsort, a.mainunit AS unitid, c.name AS unitname, b.meteringunitid AS auxunitid, b.auxunitname AS auxunitname, b.mode, b.rate 
	FROM (
	  		SELECT a.* FROM t_base_goods_info  a 
				INNER JOIN t_storage_summary b ON a.id = b.goodsid and b.existingnum>0
				INNER JOIN t_base_storage_info c on b.storageid=c.id and c.carsaleuser=#{0}
	) a 
	LEFT JOIN (SELECT t1.goodsid, t1.meteringunitid, t1.mode, t1.rate, t1.isdefault, t2.name AS auxunitname FROM t_base_goods_info_meteringunit  t1, t_base_goods_meteringunit  t2 WHERE t1.meteringunitid = t2.id) b ON a.id = b.goodsid AND b.isdefault = '1' LEFT JOIN t_base_goods_meteringunit  c ON a.mainunit = c.id where a.state = '1'
  </select>
  <!-- 获取所有品牌 -->
  <select id="getAllBrandPhone" resultType="com.hd.agent.basefiles.model.Brand">
  	select t.id, t.name from t_base_goods_brand    t
    <choose>
    	<when test="isBrandUser != null">
    		LEFT JOIN t_base_personnel_brand pc on t.id=pc.brandid and pc.personid=#{personnelid}
    	</when>
    	<when test="isSupplierUser !=null">
    		LEFT JOIN t_base_personnel_supplier_brand pc on t.id=pc.brandid and pc.personid=#{personnelid}
    	</when>
    </choose>
  	<trim prefix="where" prefixOverrides="and|or">
  		<choose>
	    	<when test="isBrandUser != null">
	    		 <if test="datasql != null" >
			         and (${datasql} or pc.personid=#{personnelid})
			     </if>
			     <if test="datasql == null" >
			         and  pc.personid=#{personnelid}
			     </if>
	    	</when>
	    	<when test="isSupplierUser != null">
	    		 <if test="datasql != null" >
			         and (${datasql} or pc.personid=#{personnelid})
			     </if>
			     <if test="datasql == null" >
			         and  pc.personid=#{personnelid}
			     </if>
	    	</when>
	    	<otherwise>
	    		<if test="datasql != null" >
		         and ${datasql}
		      	</if>
	    	</otherwise>
	    </choose>
        <if test="syncdate != null">
            and (t.addtime > #{syncdate} or t.modifytime> #{syncdate} or t.opentime>#{syncdate}
            <if test="isBrandUser != null or isSupplierUser != null">
                or pc.addtime > #{syncdate}
            </if>)
        </if>
  		<if test="1==1">
  			and t.state='1'
  		</if>
  	</trim>
  </select>
  <!-- 获取品牌业务员可销售品牌 -->
  <select id="getBrandSalerBrandPhone" resultType="com.hd.agent.basefiles.model.Brand" useCache="false">
  	SELECT a.id, a.name FROM t_base_goods_brand    a INNER JOIN t_base_personnel_brand b ON a.id = b.brandid WHERE b.personid = #{0} and a.state = '1'
  </select>
  <!-- 以上方法用于手机端使用 -->
  <!-- 根据商品品牌获取商品库存平均单价列表数据 -->
  <select id="getGoodsStockavgamountById" parameterType="java.lang.String" resultType="java.math.BigDecimal">
  	select IF((newstorageprice IS NULL OR newstorageprice =0),highestbuyprice,newstorageprice) as stockavgamount
  	from t_base_goods_info  where id = #{id} and state = '1'
  </select>
  <insert id="addGoodsCostpriceChangeLog" parameterType="java.lang.String">
  	insert into t_base_goodsinfo_costprice_change(goodsid,costprice,remark,addtime,billid)
  	values(#{goodsid},#{costprice},#{remark},now(),#{billid});
  </insert>
  <select id="getGoodsCostpriceList" resultType="java.util.Map">
  	select id,goodsid,costprice from t_base_goodsinfo_costprice_change
  	where state='1'
  </select>
  <update id="updateGoodsCostpriceState">
  	update t_base_goodsinfo_costprice_change set state='0' where state='1'
  </update>
  <select id="getTaxPriceByGoodsidAndPriceCode" parameterType="java.lang.String" resultType="java.util.Map">
  	SELECT b.taxprice,b.boxprice,c.rate,a.barcode FROM t_base_goods_info  a
	LEFT JOIN t_base_goods_info_price b ON a.id = b.goodsid
	left join t_base_finance_taxtype c on c.id = a.defaulttaxtype
	WHERE a.id = #{goodsid} AND b.code = #{pricesort}
  </select>
  <update id="updateGoodsinfoNewsaledate" parameterType="java.lang.String">
  	UPDATE t_base_goods_info  SET newsaledate = #{businessdate} WHERE id = #{goodsid};
  </update>

    <update id="updateBillByCustomerChange">
        UPDATE t_sales_demand t,t_base_sales_customer c
        SET t.salesarea=c.salesarea,t.salesdept=c.salesdeptid,t.salesuser=c.salesuserid,t.indooruserid=c.indoorstaff
        WHERE t.customerid=c.id AND (c.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR c.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY));

        UPDATE t_sales_order t,t_base_sales_customer c
        SET t.salesarea=c.salesarea,t.salesdept=c.salesdeptid,t.salesuser=c.salesuserid,t.indooruserid=c.indoorstaff
        WHERE t.customerid=c.id AND (c.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR c.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY));

        UPDATE t_sales_order_car t,t_base_sales_customer c
        SET t.salesarea=c.salesarea,t.salesdept=c.salesdeptid,t.salesuser=c.salesuserid,t.indooruserid=c.indoorstaff
        WHERE t.customerid=c.id AND (c.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR c.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY));

        UPDATE t_sales_dispatchbill t,t_base_sales_customer c
        SET t.salesarea=c.salesarea,t.salesdept=c.salesdeptid,t.salesuser=c.salesuserid,t.indooruserid=c.indoorstaff
        WHERE t.customerid=c.id AND (c.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR c.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY));

        UPDATE t_sales_receipt t,t_base_sales_customer c
        SET t.salesarea=c.salesarea,t.salesdept=c.salesdeptid,t.salesuser=c.salesuserid,t.indooruserid=c.indoorstaff
        WHERE t.customerid=c.id AND (c.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR c.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY));

        UPDATE t_sales_rejectbill t,t_base_sales_customer c
        SET t.salesarea=c.salesarea,t.salesdept=c.salesdeptid,t.salesuser=c.salesuserid,t.indooruserid=c.indoorstaff
        WHERE t.customerid=c.id AND (c.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR c.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY));

        UPDATE t_storage_saleout t,t_base_sales_customer c
        SET t.salesarea=c.salesarea,t.salesdept=c.salesdeptid,t.salesuser=c.salesuserid,t.indooruserid=c.indoorstaff
        WHERE t.customerid=c.id AND (c.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR c.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY));

        UPDATE t_storage_salereject_enter t,t_base_sales_customer c
        SET t.salesarea=c.salesarea,t.salesdept=c.salesdeptid,t.salesuser=c.salesuserid,t.indooruserid=c.indoorstaff
        WHERE t.customerid=c.id AND (c.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR c.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY));

        UPDATE t_account_sales_invoice_detail t,t_base_sales_customer c
        SET t.salesarea=c.salesarea,t.salesdept=c.salesdeptid,t.salesuser=c.salesuserid
        WHERE t.customerid=c.id AND (c.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR c.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY));

        UPDATE t_account_sales_invoicebill_detail t,t_base_sales_customer c
        SET t.salesarea=c.salesarea,t.salesdept=c.salesdeptid,t.salesuser=c.salesuserid
        WHERE t.customerid=c.id AND (c.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR c.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY));

        UPDATE t_account_customer_push_balance t,t_base_sales_customer c
        SET t.salesarea=c.salesarea,t.salesdept=c.salesdeptid,t.salesuser=c.salesuserid
        WHERE t.customerid=c.id AND (c.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR c.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY));
    </update>
    <update id="updateDemandDetailByBrandOrBranduserOrSupplieruserChange" parameterType="map">
        UPDATE t_sales_demand_detail t,t_base_goods_brand    b
        SET t.branddept=b.deptid
        WHERE t.brandid=b.id AND (b.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR b.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY))
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );

        UPDATE t_sales_demand_detail t1,t_base_personnel_brandandcustomer b,t_sales_demand t
        SET t1.branduser=b.personid
        WHERE t1.orderid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );

        UPDATE t_sales_demand_detail t1,t_base_personnel_supplier_brandcustomer b,t_sales_demand t
        SET t1.supplieruser=b.personid
        WHERE t1.orderid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="updateDispatchbillDetailByBrandOrBranduserOrSupplieruserChange" parameterType="map">
        UPDATE t_sales_dispatchbill_detail t,t_base_goods_brand    b
        SET t.branddept=b.deptid
        WHERE t.brandid=b.id AND (b.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR b.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY))
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );

        UPDATE t_sales_dispatchbill_detail t1,t_base_personnel_brandandcustomer b,t_sales_dispatchbill t
        SET t1.branduser=b.personid
        WHERE t1.billid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );

        UPDATE t_sales_dispatchbill_detail t1,t_base_personnel_supplier_brandcustomer b,t_sales_dispatchbill t
        SET t1.supplieruser=b.personid
        WHERE t1.billid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="updateOrderCarDetailByBrandOrBranduserOrSupplieruserChange" parameterType="map">
        UPDATE t_sales_order_car_detail t,t_base_goods_brand    b
        SET t.branddept=b.deptid
        WHERE t.brandid=b.id AND (b.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR b.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY))
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );

        UPDATE t_sales_order_car_detail t1,t_base_personnel_brandandcustomer b,t_sales_order_car t
        SET t1.branduser=b.personid
        WHERE t1.orderid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );

        UPDATE t_sales_order_car_detail t1,t_base_personnel_supplier_brandcustomer b,t_sales_order_car t
        SET t1.supplieruser=b.personid
        WHERE t1.orderid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="updateOrderDetailByBrandOrBranduserOrSupplieruserChange" parameterType="map">
        UPDATE t_sales_order_detail t,t_base_goods_brand    b
        SET t.branddept=b.deptid
        WHERE t.brandid=b.id AND (b.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR b.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY))
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );

        UPDATE t_sales_order_detail t1,t_base_personnel_brandandcustomer b,t_sales_order t
        SET t1.branduser=b.personid
        WHERE t1.orderid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );

        UPDATE t_sales_order_detail t1,t_base_personnel_supplier_brandcustomer b,t_sales_order t
        SET t1.supplieruser=b.personid
        WHERE t1.orderid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="updateReceiptDetailByBrandOrBranduserOrSupplieruserChange" parameterType="map">
        UPDATE t_sales_receipt_detail t,t_base_goods_brand    b
        SET t.branddept=b.deptid
        WHERE t.brandid=b.id AND (b.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR b.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY))
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );

        UPDATE t_sales_receipt_detail t1,t_base_personnel_brandandcustomer b,t_sales_receipt t
        SET t1.branduser=b.personid
        WHERE t1.billid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );

        UPDATE t_sales_receipt_detail t1,t_base_personnel_supplier_brandcustomer b,t_sales_receipt t
        SET t1.supplieruser=b.personid
        WHERE t1.billid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="updateRejectbillDetailByBrandOrBranduserOrSupplieruserChange" parameterType="map">
        UPDATE t_sales_rejectbill_detail t,t_base_goods_brand    b
        SET t.branddept=b.deptid
        WHERE t.brandid=b.id AND (b.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR b.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY))
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );

        UPDATE t_sales_rejectbill_detail t1,t_base_personnel_brandandcustomer b,t_sales_rejectbill t
        SET t1.branduser=b.personid
        WHERE t1.billid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );

        UPDATE t_sales_rejectbill_detail t1,t_base_personnel_supplier_brandcustomer b,t_sales_rejectbill t
        SET t1.supplieruser=b.personid
        WHERE t1.billid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="updateSaleoutDetailByBrandOrBranduserOrSupplieruserChange" parameterType="map">
        UPDATE t_storage_saleout_detail t,t_base_goods_brand    b
        SET t.branddept=b.deptid
        WHERE t.brandid=b.id AND (b.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR b.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY))
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );

        UPDATE t_storage_saleout_detail t1,t_base_personnel_brandandcustomer b,t_storage_saleout t
        SET t1.branduser=b.personid
        WHERE t1.saleoutid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );

        UPDATE t_storage_saleout_detail t1,t_base_personnel_supplier_brandcustomer b,t_storage_saleout t
        SET t1.supplieruser=b.personid
        WHERE t1.saleoutid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="updateSalerejectEnterDetailByBrandOrBranduserOrSupplieruserChange" parameterType="map">
        UPDATE t_storage_salereject_enter_detail t,t_base_goods_brand    b
        SET t.branddept=b.deptid
        WHERE t.brandid=b.id AND (b.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR b.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY))
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );

        UPDATE t_storage_salereject_enter_detail t1,t_base_personnel_brandandcustomer b,t_storage_salereject_enter t
        SET t1.branduser=b.personid
        WHERE t1.salerejectid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );

        UPDATE t_storage_salereject_enter_detail t1,t_base_personnel_supplier_brandcustomer b,t_storage_salereject_enter t
        SET t1.supplieruser=b.personid
        WHERE t1.salerejectid=t.id AND t1.brandid=b.brandid AND t.customerid=b.customerid  AND b.sign='1'
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="updateInvoiceDetailByBrandOrBranduserOrSupplieruserChange" parameterType="map">
        UPDATE t_account_sales_invoice_detail t,t_base_goods_brand    b
        SET t.branddept=b.deptid
        WHERE t.brandid=b.id AND (b.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR b.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY))
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );

        UPDATE t_account_sales_invoice_detail t,t_base_personnel_brandandcustomer b
        SET t.branduser=b.personid
        WHERE t.customerid=b.customerid AND t.brandid=b.brandid AND b.sign='1'
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );

        UPDATE t_account_sales_invoice_detail t,t_base_personnel_supplier_brandcustomer b
        SET t.supplieruser=b.personid
        WHERE t.customerid=b.customerid AND t.brandid=b.brandid AND b.sign='1'
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="updateInvoiceBillDetailByBrandOrBranduserOrSupplieruserChange" parameterType="map">
        UPDATE t_account_sales_invoicebill_detail t,t_base_goods_brand    b
        SET t.branddept=b.deptid
        WHERE t.brandid=b.id AND (b.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR b.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY))
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );

        UPDATE t_account_sales_invoicebill_detail t,t_base_personnel_brandandcustomer b
        SET t.branduser=b.personid
        WHERE t.customerid=b.customerid AND t.brandid=b.brandid AND b.sign='1'
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );

        UPDATE t_account_sales_invoicebill_detail t,t_base_personnel_supplier_brandcustomer b
        SET t.supplieruser=b.personid
        WHERE t.customerid=b.customerid AND t.brandid=b.brandid AND b.sign='1'
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="updateCustomerPushByBrandOrBranduserOrSupplieruserChange">
        UPDATE t_account_customer_push_balance t,t_base_goods_brand    b
        SET t.branddept=b.deptid
        WHERE t.brandid=b.id AND (b.modifytime >=DATE_ADD(NOW(), INTERVAL -1 DAY) OR b.addtime >=DATE_ADD(NOW(), INTERVAL -1 DAY));

        UPDATE t_account_customer_push_balance t,t_base_personnel_brandandcustomer b
        SET t.branduser=b.personid
        WHERE t.customerid=b.customerid AND t.brandid=b.brandid AND b.sign='1';

        UPDATE t_account_customer_push_balance t,t_base_personnel_supplier_brandcustomer b
        SET t.supplieruser=b.personid
        WHERE t.customerid=b.customerid AND t.brandid=b.brandid AND b.sign='1';
    </update>
    <update id="updatePersnBrandOrPersonSupplier">
        UPDATE t_base_personnel_brandandcustomer b SET b.sign='0',b.modifytime=NOW() WHERE b.sign='1';

        UPDATE t_base_personnel_supplier_brandcustomer b SET b.sign='0',b.modifytime=NOW() WHERE b.sign='1';
    </update>
  <update id="updateGoodsPriceListByCode" parameterType="com.hd.agent.system.model.SysCode">
  	update t_base_goods_info_price set
  		name = #{codename}
  	where code = #{code}
  </update>
  
  
    <!-- 根据pageMap，品牌和分类获取商品档案 -->
  <select id="getGoodsInfoListByBrandAndSort" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.GoodsInfo" useCache="false">
      <choose>
          <when test="condition.nopackage == 1">
          </when>
          <otherwise>
              SELECT
              p.groupid as id , p.groupname as name,p.ptype,t1.goodsid as oldid ,g.pinyin,g.state,g.remark,g.model,g.mainunit,g.goodstype,g.spell,g.brand,g.deptid,
              g.abclevel,g.defaultsort,g.barcode,g.boxbarcode,g.itemno,g.bstype,g.productfield,g.sortkey,g.isinoutstorage,g.storageid,
              g.storagelocation,g.isbatch, g.isstoragelocation, g.isshelflife,g.shelflife,g.shelflifeunit,p.price as highestbuyprice,
              g.lowestsaleprice,g.basesaleprice,g.highestinventory,g.lowestinventory,g.safeinventory,g.normalprice,
              g.checktype,g.checkdate,g.checkunit,g.defaultbuyer,g.defaultsaler,g.defaultsupplier,g.secondsupplier,
              g.defaulttaxtype,g.planmargin,g.newbuyprice,g.newsaleprice,g.newstorageprice,g.newbuydate,
              g.newsaledate,g.everybillaveragesales,g.newinstroragedate,g.newoutstoragedate,g.newinventory,
              g.newcheckdate,g.gshape,g.glength,g.gmlength,g.gwidth,g.gmwidth,g.ghight,g.gmhight,g.gdiameter,
              g.gmdiameter,g.grossweight,g.netweight,g.totalweight,g.totalvolume,g.singlevolume,g.kgweight,g.image,g.imageids,
              g.field01,g.field02,g.field03,g.field04,g.field05,g.field06,g.field07,g.field08,g.field09,g.field10,g.field11,
              g.field12,g.adduserid,g.addusername,g.adddeptid,g.adddeptname,g.addtime,g.modifyuserid,g.modifyusername,
              g.modifytime,g.openuserid,g.openusername,g.opentime,g.closeuserid,g.closeusername,g.closetime,g.physicsremark,
              g.newtotalbuynum,g.newtotalbuyamount,g.costaccountprice,g.minimum

              from t_sales_promotion_package t2
              RIGHT JOIN t_sales_promotion_package_group p on t2.id=p.billid
              RIGHT JOIN t_sales_promotion_package_group_detail t1 on p.groupid=t1.groupid and p.billid=t1.billid
              RIGHT JOIN t_base_goods_info  g on t1.goodsid=g.id
              <trim prefix="where" prefixOverrides="and|or">
                  <if test="condition.brandArr != null" >
                      and g.brand in
                      <foreach collection="condition.brandArr" item="branditem" open="(" separator="," close=")">
                          #{branditem}
                      </foreach>
                  </if>
                  <if test="condition.defaultsortArr != null" >
                      and g.defaultsort in
                      <foreach collection="condition.defaultsortArr" item="defaultsortitem" open="(" separator="," close=")">
                          #{defaultsortitem}
                      </foreach>
                  </if>
                  <if test="condition.id != null">
                      and (g.id like CONCAT('%',#{condition.id},'%') or g.barcode like CONCAT('%',#{condition.id},'%'))
                  </if>
                  <if test="condition.goodsname != null" >
                      and g.name like CONCAT('%',#{condition.goodsname},'%')
                  </if>
                  <if test="1==1">
                      and (
                      (t2.customertype = '0')
                  </if>
                  <if test="condition.customerid !=null">
                      or (t2.customertype = '1' and FIND_IN_SET(#{condition.customerid},t2.customerid))
                  </if>
                  <if test="condition.promotionsort !=null">
                      or (t2.customertype = '2' and FIND_IN_SET(#{condition.promotionsort},t2.customerid))
                  </if>
                  <if test="condition.customersort !=null">
                      or (t2.customertype = '3' and FIND_IN_SET(#{condition.customersort},t2.customerid))
                  </if>
                  <if test="condition.pricesort !=null">
                      or (t2.customertype = '4' and FIND_IN_SET(#{condition.pricesort},t2.customerid))
                  </if>
                  <if test="condition.salesarea !=null">
                      or (t2.customertype = '5' and FIND_IN_SET(#{condition.salesarea},t2.customerid))
                  </if>
                  <if test="condition.pcustomerid !=null">
                      or (t2.customertype = '6' and FIND_IN_SET(#{condition.pcustomerid},t2.customerid))
                  </if>
                  <if test="condition.credit !=null">
                      or (t2.customertype = '7' and FIND_IN_SET(#{condition.credit},t2.customerid))
                  </if>
                  <if test="condition.canceltype !=null">
                      or (t2.customertype = '8' and FIND_IN_SET(#{condition.canceltype},t2.customerid))
                  </if>
                  )
                  <![CDATA[and t2.status='3' and p.begindate <= #{condition.date} and p.enddate >=  #{condition.date} ]]>
                  <if test="1==1">
                      and ((p.limitnum>0 and p.remainnum>0 ) or(p.limitnum=0)) and (p.ptype='1' or p.ptype='2')
                  </if>
              </trim>
              group by p.groupid
              UNION ALL
          </otherwise>
      </choose>

      select
  	        id, name,"" as ptype,id as oldid,pinyin, state, remark, model, mainunit, goodstype, spell, brand,deptid, abclevel, defaultsort,
		    barcode, boxbarcode, itemno, bstype,productfield, sortkey, isinoutstorage, storageid, storagelocation,
		    isbatch, isstoragelocation, isshelflife, shelflife, shelflifeunit, highestbuyprice,
		    lowestsaleprice, basesaleprice, highestinventory, lowestinventory, safeinventory,
		    normalprice, checktype, checkdate, checkunit, defaultbuyer, defaultsaler, defaultsupplier,secondsupplier,
		    defaulttaxtype, planmargin, newbuyprice, newsaleprice, newstorageprice, newbuydate,
		    newsaledate, everybillaveragesales, newinstroragedate, newoutstoragedate, newinventory,
		    newcheckdate, gshape, glength, gmlength, gwidth, gmwidth, ghight, gmhight, gdiameter,
		    gmdiameter, grossweight, netweight,totalweight,totalvolume,singlevolume, kgweight, image,imageids,
		    field01, field02, field03, field04, field05, field06, field07, field08, field09, field10, field11,
		    field12, adduserid, addusername, adddeptid, adddeptname, addtime, modifyuserid, modifyusername,
		    modifytime, openuserid, openusername, opentime, closeuserid, closeusername, closetime, physicsremark,
		    newtotalbuynum,newtotalbuyamount,costaccountprice,minimum
  	from t_base_goods_info  g
  	<trim prefix="where" prefixOverrides="and|or">
      	<if test="condition.state != null" >
         	and state = #{condition.state}
      	</if>
        <if test="condition.goodsname != null" >
            and name like CONCAT('%',#{condition.goodsname},'%')
        </if>
      	<if test="condition.brandArr != null" >
      	    and brand in
      	    <foreach collection="condition.brandArr" item="branditem" open="(" separator="," close=")">
  		          #{branditem}
  	        </foreach>
      	</if>
      	<if test="condition.defaultsortArr != null" >
      		and defaultsort in
      		<foreach collection="condition.defaultsortArr" item="defaultsortitem" open="(" separator="," close=")">
  		        #{defaultsortitem}
  	        </foreach>
      	</if>
        <if test="condition.id != null">
            and (id like CONCAT('%',#{condition.id},'%') or barcode like CONCAT('%',#{condition.id},'%'))
        </if>
        <if test="condition.exceptids != null">
            and not find_in_set(id, #{condition.exceptids })
        </if>
        <!-- 分销规则 start -->
        <if test="condition.okDistributions != null">
            and ( 1 = 2
            <foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.id in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.goodsid != '' and rd.goodsid is not null and rd.ruleid in(" close="))">
                #{distribution.id }
            </foreach>
            <foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.brand in (select brandid from t_base_sales_distribution_rule_detail rd where rd.brandid != '' and rd.brandid is not null and rd.ruleid in(" close="))">
                #{distribution.id }
            </foreach>
            <foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.defaultsort in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.goodssort != '' and rd.goodssort is not null and rd.ruleid in(" close="))">
                #{distribution.id }
            </foreach>
            <foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.goodstype in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.goodstype != '' and rd.goodstype is not null and rd.ruleid in(" close="))">
                #{distribution.id }
            </foreach>
            <foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.defaultsupplier in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.supplierid != '' and rd.supplierid is not null and rd.ruleid in(" close="))">
                #{distribution.id }
            </foreach>
            )
        </if>
        <if test="condition.ngDistributions != null">
            <foreach collection="condition.ngDistributions" item="distribution" separator="" open="  " close="">
                and
                <choose>
                    <when test="distribution.goodsruletype == 1">
                        g.id not in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodsid != '' and rd.goodsid is not null )
                    </when>
                    <when test="distribution.goodsruletype == 2">
                        g.brand not in (select brandid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.brandid != '' and rd.brandid is not null )
                    </when>
                    <when test="distribution.goodsruletype == 3">
                        g.defaultsort not in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodssort != '' and rd.goodssort is not null )
                    </when>
                    <when test="distribution.goodsruletype == 4">
                        g.goodstype not in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodstype != '' and rd.goodstype is not null )
                    </when>
                    <when test="distribution.goodsruletype == 5">
                        g.defaultsupplier not in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.supplierid != '' and rd.supplierid is not null )
                    </when>
                    <otherwise>
                        1 = 2
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <!-- 分销规则 end -->
		<include refid="common.Page_querySql"/>
      	<include refid="common.Page_dataSql"/>
	</trim>
	<if test="condition.isflag == null">
		<include refid="common.Page_limit"/>
	</if>
  </select>
  <!-- 根据pageMap，品牌和分类获取商品档案数量 -->
  <select id="getGoodsInfoListByBrandAndSortCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	select count(1) from (
      <choose>
          <when test="condition.nopackage == 1">
          </when>
          <otherwise>
              SELECT  p.groupid as id
              from t_sales_promotion_package t2
              RIGHT JOIN t_sales_promotion_package_group p on t2.id=p.billid
              RIGHT JOIN t_sales_promotion_package_group_detail t1 on p.groupid=t1.groupid and p.billid=t1.billid
              RIGHT JOIN t_base_goods_info  g on t1.goodsid=g.id
              <trim prefix="where" prefixOverrides="and|or">
                  <if test="condition.brandArr != null" >
                      and g.brand in
                      <foreach collection="condition.brandArr" item="branditem" open="(" separator="," close=")">
                          #{branditem}
                      </foreach>
                  </if>
                  <if test="condition.defaultsortArr != null" >
                      and g.defaultsort in
                      <foreach collection="condition.defaultsortArr" item="defaultsortitem" open="(" separator="," close=")">
                          #{defaultsortitem}
                      </foreach>
                  </if>
                  <if test="condition.id != null">
                      and (g.id like CONCAT('%',#{condition.id},'%') or g.barcode like CONCAT('%',#{condition.id},'%') )
                  </if>
                  <if test="1==1">
                      and (
                      (t2.customertype = '0')
                  </if>
                  <if test="condition.customerid !=null">
                      or (t2.customertype = '1' and FIND_IN_SET(#{condition.customerid},t2.customerid))
                  </if>
                  <if test="condition.promotionsort !=null">
                      or (t2.customertype = '2' and FIND_IN_SET(#{condition.promotionsort},t2.customerid))
                  </if>
                  <if test="condition.customersort !=null">
                      or (t2.customertype = '3' and FIND_IN_SET(#{condition.customersort},t2.customerid))
                  </if>
                  <if test="condition.pricesort !=null">
                      or (t2.customertype = '4' and FIND_IN_SET(#{condition.pricesort},t2.customerid))
                  </if>
                  <if test="condition.salesarea !=null">
                      or (t2.customertype = '5' and FIND_IN_SET(#{condition.salesarea},t2.customerid))
                  </if>
                  <if test="condition.pcustomerid !=null">
                      or (t2.customertype = '6' and FIND_IN_SET(#{condition.pcustomerid},t2.customerid))
                  </if>
                  <if test="condition.credit !=null">
                      or (t2.customertype = '7' and FIND_IN_SET(#{condition.credit},t2.customerid))
                  </if>
                  <if test="condition.canceltype !=null">
                      or (t2.customertype = '8' and FIND_IN_SET(#{condition.canceltype},t2.customerid))
                  </if>
                  )
                  <![CDATA[and t2.status='3' and p.begindate <= #{condition.date} and p.enddate >=  #{condition.date} ]]>
                  <if test="1==1">
                      and ((p.limitnum>0 and p.remainnum>0 ) or(p.limitnum=0)) and (p.ptype='1' or p.ptype='2')
                  </if>
              </trim>
              group by p.groupid
              UNION ALL
          </otherwise>
      </choose>
  	    select id from t_base_goods_info  g
          <trim prefix="where" prefixOverrides="and|or">
          <if test="condition.state != null" >
              and state = #{condition.state}
          </if>
          <if test="condition.brandArr != null" >
              and brand in
              <foreach collection="condition.brandArr" item="branditem" open="(" separator="," close=")">
                  #{branditem}
              </foreach>
          </if>
          <if test="condition.defaultsortArr != null" >
              and defaultsort in
              <foreach collection="condition.defaultsortArr" item="defaultsortitem" open="(" separator="," close=")">
                  #{defaultsortitem}
              </foreach>
          </if>
          <if test="condition.id != null">
              and (id like CONCAT('%',#{condition.id},'%') or barcode like CONCAT('%',#{condition.id},'%') )
          </if>
              <if test="condition.exceptids != null">
                  and not find_in_set(id, #{condition.exceptids })
              </if>
              <!-- 分销规则 start -->
              <if test="condition.distributionids != null">
                  and ( 1 = 2
                  <foreach collection="condition.distributionids" item="distributionid" separator="," open="or g.id in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.goodsid != '' and rd.goodsid is not null and rd.ruleid in(" close="))">
                      #{distributionid }
                  </foreach>
                  <foreach collection="condition.distributionids" item="distributionid" separator="," open="or g.brand in (select brandid from t_base_sales_distribution_rule_detail rd where rd.brandid != '' and rd.brandid is not null and rd.ruleid in(" close="))">
                      #{distributionid }
                  </foreach>
                  <foreach collection="condition.distributionids" item="distributionid" separator="," open="or g.defaultsort in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.goodssort != '' and rd.goodssort is not null and rd.ruleid in(" close="))">
                      #{distributionid }
                  </foreach>
                  <foreach collection="condition.distributionids" item="distributionid" separator="," open="or g.goodstype in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.goodstype != '' and rd.goodstype is not null and rd.ruleid in(" close="))">
                      #{distributionid }
                  </foreach>
                  <foreach collection="condition.distributionids" item="distributionid" separator="," open="or g.defaultsupplier in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.supplierid != '' and rd.supplierid is not null and rd.ruleid in(" close="))">
                      #{distributionid }
                  </foreach>
                  )
              </if>
              <!-- 分销规则 end -->
          <include refid="common.Page_querySql"/>
          <include refid="common.Page_dataSql"/>
      </trim>
  	) z
  </select>
  <insert id="addGoodsCostpriceShare" flushCache="false">
      insert into t_base_goods_info_costprice_share(billtype,billid,detailid,storageid,goodsid,amount,state,addtime,remark)
      values(#{billtype},#{billid},#{detailid},#{storageid},#{goodsid},#{amount},'1',now(),#{remark})
  </insert>
  <delete id="delteCostDiffAmountShare" flushCache="false">
      delete from t_base_goods_info_costprice_share where billtype=#{billtype} and billid=#{billid} and detailid=#{detailid} and goodsid=#{goodsid} and state='1'
  </delete>
  <select id="getCostDiffAmountByGoodsid" resultType="java.math.BigDecimal" useCache="false">
      select sum(t.amount) as amount from t_base_goods_info_costprice_share t
      where t.goodsid=#{goodsid}  and t.state='1'
      <if test="storageid != null" >
          and storageid=#{storageid}
      </if>
  </select>
    <select id="getCostDiffAmountByGoodsidAndRelate" resultType="java.math.BigDecimal" useCache="false">
        select sum(t.amount) as amount from t_base_goods_info_costprice_share t where t.goodsid=#{goodsid} and t.state='0' and t.relatebillid=#{relatebillid} and t.releatedetailid=#{releatedetailid}
    </select>

  <update id="closeCostDiffAmountByGoodsid" flushCache="false">
      update t_base_goods_info_costprice_share t
      set t.state='0',t.updatetime=now(),t.relatebillid=#{relatebillid},t.releatedetailid=#{releatedetailid}
      where t.goodsid=#{goodsid} and t.state='1'
      <if test="storageid != null" >
          and t.storageid=#{storageid}
      </if>
  </update>
    <update id="openCostDiffAmountByGoodsid" flushCache="false">
        update t_base_goods_info_costprice_share t
        set t.state='1',t.updatetime=now(),t.relatebillid='',t.releatedetailid=''
        where t.goodsid=#{goodsid} and t.state='0' and t.relatebillid=#{relatebillid} and t.releatedetailid=#{releatedetailid}
    </update>
  <select id="hasCostDiffAmountNoShare" resultType="int" useCache="false">
      select count(1) from t_base_goods_info_costprice_share t where t.billtype=#{billtype} and t.billid=#{billid} and t.detailid=#{detailid} and t.goodsid=#{goodsid} and state='1'
  </select>
    <select id="getAllGoodsidList" resultType="java.lang.String">
        select id from t_base_goods_info  where state='1'
    </select>

    <sql id="storageGoodsInfoListFroPhone_sql">
        select g.id,g.name,g.pinyin, g.state, g.remark,g.model, g.mainunit, g.goodstype, g.spell, g.brand,g.deptid, g.abclevel, g.defaultsort,
        g.barcode, g.boxbarcode, g.itemno, g.bstype,g.productfield, g.sortkey, g.isinoutstorage, g.storageid, g.storagelocation,
        g.isbatch, g.isstoragelocation, g.isshelflife, g.shelflife, g.shelflifeunit
        FROM t_base_goods_info  g
        <choose>
            <when test="isBrandUser != null">
                LEFT JOIN t_base_personnel_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
            </when>
            <when test="isSupplierUser !=null">
                LEFT JOIN t_base_personnel_supplier_brand pc on g.brand=pc.brandid and pc.personid=#{personnelid}
            </when>
        </choose>
        <if test="storageid != null">
            left join t_storage_summary t on g.id=t.goodsid
        </if>
        <trim prefix="where" prefixOverrides="and|or">
            <choose>
                <when test="isBrandUser != null">
                    <if test="datasql != null" >
                        and (${datasql} or pc.personid=#{personnelid})
                    </if>
                    <if test="datasql == null" >
                        and  pc.personid=#{personnelid}
                    </if>
                </when>
                <when test="isSupplierUser != null">
                    <if test="datasql != null" >
                        and (${datasql} or pc.personid=#{personnelid})
                    </if>
                    <if test="datasql == null" >
                        and  pc.personid=#{personnelid}
                    </if>
                </when>
                <otherwise>
                    <if test="datasql != null" >
                        and ${datasql}
                    </if>
                </otherwise>
            </choose>
            <if test="brandids != null">
                and  FIND_IN_SET(g.brand,#{brandids})
            </if>
            <if test="storageid != null">
                and t.storageid=#{storageid}
            </if>

            <if test="goodscon != null">
                and (g.id like '${goodscon}%' or g.name like '%${goodscon}%' or g.spell like '${goodscon}%' or g.pinyin like '${goodscon}%' or g.barcode like '%${goodscon}' or g.boxbarcode like '%${goodscon}'
                <if test="conarr != null">
                    or (
                    <trim prefix="" prefixOverrides="and|or">
                        <foreach collection="conarr" index="index" item="item">
                            and g.name like '%${item}%'
                        </foreach>
                    </trim>
                    )
                </if>
                )
            </if>
        </trim>
    </sql>
    <select id="getStorageGoodsInfoListFroPhone" resultType="com.hd.agent.basefiles.model.GoodsInfo" useCache="false">
        select * from ( <include refid="storageGoodsInfoListFroPhone_sql"/>) z
        order by z.id asc
        limit #{startNum} , #{rows}
    </select>
    <select id="gettStorageGoodsInfoListFroPhoneCount" resultType="int" useCache="false">
        select count(1) from ( <include refid="storageGoodsInfoListFroPhone_sql"/>) z
    </select>
    <select id="getGoodsListForMecshop" parameterType="java.util.Date" resultType="com.hd.agent.basefiles.model.GoodsInfo">
        select
            t1.id, t1.name, t1.pinyin, t1.state, t1.remark, t1.model, t1.mainunit, t1.goodstype, t1.spell, t1.brand, t1.deptid, t1.abclevel, t1.defaultsort,
            t1.barcode, t1.boxbarcode, t1.itemno, t1.bstype, t1.productfield, t1.sortkey, t1.isinoutstorage, t1.storageid, t1.storagelocation,
            t1.isbatch, t1.isstoragelocation, t1.isshelflife, t1.shelflife, t1.shelflifeunit, t1.highestbuyprice,
            t1.lowestsaleprice, t1.basesaleprice, t1.highestinventory, t1.lowestinventory, t1.safeinventory,
            t1.checktype, t1.checkdate, t1.checkunit, t1.defaultbuyer, t1.defaultsaler, t1.defaultsupplier, t1.secondsupplier,
            t1.defaulttaxtype, t1.planmargin, t1.newbuyprice, t1.newsaleprice, t1.newstorageprice, t1.newbuydate,
            t1.newsaledate, t1.everybillaveragesales, t1.newinstroragedate, t1.newoutstoragedate, t1.newinventory,
            t1.newcheckdate, t1.gshape, t1.glength, t1.gmlength, t1.gwidth, t1.gmwidth, t1.ghight, t1.gmhight, t1.gdiameter,
            t1.gmdiameter, t1.grossweight, t1.netweight, t1.totalweight, t1.totalvolume, t1.singlevolume, t1.kgweight, t1.image, t1.imageids,
            t1.field01, t1.field02, t1.field03, t1.field04, t1.field05, t1.field06, t1.field07, t1.field08, t1.field09, t1.field10, t1.field11,
            t1.field12, t1.adduserid, t1.addusername, t1.adddeptid, t1.adddeptname, t1.addtime, t1.modifyuserid, t1.modifyusername,
            t1.modifytime, t1.openuserid, t1.openusername, t1.opentime, t1.closeuserid, t1.closeusername, t1.closetime, t1.physicsremark,
            t1.newtotalbuynum, t1.newtotalbuyamount, t1.costaccountprice, t1.minimum, t1.basesaleprice,t1.normalprice, t2.meteringunitid auxunitid, t2.rate boxnum
        from t_base_goods_info  t1
        left join t_base_goods_info_meteringunit  t2 on t1.id = t2.goodsid
        <trim prefix="where" prefixOverrides="and|or">
            <if test="time != null">
                and(t1.addtime > #{time } or t1.modifytime > #{time })
            </if>
        </trim>
    </select>
    <select id="getGoodsPriceListForMecshop" parameterType="java.util.Date" resultType="com.hd.agent.basefiles.model.GoodsInfo_PriceInfo">
        select goodsid, code, name, taxprice, taxtype, price,boxprice, remark
        from t_base_goods_info_price
        limit #{offset }, #{rows }
    </select>
    <select id="getMeteringUnitListForMecshop" parameterType="java.util.Date" resultType="com.hd.agent.basefiles.model.MeteringUnit">
        select <include refid="MU_Column_List"/>
        from t_base_goods_meteringunit
    </select>
    <select id="getWaresClassListForMecshop" parameterType="java.util.Date" resultType="com.hd.agent.basefiles.model.WaresClass">
        select <include refid="WC_Column_List"/>
        from t_base_goods_waresclass
    </select>
    <select id="getBrandListForMecshop" parameterType="java.util.Date" resultType="com.hd.agent.basefiles.model.Brand">
        select <include refid="Brand_Column_List"/>
        from t_base_goods_brand   
    </select>
    <!-- 获取商品牌列表 -->
    <select id="getOpenedBrandList" resultType="com.hd.agent.basefiles.model.Brand">
        select
        <include refid="Brand_Column_List"/>
        from t_base_goods_brand    where state = '1'
    </select>

    <select id="getGoodesCostpriceChangeList" resultType="map">
        select t.goodsid,g.name as goodsname,t.costprice,t.remark,DATE_FORMAT(t.addtime,'%Y-%m-%d %H:%i:%s') as addtime,t.billid
        from t_base_goodsinfo_costprice_change t
        LEFT JOIN t_base_goods_info  g on t.goodsid =g.id
        where goodsid=#{goodsid}
        order by t.addtime
    </select>
    <select id="getGoodsListForHTJS" resultType="map" parameterType="com.hd.agent.common.util.PageMap" useCache="false">
        SELECT b.id as brandid,b.name as brandname,b.jsclusterid,t.jsgoodsid,t.id as goodsid, t.name,'' as jm,ft.jsrateid as spsm,
        round(ft.rate/100,2)  as sl, t.model as ggxh,'' as jjdw,0 as dj,'False' as hsjbz,'' as ycbj,'' as zwhzyqt,t.jstaxsortid as ssflbm,'' as sfxsyhzc,
        '' as ssflbmmc,'' as yhzclx,(case when ft.rate=0 then '1' else '' end) as lslbs,'${condition.bmbbh}' bmbbh,ft.jsflag as jstaxflag
        FROM t_base_goods_info  t
        INNER JOIN t_base_goods_brand    b on t.brand=b.id
        LEFT JOIN t_base_finance_taxtype ft on t.defaulttaxtype = ft.id
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1==1">
                and t.state='1' and b.state='1'
            </if>
            <if test="condition.brandidarrs != null">
                and find_in_set(b.id,#{condition.brandidarrs})
            </if>
            <if test="condition.goodsidarrs != null">
                and find_in_set(t.id,#{condition.goodsidarrs})
            </if>
            <choose>
                <when test="condition.filterjsgoodsid==1">
                    and (t.jsgoodsid is not null and length(t.jsgoodsid)>0)
                </when>
                <when test="condition.filterjsgoodsid==2">
                    and (t.jsgoodsid is null or length(t.jsgoodsid)=0)
                </when>
            </choose>
            <choose>
                <when test="condition.filterjstaxsortid==1">
                    and (t.jstaxsortid is not null and length(t.jstaxsortid)>0)
                </when>
                <when test="condition.filterjstaxsortid==2">
                    and (t.jstaxsortid is null or length(t.jstaxsortid)=0)
                </when>
            </choose>
            <if test="condition.filtergoodstate!=null">
                and t.state=#{condition.filtergoodstate}
            </if>
            <if test="condition.filterbrandstate!=null">
                and b.state=#{condition.filterbrandstate}
            </if>
        </trim>
        ORDER BY b.id asc,t.id asc
    </select>
    <update id="updateJsgoodsForHTKPBatch" parameterType="java.util.List">
        <foreach collection="list" index="index" item="item">
            update t_base_goods_info
            <set >
                <if test="item.jsgoodsid != null" >
                    jsgoodsid = #{item.jsgoodsid},
                </if>
                <if test="item.jsgoodsmodifytime != null" >
                    jsgoodsmodifytime = #{item.jsgoodsmodifytime},
                </if>
                <if test="item.jsgoodsmodifyuserid != null" >
                    jsgoodsmodifyuserid = #{item.jsgoodsmodifyuserid},
                </if>
                <if test="item.jsgoodsmodifyusername != null" >
                    jsgoodsmodifyusername = #{item.jsgoodsmodifyusername},
                </if>
                <if test="item.jstaxsortid != null" >
                    jstaxsortid = #{item.jstaxsortid},
                </if>
            </set>
            where id = #{item.id};
        </foreach>
    </update>


    <select id="getUpdatedGoodsList" parameterType="java.util.Map" resultType="java.util.Map">
        select
        t1.id,
        t1.name,
        t1.barcode,
        t1.state,
        t1.remark,
        case
        when t2.mode is null then 0
        when t2.mode = 1 then rate
        when t2.mode = 2 then 1 / rate
        else 0
        end boxnum,
        t3.taxprice saleprice,
        t4.name mainunit
        from t_base_goods_info  t1
        left join t_base_goods_info_meteringunit  t2 on t1.id = t2.goodsid
        left join t_base_goods_info_price t3 on t1.id = t3.goodsid
        left join t_base_goods_meteringunit  t4 on t1.mainunit = t4.id
        where 1 = 1
        <if test="modifytime != null" >
            and
            (
            t1.modifytime <![CDATA[ >= ]]> #{modifytime}
            or t1.addtime <![CDATA[ >= ]]> #{modifytime}
            )
        </if>
        <if test="goodsid != null">
            and t1.id = #{goodsid }
        </if>
        and t3.code = #{code}
    </select>

    <update id="editGoodsItemno" parameterType="java.lang.String">
        update t_base_goods_info  set itemno = #{itemno}
        where id = #{goodsid}
    </update>

    <!-- 修改商品金税信息 -->
    <update id="updateGoodsInfoForJS" parameterType="com.hd.agent.basefiles.model.GoodsInfo">
        update t_base_goods_info
        <set >
            <if test="jsgoodsid != null" >
                jsgoodsid = #{jsgoodsid},
            </if>
            <if test="jsgoodsmodifytime != null" >
                jsgoodsmodifytime = #{jsgoodsmodifytime},
            </if>
            <if test="jsgoodsmodifyuserid != null" >
                jsgoodsmodifyuserid = #{jsgoodsmodifyuserid},
            </if>
            <if test="jsgoodsmodifyusername != null" >
                jsgoodsmodifyusername = #{jsgoodsmodifyusername},
            </if>
            <if test="jstaxsortid != null" >
                jstaxsortid = #{jstaxsortid},
            </if>
        </set>
        where id = #{id}
    </update>
    <sql id="goodesSimplifyViewCostpriceChage_sql">
        select t.goodsid,g.name as goodsname,t.costprice,t.remark,DATE_FORMAT(t.addtime,'%Y-%m-%d %H:%i:%s') as addtime,t.billid
        from t_base_goodsinfo_costprice_change t
        LEFT JOIN t_base_goods_info  g on t.goodsid =g.id
        where goodsid=#{condition.goodsid}
        order by t.addtime
    </sql>
    <select id="getGoodesSimplifyViewCostpriceChageList" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
        <include refid="goodesSimplifyViewCostpriceChage_sql"/>
        <include refid="common.Page_limit"/>
    </select>
    <select id="getGoodesSimplifyViewCostpriceChageCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
        select count(1) from (<include refid="goodesSimplifyViewCostpriceChage_sql"/>)z
    </select>
    <update id="updateCostGoodsCostPrice" parameterType="java.lang.String">
        <!--更新商品最新库存价价-->
        UPDATE t_storage_stocksum t,t_base_goods_info t1
        SET t1.newstorageprice=t.costprice WHERE t.storageid='' AND t.goodsid=t1.id
        AND t.id=#{accountid} AND t.costprice is NOT NULL;

        <!--更新商品未分摊金额-->
        UPDATE t_storage_stocksum t,t_base_goods_info_costprice_share t1 SET t1.state='0'
        WHERE t.storageid='' AND t.goodsid=t1.goodsid AND t.id=#{accountid};
    </update>
    <update id="editStorageSummaryMeteringInfo" parameterType="java.lang.String">
        UPDATE t_storage_summary t  SET
        t.unitid=#{unitid},t.auxunitid=#{auxunitid},t.unitname=#{unitname},t.auxunitname=#{auxunitname}
        WHERE t.goodsid=#{goodsid};

        UPDATE t_storage_summary_batch t  SET
        t.unitid=#{unitid},t.auxunitid=#{auxunitid},t.unitname=#{unitname},t.auxunitname=#{auxunitname}
        WHERE t.goodsid=#{goodsid};
    </update>
</mapper>
