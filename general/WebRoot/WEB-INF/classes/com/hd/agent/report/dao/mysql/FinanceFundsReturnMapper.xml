<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hd.agent.report.dao.FinanceFundsReturnMapper">
	<sql id="temp_customer_funds_report">
		(
			select z.customerid,IF ((c.pid = NULL OR c.pid = ''),z.customerid,c.pid) AS pcustomerid,sum(z.taxamount) as sendamount,sum(z.notaxamount) as sendnotaxamount,
			sum(z.directreturnamount) as directreturnamount, sum(z.directreturnnotaxamount) as directreturnnotaxamount,
			sum(z.checkreturnamount) as checkreturnamount, sum(z.checkreturnnotaxamount) as checkreturnnotaxamount,
			sum(z.returntaxamount) as returntaxamount,sum(z.returnnotaxamount) as returnnotaxamount,
			sum(z.pushbalanceamount) as pushbalanceamount,sum(z.withdrawnamount) as withdrawnamount,sum(z.costwriteoffamount) as costwriteoffamount,
			sum(z.allsendamount) as allsendamount,sum(z.allreturnamount) as allreturnamount,sum(z.allpushbalanceamount) as  allpushbalanceamount,
			sum(z.unauditamount) as unauditamount,sum(z.auditamount) as auditamount,sum(z.rejectamount) as rejectamount
			from (select t.customerid,
			t1.taxamount as taxamount,t1.notaxamount as notaxamount,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,0 as returntaxamount ,0 as returnnotaxamount,
			0 as pushbalanceamount,0 as withdrawnamount ,0 as costwriteoffamount,0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_storage_saleout t
			right join t_storage_saleout_detail t1 on t1.saleoutid=t.id
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	and (t.status='3' or t.status='4')
		      </if>
			</trim>
			union all
			select t.customerid,0 as taxamount ,0 as notaxamount ,
			t1.taxamount as directreturnamount, t1.notaxamount as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,t1.taxamount as returntaxamount,t1.notaxamount as returnnotaxamount,
			0 as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_storage_salereject_enter t
			right join t_storage_salereject_enter_detail t1 on t1.salerejectid=t.id  
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	and t.sourcetype='2' and (t.status='3' or t.status='4')
		      </if>
			</trim>
			union all
			select t.customerid,0 as taxamount ,0 as notaxamount ,
			0 as directreturnamount, 0 as directreturnnotaxamount,t1.taxamount as checkreturnamount, t1.notaxamount as checkreturnnotaxamount,t1.taxamount as returntaxamount,t1.notaxamount as returnnotaxamount,
			0 as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_storage_salereject_enter t
			right join t_storage_salereject_enter_detail t1 on t1.salerejectid=t.id 
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	and t.sourcetype='1' and (t.status='3' or t.status='4')
		      </if>
			</trim>
			union ALL
			select t1.customerid,0 as taxamount ,0 as notaxamount ,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,0 as returntaxamount,0 as returnnotaxamount,
			0 as pushbalanceamount,t1.taxamount as withdrawnamount,t1.costprice*t1.unitnum as costwriteoffamount,
			0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_account_sales_invoice si
			right join t_account_sales_invoice_detail t1 on t1.billid=si.id
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and si.writeoffdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and si.writeoffdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t1.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	and si.iswriteoff='1' and  si.status='4'
		      </if>
			</trim>
			union ALL
			select pb.customerid,0 as taxamount ,0 as notaxamount ,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,0 as returntaxamount,0 as returnnotaxamount,
			0 as pushbalanceamount,pb.amount as withdrawnamount,0 as costwriteoffamount,0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_account_customer_push_balance  pb
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and pb.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and pb.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and pb.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	and pb.isinvoice='0' and pb.iswriteoff='1' and (pb.status='3' or pb.status='4')
		      </if>
			</trim>
			union ALL
			select pb.customerid,0 as taxamount ,0 as notaxamount ,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,0 as returntaxamount,0 as returnnotaxamount,
			pb.amount as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_account_customer_push_balance  pb
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and pb.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and pb.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and pb.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	and (pb.status='3' or pb.status='4')
		      </if>
			</trim>
			UNION ALL
			select t.customerid,
			0 as taxamount,0 as notaxamount,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,0 as returntaxamount ,0 as returnnotaxamount,
			0 as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,
			t1.taxamount as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_storage_saleout t
			right join t_storage_saleout_detail t1 on t1.saleoutid=t.id
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	 and t1.iswriteoff='0' and (t.status='3' or t.status='4')
		      </if>
			</trim>
			UNION ALL
			select t.customerid,0 as taxamount ,0 as notaxamount ,
			0 as directreturnamount,0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,0 as returntaxamount,0 as returnnotaxamount,
			0 as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,0 as allsendamount,t1.taxamount as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_storage_salereject_enter t
			right join t_storage_salereject_enter_detail t1 on t1.salerejectid=t.id
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	and t1.iswriteoff='0' and (t.status='3' or t.status='4')
		      </if>
			</trim>
			union ALL
			select pb.customerid,0 as taxamount ,0 as notaxamount ,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,0 as returntaxamount,0 as returnnotaxamount,
			0 as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,0 as allsendamount,0 as allreturnamount,pb.amount as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_account_customer_push_balance  pb
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and pb.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and pb.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	and pb.status='3'
		      </if>
			</trim>
			union ALL
			select t.customerid,0 AS taxamount,0 AS notaxamount,0 AS directreturnamount,0 AS directreturnnotaxamount,
			0 AS checkreturnamount,0 AS checkreturnnotaxamount,0 AS returntaxamount,0 AS returnnotaxamount,
			0 AS pushbalanceamount,0 AS withdrawnamount,0 as costwriteoffamount,
			0 AS allsendamount,0 AS allreturnamount,0 AS allpushbalanceamount,
			t1.taxamount as unauditamount,0 as auditamount,0 as rejectamount
			from t_sales_receipt t
			RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	and t.status='2' and t1.iswriteoff='0'
		      </if>
			</trim>
			UNION ALL
			select t.customerid,0 AS taxamount,0 AS notaxamount,0 AS directreturnamount,0 AS directreturnnotaxamount,
				0 AS checkreturnamount,0 AS checkreturnnotaxamount,0 AS returntaxamount,0 AS returnnotaxamount,
				0 AS pushbalanceamount,0 AS withdrawnamount,0 as costwriteoffamount,
				0 AS allsendamount,0 AS allreturnamount,0 AS allpushbalanceamount,
				0 as unauditamount,t1.receipttaxamount as auditamount,0 as rejectamount
			from t_sales_receipt t
			RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	and t.status in('3','4') and t1.iswriteoff='0'
		      </if>
			</trim>
			UNION ALL
			select t.customerid,0 AS taxamount,0 AS notaxamount,0 AS directreturnamount,0 AS directreturnnotaxamount,
				0 AS checkreturnamount,0 AS checkreturnnotaxamount,0 AS returntaxamount,0 AS returnnotaxamount,
				0 AS pushbalanceamount,0 AS withdrawnamount,0 as costwriteoffamount,
				0 AS allsendamount,0 AS allreturnamount,0 AS allpushbalanceamount,
				0 as unauditamount,0 as auditamount,-t1.taxamount as rejectamount
			from t_storage_salereject_enter t
			RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	and t.sourcetype='1' and t.status in('3','4') and t1.iswriteoff='0'
		      </if>
			</trim>
			) z
			LEFT JOIN t_base_sales_customer c ON z.customerid = c.id
			<trim prefix="where" prefixOverrides="and|or" >
				<if test="condition.pcustomerid != null" >
		         and c.pid = #{condition.pcustomerid}
		    	</if>
		    </trim>
			GROUP BY z.customerid
		)
	</sql>
	<sql id="temp_customerbrand_funds_report">
		(
			select z.customerid,z.brandid,sum(z.taxamount) as taxamount,sum(z.notaxamount) as notaxamount,
			sum(z.directreturnamount) as directreturnamount, sum(z.directreturnnotaxamount) as directreturnnotaxamount,
			sum(z.checkreturnamount) as checkreturnamount, sum(z.checkreturnnotaxamount) as checkreturnnotaxamount,
			sum(z.returntaxamount) as returntaxamount,sum(z.returnnotaxamount) as returnnotaxamount,
			sum(z.pushbalanceamount) as pushbalanceamount,sum(z.withdrawnamount) as withdrawnamount,sum(z.costwriteoffamount) as costwriteoffamount,
			sum(z.allsendamount) as allsendamount,sum(z.allreturnamount) as allreturnamount,sum(z.allpushbalanceamount) as  allpushbalanceamount,
			sum(z.unauditamount) as unauditamount,sum(z.auditamount) as auditamount,sum(z.rejectamount) as rejectamount
			from (select t.customerid,t1.brandid,
			t1.taxamount as taxamount,t1.notaxamount as notaxamount,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,
			0 as returntaxamount ,0 as returnnotaxamount,
			0 as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,
			0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_storage_saleout t
			right join t_storage_saleout_detail t1 on t1.saleoutid=t.id
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="condition.brandid != null" >
		         and t1.brandid=#{condition.brandid}
		      </if>
		      <if test="1==1">
		      	and (t.status='3' or t.status='4')
		      </if>
			</trim>
			union all
			select t.customerid,t1.brandid,0 as taxamount ,0 as notaxamount ,
			0 as directreturnamount, 0 as directreturnnotaxamount,t1.taxamount as checkreturnamount, t1.notaxamount as checkreturnnotaxamount,
			t1.taxamount as returntaxamount,t1.notaxamount as returnnotaxamount,0 as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,
			0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_storage_salereject_enter t
			right join t_storage_salereject_enter_detail t1 on t1.salerejectid=t.id
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="condition.brandid != null" >
		         and t1.brandid=#{condition.brandid}
		      </if>
		      <if test="1==1">
		      	and t.sourcetype='1' and (t.status='3' or t.status='4')
		      </if>
			</trim>
			union all
			select t.customerid,t1.brandid,0 as taxamount ,0 as notaxamount ,
			t1.taxamount as directreturnamount, t1.notaxamount as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,
			t1.taxamount as returntaxamount,t1.notaxamount as returnnotaxamount,0 as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,
			0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_storage_salereject_enter t
			right join t_storage_salereject_enter_detail t1 on t1.salerejectid=t.id
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2})]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="condition.brandid != null" >
		         and t1.brandid=#{condition.brandid}
		      </if>
		      <if test="1==1">
		      	and t.sourcetype='2' and (t.status='3' or t.status='4')
		      </if>
			</trim>
			union ALL
			select t1.customerid,t1.brandid,0 as taxamount ,0 as notaxamount ,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,
			0 as returntaxamount,0 as returnnotaxamount,0 as pushbalanceamount,
			t1.taxamount as withdrawnamount,t1.costprice*t1.unitnum as costwriteoffamount,
			0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_account_sales_invoice t
			right join t_account_sales_invoice_detail t1 on t1.billid=t.id
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="condition.brandid != null" >
		         and t1.brandid=#{condition.brandid}
		      </if>
		      <if test="1==1">
		      	and t.iswriteoff='1' and  t.status='4'
		      </if>
			</trim>
			union ALL
			select t.customerid,t.brandid,0 as taxamount ,0 as notaxamount ,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,0 as returntaxamount,0 as returnnotaxamount,
			0 as pushbalanceamount,t.amount as withdrawnamount,0 as costwriteoffamount,
			0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_account_customer_push_balance t
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="1==1">
		      	and t.isinvoice='0' and t.iswriteoff='1' and (t.status='3' or t.status='4')
		      </if>
			</trim>
			UNION ALL
			select t.customerid,t.brandid,0 as taxamount ,0 as notaxamount ,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,0 as returntaxamount,0 as returnnotaxamount,
			t.amount as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,
			0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_account_customer_push_balance  t 
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="condition.brandid != null" >
		         and t.brand=#{condition.brandid}
		      </if>
		      <if test="1==1">
		      	and (t.status='3' or t.status='4')
		      </if>
			</trim>
			UNION ALL
			select t.customerid,t1.brandid,
			0 as taxamount,0 as notaxamount,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,
			0 as returntaxamount ,0 as returnnotaxamount,
			0 as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,
			t1.taxamount as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_storage_saleout t
			right join t_storage_saleout_detail t1 on t1.saleoutid=t.id
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="condition.brandid != null" >
		         and t1.brandid=#{condition.brandid}
		      </if>
		      <if test="1==1">
		      	 and t1.iswriteoff='0' and (t.status='3' or t.status='4')
		      </if>
			</trim>
			UNION ALL
			select t.customerid,t1.brandid,0 as taxamount ,0 as notaxamount ,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,
			0 as returntaxamount,0 as returnnotaxamount,0 as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,
			0 as allsendamount,t1.taxamount as allreturnamount,0 as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_storage_salereject_enter t
			right join t_storage_salereject_enter_detail t1 on t1.salerejectid=t.id
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="condition.brandid != null" >
		         and t1.brandid=#{condition.brandid}
		      </if>
		      <if test="1==1">
		      	 and t1.iswriteoff='0' and (t.status='3' or t.status='4')
		      </if>
			</trim>
			UNION ALL
			select t.customerid,t.brandid,0 as taxamount ,0 as notaxamount ,
			0 as directreturnamount, 0 as directreturnnotaxamount,0 as checkreturnamount, 0 as checkreturnnotaxamount,0 as returntaxamount,0 as returnnotaxamount,
			0 as pushbalanceamount,0 as withdrawnamount,0 as costwriteoffamount,
			0 as allsendamount,0 as allreturnamount,t.amount as allpushbalanceamount,
			0 as unauditamount,0 as auditamount,0 as rejectamount
			from t_account_customer_push_balance  t 
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="condition.brandid != null" >
		         and t.brand=#{condition.brandid}
		      </if>
		      <if test="1==1">
		      	and  t.status='3' and t.iswriteoff='0'
		      </if>
			</trim>
			UNION ALL
			select t.customerid,t1.brandid,0 AS taxamount,0 AS notaxamount,0 AS directreturnamount,0 AS directreturnnotaxamount,
			0 AS checkreturnamount,0 AS checkreturnnotaxamount,0 AS returntaxamount,0 AS returnnotaxamount,
			0 AS pushbalanceamount,0 AS withdrawnamount,0 as costwriteoffamount,
			0 AS allsendamount,0 AS allreturnamount,0 AS allpushbalanceamount,
			t1.taxamount as unauditamount,0 as auditamount,0 as rejectamount
			from t_sales_receipt t
			RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="condition.brandid != null" >
		         and t1.brandid=#{condition.brandid}
		      </if>
		      <if test="1==1">
		      	and  t.status='2' and t1.iswriteoff='0' 
		      </if>
			</trim>
			UNION ALL
			select t.customerid,t1.brandid,0 AS taxamount,0 AS notaxamount,0 AS directreturnamount,0 AS directreturnnotaxamount,
				0 AS checkreturnamount,0 AS checkreturnnotaxamount,0 AS returntaxamount,0 AS returnnotaxamount,
				0 AS pushbalanceamount,0 AS withdrawnamount,0 as costwriteoffamount,
				0 AS allsendamount,0 AS allreturnamount,0 AS allpushbalanceamount,
				0 as unauditamount,t1.receipttaxamount as auditamount,0 as rejectamount
			from t_sales_receipt t
			RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
			 <trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="condition.brandid != null" >
		         and t1.brandid=#{condition.brandid}
		      </if>
		      <if test="1==1">
		      	and  t.status in('3','4') and t1.iswriteoff='0' 
		      </if>
			</trim>
			UNION ALL
			select t.customerid,t1.brandid,0 AS taxamount,0 AS notaxamount,0 AS directreturnamount,0 AS directreturnnotaxamount,
				0 AS checkreturnamount,0 AS checkreturnnotaxamount,0 AS returntaxamount,0 AS returnnotaxamount,
				0 AS pushbalanceamount,0 AS withdrawnamount,0 as costwriteoffamount,
				0 AS allsendamount,0 AS allreturnamount,0 AS allpushbalanceamount,
				0 as unauditamount,0 as auditamount,-t1.taxamount as rejectamount
			from t_storage_salereject_enter t
			RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
		      <if test="condition.brandid != null" >
		         and t1.brandid=#{condition.brandid}
		      </if>
		      <if test="1==1">
		      	and  t.sourcetype='1' and t1.iswriteoff='0' and t.status in('3','4')  
		      </if>
			</trim>
			) z
			GROUP BY z.customerid,z.brandid
		)
	</sql>
  	<select id="getFundsCustomerReturnReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.FundsCustomerReturnReport">
		select * from <include refid="temp_customer_funds_report"/> t
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getFundsCustomerReturnReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from <include refid="temp_customer_funds_report"/> t
  	</select>
  	<select id="getFundsCustomerCostamountByCustomerid" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
		select sum(y.costamount)	from (select z.goodsid,z.unitnum*z.avgprice as costamount from (
				SELECT
					t1.goodsid,sum(t1.unitnum) AS unitnum,
					IF ((g.newstorageprice is NULL OR g.newstorageprice = 0),g.highestbuyprice,g.newstorageprice) AS avgprice
				FROM
					t_storage_saleout t
				RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
				LEFT JOIN t_base_sales_customer c ON t.customerid = c.id
				left join t_base_goods_info g on t1.goodsid=g.id
				<trim prefix="where" prefixOverrides="and|or" >
		  			<if test="condition.businessdate1 != null">
					 and t.businessdate >= #{condition.businessdate1}
				  </if>
				  <if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  </if>
			      <if test="condition.thiscustomer != null" >
			         and (t.customerid = #{condition.thiscustomer} or c.pid=#{condition.thiscustomer})
			      </if>
			      <if test="1==1">
			      	and (t.status='3' or t.status='4')
			      </if>
				</trim>
				GROUP BY goodsid) z
			union all 
			select b.goodsid,-b.unitnum*b.avgprice as costamount from (
				SELECT
					t1.goodsid,sum(t1.unitnum) AS unitnum,
					IF ((g.newstorageprice is NULL OR g.newstorageprice = 0),g.highestbuyprice,g.newstorageprice) AS avgprice
				FROM
					t_storage_salereject_enter t
				RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
				LEFT JOIN t_base_sales_customer c ON t.customerid = c.id
				left join t_base_goods_info g on t1.goodsid=g.id
				<trim prefix="where" prefixOverrides="and|or" >
		  			<if test="condition.businessdate1 != null">
					 and t.businessdate >= #{condition.businessdate1}
				  </if>
				  <if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  </if>
			      <if test="condition.thiscustomer != null" >
			         and (t.customerid = #{condition.thiscustomer} or c.pid=#{condition.thiscustomer})
			      </if>
			      <if test="1==1">
			      	and (t.status='3' or t.status='4')
			      </if>
				</trim>
				GROUP BY goodsid) b
		)y
  	</select>
  	<select id="getFundsCustomerCostamountSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(y.costamount)	from (select z.goodsid,z.unitnum*z.avgprice as costamount from (
				SELECT t1.goodsid,sum(t1.unitnum) AS unitnum,
					IF ((g.newstorageprice is NULL OR g.newstorageprice = 0),g.highestbuyprice,g.newstorageprice) AS avgprice
				FROM
					t_storage_saleout t
				RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
				LEFT JOIN t_base_sales_customer c ON t.customerid = c.id
				left join t_base_goods_info g on t1.goodsid=g.id
				<trim prefix="where" prefixOverrides="and|or" >
		  			<if test="condition.businessdate1 != null">
					 and t.businessdate >= #{condition.businessdate1}
				  </if>
				  <if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  </if>
				  <if test="condition.customerid != null" >
				  	and (t.customerid = #{condition.customerid} or c.pid=#{condition.customerid})
			      </if>
			      <if test="1==1">
			      	and (t.status='3' or t.status='4')
			      </if>
				</trim>
				GROUP BY goodsid) z
			union all 
			select b.goodsid,-b.unitnum*b.avgprice as costamount from (
				SELECT t1.goodsid,sum(t1.unitnum) AS unitnum,
					IF ((g.newstorageprice is NULL OR g.newstorageprice = 0),g.highestbuyprice,g.newstorageprice) AS avgprice
				FROM
					t_storage_salereject_enter t
				RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
				LEFT JOIN t_base_sales_customer c ON t.customerid = c.id
				left join t_base_goods_info g on t1.goodsid=g.id
				<trim prefix="where" prefixOverrides="and|or" >
		  			<if test="condition.businessdate1 != null">
					 and t.businessdate >= #{condition.businessdate1}
				  </if>
				  <if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  </if>
				  <if test="condition.customerid != null" >
				  	and (t.customerid = #{condition.customerid} or c.pid=#{condition.customerid})
			      </if>
			      <if test="1==1">
			      	and (t.status='3' or t.status='4')
			      </if>
				</trim>
				GROUP BY goodsid) b
		)y
  	</select>
  	<select id="getFundsCustomerReturnSumReport" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.FundsCustomerReturnReport">
  		select sum(t.sendamount) as sendamount,sum(t.sendnotaxamount) as sendnotaxamount,
  		sum(t.directreturnamount) as directreturnamount,sum(t.directreturnnotaxamount) as directreturnnotaxamount,
  		sum(t.checkreturnamount) as checkreturnamount,sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
		sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
		sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
		sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as allpushbalanceamount,
		sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
  		from <include refid="temp_customer_funds_report"/>  t
  	</select>
  	<!-- 客户销售情况流水sql -->
  	<sql id="customerSalesFlow_sql">
  		(
  		select t.id,t.saleorderid as orderid,t.storageid as deliveryStorage,t.businessdate,t.customerid,t.pcustomerid as pcustomerid,t.customersort,t.salesarea,t.salesuser,t.salesdept,t1.branduser,t1.branddept,t1.brandid,t1.duefromdate,
  		1 as billtype,t1.goodsid,t1.unitnum,t1.auxnum,t1.auxremainder,t1.totalbox,t1.taxprice as price,t1.costprice,t1.taxamount,t1.costprice*t1.unitnum as costamount,t1.isdiscount ,t1.isinvoice,t1.iswriteoff,t1.remark,t1.invoicedate,t1.writeoffdate,t1.isinvoicebill,t1.invoicebilldate,
  		t1.notaxprice as noprice,t1.notaxamount,t1.taxtype,t1.tax,t1.unitid,t1.unitname
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and t.id like concat('%',#{condition.id},'%')
	      </if>
		  <if test="condition.type == 1" >
			and t1.id in (select id from t_storage_saleout_detail where deliverytype = '1' )
		  </if>
		  <if test="condition.type == 2" >
			and t1.id in (select distinct id from t_storage_saleout_detail where isdiscount = '1' )
		  </if>
	      <if test="condition.salesarea != null" >
            and FIND_IN_SET(t.salesarea,#{condition.salesarea})
	      </if>
	      <if test="condition.salesuser != null" >
            and FIND_IN_SET(t.salesuser,#{condition.salesuser})
	      </if>
          <if test="condition.customersort != null" >
            and FIND_IN_SET(t.customersort,#{condition.customersort})
          </if>
		  <if test="condition.customerid != null" >
	         and t.customerid = #{condition.customerid}
	      </if>
	      <if test="condition.pcustomerid != null" >
	         and t.pcustomerid=#{condition.pcustomerid}
	      </if>
	      <if test="condition.goodsid != null" >
	      	 and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
	      </if>
          <if test="condition.goodssort != null" >
             and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
          </if>
	      <if test="condition.brandid != null" >
	      	 and FIND_IN_SET(t1.brandid,#{condition.brandid})
	      </if>
	      <if test="condition.branduser != null" >
	         and t1.branduser=#{condition.branduser}
	      </if>
            <if test="condition.storageid != null" >
                and t.storageid =#{condition.storageid}
            </if>
	      <if test="condition.orderid != null" >
	         and t.saleorderid like concat('%',#{condition.orderid},'%')
	      </if>
	      <if test="condition.invoice1!=null or condition.invoice2!=null or condition.writeoff1!=null or condition.writeoff2!=null">
		      <trim prefixOverrides="and|or" prefix="and (" suffix=")">
		      <if test="condition.invoice1==1">
		      	or t1.isinvoicebill='0'
		      </if>
		      <if test="condition.invoice2==1">
		      	or t1.isinvoicebill='1'
		      </if>
		      </trim>
		      <trim prefixOverrides="and|or" prefix="and (" suffix=")">
		      <if test="condition.writeoff1==1">
		      	or t1.iswriteoff='0'
		      </if>
		      <if test="condition.writeoff2==1">
		      	or t1.iswriteoff='1'
		      </if>
		      </trim>
	      </if>
	      <if test="1==1">
	      	and (t.status='3' or t.status='4')
	      </if>
		</trim>
		union ALL
		select t.id,t.sourceid as orderid,t.storageid as deliveryStorage,t.businessdate,t.customerid,t.pcustomerid as pcustomerid,t.customersort,t.salesarea,t.salesuser,t.salesdept,t1.branduser,t1.branddept,t1.brandid,t1.duefromdate,
  		if(t.sourcetype='2',2,3) as billtype,t1.goodsid,-t1.unitnum,-t1.auxnum,-t1.auxremainder,-t1.totalbox,t1.taxprice as price,t1.costprice,-t1.taxamount,-t1.costprice*t1.unitnum as costamount,0 as isdiscount,t1.isinvoice,t1.iswriteoff,t1.remark,t1.invoicedate,t1.writeoffdate,t1.isinvoicebill,t1.invoicebilldate,
  		t1.notaxprice as noprice,t1.notaxamount,t1.taxtype,t1.tax,t1.unitid,t1.unitname
		from t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or" >
  			<if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and t.id like concat('%',#{condition.id},'%')
	      </if>
	      <if test="condition.salesarea != null" >
              and FIND_IN_SET(t.salesarea,#{condition.salesarea})
	      </if>
          <if test="condition.customersort != null" >
             and FIND_IN_SET(t.customersort,#{condition.customersort})
          </if>
	      <if test="condition.salesuser != null" >
              and FIND_IN_SET(t.salesuser,#{condition.salesuser})
	      </if>
		  <if test="condition.customerid != null" >
	         and t.customerid = #{condition.customerid}
	      </if>
            <if test="condition.storageid != null" >
                and t.storageid =#{condition.storageid}
            </if>
	      <if test="condition.pcustomerid != null" >
	         and t.pcustomerid=#{condition.pcustomerid}
	      </if>
	      <if test="condition.goodsid != null" >
	         and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
	      </if>
          <if test="condition.goodssort != null" >
                and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
          </if>
	      <if test="condition.brandid != null" >
	      	and FIND_IN_SET(t1.brandid,#{condition.brandid})
	      </if>
	      <if test="condition.branduser != null" >
	         and t1.branduser=#{condition.branduser}
	      </if>
	      <if test="condition.orderid != null" >
	         and t.sourceid like concat('%',#{condition.orderid},'%')
	      </if>
	      <if test="condition.invoice1!=null or condition.invoice2!=null or condition.writeoff1!=null or condition.writeoff2!=null">
		     <trim prefixOverrides="and|or" prefix="and (" suffix=")">
		      <if test="condition.invoice1==1">
		      	or t1.isinvoicebill='0'
		      </if>
		      <if test="condition.invoice2==1">
		      	or t1.isinvoicebill='1'
		      </if>
		      </trim>
		      <trim prefixOverrides="and|or" prefix="and (" suffix=")">
		      <if test="condition.writeoff1==1">
		      	or t1.iswriteoff='0'
		      </if>
		      <if test="condition.writeoff2==1">
		      	or t1.iswriteoff='1'
		      </if>
		      </trim>
	      </if>
	      <if test="1==1">
	       and t.ischeck='1' and (t.status='3' or t.status='4')
	      </if>
			<if test="condition.type != null" >
				and 1 != 1
			</if>
		</trim>
			UNION ALL
			select pb.id,pb.orderid,'' as deliveryStorage,pb.businessdate,pb.customerid,pb.pcustomerid,pb.customersort,pb.salesarea,pb.salesuser,pb.salesdept,pb.branduser,pb.branddept,pb.brandid,'' as duefromdate,
			4 as billtype,pb.brandid as goodsid,0 as unitnum,0 as auxnum,0 as auxremainder,0 as totalbox,0 as price,0 as costprice,pb.amount,0 as costamount,0 as isdiscount,pb.isrefer as isinvoice,pb.iswriteoff,pb.remark,pb.invoicedate as invoicedate,pb.writeoffdate,pb.isinvoicebill,pb.invoicebilldate,
			0 as noprice,0 as notaxamount,'' as taxtype,0 as tax,'' as unitid,'' as unitname
			from t_account_customer_push_balance pb
			<trim prefix="where" prefixOverrides="and|or" >
	  			<if test="condition.businessdate1 != null">
				 and pb.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and pb.businessdate <= #{condition.businessdate2}]]>
			  </if>
              <if test="condition.storageid != null" >
                    and pb.id = ''
              </if>
			  <if test="condition.id != null" >
		         and pb.id like concat('%',#{condition.id},'%')
		      </if>
		      <if test="condition.salesarea != null" >
                  and FIND_IN_SET(pb.salesarea,#{condition.salesarea})
		      </if>
		      <if test="condition.salesuser != null" >
                 and FIND_IN_SET(pb.salesuser,#{condition.salesuser})
		      </if>
              <if test="condition.customersort != null" >
                 and FIND_IN_SET(pb.customersort,#{condition.customersort})
              </if>
			  <if test="condition.customerid != null" >
		         and pb.customerid = #{condition.customerid}
		      </if>
		      <if test="condition.pcustomerid != null" >
		         and pb.pcustomerid = #{condition.pcustomerid}
		      </if>
		      <if test="condition.goodsid != null" >
		      	 and FIND_IN_SET(pb.brandid,#{condition.goodsid})
		      </if>
		      <if test="condition.brandid != null" >
		      	and FIND_IN_SET(pb.brandid,#{condition.brandid})
		      </if>
		      <if test="condition.branduser != null" >
		         and pb.branduser=#{condition.branduser}
		      </if>
              <if test="condition.orderid != null" >
                  and pb.orderid like concat('%',#{condition.orderid},'%')
              </if>
              <if test="condition.goodssort != null or condition.type != null" >
                  and 1 != 1
              </if>
		      <if test="condition.invoice1!=null or condition.invoice2!=null or condition.writeoff1!=null or condition.writeoff2!=null">
			      <trim prefixOverrides="and|or" prefix="and (" suffix=")">
			      <if test="condition.invoice1==1">
			      	or pb.isinvoicebill='0'
			      </if>
			      <if test="condition.invoice2==1">
			      	or pb.isinvoicebill='1'
			      </if>
			      </trim>
			      <trim prefixOverrides="and|or" prefix="and (" suffix=")">
			      <if test="condition.writeoff1==1">
			      	or pb.iswriteoff='0'
			      </if>
			      <if test="condition.writeoff2==1">
			      	or pb.iswriteoff='1'
			      </if>
			      </trim>
		      </if>
		      <if test="1==1">
		      	and (pb.status='3' or pb.status='4')
		      </if>
			</trim>
		)
  	</sql>
  	<select id="showCustomerSalesFlowList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.CustomerSalesFlow">
  		select * from (
  		select z.id,z.orderid,z.businessdate,z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesuser,z.salesdept,z.branduser,z.branddept,z.brandid,z.duefromdate,z.deliveryStorage,
  			z.billtype,z.goodsid,z.unitnum,z.auxnum,z.auxremainder,z.totalbox,z.price,z.costprice,z.taxamount,z.costamount,z.isdiscount,z.isinvoice,z.iswriteoff,z.remark,z.invoicedate,z.writeoffdate,z.isinvoicebill,z.invoicebilldate,
			(z.taxamount - z.costamount) as marginamount,if(z.taxamount = 0,0,((z.taxamount - z.costamount)/z.taxamount)*100) as marginamountrate
  		from  <include refid="customerSalesFlow_sql"/> z 
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
  			<if test="condition.billtype != null">
				and FIND_IN_SET(z.billtype,#{condition.billtype})
		  	</if>
		</trim>
		union all 
		select z.id,z.orderid,z.businessdate,z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesuser,z.salesdept,z.branduser,z.branddept,z.brandid,z.duefromdate,z.deliveryStorage,
			9 as billtype,z.goodsid,sum(z.unitnum) as unitnum,SUM(z.auxnum) as auxnum,sum(z.auxremainder) as auxremainder,sum(z.totalbox) as totalbox,0 as price,0 as costprice,sum(z.taxamount) as taxamount,sum(z.costamount) as costamount,z.isdiscount,z.isinvoice,'' as iswriteoff,'' as remark,'' as invoicedate,'' as writeoffdate,'' as isinvoicebill,'' as invoicebilldate,
			SUM(z.taxamount-z.costamount) as marginamount,if(SUM(z.taxamount) = 0,0,(SUM(z.taxamount-z.costamount)/SUM(z.taxamount))*100) as marginamountrate
		from  <include refid="customerSalesFlow_sql"/> z 
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
  			<if test="condition.billtype != null">
				and FIND_IN_SET(z.billtype,#{condition.billtype})
		  </if>
		</trim>
		group by z.businessdate
		) y
		order by businessdate asc,billtype asc,id
		<if test="condition.isflag == null">
	 		<include refid="common.Page_LimitOnly"/>
	 	</if>
  	</select>
  	<select id="showCustomerSalesFlowCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from
  		(select z.id,z.orderid,z.businessdate,z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesuser,z.salesdept,z.branduser,z.branddept,z.brandid,z.duefromdate,z.deliveryStorage,
  			z.billtype,z.goodsid,z.unitnum,z.auxnum,z.auxremainder,z.price,z.costprice,z.taxamount,z.costamount,z.isdiscount,z.isinvoice,z.iswriteoff,z.remark,z.invoicedate,z.writeoffdate,z.isinvoicebill,z.invoicebilldate,
			(z.taxamount - z.costamount) as marginamount,if(z.taxamount = 0,0,((z.taxamount - z.costamount)/z.taxamount)*100) as marginamountrate
  		from  <include refid="customerSalesFlow_sql"/> z 
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
  			<if test="condition.billtype != null">
				and FIND_IN_SET(z.billtype,#{condition.billtype})
		    </if>
		</trim>
		union all 
		select z.id,z.orderid,z.businessdate,z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesuser,z.salesdept,z.branduser,z.branddept,z.brandid,z.duefromdate,z.deliveryStorage,
			9 as billtype,z.goodsid,z.unitnum,SUM(z.auxnum) as auxnum,sum(z.auxremainder) as auxremainder,0 as price,0 as costprice,sum(z.taxamount) as taxamount,sum(z.costamount) as costamount,z.isdiscount,z.isinvoice,'' as iswriteoff,'' as remark,'' as invoicedate,'' as writeoffdate,'' as isinvoicebill,'' as invoicebilldate,
			SUM(z.taxamount-z.costamount) as marginamount,if(SUM(z.taxamount) = 0,0,(SUM(z.taxamount-z.costamount)/SUM(z.taxamount))*100) as marginamountrate
		from  <include refid="customerSalesFlow_sql"/> z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
  			<if test="condition.billtype != null">
				and FIND_IN_SET(z.billtype,#{condition.billtype})
		    </if>
		</trim>
		group by z.businessdate
		) y
  	</select>
  	<select id="showCustomerSalesFlowSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
  		select sum(z.unitnum) as unitnum,SUM(z.auxnum) as auxnum,sum(z.auxremainder) as auxremainder,sum(z.taxamount) as taxamount,sum(z.costamount) as costamount ,sum(z.totalbox) as totalbox,
		SUM(z.taxamount-z.costamount) as marginamount,if(SUM(z.taxamount) = 0,0,(SUM(z.taxamount-z.costamount)/SUM(z.taxamount))*100) as marginamountrate
  		from (
  			select * from <include refid="customerSalesFlow_sql"/> z
  			<trim prefix="where" prefixOverrides="and|or" >
				<include refid="common.Page_dataSql"/>
			</trim>
  		)z
  		<trim prefix="where" prefixOverrides="and|or" >
  			<if test="condition.billtype != null">
				and FIND_IN_SET(z.billtype,#{condition.billtype})
			</if>
		</trim>
  	</select>
	  <sql id="showCustomerSalesFlowListForExport_sql">
	  select z.id,z.orderid,z.businessdate,z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesuser,z.salesdept,z.branduser,z.branddept,z.brandid,z.duefromdate,z.deliveryStorage,
			z.billtype,z.goodsid,z.unitnum,z.auxnum,z.auxremainder,z.totalbox,z.price,z.costprice,z.taxamount,z.costamount,z.isdiscount,z.isinvoice,z.iswriteoff,z.remark,z.invoicedate,z.writeoffdate,z.isinvoicebill,z.invoicebilldate,
			(z.taxamount - z.costamount) as marginamount,if(z.taxamount = 0,0,((z.taxamount - z.costamount)/z.taxamount)*100) as marginamountrate
			from
			(
			select t.id,t.saleorderid as orderid,t.storageid as deliveryStorage,t.businessdate,t.customerid,t.pcustomerid as pcustomerid,t.customersort,t.salesarea,t.salesuser,t.salesdept,t1.branduser,t1.branddept,t1.brandid,t1.duefromdate,
			1 as billtype,t1.goodsid,t1.unitnum,t1.auxnum,t1.auxremainder,t1.totalbox,t1.taxprice as price,t1.costprice,t1.taxamount,t1.costprice*t1.unitnum as costamount,t1.isdiscount ,t1.isinvoice,t1.iswriteoff,t1.remark,t1.invoicedate,t1.writeoffdate,t1.isinvoicebill,t1.invoicebilldate,
			t1.notaxprice as noprice,t1.notaxamount,t1.taxtype,t1.tax,t1.unitid,t1.unitname, '发货单' billtypename
			from t_storage_saleout t
			RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.id != null" >
				 and t.id like concat('%',#{condition.id},'%')
			  </if>
			  <if test="condition.type == 1" >
				and t1.id in (select id from t_storage_saleout_detail where deliverytype = '1' )
			  </if>
			  <if test="condition.type == 2" >
				and t1.id in (select distinct id from t_storage_saleout_detail where isdiscount = '1' )
			  </if>
			  <if test="condition.salesarea != null" >
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			  </if>
			  <if test="condition.salesuser != null" >
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			  </if>
			  <if test="condition.customersort != null" >
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			  </if>
			  <if test="condition.customerid != null" >
				 and t.customerid = #{condition.customerid}
			  </if>
			  <if test="condition.pcustomerid != null" >
				 and t.pcustomerid=#{condition.pcustomerid}
			  </if>
			  <if test="condition.goodsid != null" >
				 and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			  </if>
			  <if test="condition.goodssort != null" >
				 and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
			  </if>
			  <if test="condition.brandid != null" >
				 and FIND_IN_SET(t1.brandid,#{condition.brandid})
			  </if>
			  <if test="condition.branduser != null" >
				 and t1.branduser=#{condition.branduser}
			  </if>
				<if test="condition.storageid != null" >
					and t.storageid =#{condition.storageid}
				</if>
			  <if test="condition.orderid != null" >
				 and t.saleorderid like concat('%',#{condition.orderid},'%')
			  </if>
			  <if test="condition.invoice1!=null or condition.invoice2!=null or condition.writeoff1!=null or condition.writeoff2!=null">
				  <trim prefixOverrides="and|or" prefix="and (" suffix=")">
				  <if test="condition.invoice1==1">
					or t1.isinvoicebill='0'
				  </if>
				  <if test="condition.invoice2==1">
					or t1.isinvoicebill='1'
				  </if>
				  </trim>
				  <trim prefixOverrides="and|or" prefix="and (" suffix=")">
				  <if test="condition.writeoff1==1">
					or t1.iswriteoff='0'
				  </if>
				  <if test="condition.writeoff2==1">
					or t1.iswriteoff='1'
				  </if>
				  </trim>
			  </if>
			  <if test="1==1">
				and (t.status='3' or t.status='4')
			  </if>
			</trim>
			union ALL
			select t.id,t.sourceid as orderid,t.storageid as deliveryStorage,t.businessdate,t.customerid,t.pcustomerid as pcustomerid,t.customersort,t.salesarea,t.salesuser,t.salesdept,t1.branduser,t1.branddept,t1.brandid,t1.duefromdate,
			if(t.sourcetype='2',2,3) as billtype,t1.goodsid,-t1.unitnum,-t1.auxnum,-t1.auxremainder,-t1.totalbox,t1.taxprice as price,t1.costprice,-t1.taxamount,-t1.costprice*t1.unitnum as costamount,0 as isdiscount,t1.isinvoice,t1.iswriteoff,t1.remark,t1.invoicedate,t1.writeoffdate,t1.isinvoicebill,t1.invoicebilldate,
			t1.notaxprice as noprice,t1.notaxamount,t1.taxtype,t1.tax,t1.unitid,t1.unitname,
			case when t.sourcetype = '2' then '直退退货单' else '售后退货单' end billtypename
			from t_storage_salereject_enter t
			RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
			<trim prefix="where" prefixOverrides="and|or" >
				<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.id != null" >
				 and t.id like concat('%',#{condition.id},'%')
			  </if>
			  <if test="condition.salesarea != null" >
				  and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			  </if>
			  <if test="condition.customersort != null" >
				 and FIND_IN_SET(t.customersort,#{condition.customersort})
			  </if>
			  <if test="condition.salesuser != null" >
				  and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			  </if>
			  <if test="condition.customerid != null" >
				 and t.customerid = #{condition.customerid}
			  </if>
				<if test="condition.storageid != null" >
					and t.storageid =#{condition.storageid}
				</if>
			  <if test="condition.pcustomerid != null" >
				 and t.pcustomerid=#{condition.pcustomerid}
			  </if>
			  <if test="condition.goodsid != null" >
				 and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			  </if>
			  <if test="condition.goodssort != null" >
					and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
			  </if>
			  <if test="condition.brandid != null" >
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			  </if>
			  <if test="condition.branduser != null" >
				 and t1.branduser=#{condition.branduser}
			  </if>
			  <if test="condition.orderid != null" >
				 and t.sourceid like concat('%',#{condition.orderid},'%')
			  </if>
			  <if test="condition.invoice1!=null or condition.invoice2!=null or condition.writeoff1!=null or condition.writeoff2!=null">
				 <trim prefixOverrides="and|or" prefix="and (" suffix=")">
				  <if test="condition.invoice1==1">
					or t1.isinvoicebill='0'
				  </if>
				  <if test="condition.invoice2==1">
					or t1.isinvoicebill='1'
				  </if>
				  </trim>
				  <trim prefixOverrides="and|or" prefix="and (" suffix=")">
				  <if test="condition.writeoff1==1">
					or t1.iswriteoff='0'
				  </if>
				  <if test="condition.writeoff2==1">
					or t1.iswriteoff='1'
				  </if>
				  </trim>
			  </if>
			  <if test="1==1">
			   and t.ischeck='1' and (t.status='3' or t.status='4')
			  </if>
				<if test="condition.type != null" >
					and 1 != 1
				</if>
			</trim>
			UNION ALL
			select pb.id,pb.orderid,'' as deliveryStorage,pb.businessdate,pb.customerid,pb.pcustomerid,pb.customersort,pb.salesarea,pb.salesuser,pb.salesdept,pb.branduser,pb.branddept,pb.brandid,'' as duefromdate,
			4 as billtype,pb.brandid as goodsid,0 as unitnum,0 as auxnum,0 as auxremainder,0 as totalbox,0 as price,0 as costprice,pb.amount,0 as costamount,0 as isdiscount,pb.isrefer as isinvoice,pb.iswriteoff,pb.remark,pb.invoicedate as invoicedate,pb.writeoffdate,pb.isinvoicebill,pb.invoicebilldate,
			0 as noprice,0 as notaxamount,'' as taxtype,0 as tax,'' as unitid,'' as unitname, '冲差单' billtypename
			from t_account_customer_push_balance pb
			<trim prefix="where" prefixOverrides="and|or" >
				<if test="condition.businessdate1 != null">
				 and pb.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and pb.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.storageid != null" >
				  and pb.id = ''
			</if>
			<if test="condition.id != null" >
			   and pb.id like concat('%',#{condition.id},'%')
			</if>
			<if test="condition.salesarea != null" >
				and FIND_IN_SET(pb.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null" >
			   and FIND_IN_SET(pb.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.customersort != null" >
			   and FIND_IN_SET(pb.customersort,#{condition.customersort})
			</if>
			<if test="condition.customerid != null" >
			   and pb.customerid = #{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null" >
			   and pb.pcustomerid = #{condition.pcustomerid}
			</if>
			<if test="condition.goodsid != null" >
				 and FIND_IN_SET(pb.brandid,#{condition.goodsid})
			</if>
			<if test="condition.brandid != null" >
				and FIND_IN_SET(pb.brandid,#{condition.brandid})
			</if>
			<if test="condition.branduser != null" >
			   and pb.branduser=#{condition.branduser}
			</if>
			<if test="condition.orderid != null" >
				and pb.orderid like concat('%',#{condition.orderid},'%')
			</if>
			<if test="condition.goodssort != null or condition.type != null" >
				and 1 != 1
			</if>
			<if test="condition.invoice1!=null or condition.invoice2!=null or condition.writeoff1!=null or condition.writeoff2!=null">
				<trim prefixOverrides="and|or" prefix="and (" suffix=")">
				<if test="condition.invoice1==1">
					or pb.isinvoicebill='0'
				</if>
				<if test="condition.invoice2==1">
					or pb.isinvoicebill='1'
				</if>
				</trim>
				<trim prefixOverrides="and|or" prefix="and (" suffix=")">
				<if test="condition.writeoff1==1">
					or pb.iswriteoff='0'
				</if>
				<if test="condition.writeoff2==1">
					or pb.iswriteoff='1'
				</if>
				</trim>
			</if>
			<if test="1==1">
				and (pb.status='3' or pb.status='4')
			</if>
			</trim>
			) z
			<trim prefix="where" prefixOverrides="and|or" >
				<include refid="common.Page_dataSql"/>
				<if test="condition.billtype != null">
					and z.billtype = #{condition.billtype}
				</if>
			</trim>
	  </sql>
	<select id="showCustomerSalesFlowListForExport" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select
            case
                when y.billtype = '1' and y.isdiscount = '1' then concat('品牌：', gb.name, '，折扣')
                when y.billtype = '4' then concat('品牌：', gb2.name, '，折扣')
                when y.isdiscount <![CDATA[<>]]> '1' then g.name
            end goodsname,
            g.barcode barcode,
            g.spell spell,
            g.mainunit unitid,
            gim.rate boxnum,
            gm.name unitname,
            case when y.auxnum <![CDATA[<>]]> 0 THEN concat(floor(y.auxnum), '箱') else '' end auxnumdetail,
            c.name customername,
            cs.thisname customersortname,
            gb.name brandname,
            p.name salesusername,
            sa.name salesareaname,
            si.name deliverystoragename,
            y.price * gim.rate boxprice,
            case when y.isinvoicebill = '0' then '未开票' when y.isinvoicebill = '1' then '已开票' end isinvoicebillname,
            case when y.iswriteoff = '1' then '已核销' when y.iswriteoff = '0' then '未核销' end writeoffname,
            case
				when y.iswriteoff = '0' and DATE_FORMAT(NOW(), '%Y-%m-%d') <![CDATA[> ]]> y.duefromdate then '1'
				when y.iswriteoff = '0' and DATE_FORMAT(NOW(), '%Y-%m-%d') <![CDATA[<=]]> y.duefromdate then '0'
            end isultra,
            case when y.billtype = '1' then '发货单' when y.billtype = '2' then '直退退货通知单' when y.billtype = '3' then '售后退货通知单' when y.billtype= '4' then '冲差单' end billtypename,
            y.*
        from (
		select z.id,z.orderid,z.businessdate,z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesuser,z.salesdept,z.branduser,z.branddept,z.brandid,z.duefromdate,z.deliveryStorage,
		z.billtype,z.goodsid,z.unitnum,z.auxnum,z.auxremainder,z.totalbox,z.price,z.costprice,z.taxamount,z.costamount,z.isdiscount,z.isinvoice,z.iswriteoff,z.remark,z.invoicedate,z.writeoffdate,z.isinvoicebill,z.invoicebilldate,
		(z.taxamount - z.costamount) as marginamount,if(z.taxamount = 0,0,((z.taxamount - z.costamount)/z.taxamount)*100) as marginamountrate
		from  <include refid="customerSalesFlow_sql"/> z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
			<if test="condition.billtype != null">
				and z.billtype = #{condition.billtype}
			</if>
		</trim>
		union all
		select '' id,'' orderid,concat(z.businessdate, ' 小计') businessdate,'' customerid,'' pcustomerid,'' customersort,'' salesarea,'' salesuser,'' salesdept,'' branduser,'' branddept,'' brandid,'' duefromdate,'' deliveryStorage,
		9 as billtype,'' goodsid,sum(z.unitnum) as unitnum,SUM(z.auxnum) as auxnum,sum(z.auxremainder) as auxremainder,sum(z.totalbox) as totalbox,0 as price,0 as costprice,sum(z.taxamount) as taxamount,sum(z.costamount) as costamount,z.isdiscount,z.isinvoice,'' as iswriteoff,'' as remark,'' as invoicedate,'' as writeoffdate,'' as isinvoicebill,'' as invoicebilldate,
		SUM(z.taxamount-z.costamount) as marginamount,if(SUM(z.taxamount) = 0,0,(SUM(z.taxamount-z.costamount)/SUM(z.taxamount))*100) as marginamountrate
		from  <include refid="customerSalesFlow_sql"/> z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
			<if test="condition.billtype != null">
				and z.billtype = #{condition.billtype}
			</if>
		</trim>
		group by z.businessdate
		) y
		left join t_base_goods_info g on y.goodsid = g.id
		left join t_base_goods_meteringunit gm on g.mainunit = gm.id
		left join t_base_sales_customer c on y.customerid = c.id
		left join t_base_sales_customersort cs on y.customersort = cs.id
		left join t_base_goods_brand gb on y.brandid = gb.id
		left join t_base_personnel p on y.salesuser = p.id
		left join t_base_sales_area sa on y.salesarea = sa.id
		left join t_base_storage_info si on y.deliverystorage = si.id
		left join t_base_goods_info_meteringunit gim on y.goodsid = gim.goodsid
		left join t_base_goods_brand gb2 on y.goodsid = gb2.id
		order by businessdate asc,billtype asc,id
		<if test="condition.isflag == null">
			<include refid="common.Page_LimitOnly"/>
		</if>
	</select>
	<select id="showCustomerSalesFlowDetailList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.CustomerSalesFlow">
  		select z.id,z.businessdate,z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesuser,z.salesdept,z.branduser,z.branddept,z.brandid,z.duefromdate,
  			z.billtype,z.goodsid,z.unitnum,z.auxnum,z.auxremainder,z.totalbox,z.price,z.taxamount,z.noprice,z.notaxamount,z.taxtype,z.tax,z.unitid,z.unitname,
  			z.isdiscount,z.isinvoice,z.iswriteoff,z.remark,z.invoicedate,z.writeoffdate,z.isinvoicebill,z.invoicebilldate,
			(z.taxamount - z.costamount) as marginamount,if(z.taxamount = 0,0,((z.taxamount - z.costamount)/z.taxamount)*100) as marginamountrate
  		from <include refid="customerSalesFlow_sql"/> z 
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
  			<if test="condition.billtype != null">
			 and z.billtype = #{condition.billtype}
		  </if>
		</trim>
  	</select>
  	
  	<select id="showFundsBrandReturnReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.FundsBrandReturnReport">
  		select t.brandid as brand,sum(t.taxamount) as sendamount,sum(t.notaxamount) as sendnotaxamount,
			sum(t.directreturnamount) as directreturnamount, sum(t.directreturnnotaxamount) as directreturnnotaxamount,
			sum(t.checkreturnamount) as checkreturnamount, sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
			sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
			sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
			sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as  allpushbalanceamount,
			sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
  		from <include refid="temp_customerbrand_funds_report"/> t
  		group by t.brandid
  		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="showFundsBrandReturnReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  			select t.brandid as brand,sum(t.taxamount) as sendamount,sum(t.notaxamount) as sendnotaxamount,
			sum(t.directreturnamount) as directreturnamount, sum(t.directreturnnotaxamount) as directreturnnotaxamount,
			sum(t.checkreturnamount) as checkreturnamount, sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
			sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
			sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
			sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as  allpushbalanceamount,
			sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
	  		from <include refid="temp_customerbrand_funds_report"/> t
	  		group by t.brandid
  		) y
  	</select>
  	<select id="showFundsBrandDeptReturnReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.FundsBrandDeptReturnReport">
  		select t1.deptid ,t.brandid as brand,SUM(t.taxamount) AS sendamount ,SUM(t.notaxamount) AS sendnotaxamount,
			sum(t.directreturnamount) as directreturnamount, sum(t.directreturnnotaxamount) as directreturnnotaxamount,
			sum(t.checkreturnamount) as checkreturnamount, sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
			sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
			sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
			sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as  allpushbalanceamount,
			sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
  		from <include refid="temp_customerbrand_funds_report"/> t
  		left join t_base_goods_brand t1 on t.brandid=t1.id
  		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.deptid != null" >
	         and t1.deptid = #{condition.deptid}
	      </if>
		</trim>
  		group by t1.deptid
  		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="showFundsBrandDeptReturnReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  			select t1.deptid ,t.brandid as brand,SUM(t.taxamount) AS sendamount ,SUM(t.notaxamount) AS sendnotaxamount,
				sum(t.directreturnamount) as directreturnamount, sum(t.directreturnnotaxamount) as directreturnnotaxamount,
				sum(t.checkreturnamount) as checkreturnamount, sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
				sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
				sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
				sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as  allpushbalanceamount,
				sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
	  		from <include refid="temp_customerbrand_funds_report"/> t
	  		left join t_base_goods_brand t1 on t.brandid = t1.id
	  		<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.deptid != null" >
		         and t1.deptid = #{condition.deptid}
		      </if>
			</trim>
	  		group by t1.deptid
  		) y
  	</select>
  	<select id="getFundsBrandDeptReturnSumReport" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.FundsBrandDeptReturnReport">
  		select SUM(t.taxamount) AS sendamount ,SUM(t.notaxamount) AS sendnotaxamount,
			sum(t.directreturnamount) as directreturnamount, sum(t.directreturnnotaxamount) as directreturnnotaxamount,
			sum(t.checkreturnamount) as checkreturnamount, sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
			sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
			sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
			sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as  allpushbalanceamount,
			sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
  		from <include refid="temp_customerbrand_funds_report"/>  t
  	</select>
  	
  	<select id="getFundsBrandCostamountByBrand" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(y.costamount)	from (select z.brandid,z.unitnum*z.avgprice as costamount from (
				SELECT t1.brandid,sum(t1.unitnum) AS unitnum,
					IF ((g.newstorageprice is NULL OR g.newstorageprice = 0),g.highestbuyprice,g.newstorageprice) AS avgprice
				FROM
					t_storage_saleout t
				RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
				LEFT JOIN t_base_sales_customer c ON t.customerid = c.id
				left join t_base_goods_info g on t1.goodsid=g.id
				<trim prefix="where" prefixOverrides="and|or" >
		  			<if test="condition.businessdate1 != null">
					 and t.businessdate >= #{condition.businessdate1}
				  </if>
				  <if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  </if>
				  <if test="condition.thisbrand != null" >
				  	and t1.brandid=#{condition.thisbrand}
			      </if>
			      <if test="1==1">
			      	and (t.status='3' or t.status='4')
			      </if>
				</trim>
				GROUP BY brandid) z
			union all 
			select b.brandid,-b.unitnum*b.avgprice as costamount from (
				SELECT t1.brandid,sum(t1.unitnum) AS unitnum,
					IF ((g.newstorageprice is NULL OR g.newstorageprice = 0),g.highestbuyprice,g.newstorageprice) AS avgprice
				FROM
					t_storage_salereject_enter t
				RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
				LEFT JOIN t_base_sales_customer c ON t.customerid = c.id
				left join t_base_goods_info g on t1.goodsid=g.id
				<trim prefix="where" prefixOverrides="and|or" >
		  			<if test="condition.businessdate1 != null">
					 and t.businessdate >= #{condition.businessdate1}
				  </if>
				  <if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  </if>
				  <if test="condition.thisbrand != null" >
				  	and t1.brandid=#{condition.thisbrand}
			      </if>
			      <if test="1==1">
			      	and (t.status='3' or t.status='4')
			      </if>
				</trim>
				GROUP BY brandid) b
		)y
  	</select>
  	<select id="getFundsBrandReturnSumReport" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.FundsBrandReturnReport">
  		select sum(t.taxamount) as sendamount,sum(t.notaxamount) as sendnotaxamount,
		sum(t.directreturnamount) as directreturnamount, sum(t.directreturnnotaxamount) as directreturnnotaxamount,
		sum(t.checkreturnamount) as checkreturnamount, sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
		sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
		sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
		sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as  allpushbalanceamount,
		sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
  		from <include refid="temp_customerbrand_funds_report"/> t
  	</select>
  	<select id="getFundsBrandCostamountSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(y.costamount)	from (select z.goodsid,z.unitnum*z.avgprice as costamount from (
				SELECT t1.goodsid,sum(t1.unitnum) AS unitnum,
					IF ((g.newstorageprice is NULL OR g.newstorageprice = 0),g.highestbuyprice,g.newstorageprice) AS avgprice
				FROM
					t_storage_saleout t
				RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
				LEFT JOIN t_base_sales_customer c ON t.customerid = c.id
				left join t_base_goods_info g on t1.goodsid=g.id
				<trim prefix="where" prefixOverrides="and|or" >
		  			<if test="condition.businessdate1 != null">
					 and t.businessdate >= #{condition.businessdate1}
				  </if>
				  <if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  </if>
				  <if test="condition.brandid != null" >
				  	and g.brand=#{condition.brandid}
			      </if>
			      <if test="1==1">
			      	and (t.status='3' or t.status='4')
			      </if>
				</trim>
				GROUP BY goodsid) z
			union all 
			select b.goodsid,-b.unitnum*b.avgprice as costamount from (
				SELECT t1.goodsid,sum(t1.unitnum) AS unitnum,
					IF ((g.newstorageprice is NULL OR g.newstorageprice = 0),g.highestbuyprice,g.newstorageprice) AS avgprice
				FROM
					t_storage_salereject_enter t
				RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
				LEFT JOIN t_base_sales_customer c ON t.customerid = c.id
				left join t_base_goods_info g on t1.goodsid=g.id
				<trim prefix="where" prefixOverrides="and|or" >
		  		  <if test="condition.businessdate1 != null">
					 and t.businessdate >= #{condition.businessdate1}
				  </if>
				  <if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  </if>
				  <if test="condition.brandid != null" >
				  	and g.brand=#{condition.brandid}
			      </if>
			      <if test="1==1">
			      	and (t.status='3' or t.status='4')
			      </if>
				</trim>
				GROUP BY goodsid) b
		)y
  	</select>
  	<!-- 按部门 -->
  	<select id="getFundsDeptReturnReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.FundsDeptReturnReport">
		select z.customerid,sum(z.taxamount) as sendamount,sum(z.notaxamount) as sendnotaxamount,
		sum(z.returntaxamount) as returntaxamount,sum(z.returnnotaxamount) as returnnotaxamount,
		sum(z.pushbalanceamount) as pushbalanceamount,sum(z.withdrawnamount) as withdrawnamount
		from (select if((c.pid =null or c.pid =''),t.customerid,c.pid) as customerid,
		sum(t1.taxamount) as taxamount,sum(t1.notaxamount) as notaxamount,0 as returntaxamount ,0 as returnnotaxamount,
		0 as pushbalanceamount,0 as withdrawnamount 
		from t_storage_saleout t
		left join t_base_sales_customer c on t.customerid=c.id
		right join t_storage_saleout_detail t1 on t1.saleoutid=t.id
		<trim prefix="where" prefixOverrides="and|or" >
  			<if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.customerid != null" >
	         and (t.customerid = #{condition.customerid} or c.pid=#{condition.customerid})
	      </if>
	      <if test="1==1">
	      	and (t.status='3' or t.status='4')
	      </if>
		</trim>
		GROUP BY customerid 
		union all
		select if((c.pid =null or c.pid =''),t.customerid,c.pid) as customerid,0 as taxamount ,0 as notaxamount ,
		sum(t1.taxamount) as returntaxamount,sum(t1.notaxamount) as returnnotaxamount,0 as pushbalanceamount,0 as withdrawnamount
		from t_storage_salereject_enter t
		left join t_base_sales_customer c on t.customerid=c.id
		right join t_storage_salereject_enter_detail t1 on t1.salerejectid=t.id
		<trim prefix="where" prefixOverrides="and|or" >
  			<if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.customerid != null" >
	         and (t.customerid = #{condition.customerid} or c.pid=#{condition.customerid})
	      </if>
	      <if test="1==1">
	      	and (t.status='3' or t.status='4')
	      </if>
		</trim>
		GROUP BY customerid
		union ALL
		select si.customerid,0 as taxamount ,0 as notaxamount ,
		0 as returntaxamount,0 as returnnotaxamount,0 as pushbalanceamount,sum(si.writeoffamount) as writeoffamount 
		from t_account_sales_invoice si
		<trim prefix="where" prefixOverrides="and|or" >
  			<if test="condition.businessdate1 != null">
			 and si.writeoffdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and si.writeoffdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.customerid != null" >
	         and si.customerid = #{condition.customerid}
	      </if>
	      <if test="1==1">
	      	and si.iswriteoff='1' and  si.status='4'
	      </if>
		</trim>
		GROUP BY si.customerid
		union ALL
		select pb.customerid,0 as taxamount ,0 as notaxamount ,
		0 as returntaxamount,0 as returnnotaxamount,sum(pb.amount) as pushbalanceamount,0 as writeoffamount
		from t_account_customer_push_balance  pb
		<trim prefix="where" prefixOverrides="and|or" >
  			<if test="condition.businessdate1 != null">
			 and pb.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and pb.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.customerid != null" >
	         and pb.customerid = #{condition.customerid}
	      </if>
	      <if test="1==1">
	      	and (pb.status='3' or pb.status='4')
	      </if>
		</trim>
		GROUP BY pb.customerid
		) z
		GROUP BY z.customerid
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="showCustomerReceivablePastDueListData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
  		select t.customerid,sum(t1.taxamount) as amount from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
		  	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.iswithdrawal==0">
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswithdrawal==1">
	      		and t1.iswriteoff='1' and (t.status='3' or t.status='4')
	      	</if>
		</trim>
		group by t.customerid
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="showCustomerReceivablePastDueListDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  		select t.customerid,sum(t1.taxamount) as amount 
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
		  	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.iswithdrawal==0">
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswithdrawal==1">
	      		and t1.iswriteoff='1' and (t.status='3' or t.status='4')
	      	</if>
		</trim>
		group by t.customerid ) z
  	</select>
  	<select id="getCustomerPastDueDataByDays" parameterType="java.util.Map" resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="businessdate1 != null">
				 and t.businessdate >= #{businessdate1}
			</if>
			<if test="businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{businessdate2}]]>
			</if>
	      	<if test="thiscustomerid != null" >
		  		and t.customerid=#{thiscustomerid}
	      	</if>
	      	<if test="endDate != null" >
		  		<![CDATA[and t1.duefromdate<=#{endDate}]]>
	      	</if>
	      	<if test="beginDate != null" >
		  		and t1.duefromdate>=#{beginDate}
	      	</if>
	      	<if test="iswithdrawal==0">
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="iswithdrawal==1">
	      		<![CDATA[and t1.duefromdate<t1.canceldate and t1.iswriteoff='1' and t.status in('3','4')]]>
	      	</if>
		</trim>
  	</select>
  	<select id="getCustomerNoPastDueDataAmount" parameterType="java.lang.String" resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		where t.customerid=#{customerid}
      		and t1.duefromdate>=STR_TO_DATE(now(), '%Y-%m-%d')and t1.iswriteoff='0' and t.status='3'
  	</select>
  	<select id="getCustomrPastDueDataAmount" parameterType="java.lang.String" resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid 
		where t.customerid=#{customerid}
      		<![CDATA[and t1.duefromdate<STR_TO_DATE(now(), '%Y-%m-%d')and t1.iswriteoff='0' and t.status='3']]>
  	</select>
  	<select id="getCustomerWithdrawalNoPastDueDataAmount" parameterType="com.hd.agent.common.util.PageMap"  resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
	      	<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.thiscustomerid != null" >
		  		and t.customerid=#{condition.thiscustomerid}
	      	</if>
	      	<if test="1==1" >
		  		<![CDATA[and t1.duefromdate>=t1.canceldate and t1.iswriteoff='1' and t.status in('3','4')]]>
	      	</if>
		</trim>
  	</select>
  	<select id="getCustomrWithdrawalPastDueDataAmount" parameterType="com.hd.agent.common.util.PageMap"  resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
	      	<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.thiscustomerid != null" >
		  		and t.customerid=#{condition.thiscustomerid}
	      	</if>
	      	<if test="1==1" >
		  		<![CDATA[and t1.duefromdate<t1.canceldate and t1.iswriteoff='1' and t.status in('3','4')]]>
	      	</if>
		</trim>
  	</select>
  	<select id="getCustomerReceivablePastDueSumData" parameterType="java.util.Map" resultType="java.util.Map">
  		select t.customerid,sum(t1.taxamount) as amount from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
		  	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.iswithdrawal==0">
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswithdrawal==1">
	      		and t1.iswriteoff='1' and (t.status='3' or t.status='4')
	      	</if>
		</trim>
  	</select>
  	<select id="getCustomerPastDueSumDataByDays" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
	      	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.endDate != null" >
		  		<![CDATA[and t1.duefromdate<=#{condition.endDate}]]>
	      	</if>
	      	<if test="condition.beginDate != null" >
		  		and t1.duefromdate>=#{condition.beginDate}
	      	</if>
	      	<if test="condition.iswithdrawal==0">
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswithdrawal==1">
	      		<![CDATA[and t1.duefromdate<t.canceldate and t1.iswriteoff='1' and t.status in('3','4')]]>
	      	</if>
		</trim>
  	</select>
  	<select id="getCustomerNoPastDueSumDataAmount" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
	      	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.iswithdrawal==0">
	      		<if test="1==1">
		      		and t1.duefromdate>=STR_TO_DATE(now(), '%Y-%m-%d')
		      	</if>
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswithdrawal==1">
	      		<if test="1==1">
		      		<![CDATA[and t1.duefromdate>=t1.canceldate]]>
		      	</if>
	      		and t1.iswriteoff='1' and t.status in('3','4')
	      	</if>
		</trim>
  	</select>
  	<select id="getCustomrPastDueSumDataAmount" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
	      	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.iswithdrawal==0">
	      		<if test="1==1">
		      		<![CDATA[and t1.duefromdate<STR_TO_DATE(now(), '%Y-%m-%d')]]>
		      	</if>
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswithdrawal==1">
	      		<if test="1==1">
		      		<![CDATA[and t1.duefromdate<t1.canceldate]]>
		      	</if>
	      		and t1.iswriteoff='1' and t.status in('3','4')
	      	</if>
		</trim>
  	</select>
  	<select id="getCustomerFundsReportDataTempListByDeptid" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.FundsDepartmentReturnReport">
  		select t1.salesdeptid as deptid,sum(t.sendamount) as sendamount,sum(t.sendnotaxamount) as sendnotaxamount,
  		sum(t.directreturnamount) as directreturnamount,sum(t.directreturnnotaxamount) as directreturnnotaxamount,
  		sum(t.checkreturnamount) as checkreturnamount,sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
		sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
		sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
		sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as allpushbalanceamount,
		sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
		from <include refid="temp_customer_funds_report"/>  t
  		left join t_base_sales_customer t1 on t.customerid=t1.id
  		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.deptid != null">
			 and t1.salesdeptid =#{condition.deptid}
		  </if>
		</trim>
  		group by t1.salesdeptid
  		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getCustomerFundsReportDataTempCountByDeptid" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from 
  		(select t1.salesdeptid as deptid,sum(t.sendamount) as sendamount,sum(t.sendnotaxamount) as sendnotaxamount,
  		sum(t.directreturnamount) as directreturnamount,sum(t.directreturnnotaxamount) as directreturnnotaxamount,
  		sum(t.checkreturnamount) as checkreturnamount,sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
		sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
		sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
		sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as allpushbalanceamount,
		sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
		from <include refid="temp_customer_funds_report"/>  t
  		left join t_base_sales_customer t1 on t.customerid=t1.id
  		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.deptid != null">
			 and t1.salesdeptid =#{condition.deptid}
		  </if>
		</trim>
  		group by t1.salesdeptid) z
  	</select>
  	<select id="getCustomerFundsReportDataTempListBySaleuser" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.FundsSaleuserReturnReport">
  		select t1.salesuserid as salesuserid,sum(t.sendamount) as sendamount,sum(t.sendnotaxamount) as sendnotaxamount,
  		sum(t.directreturnamount) as directreturnamount,sum(t.directreturnnotaxamount) as directreturnnotaxamount,
  		sum(t.checkreturnamount) as checkreturnamount,sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
		sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
		sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
		sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as allpushbalanceamount,
		sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
  		from <include refid="temp_customer_funds_report"/>  t
  		left join t_base_sales_customer t1 on t.customerid=t1.id
  		<trim prefix="where" prefixOverrides="and|or" >
  			<if test="condition.salesuserid != null">
			 and t1.salesuserid =#{condition.salesuserid}
		  </if>
		</trim>
  		group by t1.salesuserid
  		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getCustomerFundsReportDataTempCountBySaleuser" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from 
  		(select t1.salesuserid as salesuserid,sum(t.sendamount) as sendamount,sum(t.sendnotaxamount) as sendnotaxamount,
  		sum(t.directreturnamount) as directreturnamount,sum(t.directreturnnotaxamount) as directreturnnotaxamount,
  		sum(t.checkreturnamount) as checkreturnamount,sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
		sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
		sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,
		sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as allpushbalanceamount
  		from <include refid="temp_customer_funds_report"/>  t
  		left join t_base_sales_customer t1 on t.customerid=t1.id
  		<trim prefix="where" prefixOverrides="and|or" >
  		  <if test="condition.salesuserid != null">
			 and t1.salesuserid =#{condition.salesuserid}
		  </if>
		</trim>
  		group by t1.salesuserid) z
  	</select>
  	<select id="getCustomerFundsReportDataTempSum" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.FundsDepartmentReturnReport">
  		select sum(t.sendamount) as sendamount,sum(t.sendnotaxamount) as sendnotaxamount,
  		sum(t.directreturnamount) as directreturnamount,sum(t.directreturnnotaxamount) as directreturnnotaxamount,
  		sum(t.checkreturnamount) as checkreturnamount,sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
		sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
		sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
		sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as allpushbalanceamount,
  		sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
  		from <include refid="temp_customer_funds_report"/>  t
  		left join t_base_sales_customer t1 on t.customerid=t1.id
  		<trim prefix="where" prefixOverrides="and|or" >
  		  <if test="condition.salesuserid != null">
			 and t1.salesuserid =#{condition.salesuserid}
		  </if>
		  <if test="condition.deptid != null">
			 and t1.salesdeptid =#{condition.deptid}
		  </if>
		</trim>
  	</select>
  	<select id="getCustomerFundsReportDataTempListByBranduser" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.FundsBranduserReturnReport">
  		select t1.personid as banduserid,sum(t.taxamount) as sendamount,sum(t.notaxamount) as sendnotaxamount,
		sum(t.directreturnamount) as directreturnamount, sum(t.directreturnnotaxamount) as directreturnnotaxamount,
		sum(t.checkreturnamount) as checkreturnamount, sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
		sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
		sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
		sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as  allpushbalanceamount,
		sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
  		from <include refid="temp_customerbrand_funds_report"/> t
  		left join t_base_personnel_brandandcustomer t1 on t.customerid=t1.customerid and t.brandid=t1.brandid
  		<trim prefix="where" prefixOverrides="and|or" >
  			<if test="condition.banduserid != null">
			 and t1.personid =#{condition.banduserid }
		  </if>
		</trim>
  		group by t1.personid
  		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getCustomerFundsReportDataTempCountByBranduser" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from 
  		(select t1.personid as banduserid,sum(t.taxamount) as sendamount,sum(t.notaxamount) as sendnotaxamount,
		sum(t.directreturnamount) as directreturnamount, sum(t.directreturnnotaxamount) as directreturnnotaxamount,
		sum(t.checkreturnamount) as checkreturnamount, sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
		sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
		sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,
		sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as  allpushbalanceamount
  		from <include refid="temp_customerbrand_funds_report"/> t
  		left join t_base_personnel_brandandcustomer t1 on t.customerid=t1.customerid and t.brandid=t1.brandid
  		<trim prefix="where" prefixOverrides="and|or" >
  		  <if test="condition.banduserid != null">
			 and t1.personid =#{condition.banduserid }
		  </if>
		</trim>
  		group by t1.personid) z
  	</select>
  	<select id="getCustomerFundsReportDataTempSumByBranduser" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.FundsBranduserReturnReport">
  		select sum(t.taxamount) as sendamount,sum(t.notaxamount) as sendnotaxamount,
		sum(t.directreturnamount) as directreturnamount, sum(t.directreturnnotaxamount) as directreturnnotaxamount,
		sum(t.checkreturnamount) as checkreturnamount, sum(t.checkreturnnotaxamount) as checkreturnnotaxamount,
		sum(t.returntaxamount) as returntaxamount,sum(t.returnnotaxamount) as returnnotaxamount,
		sum(t.pushbalanceamount) as pushbalanceamount,sum(t.withdrawnamount) as withdrawnamount,sum(t.costwriteoffamount) as costwriteoffamount,
		sum(t.allsendamount) as allsendamount,sum(t.allreturnamount) as allreturnamount,sum(t.allpushbalanceamount) as  allpushbalanceamount,
		sum(t.unauditamount) as unauditamount,sum(t.auditamount) as auditamount,sum(t.rejectamount) as rejectamount
  		from <include refid="temp_customerbrand_funds_report"/> t
 		<if test="condition.banduserid != null">
 		  left join t_base_personnel_brandandcustomer t1 on t.customerid=t1.customerid and t.brandid=t1.brandid
		 where t1.personid =#{condition.banduserid }
	  	</if>
  	</select>
  	<select id="showBankReportDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BankReport"> 
  		select z.bank,sum(z.receiptamount) as receiptamount, sum(z.payamount) as payamount
  		from (
  		select t.bank,t.amount as receiptamount,0 as payamount
		from t_account_collection_order t
		<trim prefix="where" prefixOverrides="and|or" >
  			<if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.bank != null" >
		  	<choose>
		  		<when test="condition.bank=='cash'">
		  			 and (t.bank is null or t.bank='')
		  		</when>
		  		<otherwise>
		  			 and t.bank = #{condition.bank}
		  		</otherwise>
		 	</choose>
	      </if>
	      <if test="1==1">
	      	and (t.status='3' or t.status='4')
	      </if>
		</trim>
		UNION ALL
		select t.bank,0 as receiptamount, t.amount as payamount
		from t_account_purchase_payorder t
		<trim prefix="where" prefixOverrides="and|or" >
  			<if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.bank != null" >
		  	<choose>
		  		<when test="condition.bank=='cash'">
		  			 and (t.bank is null or t.bank='')
		  		</when>
		  		<otherwise>
		  			 and t.bank = #{condition.bank}
		  		</otherwise>
		 	</choose>
	      </if>
	      <if test="1==1">
	      	and (t.status='3' or t.status='4')
	      </if>
		</trim>
		) z
		group by z.bank
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
    <sql id="CustomerReceiptData_sql">
        <if test="condition.salesdeptid != null">
            left join t_base_sales_customer c on c.id = t.customerid
        </if>
        <trim prefix="where" prefixOverrides="and|or" >
            <if test="condition.salesdeptid != null">
                and FIND_IN_SET(c.salesdeptid,#{condition.salesdeptid})
            </if>
            <if test="condition.businessdate1 != null">
                and t.businessdate >= #{condition.businessdate1}
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.bank != null" >
                and t.bank = #{condition.bank}
            </if>
            <if test="condition.bankdeptid != null" >
                and t.bankdeptid = #{condition.bankdeptid}
            </if>
            <if test="condition.customerid != null" >
                and t.customerid = #{condition.customerid}
            </if>
            <if test="1==1">
                and t.status in ('3','4')
            </if>
        </trim>

    </sql>
  	<select id="showCustomerReceiptData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        select t.customerid,sum(t.amount) as amount from t_account_collection_order t
        <include refid="CustomerReceiptData_sql"/>
        group by t.customerid
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="showCustomerReceiptCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
          select t.customerid,sum(t.amount) as amount from t_account_collection_order t
          <include refid="CustomerReceiptData_sql"/>
          group by t.customerid
		) z
  	</select>
  	<select id="getCustomerReceiptBankSumByCustomeridAndBank" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(t.amount) as amount from t_account_collection_order t 
  			<trim prefix="where" prefixOverrides="and|or" >
	  		  <if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.thiscustomerid != null" >
		         and t.customerid = #{condition.thiscustomerid}
		      </if>
              <if test="condition.bankdeptid != null" >
                 and t.bankdeptid = #{condition.bankdeptid}
              </if>
		      <choose>
		      	<when test="condition.bank != null">
		      		 and t.bank = #{condition.bank}
		      	</when>
		      	<when test="condition.bank == null">
		      		and (t.bank = '' or t.bank is null)
		      	</when>
		      </choose>
		      <if test="1==1">
		      	and t.status in ('3','4')
		      </if>
			</trim>
  	</select>
  	<select id="getCustomerReceiptSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(t.amount) as amount from t_account_collection_order t
        <include refid="CustomerReceiptData_sql"/>
  	</select>
  	<select id="getCustomerReceiptBankSumByBank" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(t.amount) as amount from t_account_collection_order t
        <if test="condition.salesdeptid != null">
            left join t_base_sales_customer c on c.id = t.customerid
        </if>
  		<trim prefix="where" prefixOverrides="and|or" >
            <if test="condition.salesdeptid != null">
                and FIND_IN_SET(c.salesdeptid,#{condition.salesdeptid})
            </if>
  			<if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.customerid != null" >
	         and t.customerid = #{condition.customerid}
	      </if>
          <if test="condition.bankdeptid != null" >
             and t.bankdeptid = #{condition.bankdeptid}
          </if>
	      <choose>
	      	<when test="condition.bank != null">
	      		 and t.bank = #{condition.bank}
	      	</when>
	      	<when test="condition.bank == null">
	      		and (t.bank = '' or t.bank is null)
	      	</when>
	      </choose>
	      <if test="1==1">
	      	and t.status in ('3','4')
	      </if>
		</trim>
  	</select>
  	
  	<select id="getCustomerPastDueDataListByDays" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.sales.model.Receipt">
  		select DISTINCT t.id, t.businessdate, t.status, t.remark, t.adduserid, t.addusername, t.adddeptid, t.adddeptname, 
	    t.addtime, t.modifyuserid, t.modifyusername, t.modifytime, t.audituserid, t.auditusername, t.audittime, 
	    t.stopuserid, t.stopusername, t.stoptime, t.closetime, t.printtimes, t.customerid, t.handlerid, t.salesdept, 
	    t.salesuser, t.settletype, t.paytype, t.source, t.storageid, t.field01, t.field02, t.field03, t.field04, t.field05, 
	    t.field06, t.field07, t.field08, t.isrefer, t.billno, t.isinvoice, t.canceldate, t.duefromdate
  		from t_sales_receipt t
  		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
	      	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.iswrite==0">
	      		<if test="condition.endDate != null" >
			  		<![CDATA[and t.duefromdate<=#{condition.endDate}]]>
		      	</if>
		      	<if test="condition.beginDate != null" >
			  		and t.duefromdate>=#{condition.beginDate}
		      	</if>
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswrite==1">
	      		<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
	      		<if test="condition.endDate != null" >
			  		<![CDATA[and t.duefromdate<=#{condition.endDate}]]>
		      	</if>
		      	<if test="condition.beginDate != null" >
			  		and t.duefromdate>=#{condition.beginDate}
		      	</if>
	      		<![CDATA[and t.duefromdate<=t1.canceldate and t1.iswriteoff='1' and t.status in('3','4')]]>
	      	</if>
		</trim>
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getCustomerPastDueDataCountByDays" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  		select DISTINCT t.id
  		from t_sales_receipt t
  		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
	      	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.iswrite==0">
	      		<if test="condition.endDate != null" >
			  		<![CDATA[and t.duefromdate<=#{condition.endDate}]]>
		      	</if>
		      	<if test="condition.beginDate != null" >
			  		and t.duefromdate>=#{condition.beginDate}
		      	</if>
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswrite==1">
	      		<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
	      		<if test="condition.endDate != null" >
			  		<![CDATA[and t.duefromdate<=#{condition.endDate}]]>
		      	</if>
		      	<if test="condition.beginDate != null" >
			  		and t.duefromdate>=#{condition.beginDate}
		      	</if>
	      		<![CDATA[and t.duefromdate<=t1.canceldate and t1.iswriteoff='1' and t.status in('3','4')]]>
	      	</if>
		</trim>
		) z
  	</select>
  	<select id="getReceiptDetailTotal" parameterType="java.lang.String" resultType="map">
	  	select sum(taxamount) taxamount, sum(notaxamount) notaxamount, sum(tax) tax from t_sales_receipt_detail where billid = #{id}
	  </select>
	  
	  <select id="showSalesUserReceivablePastDueListData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
  		SELECT z.salesuserid,sum(z.amount) as amount
		from (
			select t.customerid,c.salesuserid,t1.taxamount as amount from t_sales_receipt t
			RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
			inner JOIN t_base_sales_customer c on c.id=t.customerid
			<trim prefix="where" prefixOverrides="and|or" >
				<if test="condition.businessdate1 != null">
					 and t.businessdate >= #{condition.businessdate1}
				</if>
				<if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				</if>
			  	<if test="condition.customerid != null" >
			  		and t.customerid=#{condition.customerid}
		      	</if>
		      	<if test="condition.salesuserid != null" >
			  		and c.salesuserid=#{condition.salesuserid}
		      	</if>
		      	<if test="condition.iswithdrawal==0">
		      		and t1.iswriteoff='0' and t.status='3'
		      	</if>
		      	<if test="condition.iswithdrawal==1">
		      		and t1.iswriteoff='1' and t.status in('3','4')
		      	</if>
			</trim>
		)z 
		GROUP BY z.salesuserid
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="showSalesUserReceivablePastDueListDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
	  		SELECT z.salesuserid,sum(z.amount) as amount
			from (
				select t.customerid,c.salesuserid,t1.taxamount as amount from t_sales_receipt t
				RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
				inner JOIN t_base_sales_customer c on c.id=t.customerid
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="condition.businessdate1 != null">
						 and t.businessdate >= #{condition.businessdate1}
					</if>
					<if test="condition.businessdate2 != null">
						 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
					</if>
				  	<if test="condition.customerid != null" >
				  		and t.customerid=#{condition.customerid}
			      	</if>
			      	<if test="condition.salesuserid != null" >
				  		and c.salesuserid=#{condition.salesuserid}
			      	</if>
			      	<if test="condition.iswithdrawal==0">
			      		and t1.iswriteoff='0' and t.status='3'
			      	</if>
			      	<if test="condition.iswithdrawal==1">
			      		and t1.iswriteoff='1' and t.status in('3','4')
			      	</if>
				</trim>
			)z 
			GROUP BY z.salesuserid
		) x
  	</select>
  	<select id="getSalesUserNoPastDueDataAmount" parameterType="java.lang.String" resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount 
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		inner JOIN t_base_sales_customer c on c.id=t.customerid
		where  t.duefromdate>=STR_TO_DATE(now(), '%Y-%m-%d') and t1.iswriteoff='0' and t.status='3' and c.salesuserid=#{salesuserid}
  	</select>
  	<select id="getSalesUserPastDueDataAmount" parameterType="java.lang.String" resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount 
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		inner JOIN t_base_sales_customer c on c.id=t.customerid
		where  <![CDATA[t.duefromdate<STR_TO_DATE(now(), '%Y-%m-%d')and t1.iswriteoff='0' and t.status='3' and c.salesuserid=#{salesuserid}]]>
  	</select>
  	<select id="getSalesUserPastDueDataByDays" parameterType="java.util.Map" resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		inner JOIN t_base_sales_customer c on c.id=t.customerid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="businessdate1 != null">
				 and t.businessdate >= #{businessdate1}
			</if>
			<if test="businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{businessdate2}]]>
			</if>
	      	<if test="thissalesuserid != null" >
		  		and c.salesuserid=#{thissalesuserid}
	      	</if>
	      	<if test="endDate != null" >
		  		<![CDATA[and t.duefromdate<=#{endDate}]]>
	      	</if>
	      	<if test="beginDate != null" >
		  		and t.duefromdate>=#{beginDate}
	      	</if>
	      	<if test="iswithdrawal==0">
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="iswithdrawal==1">
	      		<![CDATA[and t.duefromdate<t1.canceldate and t1.iswriteoff='1' and t.status in('3','4')]]>
	      	</if>
		</trim>
  	</select>
  	<select id="getSalesUserPastDueDataListByDays" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.sales.model.Receipt">
  		select DISTINCT t.id, t.businessdate, t.status, t.remark, t.adduserid, t.addusername, t.adddeptid, t.adddeptname, 
	    t.addtime, t.modifyuserid, t.modifyusername, t.modifytime, t.audituserid, t.auditusername, t.audittime, 
	    t.stopuserid, t.stopusername, t.stoptime, t.closetime, t.printtimes, t.customerid, t.handlerid, t.salesdept, 
	    t.salesuser, t.settletype, t.paytype, t.source, t.storageid, t.field01, t.field02, t.field03, t.field04, t.field05, 
	    t.field06, t.field07, t.field08, t.isrefer, t.billno, t.isinvoice, t.canceldate, t.duefromdate
  		from t_sales_receipt t
  		inner JOIN t_base_sales_customer c on c.id=t.customerid
  		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
	      	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.salesuserid != null" >
		  		and c.salesuserid=#{condition.salesuserid}
	      	</if>
	      	<if test="condition.iswrite==0">
	      		<if test="condition.endDate != null" >
			  		<![CDATA[and t.duefromdate<=#{condition.endDate}]]>
		      	</if>
		      	<if test="condition.beginDate != null" >
			  		and t.duefromdate>=#{condition.beginDate}
		      	</if>
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswrite==1">
	      		<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
	      		<if test="condition.endDate != null" >
			  		<![CDATA[and t.duefromdate<=#{condition.endDate}]]>
		      	</if>
		      	<if test="condition.beginDate != null" >
			  		and t.duefromdate>=#{condition.beginDate}
		      	</if>
	      		<![CDATA[and t.duefromdate<=t1.canceldate and t1.iswriteoff='1' and t.status in('3','4')]]>
	      	</if>
		</trim>
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getSalesUserPastDueDataCountByDays" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from(
  			select DISTINCT t.id
  			from t_sales_receipt t
  			inner JOIN t_base_sales_customer c on c.id=t.customerid
  			RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
			<trim prefix="where" prefixOverrides="and|or" >
		      	<if test="condition.customerid != null" >
			  		and t.customerid=#{condition.customerid}
		      	</if>
		      	<if test="condition.salesuserid != null" >
			  		and c.salesuserid=#{condition.salesuserid}
		      	</if>
		      	<if test="condition.iswrite==0">
		      		<if test="condition.endDate != null" >
				  		<![CDATA[and t.duefromdate<=#{condition.endDate}]]>
			      	</if>
			      	<if test="condition.beginDate != null" >
				  		and t.duefromdate>=#{condition.beginDate}
			      	</if>
		      		and t1.iswriteoff='0' and t.status='3'
		      	</if>
		      	<if test="condition.iswrite==1">
		      		<if test="condition.businessdate1 != null">
					 and t.businessdate >= #{condition.businessdate1}
				  </if>
				  <if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  </if>
		      		<if test="condition.endDate != null" >
				  		<![CDATA[and t.duefromdate<=#{condition.endDate}]]>
			      	</if>
			      	<if test="condition.beginDate != null" >
				  		and t.duefromdate>=#{condition.beginDate}
			      	</if>
		      		<![CDATA[and t.duefromdate<=t1.canceldate and t1.iswriteoff='1' and t.status in('3','4')]]>
		      	</if>
			</trim>
		)z
  	</select>
  	<select id="getSalesUserReceivablePastDueSumData" parameterType="java.util.Map" resultType="java.util.Map">
  		select c.salesuserid,sum(t1.taxamount) as amount from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		inner JOIN t_base_sales_customer c on c.id=t.customerid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
		  	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.salesuserid != null" >
		  		and c.salesuserid=#{condition.salesuserid}
	      	</if>
	      	<if test="condition.iswithdrawal==0">
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswithdrawal==1">
	      		and t1.iswriteoff='1' and t.status in('3','4')
	      	</if>
		</trim>
  	</select>
  	<select id="getSalesUserNoPastDueSumDataAmount" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		inner JOIN t_base_sales_customer c on c.id=t.customerid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
	      	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.salesuserid != null" >
		  		and c.salesuserid=#{condition.salesuserid}
	      	</if>
	      	<if test="condition.iswithdrawal==0">
	      		<if test="1==1">
		      		and t.duefromdate>=STR_TO_DATE(now(), '%Y-%m-%d')
		      	</if>
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswithdrawal==1">
	      		<if test="1==1">
		      		<![CDATA[and t.duefromdate>=t1.canceldate]]>
		      	</if>
	      		and t1.iswriteoff='1' and t.status in('3','4')
	      	</if>
		</trim>
  	</select>
  	<select id="getSalesUserPastDueSumDataAmount" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		inner JOIN t_base_sales_customer c on c.id=t.customerid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
	      	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.salesuserid != null" >
		  		and c.salesuserid=#{condition.salesuserid}
	      	</if>
	      	<if test="condition.iswithdrawal==0">
	      		<if test="1==1">
		      		<![CDATA[and t.duefromdate<STR_TO_DATE(now(), '%Y-%m-%d')]]>
		      	</if>
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswithdrawal==1">
	      		<if test="1==1">
		      		<![CDATA[and t.duefromdate<t1.canceldate]]>
		      	</if>
	      		and t1.iswriteoff='1' and t.status in('3','4')
	      	</if>
		</trim>
  	</select>
  	<select id="getSalesUserPastDueSumDataByDays" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		inner JOIN t_base_sales_customer c on c.id=t.customerid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2},'%Y-%m-%d')]]>
			</if>
	      	<if test="condition.customerid != null" >
		  		and t.customerid=#{condition.customerid}
	      	</if>
	      	<if test="condition.salesuserid != null" >
		  		and c.salesuserid=#{condition.salesuserid}
	      	</if>
	      	<if test="condition.endDate != null" >
		  		<![CDATA[and t.duefromdate<=#{condition.endDate}]]>
	      	</if>
	      	<if test="condition.beginDate != null" >
		  		and t.duefromdate>=#{condition.beginDate}
	      	</if>
	      	<if test="condition.iswithdrawal==0">
	      		and t1.iswriteoff='0' and t.status='3'
	      	</if>
	      	<if test="condition.iswithdrawal==1">
	      		<![CDATA[and t.duefromdate<t1.canceldate and t1.iswriteoff='1' and t.status in('3','4')]]>
	      	</if>
		</trim>
  	</select>
  	<select id="getSalesUserWithdrawalNoPastDueDataAmount" parameterType="com.hd.agent.common.util.PageMap"  resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		inner JOIN t_base_sales_customer c on c.id=t.customerid
		<trim prefix="where" prefixOverrides="and|or" >
	      	<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.thissalesuserid != null" >
		  		and c.salesuserid=#{condition.thissalesuserid}
	      	</if>
	      	<if test="1==1" >
		  		<![CDATA[and t.duefromdate>=t1.canceldate and t1.iswriteoff='1' and t.status in('3','4')]]>
	      	</if>
		</trim>
  	</select>
  	<select id="getSalesUserWithdrawalPastDueDataAmount" parameterType="com.hd.agent.common.util.PageMap"  resultType="java.math.BigDecimal">
  		select sum(t1.taxamount) as amount
  		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		inner JOIN t_base_sales_customer c on c.id=t.customerid
		<trim prefix="where" prefixOverrides="and|or" >
	      	<if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.thissalesuserid != null" >
		  		and c.salesuserid=#{condition.thissalesuserid}
	      	</if>
	      	<if test="1==1" >
		  		<![CDATA[and t.duefromdate<t1.canceldate and t1.iswriteoff='1' and t.status in('3','4')]]>
	      	</if>
		</trim>
  	</select>
  	
  	<select id="getUnauditamountDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.sales.model.Receipt">
  		select t.id, t.businessdate, t.status, t.remark, t.adduserid, t.addusername, t.adddeptid, t.adddeptname, 
	    t.addtime, t.modifyuserid, t.modifyusername, t.modifytime, t.audituserid, t.auditusername, t.audittime, 
	    t.stopuserid, t.stopusername, t.stoptime, t.closetime, t.printtimes, t.customerid, t.handlerid, t.salesdept, 
	    t.salesuser, t.settletype, t.paytype, t.source, t.storageid, t.field01, t.field02, t.field03, t.field04, t.field05, 
	    t.field06, t.field07, t.field08, t.isrefer, t.billno, t.isinvoice, t.canceldate, t.duefromdate
  		from t_sales_receipt t
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.addtime >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.addtime <= STR_TO_DATE(DATE_ADD(#{condition.businessdate2},INTERVAL 1 day),'%Y-%m-%d')]]>
		  </if>
		  <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and t.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		and t.customerid IS NULL or t.customerid = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and t.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		and t.salesdept IS NULL or t.salesdept = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and t.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		and t.salesuser IS NULL or t.salesuser = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="1==1">
	      	and t.status='2'
	      </if>
		</trim>
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getUnauditamountDataListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  		select t.id, t.businessdate, t.status, t.remark, t.adduserid, t.addusername, t.adddeptid, t.adddeptname, 
	    t.addtime, t.modifyuserid, t.modifyusername, t.modifytime, t.audituserid, t.auditusername, t.audittime, 
	    t.stopuserid, t.stopusername, t.stoptime, t.closetime, t.printtimes, t.customerid, t.handlerid, t.salesdept, 
	    t.salesuser, t.settletype, t.paytype, t.source, t.storageid, t.field01, t.field02, t.field03, t.field04, t.field05, 
	    t.field06, t.field07, t.field08, t.isrefer, t.billno, t.isinvoice, t.canceldate, t.duefromdate
  		from t_sales_receipt t
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.addtime >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.addtime <= STR_TO_DATE(DATE_ADD(#{condition.businessdate2},INTERVAL 1 day),'%Y-%m-%d')]]>
		  </if>
		  <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and t.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		and t.customerid IS NULL or t.customerid = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and t.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		and t.salesdept IS NULL or t.salesdept = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and t.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		and t.salesuser IS NULL or t.salesuser = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="1==1">
	      	and t.status='2'
	      </if>
		</trim>
		) z
  	</select>
  	<select id="getAuditamountDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.sales.model.Receipt">
  		select t.id, t.businessdate, t.status, t.remark, t.adduserid, t.addusername, t.adddeptid, t.adddeptname, 
	    t.addtime, t.modifyuserid, t.modifyusername, t.modifytime, t.audituserid, t.auditusername, t.audittime, 
	    t.stopuserid, t.stopusername, t.stoptime, t.closetime, t.printtimes, t.customerid, t.handlerid, t.salesdept, 
	    t.salesuser, t.settletype, t.paytype, t.source, t.storageid, t.field01, t.field02, t.field03, t.field04, t.field05, 
	    t.field06, t.field07, t.field08, t.isrefer, t.billno, t.isinvoice, t.canceldate, t.duefromdate
  		from t_sales_receipt t
  		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.addtime >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.addtime <= STR_TO_DATE(DATE_ADD(#{condition.businessdate2},INTERVAL 1 day),'%Y-%m-%d')]]>
		  </if>
		  <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and t.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		and t.customerid IS NULL or t.customerid = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and t.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		and t.salesdept IS NULL or t.salesdept = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and t.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		and t.salesuser IS NULL or t.salesuser = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="1==1">
	      	and t.status in('3','4') and (t.isinvoice = '1' or t.isinvoice = '3' or t.isinvoice = '4' or t.isinvoice = '5')
	      </if>
		</trim>
		<include refid="common.Page_limit"/>
  	</select>
  	<select id="getAuditamountDataListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  		select t.id, t.businessdate, t.status, t.remark, t.adduserid, t.addusername, t.adddeptid, t.adddeptname, 
	    t.addtime, t.modifyuserid, t.modifyusername, t.modifytime, t.audituserid, t.auditusername, t.audittime, 
	    t.stopuserid, t.stopusername, t.stoptime, t.closetime, t.printtimes, t.customerid, t.handlerid, t.salesdept, 
	    t.salesuser, t.settletype, t.paytype, t.source, t.storageid, t.field01, t.field02, t.field03, t.field04, t.field05, 
	    t.field06, t.field07, t.field08, t.isrefer, t.billno, t.isinvoice, t.canceldate, t.duefromdate
  		from t_sales_receipt t
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.addtime >=#{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.addtime <= STR_TO_DATE(DATE_ADD(#{condition.businessdate2},INTERVAL 1 day),'%Y-%m-%d')]]>
		  </if>
		  <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and t.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		and t.customerid IS NULL or t.customerid = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and t.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		and t.salesdept IS NULL or t.salesdept = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and t.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		and t.salesuser IS NULL or t.salesuser = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="1==1">
	      	and t.status in('3','4') and (t.isinvoice = '1' or t.isinvoice = '3' or t.isinvoice = '4' or t.isinvoice = '5')
	      </if>
		</trim>
		) z
  	</select>
  	<!-- 客户验收金额 -->
  	<select id="getCustomerAuditamountReceiptDetailTotal" parameterType="java.lang.String" resultType="java.util.Map">
	  	select sum(receipttaxamount) receipttaxamount, sum(receiptnotaxamount) receiptnotaxamount from t_sales_receipt_detail where billid = #{id} AND iswriteoff = '0'
	</select>
  	<!-- 回单金额 -->
  	<select id="getAuditamountReceiptDetailTotal" parameterType="java.lang.String" resultType="java.util.Map">
	  	select sum(taxamount) taxamount, sum(notaxamount) notaxamount from t_sales_receipt_detail where billid = #{id} AND iswriteoff = '0'
	</select>
	<!-- 合计历史在途资金回笼销售回单金额 -->
	<select id="getUnauditamountReceiptDetailTotalSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select sum(taxamount) taxamount, sum(notaxamount) notaxamount, sum(tax) tax 
		from t_sales_receipt_detail t1
		left join t_sales_receipt t on t.id = t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.addtime >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.addtime <= STR_TO_DATE(DATE_ADD(#{condition.businessdate2},INTERVAL 1 day),'%Y-%m-%d')]]>
		  </if>
		  <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and t.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		and t.customerid IS NULL or t.customerid = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and t.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		and t.salesdept IS NULL or t.salesdept = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and t.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		and t.salesuser IS NULL or t.salesuser = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="1==1">
	      	and t.status='2' and t1.iswriteoff='0'
	      </if>
		</trim>
	</select>
	<!-- 合计历史验收资金回笼销售回单金额 -->
	<select id="getAuditamountReceiptDetailTotalSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select sum(t1.taxamount) taxamount, sum(t1.notaxamount) notaxamount, sum(t1.tax) tax,
			sum(receipttaxamount) receipttaxamount, sum(receiptnotaxamount) receiptnotaxamount
		from t_sales_receipt_detail t1
		left join t_sales_receipt t on t.id = t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.addtime >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.addtime <= STR_TO_DATE(DATE_ADD(#{condition.businessdate2},INTERVAL 1 day),'%Y-%m-%d')]]>
		  </if>
		  <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and t.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		and t.customerid IS NULL or t.customerid = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and t.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		and t.salesdept IS NULL or t.salesdept = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and t.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		and t.salesuser IS NULL or t.salesuser = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="1==1">
	      	and t.status in('3','4') and t1.iswriteoff='0'
	      </if>
		</trim>
	</select>
	<!-- 合计客户验收金额 -->
	<select id="getAuditamountReceiptDetailReceipttaxamountSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select sum(t1.receipttaxamount) receipttaxamount, sum(t1.receipttaxamount) receiptnotaxamount
		from t_sales_receipt_detail t1
		left join t_sales_receipt t on t.id = t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.addtime >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.addtime <= STR_TO_DATE(DATE_ADD(#{condition.businessdate2},INTERVAL 1 day),'%Y-%m-%d')]]>
		  </if>
		  <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and t.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		and t.customerid IS NULL or t.customerid = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and t.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		and t.salesdept IS NULL or t.salesdept = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and t.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		and t.salesuser IS NULL or t.salesuser = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="1==1">
	      	and t.status in('3','4') AND t1.iswriteoff = '0'
	      </if>
		</trim>
	</select>
	<!-- 合计历史退货资金回笼销售回单金额 -->
	<select id="getRejectamountReceiptDetailTotalSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select sum(t1.taxamount) taxamount, sum(t1.notaxamount) notaxamount, sum(t1.tax) tax 
		from t_storage_salereject_enter_detail t1
		left join t_storage_salereject_enter t on t.id = t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and t.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		and t.customerid IS NULL or t.customerid = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and t.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		and t.salesdept IS NULL or t.salesdept = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and t.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		and t.salesuser IS NULL or t.salesuser = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="1==1">
	      	AND t.ischeck='1' and t.status in('3','4') and t1.iswriteoff='0'
	      </if>
		</trim>
	</select>
	<select id="getRejectamountDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.storage.model.SaleRejectEnter">
  		select t.id, t.businessdate, t.status, t.remark, t.adduserid, t.addusername, t.adddeptid, t.adddeptname, 
	    t.addtime, t.modifyuserid, t.modifyusername, t.modifytime, t.audituserid, t.auditusername, t.audittime, 
	    t.stopuserid, t.stopusername, t.stoptime, t.closetime, t.printtimes, t.customerid, t.handlerid, t.salesdept, 
	    t.salesuser, t.settletype, t.paytype, t.sourcetype, t.storageid,t.sourceid, t.field01, t.field02, t.field03, t.field04, t.field05, 
	    t.field06, t.field07, t.field08, t.isrefer, t.billno, t.iswrite
  		from t_storage_salereject_enter t
  		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and t.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		and t.customerid IS NULL or t.customerid = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and t.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		and t.salesdept IS NULL or t.salesdept = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and t.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		and t.salesuser IS NULL or t.salesuser = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="1==1">
	      	AND t.ischeck='1' and t.status in('3','4') and t.iswrite = '0'
	      </if>
		</trim>
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getRejectamountDataListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  		select t.id
  		from t_storage_salereject_enter t
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and t.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		and t.customerid IS NULL or t.customerid = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and t.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		and t.salesdept IS NULL or t.salesdept = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and t.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		and t.salesuser IS NULL or t.salesuser = ' '
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="1==1">
	      	AND t.ischeck='1' and t.status in('3','4') and t.iswrite = '0'
	      </if>
		</trim>
		) z
  	</select>
  	<select id="getRejectamountDetailTotal" parameterType="java.lang.String" resultType="map">
	  	select sum(taxamount) taxamount, sum(notaxamount) notaxamount, sum(tax) tax from t_storage_salereject_enter_detail where salerejectid = #{id} and iswriteoff = '0'
	  </select>
	  
	<!-- 商品流水明细 -->
	<sql id="salesGoodsFlowDetail_sql">
  		(
  		select t.id,t.businessdate,t.customerid,t.pcustomerid,
  		1 as billtype,t1.goodsid,t1.unitnum,t1.taxprice as price,t1.taxamount,t1.isdiscount ,t1.isinvoice,t1.iswriteoff,t1.remark
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and t.id like concat('%',#{condition.id},'%')
	      </if>
		  <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and t.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		<!-- and (t.customerid IS NULL or t.customerid = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and t.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		<!-- and (t.salesdept IS NULL or t.salesdept = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and t.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		<!-- and (t.salesuser IS NULL or t.salesuser = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.pcustomerid != null" >
	         and t.pcustomerid = #{condition.pcustomerid}
	      </if>
	      <if test="condition.invoice1!=null or condition.invoice2!=null ">
		      and (
		      <trim prefixOverrides="and|or" >
		      <if test="condition.invoice1==1">
		      	or t1.isinvoice='0'
		      </if>
		      <if test="condition.invoice2==1">
		      	or t1.isinvoice='1'
		      </if>
		      </trim>
	      	)
	      </if>
	      <if test="1==1">
	      	and t1.iswriteoff='0' and (t.status='3' or t.status='4')
	      </if>
		</trim>
		union ALL
		select t.id,t.businessdate,t.customerid,t.pcustomerid,
  		if(t.sourcetype='2',2,3) as billtype,t1.goodsid,-t1.unitnum,t1.taxprice as price,-t1.taxamount,0 as isdiscount,t1.isinvoice,t1.iswriteoff,t1.remark
		from t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and t.id like concat('%',#{condition.id},'%')
	      </if>
		  <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and t.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		<!-- and (t.customerid IS NULL or t.customerid = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and t.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		<!-- and (t.salesdept IS NULL or t.salesdept = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and t.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		<!-- and (t.salesuser IS NULL or t.salesuser = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.pcustomerid != null" >
	         and t.pcustomerid = #{condition.pcustomerid}
	      </if>
	     <if test="condition.invoice1!=null or condition.invoice2!=null ">
		      and (
		      <trim prefixOverrides="and|or" >
		      <if test="condition.invoice1==1">
		      	or t1.isinvoice='0'
		      </if>
		      <if test="condition.invoice2==1">
		      	or t1.isinvoice='1'
		      </if>
		      </trim>
	      	)
	      </if>
	      <if test="1==1">
	      	and t1.iswriteoff = '0' AND t.ischeck='1' and (t.status='3' or t.status='4')
	      </if>
		</trim>
		UNION ALL
		select pb.id,pb.businessdate,pb.customerid,pb.pcustomerid,
		4 as billtype,pb.brandid as goodsid,null as unitnum,0 as price,pb.amount as taxamount,0 as isdiscount,if(pb.iswriteoff='1',1,0) as isinvoice,pb.iswriteoff,pb.remark
		from t_account_customer_push_balance pb
		<!-- left join t_base_sales_customer c on pb.customerid=c.id -->
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and pb.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and pb.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and pb.id like concat('%',#{condition.id},'%')
	      </if>
	      <if test="condition.customerid != null">
	      	<choose>
	      		<when test="condition.customerid != 'null' ">
		      		and pb.customerid = #{condition.customerid}
		      	</when>
		      	<otherwise>
		      		<!-- and (pb.customerid IS NULL or pb.customerid = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.salesdept != null">
	      	<choose>
	      		<when test="condition.salesdept != 'null' ">
		      		and pb.salesdept = #{condition.salesdept}
		      	</when>
		      	<otherwise>
		      		<!-- and (pb.salesdept IS NULL or t.salesdept = '') -->
		      		and 1 = 1
		      	</otherwise>
		      	<!-- 
	      		<when test="condition.deptid != 'null' ">
		      		and pb.customerid in (select c.id from t_base_sales_customer c where c.salesdeptid = #{condition.deptid})
		      	</when>
		      	<otherwise>
		      		and pb.customerid IS NULL or pb.customerid = ' '
		      	</otherwise> -->
	      	</choose>
	      </if>
	      <if test="condition.salesuser != null">
	      	<choose>
	      		<when test="condition.salesuser != 'null' ">
		      		and pb.salesuser = #{condition.salesuser}
		      	</when>
		      	<otherwise>
		      		<!-- and (pb.salesuser IS NULL or t.salesuser = '') -->
		      		and 1 = 1
		      	</otherwise>
		      	<!-- 
	      		<when test="condition.salesuserid != 'null' ">
		      		and pb.customerid in (select c.id from t_base_sales_customer c where c.salesuserid = #{condition.salesuserid})
		      	</when>
		      	<otherwise>
		      		and pb.pcustomerid IS NULL or pb.pcustomerid = ' '
		      	</otherwise> -->
	      	</choose>
	      </if>
	      <if test="condition.pcustomerid != null" >
	         and pb.pcustomerid = #{condition.pcustomerid}
	      </if>
	      <if test="condition.invoice1!=null or condition.invoice2!=null">
		      and (
		      <trim prefixOverrides="and|or" >
		      <if test="condition.invoice1==1">
		      	or 1!=1
		      </if>
		      <if test="condition.invoice2==1">
		      	or 1=1
		      </if>
		      </trim>
	      	)
	      </if>
	      <if test="1==1">
	      	and pb.status='3'
	      </if>
		</trim>)
  	</sql>
  	<!-- 分品牌获取商品流水明细 -->
  	<sql id="salesGoodsFlowDetailByBrand_sql">
  		(
  		select t.id,t1.brandid as brandid,t.businessdate,t.customerid,t.pcustomerid,
  		1 as billtype,t1.goodsid,t1.unitnum,t1.taxprice as price,t1.taxamount,t1.isdiscount ,t1.isinvoice,t1.iswriteoff,t1.remark
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and t.id like concat('%',#{condition.id},'%')
	      </if>
	      <if test="condition.supplierid != null" >
	         and t1.supplierid = #{condition.supplierid}
	      </if>
	      <choose>
      		<when test="condition.brandid != null ">
	      		and t1.brandid = #{condition.brandid}
	      	</when>
	      	<otherwise>
	      		<!-- and (t1.brandid IS NULL or t1.brandid = '') -->
	      		and 1 = 1
	      	</otherwise>
      	  </choose>
	      <if test="condition.invoice1!=null or condition.invoice2!=null">
		      and (
		      <trim prefixOverrides="and|or" >
		      <if test="condition.invoice1==1">
		      	or t1.isinvoice='0'
		      </if>
		      <if test="condition.invoice2==1">
		      	or t1.isinvoice='1'
		      </if>
		      </trim>
	      	)
	      </if>
	      <if test="1==1">
	      	and t1.iswriteoff='0' and (t.status='3' or t.status='4')
	      </if>
		</trim>
		union ALL
		select t.id,t1.brandid as brandid,t.businessdate,t.customerid,t.pcustomerid,
  		if(t.sourcetype='2',2,3) as billtype,t1.goodsid,-t1.unitnum,t1.taxprice as price,-t1.taxamount,0 as isdiscount,t1.isinvoice,t1.iswriteoff,t1.remark
		from t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and t.id like concat('%',#{condition.id},'%')
	      </if>
	      <if test="condition.supplierid != null" >
	         and t1.supplierid = #{condition.supplierid}
	      </if>
	      <choose>
      		<when test="condition.brandid != null ">
	      		and t1.brandid = #{condition.brandid}
	      	</when>
	      	<otherwise>
	      		<!-- and (t1.brandid IS NULL or t1.brandid = '') -->
	      		and 1 = 1
	      	</otherwise>
      	  </choose>
	      <if test="condition.invoice1!=null or condition.invoice2!=null ">
		      and (
		      <trim prefixOverrides="and|or" >
		      <if test="condition.invoice1==1">
		      	or t1.isinvoice='0'
		      </if>
		      <if test="condition.invoice2==1">
		      	or t1.isinvoice='1'
		      </if>
		      </trim>
	      	)
	      </if>
	      <if test="1==1">
	      	and t1.iswriteoff = '0' AND t.ischeck='1' and (t.status='3' or t.status='4')
	      </if>
		</trim>
		UNION ALL
		select pb.id,pb.brandid as brandid,pb.businessdate,pb.customerid,pb.pcustomerid,
		4 as billtype,pb.brandid as goodsid,null as unitnum,0 as price,pb.amount as taxamount,0 as isdiscount,if(pb.iswriteoff='1',1,0) as isinvoice,pb.iswriteoff,pb.remark
		from t_account_customer_push_balance pb
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and pb.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and pb.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and pb.id like concat('%',#{condition.id},'%')
	      </if>
	      <if test="condition.supplierid != null" >
	         and pb.supplierid = #{condition.supplierid}
	      </if>
	      <choose>
      		<when test="condition.brandid != null ">
	      		and pb.brandid = #{condition.brandid}
	      	</when>
	      	<otherwise>
	      		<!-- and (pb.brandid IS NULL or pb.brandid = '') -->
	      		and 1 = 1
	      	</otherwise>
      	  </choose>
	      <if test="condition.invoice1!=null or condition.invoice2!=null">
		      and (
		      <trim prefixOverrides="and|or" >
		      <if test="condition.invoice1==1">
		      	or 1!=1
		      </if>
		      <if test="condition.invoice2==1">
		      	or 1=1
		      </if>
		      </trim>
	      	)
	      </if>
	      <if test="1==1">
	      	and pb.status='3'
	      </if>
		</trim>)
  	</sql>
  	<select id="getSalesGoodsFlowDetailList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesGoodsFlowDetail">
  		select * from (
	  		select z.id,z.businessdate,z.customerid,z.pcustomerid,z.billtype,z.goodsid,z.unitnum,z.price,z.taxamount,z.isdiscount,z.isinvoice,z.iswriteoff,z.remark 
	  		from  <include refid="salesGoodsFlowDetail_sql"/> z 
			<trim prefix="where" prefixOverrides="and|or" >
	  		  <if test="condition.billtype != null">
				 and z.billtype = #{condition.billtype}
			  </if>
			  <if test="condition.goodsid != null">
				 and z.goodsid like concat('%',#{condition.goodsid},'%') 
			  </if>
			</trim>
		) y
		order by y.businessdate desc,y.billtype asc,y.id
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getSalesGoodsFlowDetailListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
	  		select z.id,z.businessdate,z.customerid,z.pcustomerid,z.billtype,z.goodsid,z.unitnum,z.price,z.taxamount,z.isdiscount,z.isinvoice,z.iswriteoff,z.remark 
	  		from  <include refid="salesGoodsFlowDetail_sql"/> z 
			<trim prefix="where" prefixOverrides="and|or" >
	  		  <if test="condition.billtype != null">
				 and z.billtype = #{condition.billtype}
			  </if>
			  <if test="condition.goodsid != null">
				 and z.goodsid like concat('%',#{condition.goodsid},'%') 
			  </if>
			</trim>
		) y
  	</select>
  	<select id="getSalesGoodsFlowDetailSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(z.taxamount) 
  		from <include refid="salesGoodsFlowDetail_sql"/> z 
  		<trim prefix="where" prefixOverrides="and|or" >
  		  <if test="condition.billtype != null">
			 and z.billtype = #{condition.billtype}
		  </if>
		  <if test="condition.goodsid != null">
			 and z.goodsid like concat('%',#{condition.goodsid},'%') 
		  </if>
		</trim>
  	</select>
  	<select id="getSalesGoodsFlowDetailListByBrand" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesGoodsFlowDetail">
  		select * from (
	  		select z.id,z.brandid,z.businessdate,z.customerid,z.pcustomerid,z.billtype,z.goodsid,z.unitnum,z.price,z.taxamount,z.isdiscount,z.isinvoice,z.iswriteoff,z.remark 
	  		from  <include refid="salesGoodsFlowDetailByBrand_sql"/> z 
			<trim prefix="where" prefixOverrides="and|or" >
	  		  <if test="condition.billtype != null">
				 and z.billtype = #{condition.billtype}
			  </if>
			  <if test="condition.goodsid != null">
				 and z.goodsid like concat('%',#{condition.goodsid},'%') 
			  </if>
			</trim>
		) y
		order by y.businessdate desc,y.billtype asc,y.id
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getSalesGoodsFlowDetailCountByBrand" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
	  		select z.id,z.brandid,z.businessdate,z.customerid,z.pcustomerid,z.billtype,z.goodsid,z.unitnum,z.price,z.taxamount,z.isdiscount,z.isinvoice,z.iswriteoff,z.remark 
	  		from  <include refid="salesGoodsFlowDetailByBrand_sql"/> z 
			<trim prefix="where" prefixOverrides="and|or" >
	  		  <if test="condition.billtype != null">
				 and z.billtype = #{condition.billtype}
			  </if>
			  <if test="condition.goodsid != null">
				 and z.goodsid like concat('%',#{condition.goodsid},'%') 
			  </if>
			</trim>
		) y
  	</select>
  	<select id="getSalesGoodsFlowDetailByBrandSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(z.taxamount) 
  		from <include refid="salesGoodsFlowDetailByBrand_sql"/> z 
  		<trim prefix="where" prefixOverrides="and|or" >
  		  <if test="condition.billtype != null">
			 and z.billtype = #{condition.billtype}
		  </if>
		  <if test="condition.goodsid != null">
			 and z.goodsid like concat('%',#{condition.goodsid},'%') 
		  </if>
		</trim>
  	</select>
  	
  	<!-- 分品牌部门获取商品流水明细 -->
  	<sql id="salesGoodsFlowDetailByBrandDept_sql">
  		(
  		select t.id,t1.brandid,t1.branddept,t.businessdate,t.customerid,t.pcustomerid,
  		1 as billtype,t1.goodsid,t1.unitnum,t1.taxprice as price,t1.taxamount,t1.isdiscount ,t1.isinvoice,t1.iswriteoff,t1.remark
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and t.id like concat('%',#{condition.id},'%')
	      </if>
	      <if test="condition.branddept != null">
	      	<choose>
	      		<when test="condition.branddept != 'null' ">
		      		and t1.branddept = #{condition.branddept}
		      	</when>
		      	<otherwise>
		      		<!-- and (c.deptid IS NULL or c.deptid = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.invoice1!=null or condition.invoice2!=null">
		      and (
		      <trim prefixOverrides="and|or" >
		      <if test="condition.invoice1==1">
		      	or t1.isinvoice='0'
		      </if>
		      <if test="condition.invoice2==1">
		      	or t1.isinvoice='1'
		      </if>
		      </trim>
	      	)
	      </if>
	      <if test="1==1">
	      	and t1.iswriteoff='0' and (t.status='3' or t.status='4')
	      </if>
		</trim>
		union ALL
		select t.id,t1.brandid,t1.branddept,t.businessdate,t.customerid,t.pcustomerid,
  		if(t.sourcetype='2',2,3) as billtype,t1.goodsid,-t1.unitnum,t1.taxprice as price,-t1.taxamount,0 as isdiscount,t1.isinvoice,t1.iswriteoff,t1.remark
		from t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and t.id like concat('%',#{condition.id},'%')
	      </if>
	      <if test="condition.branddept != null">
	      	<choose>
	      		<when test="condition.branddept != 'null' ">
		      		and t1.branddept = #{condition.branddept}
		      	</when>
		      	<otherwise>
		      		<!-- and (c.deptid IS NULL or c.deptid = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.invoice1!=null or condition.invoice2!=null">
		      and (
		      <trim prefixOverrides="and|or" >
		      <if test="condition.invoice1==1">
		      	or t1.isinvoice='0'
		      </if>
		      <if test="condition.invoice2==1">
		      	or t1.isinvoice='1'
		      </if>
		      </trim>
	      	)
	      </if>
	      <if test="1==1">
	      	and t1.iswriteoff = '0' AND t.ischeck='1' AND (t.STATUS = '3' OR t.STATUS = '4')
	      </if>
		</trim>
		UNION ALL
		select pb.id,pb.brandid,pb.branddept,pb.businessdate,pb.customerid,pb.pcustomerid,
		4 as billtype,pb.brandid as goodsid,null as unitnum,0 as price,pb.amount as taxamount,0 as isdiscount,if(pb.iswriteoff='1',1,0) as isinvoice,pb.iswriteoff,pb.remark
		from t_account_customer_push_balance pb
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and pb.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and pb.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and pb.id like concat('%',#{condition.id},'%')
	      </if>
	      <if test="condition.branddept != null">
	      	<choose>
	      		<when test="condition.branddept != 'null' ">
		      		and pb.branddept = #{condition.branddept}
		      	</when>
		      	<otherwise>
		      		<!-- and (pb.branddept IS NULL or pb.branddept = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.invoice1!=null or condition.invoice2!=null">
		      and (
		      <trim prefixOverrides="and|or" >
		      <if test="condition.invoice1==1">
		      	or 1!=1
		      </if>
		      <if test="condition.invoice2==1">
		      	or 1=1
		      </if>
		      </trim>
	      	)
	      </if>
	      <if test="1==1">
	      	and pb.STATUS = '3'
	      </if>
		</trim>)
  	</sql>
  	<select id="getSalesGoodsFlowDetailListByBrandDept" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesGoodsFlowDetail">
  		select * from (
	  		select z.id,z.brandid,z.branddept,z.businessdate,z.customerid,z.pcustomerid,z.billtype,z.goodsid,z.unitnum,z.price,z.taxamount,z.isdiscount,z.isinvoice,z.iswriteoff,z.remark 
	  		from  <include refid="salesGoodsFlowDetailByBrandDept_sql"/> z
			<trim prefix="where" prefixOverrides="and|or" >
	  		  <if test="condition.billtype != null">
				 and z.billtype = #{condition.billtype}
			  </if>
			  <if test="condition.goodsid != null">
				 and z.goodsid = #{condition.goodsid}
			  </if>
			</trim>
		) y
		order by y.businessdate desc,y.billtype asc,y.id
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getSalesGoodsFlowDetailCountByBrandDept" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
	  		select z.id,z.brandid,z.businessdate,z.customerid,z.pcustomerid,z.billtype,z.goodsid,z.unitnum,z.price,z.taxamount,z.isdiscount,z.isinvoice,z.iswriteoff,z.remark 
	  		from  <include refid="salesGoodsFlowDetailByBrandDept_sql"/> z
			<trim prefix="where" prefixOverrides="and|or" >
	  		  <if test="condition.billtype != null">
				 and z.billtype = #{condition.billtype}
			  </if>
			  <if test="condition.goodsid != null">
				 and z.goodsid like concat('%',#{condition.goodsid},'%') 
			  </if>
			</trim>
		) y
  	</select>
  	<select id="getSalesGoodsFlowDetailByBrandDeptSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(z.taxamount) 
  		from <include refid="salesGoodsFlowDetailByBrandDept_sql"/> z 
  		<trim prefix="where" prefixOverrides="and|or" >
  		  <if test="condition.billtype != null">
			 and z.billtype = #{condition.billtype}
		  </if>
		  <if test="condition.goodsid != null">
			 and z.goodsid like concat('%',#{condition.goodsid},'%') 
		  </if>
		</trim>
  	</select>
  	
  	<!-- 分品牌业务员获取商品流水明细 -->
  	<sql id="salesGoodsFlowDetailByBrandUser_sql">
  		(
  		select t.id,t1.branduser,t.businessdate,t.customerid,t.pcustomerid,
  		1 as billtype,t1.goodsid,t1.unitnum,t1.taxprice as price,t1.taxamount,t1.isdiscount ,t1.isinvoice,t1.iswriteoff,t1.remark
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and t.id like concat('%',#{condition.id},'%')
	      </if>
	      <if test="condition.branduser != null">
	      	<choose>
	      		<when test="condition.branduser != 'null' ">
		      		and t1.branduser = #{condition.branduser}
		      	</when>
		      	<otherwise>
		      		<!-- and (t1.branduser IS NULL or t1.branduser = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.invoice1!=null or condition.invoice2!=null">
		      and (
		      <trim prefixOverrides="and|or" >
		      <if test="condition.invoice1==1">
		      	or t1.isinvoice='0'
		      </if>
		      <if test="condition.invoice2==1">
		      	or t1.isinvoice='1'
		      </if>
		      </trim>
	      	)
	      </if>
	      <if test="1==1">
	      	and t1.iswriteoff='0' and (t.status='3' or t.status='4')
	      </if>
		</trim>
		union ALL
		select t.id,t1.branduser,t.businessdate,t.customerid,t.pcustomerid,
  		if(t.sourcetype='2',2,3) as billtype,t1.goodsid,-t1.unitnum,t1.taxprice as price,-t1.taxamount,0 as isdiscount,t1.isinvoice,t1.iswriteoff,t1.remark
		from t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and t.id like concat('%',#{condition.id},'%')
	      </if>
	      <if test="condition.branduser != null">
	      	<choose>
	      		<when test="condition.branduser != 'null' ">
		      		and t1.branduser = #{condition.branduser}
		      	</when>
		      	<otherwise>
		      		<!-- and (t1.branduser IS NULL or t1.branduser = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.invoice1!=null or condition.invoice2!=null">
		      and (
		      <trim prefixOverrides="and|or" >
		      <if test="condition.invoice1==1">
		      	or t1.isinvoice='0'
		      </if>
		      <if test="condition.invoice2==1">
		      	or t1.isinvoice='1'
		      </if>
		      </trim>
	      	)
	      </if>
	      <if test="1==1">
	      	and t1.iswriteoff = '0' AND t.ischeck='1' AND (t.STATUS = '3' OR t.STATUS = '4')
	      </if>
		</trim>
		UNION ALL
		select pb.id,pb.branduser,pb.businessdate,pb.customerid,pb.pcustomerid,
		4 as billtype,pb.brandid as goodsid,null as unitnum,0 as price,pb.amount as taxamount,0 as isdiscount,if(pb.iswriteoff='1',1,0) as isinvoice,pb.iswriteoff,pb.remark
		from t_account_customer_push_balance pb
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and pb.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and pb.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.id != null" >
	         and pb.id like concat('%',#{condition.id},'%')
	      </if>
	      <if test="condition.branduser != null">
	      	<choose>
	      		<when test="condition.branduser != 'null' ">
		      		and pb.branduser = #{condition.branduser}
		      	</when>
		      	<otherwise>
		      		<!-- and (pb.branduser IS NULL or pb.branduser = '') -->
		      		and 1 = 1
		      	</otherwise>
	      	</choose>
	      </if>
	      <if test="condition.invoice1!=null or condition.invoice2!=null">
		      and (
		      <trim prefixOverrides="and|or" >
		      <if test="condition.invoice1==1">
		      	or 1!=1
		      </if>
		      <if test="condition.invoice2==1">
		      	or 1=1
		      </if>
		      </trim>
	      	)
	      </if>
	      <if test="1==1">
	      	and pb.STATUS = '3'
	      </if>
		</trim>)
  	</sql>
  	<select id="getSalesGoodsFlowDetailListByBrandUser" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesGoodsFlowDetail">
  		select * from (
	  		select z.id,z.branduser,z.businessdate,z.customerid,z.pcustomerid,z.billtype,z.goodsid,z.unitnum,z.price,z.taxamount,z.isdiscount,z.isinvoice,z.iswriteoff,z.remark 
	  		from  <include refid="salesGoodsFlowDetailByBrandUser_sql"/> z
			<trim prefix="where" prefixOverrides="and|or" >
	  		  <if test="condition.billtype != null">
				 and z.billtype = #{condition.billtype}
			  </if>
			  <if test="condition.goodsid != null">
				 and z.goodsid = #{condition.goodsid} 
			  </if>
			</trim>
		) y
		order by y.businessdate desc,y.billtype asc,y.id
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getSalesGoodsFlowDetailCountByBrandUser" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
	  		select z.id,z.branduser,z.businessdate,z.customerid,z.pcustomerid,z.billtype,z.goodsid,z.unitnum,z.price,z.taxamount,z.isdiscount,z.isinvoice,z.iswriteoff,z.remark 
	  		from  <include refid="salesGoodsFlowDetailByBrandUser_sql"/> z
			<trim prefix="where" prefixOverrides="and|or" >
	  		  <if test="condition.billtype != null">
				 and z.billtype = #{condition.billtype}
			  </if>
			  <if test="condition.goodsid != null">
				 and z.goodsid like concat('%',#{condition.goodsid},'%') 
			  </if>
			</trim>
		) y
  	</select>
  	<select id="getSalesGoodsFlowDetailByBrandUserSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
  		select sum(z.taxamount)
  		from <include refid="salesGoodsFlowDetailByBrandUser_sql"/> z 
  		<trim prefix="where" prefixOverrides="and|or" >
  		  <if test="condition.billtype != null">
			 and z.billtype = #{condition.billtype}
		  </if>
		  <if test="condition.goodsid != null">
			 and z.goodsid like concat('%',#{condition.goodsid},'%') 
		  </if>
		</trim>
  	</select>
  	
  	<select id="showBaseSalesWithdrawnData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BaseSalesWithdrawnReport">
  		call p_sales_withdrawn_report("${condition.query_sql}","${condition.query_sql_all}",#{condition.groupcols},"${dataSql}",#{startNum},#{rows},#{condition.isflag},#{condition.orderstr})
  	</select>
  	<select id="showBaseSalesWithdrawnDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		call p_sales_withdrawn_report_count("${condition.query_sql}","${condition.query_sql_all}",#{condition.groupcols},"${dataSql}")
  	</select>
  	
  	<!-- 单资金回笼数据 -->
	<sql id="BaseFinanceDrawnData_sql">
		(
		select z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,z.goodsid,z.brandid,z.branduser,z.branddept,z.supplierid,z.supplieruser,z.goodssort,
		<if test="condition.type == 'branduserdept'">
			z.branduserdept,
		</if>
		sum(z.unitnum) as unitnum,sum(z.withdrawnamount) AS withdrawnamount,sum(z.costwriteoffamount) AS costwriteoffamount,sum(z.writeoffmarginamount) AS writeoffmarginamount
		from (
		select t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser, t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,t1.goodssort,
		<if test="condition.type == 'branduserdept'">
			IFNULL(p.belongdeptid,'') as branduserdept ,
		</if>
		t1.unitnum,t1.taxamount AS withdrawnamount, t1.costprice*t1.unitnum as costwriteoffamount,(t1.taxamount-t1.costprice*t1.unitnum) as writeoffmarginamount
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t1.saleoutid=t.id
		<if test="condition.type == 'branduserdept'">
			LEFT JOIN t_base_personnel p on p.id = t1.branduser
		</if>
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.type == 'branduserdept' and condition.branduserdept != null">
				and FIND_IN_SET(p.belongdeptid,#{condition.branduserdept})
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t1.branduser,#{condition.branduser})
			</if>
			<if test="condition.supplieruser != null">
				and FIND_IN_SET(t1.supplieruser,#{condition.supplieruser})
			</if>
			<if test="condition.branddept != null">
				and FIND_IN_SET(t1.branddept,#{condition.branddept})
			</if>
			<if test="condition.goodssort != null">
				and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
			</if>
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.customerid,#{condition.pcustomerid}) or FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null">
				and t1.writeoffdate >=#{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t1.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			<if test="1==1">
				and t1.iswriteoff='1' and t.status in('3','4')
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser, t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,t1.goodssort,
		<if test="condition.type == 'branduserdept'">
			IFNULL(p.belongdeptid,'') as branduserdept ,
		</if>
		-t1.unitnum,-t1.taxamount AS withdrawnamount,-t1.costprice*t1.unitnum AS costwriteoffamount,-(t1.taxamount-t1.costprice*t1.unitnum) as writeoffmarginamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<if test="condition.type == 'branduserdept'">
			LEFT JOIN t_base_personnel p on p.id = t1.branduser
		</if>
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.type == 'branduserdept' and condition.branduserdept != null">
				and FIND_IN_SET(p.belongdeptid,#{condition.branduserdept})
			</if>
			<if test="condition.goodsid != null">
				and
				FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.supplierid != null">
				and
				FIND_IN_SET(t1.supplierid,#{condition.supplierid})
			</if>
			<if test="condition.brandid != null">
				and
				FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.branduser != null">
				and
				FIND_IN_SET(t1.branduser,#{condition.branduser})
			</if>
			<if test="condition.goodssort != null">
				and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
			</if>
			<if test="condition.supplieruser != null">
				and
				FIND_IN_SET(t1.supplieruser,#{condition.supplieruser})
			</if>
			<if test="condition.branddept != null">
				and
				FIND_IN_SET(t1.branddept,#{condition.branddept})
			</if>
			<if test="condition.salesdept != null">
				and
				FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.salesuser != null">
				and
				FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.salesarea != null">
				and
				FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.customerid,#{condition.pcustomerid}) or FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null">
				and t1.writeoffdate >=#{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t1.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			<if test="1==1">
				and t.ischeck='1' and t1.iswriteoff='1' and t.status
				in('3','4')
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser, t.brandid AS goodsid,t.brandid,t.branduser,t.branddept,t.supplierid,t.supplieruser,t.brandid AS goodssort,
		<if test="condition.type == 'branduserdept'">
			IFNULL(p.belongdeptid,'') as branduserdept ,
		</if>
		0 as unitnum,t.amount AS withdrawnamount, 0 AS costwriteoffamount, t.amount as writeoffmarginamount
		FROM t_account_customer_push_balance t
		<if test="condition.type == 'branduserdept'">
			LEFT JOIN t_base_personnel p on p.id = t.branduser
		</if>
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.type == 'branduserdept' and condition.branduserdept != null">
				and FIND_IN_SET(p.belongdeptid,#{condition.branduserdept})
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t.brandid,#{condition.goodsid})
			</if>
			<if test="condition.goodssort != null">
				and FIND_IN_SET(t.brandid,#{condition.goodssort})
			</if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(t.supplierid,#{condition.supplierid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t.brandid,#{condition.brandid})
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t.branduser,#{condition.branduser})
			</if>
			<if test="condition.supplieruser != null">
				and FIND_IN_SET(t.supplieruser,#{condition.supplieruser})
			</if>
			<if test="condition.branddept != null">
				and FIND_IN_SET(t.branddept,#{condition.branddept})
			</if>
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.customerid,#{condition.pcustomerid}) or FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null">
				and t.writeoffdate >=#{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			<if test="1==1">
				and t.iswriteoff='1' and t.status in('3','4')
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser, 'QC' goodsid,'QC' brandid,'QC' branduser,'QC' branddept,'QC' supplierid,'QC' supplieruser,'QC' goodssort,
		<if test="condition.type == 'branduserdept'">
			'QC' as branduserdept ,
		</if>
		0 as unitnum,t.amount AS withdrawnamount, 0 AS costwriteoffamount, t.amount as writeoffmarginamount
		FROM t_account_begin_amount t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.customerid,#{condition.pcustomerid}) or FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null">
				and t.writeoffdate >=#{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			<if test="1==1">
				and t.iswriteoff='1' and t.status = '4'
			</if>
		</trim>
		) z
		<trim prefix="where" prefixOverrides="and|or">
			<if test="dataSql  != '' ">
				<include refid="common.Page_querySql" />
				<include refid="common.Page_dataSql" />
			</if>
			<if test="1 == 1">
				and 1 = 1
			</if>
			<if test="condition.type == 'branduserdept' and condition.branduserdept != null">
				and FIND_IN_SET(z.branduserdept,#{condition.branduserdept})
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(z.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.goodssort != null">
				and FIND_IN_SET(z.goodssort,#{condition.goodssort})
			</if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(z.supplierid,#{condition.supplierid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(z.brandid,#{condition.brandid})
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(z.branduser,#{condition.branduser})
			</if>
			<if test="condition.supplieruser != null">
				and FIND_IN_SET(z.supplieruser,#{condition.supplieruser})
			</if>
			<if test="condition.branddept != null">
				and FIND_IN_SET(z.branddept,#{condition.branddept})
			</if>
		</trim>
		<if test="condition.groupcols  != 'all' ">
			group by
			<choose>
				<when test="condition.groupcols == ''">
					customerid,goodsid
				</when>
				<otherwise>
					${condition.groupcols}
				</otherwise>
			</choose>
		</if>
		)
	</sql>
  	<select id="showBaseFinanceDrawnData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BaseSalesWithdrawnReport">
  	SELECT z.* from <include refid="BaseFinanceDrawnData_sql"/> z
	<if test="condition.orderstr  != '' ">
		order by
		${condition.orderstr}
	</if>
	<if test="condition.isflag == null and condition.groupcols  != 'all' ">
		LIMIT ${startNum},${rows}
	</if>
  	</select>
	<select id="showBaseFinanceDrawnDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from <include refid="BaseFinanceDrawnData_sql"/> co
	</select>
    <sql id="BaseFinanceReceiptData_sql">
        select z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser, z.goodsid,z.brandid,z.branduser,z.branddept,z.supplieruser,z.supplierid,
		<if test="condition.type == 'branduserdept'">
			z.branduserdept,
		</if>
        sum(z.sendamount) AS sendamount, sum(z.sendnotaxamount) AS sendnotaxamount,sum(z.sendcostamount) as sendcostamount,
        sum(z.directreturnamount) AS directreturnamount, sum(z.directreturnnotaxamount) AS directreturnnotaxamount, sum(z.directreturncostamount) as directreturncostamount,
        sum(z.checkreturnamount) AS checkreturnamount, sum(z.checkreturnnotaxamount) AS checkreturnnotaxamount, sum(z.checkreturncostamount) as checkreturncostamount,
        sum(z.returntaxamount) AS returntaxamount, sum(z.returnnotaxamount) AS returnnotaxamount, sum(z.returncostamount) as returncostamount,
        sum(z.pushbalanceamount) AS pushbalanceamount,
        (sum(z.sendamount)-sum(z.returntaxamount)+sum(z.pushbalanceamount)) as saleamount,
        (sum(z.sendnotaxamount)-sum(z.returnnotaxamount)) as salenotaxamount,
        (sum(z.sendcostamount)-sum(z.returncostamount)) as salecostamount,
        sum(z.withdrawnamount) AS withdrawnamount, sum(z.costwriteoffamount) AS costwriteoffamount,
        sum(z.allsendamount) AS allsendamount, sum(z.allreturnamount) AS allreturnamount, sum(z.allpushbalanceamount) AS allpushbalanceamount,sum(z.allbeginamount) AS allbeginamount,
        (sum(z.allsendamount)-sum(z.allreturnamount)+sum(z.allpushbalanceamount)+sum(z.allbeginamount)) as allunwithdrawnamount,
        sum(z.unauditamount) AS unauditamount, sum(z.auditamount) AS auditamount, sum(z.rejectamount) AS rejectamount
        from(
        SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser, t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,t1.supplierid,
		<if test="condition.type == 'branduserdept'">
			IFNULL(p.belongdeptid,'') as branduserdept ,
		</if>
        0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
        0 AS directreturnamount, 0 AS directreturnnotaxamount,0 as directreturncostamount,
        0 AS checkreturnamount, 0 AS checkreturnnotaxamount, 0 as checkreturncostamount,
        0 AS returntaxamount, 0 AS returnnotaxamount, 0 as returncostamount,
        0 AS pushbalanceamount, 0 AS withdrawnamount, 0 AS costwriteoffamount,
        t1.taxamount AS allsendamount, 0 AS allreturnamount, 0 AS allpushbalanceamount,0 as allbeginamount, 0 AS unauditamount, 0 AS auditamount, 0 AS rejectamount
        FROM t_storage_saleout t
        RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<if test="condition.type == 'branduserdept'">
			LEFT JOIN t_base_personnel p on p.id = t1.branduser
		</if>
        <trim prefix="where" prefixOverrides="and|or">
			<if test="condition.type == 'branduserdept' and condition.branduserdept != null">
				and FIND_IN_SET(p.belongdeptid,#{condition.branduserdept})
			</if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(t1.brandid,#{condition.brandid})
            </if>
            <if test="condition.branduser != null">
                and FIND_IN_SET(t1.branduser,#{condition.branduser})
            </if>
            <if test="condition.branddept != null">
                and FIND_IN_SET(t1.branddept,#{condition.branddept})
            </if>
            <if test="condition.salesdept != null">
                and FIND_IN_SET(t.salesdept,#{condition.salesdept})
            </if>
            <if test="condition.salesuser != null">
                and FIND_IN_SET(t.salesuser,#{condition.salesuser})
            </if>
            <if test="condition.salesarea != null">
                and FIND_IN_SET(t.salesarea,#{condition.salesarea})
            </if>
            <if test="condition.customerid != null">
                and FIND_IN_SET(t.customerid,#{condition.customerid})
            </if>
            <if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.customerid,#{condition.pcustomerid}) or FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}))
            </if>
            <if test="condition.supplierid != null">
                and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
            </if>
            <if test="condition.businessdate1 != null">
                and t.businessdate >=#{condition.businessdate1}
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
            </if>

            <if test="1==1">
                and t1.iswriteoff = '0' AND (t.STATUS = '3' OR t.STATUS = '4')
            </if>
        </trim>
        UNION ALL
        SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser, t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,t1.supplierid,
		<if test="condition.type == 'branduserdept'">
			IFNULL(p.belongdeptid,'') as branduserdept ,
		</if>
        0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
        0 AS directreturnamount, 0 AS directreturnnotaxamount, 0 as directreturncostamount,
        0 AS checkreturnamount, 0 AS checkreturnnotaxamount, 0 as checkreturncostamount,
        0 AS returntaxamount, 0 AS returnnotaxamount, 0 as returncostamount,
        0 AS pushbalanceamount, 0 AS withdrawnamount, 0 AS costwriteoffamount,
        0 AS allsendamount, t1.taxamount AS allreturnamount, 0 AS allpushbalanceamount,0 as allbeginamount, 0 AS unauditamount, 0 AS auditamount, -t1.taxamount AS rejectamount
        FROM t_storage_salereject_enter t
        RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<if test="condition.type == 'branduserdept'">
			LEFT JOIN t_base_personnel p on p.id = t1.branduser
		</if>
        <trim prefix="where" prefixOverrides="and|or">
			<if test="condition.type == 'branduserdept' and condition.branduserdept != null">
				and FIND_IN_SET(p.belongdeptid,#{condition.branduserdept})
			</if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(t1.brandid,#{condition.brandid})
            </if>
            <if test="condition.branduser != null">
                and FIND_IN_SET(t1.branduser,#{condition.branduser})
            </if>
            <if test="condition.branddept != null">
                and FIND_IN_SET(t1.branddept,#{condition.branddept})
            </if>
            <if test="condition.salesdept != null">
                and FIND_IN_SET(t.salesdept,#{condition.salesdept})
            </if>
            <if test="condition.salesuser != null">
                and FIND_IN_SET(t.salesuser,#{condition.salesuser})
            </if>
            <if test="condition.salesarea != null">
                and FIND_IN_SET(t.salesarea,#{condition.salesarea})
            </if>
            <if test="condition.customerid != null">
                and FIND_IN_SET(t.customerid,#{condition.customerid})
            </if>
            <if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.customerid,#{condition.pcustomerid}) or FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}))
            </if>
            <if test="condition.supplierid != null">
                and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
            </if>
            <if test="condition.businessdate1 != null">
                and t.businessdate >=#{condition.businessdate1}
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
            </if>
            <if test="1==1">
                AND t.ischeck='1' AND (t.STATUS = '3' OR t.STATUS = '4') AND t1.iswriteoff = '0'
            </if>
        </trim>
        UNION ALL
        SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser, t.brandid as goodsid,t.brandid,t.branduser,t.branddept,t.supplieruser,t.supplierid,
		<if test="condition.type == 'branduserdept'">
			IFNULL(p.belongdeptid,'') as branduserdept ,
		</if>
        0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
        0 AS directreturnamount, 0 AS directreturnnotaxamount, 0 as directreturncostamount,
        0 AS checkreturnamount, 0 AS checkreturnnotaxamount, 0 as checkreturncostamount,
        0 AS returntaxamount, 0 AS returnnotaxamount, 0 as returncostamount,
        0 AS pushbalanceamount, 0 AS withdrawnamount, 0 AS costwriteoffamount,
        0 AS allsendamount, 0 AS allreturnamount, t.amount AS allpushbalanceamount,0 as allbeginamount, 0 AS unauditamount, 0 AS auditamount, 0 AS rejectamount
        FROM t_account_customer_push_balance t
		<if test="condition.type == 'branduserdept'">
			LEFT JOIN t_base_personnel p on p.id = t.branduser
		</if>
        <trim prefix="where" prefixOverrides="and|or">
			<if test="condition.type == 'branduserdept' and condition.branduserdept != null">
				and FIND_IN_SET(p.belongdeptid,#{condition.branduserdept})
			</if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(t.brandid,#{condition.goodsid})
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(t.brandid,#{condition.brandid})
            </if>
            <if test="condition.branduser != null">
                and FIND_IN_SET(t.branduser,#{condition.branduser})
            </if>
            <if test="condition.branddept != null">
                and FIND_IN_SET(t.branddept,#{condition.branddept})
            </if>
            <if test="condition.salesdept != null">
                and FIND_IN_SET(t.salesdept,#{condition.salesdept})
            </if>
            <if test="condition.salesuser != null">
                and FIND_IN_SET(t.salesuser,#{condition.salesuser})
            </if>
            <if test="condition.salesarea != null">
                and FIND_IN_SET(t.salesarea,#{condition.salesarea})
            </if>
            <if test="condition.customerid != null">
                and FIND_IN_SET(t.customerid,#{condition.customerid})
            </if>
            <if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.customerid,#{condition.pcustomerid}) or FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}))
            </if>
            <if test="condition.supplierid != null">
                and FIND_IN_SET(t.supplierid,#{condition.supplierid})
            </if>
            <if test="condition.businessdate1 != null">
                and t.businessdate >= #{condition.businessdate1}
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
            </if>
            <if test="1==1">
                AND t.iswriteoff='0' and t.status in('3','4')
            </if>
        </trim>
		UNION ALL
		SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser, 'QC' goodsid,'QC' brandid,'QC' branduser,'QC' branddept,'QC' supplieruser,'QC' supplierid,
		<if test="condition.type == 'branduserdept'">
			'QC' as branduserdept ,
		</if>
		0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
		0 AS directreturnamount, 0 AS directreturnnotaxamount, 0 as directreturncostamount,
		0 AS checkreturnamount, 0 AS checkreturnnotaxamount, 0 as checkreturncostamount,
		0 AS returntaxamount, 0 AS returnnotaxamount, 0 as returncostamount,
		0 AS pushbalanceamount, 0 AS withdrawnamount, 0 AS costwriteoffamount,
		0 AS allsendamount, 0 AS allreturnamount, 0 AS allpushbalanceamount,t.amount as allbeginamount, 0 AS unauditamount, 0 AS auditamount, 0 AS rejectamount
		FROM t_account_begin_amount t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.customerid,#{condition.pcustomerid}) or FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="1==1">
				AND t.iswriteoff='0' and t.status in('3','4')
			</if>
		</trim>
        UNION ALL
        SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser, t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,t1.supplierid,
		<if test="condition.type == 'branduserdept'">
			IFNULL(p.belongdeptid,'') as branduserdept ,
		</if>
        0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
        0 AS directreturnamount, 0 AS directreturnnotaxamount, 0 as directreturncostamount,
        0 AS checkreturnamount, 0 AS checkreturnnotaxamount, 0 as checkreturncostamount,
        0 AS returntaxamount, 0 AS returnnotaxamount, 0 as returncostamount,
        0 AS pushbalanceamount, 0 AS withdrawnamount, 0 AS costwriteoffamount,
        0 AS allsendamount, 0 AS allreturnamount, 0 AS allpushbalanceamount,0 as allbeginamount,
        IF(t.STATUS = '2',t1.taxamount,0) AS unauditamount , IF(t.STATUS IN ('3','4'),t1.taxamount,0) AS auditamount , 0 AS rejectamount
        FROM t_sales_receipt t
        RIGHT JOIN t_sales_receipt_detail t1 ON t.id = t1.billid
		<if test="condition.type == 'branduserdept'">
			LEFT JOIN t_base_personnel p on p.id = t1.branduser
		</if>
        <trim prefix="where" prefixOverrides="and|or">
			<if test="condition.type == 'branduserdept' and condition.branduserdept != null">
				and FIND_IN_SET(p.belongdeptid,#{condition.branduserdept})
			</if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(t1.brandid,#{condition.brandid})
            </if>
            <if test="condition.branduser != null">
                and FIND_IN_SET(t1.branduser,#{condition.branduser})
            </if>
            <if test="condition.branddept != null">
                and FIND_IN_SET(t1.branddept,#{condition.branddept})
            </if>
            <if test="condition.salesdept != null">
                and FIND_IN_SET(t.salesdept,#{condition.salesdept})
            </if>
            <if test="condition.salesuser != null">
                and FIND_IN_SET(t.salesuser,#{condition.salesuser})
            </if>
            <if test="condition.salesarea != null">
                and FIND_IN_SET(t.salesarea,#{condition.salesarea})
            </if>
            <if test="condition.customerid != null">
                and FIND_IN_SET(t.customerid,#{condition.customerid})
            </if>
            <if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.customerid,#{condition.pcustomerid}) or FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}))
            </if>
            <if test="condition.supplierid != null">
                and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
            </if>
            <if test="condition.businessdate1 != null">
                and t.addtime >= #{condition.businessdate1}
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t.addtime <= #{condition.nextDay}]]>
            </if>
            <if test="1==1">
                AND t1.iswriteoff = '0'
            </if>
        </trim>
        ) z
		<trim prefix="where" prefixOverrides="and|or">
			<if test="dataSql  != '' ">
				<include refid="common.Page_querySql" />
				<include refid="common.Page_dataSql" />
			</if>
			<if test="1 == 1">
				and 1 = 1
			</if>
			<if test="condition.type == 'branduserdept' and condition.branduserdept != null">
				and FIND_IN_SET(z.branduserdept,#{condition.branduserdept})
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(z.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(z.brandid,#{condition.brandid})
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(z.branduser,#{condition.branduser})
			</if>
			<if test="condition.branddept != null">
				and FIND_IN_SET(z.branddept,#{condition.branddept})
			</if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(z.supplierid,#{condition.supplierid})
			</if>
		</trim>
        <if test="condition.groupcols  != 'all' ">
            group by
            <choose>
                <when test="condition.groupcols == ''">
                    customerid,goodsid
                </when>
                <otherwise>
                    ${condition.groupcols}
                </otherwise>
            </choose>
        </if>
    </sql>
  	<!-- 单应收款数据 -->
  	<select id="showBaseFinanceReceiptData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BaseSalesWithdrawnReport">
        <include refid="BaseFinanceReceiptData_sql"/>
        <if test="condition.orderstr  != '' ">
            order by
            ${condition.orderstr}
        </if>
        <if test="condition.isflag == null and condition.groupcols  != 'all' ">
            LIMIT ${startNum},${rows}
        </if>
  	</select>
  	<select id="showBaseFinanceReceiptDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
        select count(1) from (
            <include refid="BaseFinanceReceiptData_sql"/>
        )co
  	</select>
  	<sql id="getSupplieReceiptData_sql">
  		( select z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,
			z.goodsid,z.brandid,z.branduser,z.branddept,z.supplierid,
			sum(z.sendamount) AS sendamount, sum(z.sendnotaxamount) AS sendnotaxamount,sum(z.sendcostamount) as sendcostamount,
			sum(z.directreturnamount) AS directreturnamount, sum(z.directreturnnotaxamount) AS directreturnnotaxamount, sum(z.directreturncostamount) as directreturncostamount,
			sum(z.checkreturnamount) AS checkreturnamount, sum(z.checkreturnnotaxamount) AS checkreturnnotaxamount, sum(z.checkreturncostamount) as checkreturncostamount,
			sum(z.returntaxamount) AS returntaxamount, sum(z.returnnotaxamount) AS returnnotaxamount, sum(z.returncostamount) as returncostamount,
			sum(z.pushbalanceamount) AS pushbalanceamount, 
			(sum(z.sendamount)-sum(z.returntaxamount)+sum(z.pushbalanceamount)) as saleamount,
			(sum(z.sendnotaxamount)-sum(z.returnnotaxamount)) as salenotaxamount,
			(sum(z.sendcostamount)-sum(z.returncostamount)) as salecostamount,
			sum(z.withdrawnamount) AS withdrawnamount, sum(z.costwriteoffamount) AS costwriteoffamount, 
			sum(z.allsendamount) AS allsendamount, sum(z.allreturnamount) AS allreturnamount, sum(z.allpushbalanceamount) AS allpushbalanceamount, 
			(sum(z.allsendamount)-sum(z.allreturnamount)+sum(z.allpushbalanceamount)) as allunwithdrawnamount,
			sum(z.unauditamount) AS unauditamount, sum(z.auditamount) AS auditamount, sum(z.rejectamount) AS rejectamount,
            sum(z.auditamount+z.rejectamount+z.allpushbalanceamount) as checkamount
			from (
				SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
				t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
				0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
				0 AS directreturnamount, 0 AS directreturnnotaxamount,0 as directreturncostamount,
				0 AS checkreturnamount, 0 AS checkreturnnotaxamount, 0 as checkreturncostamount,
				0 AS returntaxamount, 0 AS returnnotaxamount, 0 as returncostamount,
				0 AS pushbalanceamount, 0 AS withdrawnamount, 0 AS costwriteoffamount, 
				t1.taxamount AS allsendamount, 0 AS allreturnamount, 0 AS allpushbalanceamount, 0 AS unauditamount, 0 AS auditamount, 0 AS rejectamount 
				FROM t_storage_saleout t 
				RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="condition.businessdate1 != null">
					    and t.businessdate >= #{condition.businessdate1}
				    </if>
				    <if test="condition.businessdate2 != null">
					   <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				    </if>
				    <if test="condition.supplierid != null">
				       and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
				    </if>
				    <if test="condition.branddept != null">
				       and FIND_IN_SET(t1.branddept,#{condition.branddept})
				    </if>
					<if test="1 == 1">
						and t1.iswriteoff = '0' AND (t.STATUS = '3' OR t.STATUS = '4')
					</if>
				</trim>
				UNION ALL 
				SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
				t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
				0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
				0 AS directreturnamount, 0 AS directreturnnotaxamount, 0 as directreturncostamount,
				0 AS checkreturnamount, 0 AS checkreturnnotaxamount, 0 as checkreturncostamount,
				0 AS returntaxamount, 0 AS returnnotaxamount, 0 as returncostamount,
				0 AS pushbalanceamount, 0 AS withdrawnamount, 0 AS costwriteoffamount, 
				0 AS allsendamount, t1.taxamount AS allreturnamount, 0 AS allpushbalanceamount, 0 AS unauditamount, 0 AS auditamount, 
				-t1.taxamount AS rejectamount 
				FROM t_storage_salereject_enter t 
				RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="condition.businessdate1 != null">
					    and t.businessdate >= #{condition.businessdate1}
				    </if>
				    <if test="condition.businessdate2 != null">
					   <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				    </if>
				    <if test="condition.supplierid != null">
				       and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
				    </if>
				    <if test="condition.branddept != null">
				       and FIND_IN_SET(t1.branddept,#{condition.branddept})
				    </if>
					<if test="1 == 1">
						AND t.ischeck='1' AND (t.STATUS = '3' OR t.STATUS = '4') AND t1.iswriteoff = '0'
					</if>
				</trim>
				UNION ALL
				SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
				t.brandid as goodsid,t.brandid,t.branduser,t.branddept,t.supplierid,t.supplieruser,
				0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
				0 AS directreturnamount, 0 AS directreturnnotaxamount, 0 as directreturncostamount,
				0 AS checkreturnamount, 0 AS checkreturnnotaxamount, 0 as checkreturncostamount,
				0 AS returntaxamount, 0 AS returnnotaxamount, 0 as returncostamount,
				0 AS pushbalanceamount, 0 AS withdrawnamount, 0 AS costwriteoffamount, 
				0 AS allsendamount, 0 AS allreturnamount, t.amount AS allpushbalanceamount, 0 AS unauditamount, 0 AS auditamount, 0 AS rejectamount 
				FROM t_account_customer_push_balance t
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="condition.businessdate1 != null">
					    and t.businessdate >= #{condition.businessdate1}
				    </if>
				    <if test="condition.businessdate2 != null">
					   <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				    </if>
				    <if test="condition.supplierid != null">
				       and FIND_IN_SET(t.supplierid,#{condition.supplierid})
				    </if>
				    <if test="condition.branddept != null">
				       and FIND_IN_SET(t.branddept,#{condition.branddept})
				    </if>
					<if test="1 == 1">
						and t.iswriteoff='0' and t.status in('3','4')
					</if>
				</trim>
				UNION ALL 
				SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
				t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
				0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
				0 AS directreturnamount, 0 AS directreturnnotaxamount, 0 as directreturncostamount,
				0 AS checkreturnamount, 0 AS checkreturnnotaxamount, 0 as checkreturncostamount,
				0 AS returntaxamount, 0 AS returnnotaxamount, 0 as returncostamount,
				0 AS pushbalanceamount, 0 AS withdrawnamount, 0 AS costwriteoffamount, 
				0 AS allsendamount, 0 AS allreturnamount, 0 AS allpushbalanceamount, 
				IF(t.STATUS = '2',t1.taxamount,0) AS unauditamount , 
				IF(t.STATUS IN ('3','4'),t1.taxamount,0) AS auditamount , 0 AS rejectamount 
				FROM t_sales_receipt t 
				RIGHT JOIN t_sales_receipt_detail t1 ON t.id = t1.billid
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="condition.businessdate1 != null">
					    and t.addtime >= #{condition.businessdate1}
				    </if>
				    <if test="condition.businessdate2 != null">
					   <![CDATA[and t.addtime <= (#{condition.businessdate2}]]>
				    </if>
				    <if test="condition.supplierid != null">
				       and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
				    </if>
				    <if test="condition.branddept != null">
				       and FIND_IN_SET(t1.branddept,#{condition.branddept})
				    </if>
					<if test="1 == 1">
						AND t1.iswriteoff = '0'
					</if>
				</trim>
			) z
			<trim prefix="where" prefixOverrides="and|or" >
	  			<include refid="common.Page_dataSql"/>
	  		</trim>
			<if test="condition.groupcols == null">
				group by z.supplierid
			</if>
		)
  	</sql>
  	<select id="getSupplierFinanceReceiptList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BaseSalesWithdrawnReport">
  		select * from <include refid="getSupplieReceiptData_sql"/> zl
  	</select>
  	<select id="getSupplierFinanceReceiptCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  			select * from <include refid="getSupplieReceiptData_sql"/> zl
  		) co
  	</select>
  	
  	<sql id="getExportSupplierDrawnData_sql">
  		(
  			select z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,
				z.goodsid,z.brandid,z.branduser,z.branddept,z.supplierid,
				sum(z.sendamount) AS sendamount, sum(z.sendnotaxamount) AS sendnotaxamount,sum(z.sendcostamount) as sendcostamount,
				sum(z.directreturnamount) AS directreturnamount, sum(z.directreturnnotaxamount) AS directreturnnotaxamount, sum(z.directreturncostamount) as directreturncostamount,
				sum(z.checkreturnamount) AS checkreturnamount, sum(z.checkreturnnotaxamount) AS checkreturnnotaxamount, sum(z.checkreturncostamount) as checkreturncostamount,
				sum(z.returntaxamount) AS returntaxamount, sum(z.returnnotaxamount) AS returnnotaxamount, sum(z.returncostamount) as returncostamount,
				sum(z.pushbalanceamount) AS pushbalanceamount, 
				(sum(z.sendamount)-sum(z.returntaxamount)+sum(z.pushbalanceamount)) as saleamount,
				(sum(z.sendnotaxamount)-sum(z.returnnotaxamount)) as salenotaxamount,
				(sum(z.sendcostamount)-sum(z.returncostamount)) as salecostamount,
				sum(z.withdrawnamount) AS withdrawnamount, sum(z.costwriteoffamount) AS costwriteoffamount, 
				sum(z.allsendamount) AS allsendamount, sum(z.allreturnamount) AS allreturnamount, sum(z.allpushbalanceamount) AS allpushbalanceamount, 
				(sum(z.allsendamount)-sum(z.allreturnamount)+sum(z.allpushbalanceamount)) as allunwithdrawnamount,
				sum(z.unauditamount) AS unauditamount, sum(z.auditamount) AS auditamount, sum(z.rejectamount) AS rejectamount
			from (
				SELECT t1.customerid,t1.pcustomerid,t1.salesarea,t1.salesdept,t1.salesuser,
					t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,
					0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
					0 AS directreturnamount, 0 AS directreturnnotaxamount,0 as directreturncostamount,
					0 AS checkreturnamount, 0 AS checkreturnnotaxamount, 0 as checkreturncostamount,
					0 AS returntaxamount, 0 AS returnnotaxamount,0 as returncostamount,
					0 AS pushbalanceamount, t1.taxamount AS withdrawnamount, t1.costprice * t1.unitnum AS costwriteoffamount, 
					0 AS allsendamount, 0 AS allreturnamount, 0 AS allpushbalanceamount, 0 AS unauditamount, 0 AS auditamount, 0 AS rejectamount
				FROM t_account_sales_invoice t
				RIGHT JOIN t_account_sales_invoice_detail t1 ON t1.billid = t.id
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="condition.businessdate1 != null">
					    and t.writeoffdate >= #{condition.businessdate1}
				    </if>
				    <if test="condition.businessdate2 != null">
					   <![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
				    </if>
				    <if test="condition.supplierid != null">
					   and t1.supplierid = #{condition.supplierid}
				    </if>
				    <if test="condition.branddept != null">
				       and FIND_IN_SET(t1.branddept,#{condition.branddept})
				    </if>
					<if test="1 == 1">
						and t.iswriteoff = '1' AND t.STATUS = '4'
					</if>
				</trim>
				UNION ALL
				SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
					t.brandid as goodsid ,t.brandid,t.branduser,t.branddept,t.supplierid,
					0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
					0 AS directreturnamount, 0 AS directreturnnotaxamount,0 as directreturncostamount,
					0 AS checkreturnamount, 0 AS checkreturnnotaxamount, 0 as checkreturncostamount,
					0 AS returntaxamount, 0 AS returnnotaxamount, 0 as returncostamount,
					0 AS pushbalanceamount, t.amount AS withdrawnamount, 0 AS costwriteoffamount, 
					0 AS allsendamount, 0 AS allreturnamount, 0 AS allpushbalanceamount, 0 AS unauditamount, 0 AS auditamount, 0 AS rejectamount
				FROM t_account_customer_push_balance t
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="condition.businessdate1 != null">
					    and t.writeoffdate >= #{condition.businessdate1}
				    </if>
				    <if test="condition.businessdate2 != null">
					   <![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
				    </if>
				    <if test="condition.supplierid != null">
					   and t.supplierid = #{condition.supplierid}
				    </if>
				    <if test="condition.branddept != null">
				       and FIND_IN_SET(t.branddept,#{condition.branddept})
				    </if>
					<if test="1 == 1">
						and t.isinvoice='0' and t.isrefer='0' AND t.iswriteoff = '1' AND ( t.STATUS = '3' OR t.STATUS = '4')
					</if>
				</trim>
			)z
			<trim prefix="where" prefixOverrides="and|or" >
				<include refid="common.Page_dataSql"/>
			</trim>
			<if test="condition.groupcols == null">
				group by z.supplierid
			</if>
  		)
  	</sql>
  	<!-- 导出分供应商资金回笼统计情况数据 -->
  	<select id="getExportSupplierDrawnData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BaseSalesWithdrawnReport">
  		select * from <include refid="getExportSupplierDrawnData_sql"/> m
  	</select>
    <sql id="showCustomerReceivableDynamicData_sql">
        (
        <choose>
            <when test="condition.reporttype == 1">
                select '1' as billtype,GROUP_CONCAT(t.id) as id,t.saleorderid,t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,'' as brandid,'' as branduser,'' as branddept,'' as supplierid,'' as supplieruser,
                STR_TO_DATE(t.audittime,'%Y-%m-%d') as businessdate,sum(t.initsendamount) as initsendamount,sum(t.initsendcostamount) as initsendcostamount,sum(t.sendamount) as sendamount,sum(t.sendnotaxamount) as sendnotaxamount,sum(t.sendcostamount) as sendcostamount,
                t.receiptid,t.checkdate,sum(t.checkamount) as checkamount,t.invoicedate,GROUP_CONCAT(DISTINCT t.invoiceid) as invoiceid,sum(t.invoicebillamount) as invoicebillamount,sum(t.invoicebillnotaxamount) as invoicebillnotaxamount,(sum(t.checkamount)-sum(t.invoicebillamount)) as uninvoicebillamount,(sum(t.checknotaxamount)-sum(t.invoicebillnotaxamount)) as uninvoicebillnotaxamount,
                t.writeoffdate,sum(t.writeoffamount) as writeoffamount,sum(t.writeoffnotaxamount) as writeoffnotaxamount,(sum(t.checkamount)-sum(t.writeoffamount)) as unwriteoffamount,(sum(t.checknotaxamount)-sum(t.writeoffnotaxamount)) as unwriteoffnotaxamount,
                t.audittime,t1.businessdate as orderdate,t.duefromdate,t.invoicebilldate,t1.sourceid,if((SELECT r.remark from t_sales_receipt r where r.id = t.receiptid) is null,'',(SELECT r.remark from t_sales_receipt r where r.id = t.receiptid)) as receiptremark
            </when>
            <otherwise>
                select '1' as billtype,t.id,t.saleorderid,t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,'' as brandid,'' as branduser,'' as branddept,'' as supplierid,'' as supplieruser,
                STR_TO_DATE(t.audittime,'%Y-%m-%d') as businessdate,t.initsendamount,t.initsendcostamount,t.sendamount,t.sendnotaxamount,t.sendcostamount,
                t.receiptid,t.checkdate,t.checkamount,t.invoicedate,t.invoiceid,t.invoicebillamount,t.invoicebillnotaxamount,(t.checkamount-t.invoicebillamount) as uninvoicebillamount,(t.checknotaxamount-t.invoicebillnotaxamount) as uninvoicebillnotaxamount,
                t.writeoffdate,t.writeoffamount,t.writeoffnotaxamount,(t.checkamount-t.writeoffamount) as unwriteoffamount,(t.checknotaxamount-t.writeoffnotaxamount) as unwriteoffnotaxamount,
                t.audittime,t1.businessdate as orderdate,t.duefromdate,t.invoicebilldate,t1.sourceid,if((SELECT r.remark from t_sales_receipt r where r.id = t.receiptid) is null,'',(SELECT r.remark from t_sales_receipt r where r.id = t.receiptid)) as receiptremark
            </otherwise>
        </choose>
        from t_storage_saleout t
        left join t_sales_order t1 on t.saleorderid=t1.id
        <trim prefix="where" prefixOverrides="and|or" >
            <if test="condition.businessdate1 != null">
                and STR_TO_DATE(t.audittime,'%Y-%m-%d') >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and STR_TO_DATE(t.audittime,'%Y-%m-%d') <= STR_TO_DATE(#{condition.businessdate2},'%Y-%m-%d')]]>
            </if>
            <if test="condition.invoicedate1 != null">
                and t.invoicebilldate >= #{condition.invoicedate1}
            </if>
            <if test="condition.invoicedate2 != null">
                <![CDATA[and t.invoicebilldate <= #{condition.invoicedate2}]]>
            </if>
            <if test="condition.writeoffdate1 != null">
                and t.writeoffdate >= #{condition.writeoffdate1}
            </if>
            <if test="condition.writeoffdate2 != null">
                <![CDATA[and t.writeoffdate <= #{condition.writeoffdate2}]]>
            </if>
			<if test="condition.duefromdate1 != null">
				and t.duefromdate >= #{condition.duefromdate1}
			</if>
			<if test="condition.duefromdate2 != null">
				<![CDATA[and t.duefromdate <= #{condition.duefromdate2}]]>
			</if>
            <if test="condition.query_salesarea != null" >
                ${condition.query_salesarea}
            </if>
            <if test="condition.query_dept != null" >
                ${condition.query_dept}
            </if>
            <if test="condition.salesuser != null" >
                and t.salesuser = #{condition.salesuser}
            </if>
            <if test="condition.customerid != null" >
                and t.customerid = #{condition.customerid}
            </if>
            <if test="condition.pcustomerid != null" >
                and t.pcustomerid = #{condition.pcustomerid}
            </if>
            <if test="condition.iswrite != null">
                and t.iswrite = #{condition.iswrite}
            </if>
            <if test="condition.sourceid != null">
                and t1.sourceid like CONCAT ('%',#{condition.sourceid},'%' )
            </if>
            <if test="1==1">
                and (t.STATUS = '3' OR t.STATUS = '4')
            </if>
        </trim>
        <choose>
            <when test="condition.reporttype == 1">
                group by t.saleorderid
            </when>
        </choose>
        <if test="condition.ischeck == null or condition.ischeck == 1 ">
            UNION ALL
            select IF(t.sourcetype='2','2','3') as billtype,t.id,t.sourceid as saleorderid,t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,'' as brandid,'' as branduser,'' as branddept,'' as supplierid,'' as supplieruser,
            STR_TO_DATE(t.audittime,'%Y-%m-%d') as businessdate,-t.initsendamount,-t.initsendcostamount,-t.sendamount,-t.sendnotaxamount,-t.sendcostamount,
            IF(t.sourcetype='2',t.receiptid,'') as receiptid,t.checkdate,-t.checkamount,t.invoicedate,t.invoiceid,-t.invoicebillamount,-t.invoicebillnotaxamount,-(t.checkamount-t.invoicebillamount) as uninvoicebillamount,-(t.checknotaxamount-t.invoicebillnotaxamount) as uninvoicebillnotaxamount,
            t.writeoffdate,-t.writeoffamount,-t.writeoffnotaxamount,-(t.checkamount-t.writeoffamount) as unwriteoffamount,-(t.checknotaxamount-t.writeoffnotaxamount) as unwriteoffnotaxamount,
            t.audittime,t1.businessdate as orderdate,t.duefromdate,t.invoicebilldate,'' as sourceid,if(t.sourcetype='2',if((SELECT r.remark from t_sales_receipt r where r.id = t.receiptid) is null,'',(SELECT r.remark from t_sales_receipt r where r.id = t.receiptid)),'') as receiptremark
            from t_storage_salereject_enter t
            left join t_sales_rejectbill t1 on t.sourceid=t1.id
            <trim prefix="where" prefixOverrides="and|or" >
                <if test="condition.businessdate1 != null">
                    and STR_TO_DATE(t.audittime,'%Y-%m-%d') >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
                </if>
                <if test="condition.businessdate2 != null">
                    <![CDATA[and STR_TO_DATE(t.audittime,'%Y-%m-%d') <= STR_TO_DATE(#{condition.businessdate2},'%Y-%m-%d')]]>
                </if>
                <if test="condition.invoicedate1 != null">
                    and t.invoicebilldate >= #{condition.invoicedate1}
                </if>
                <if test="condition.invoicedate2 != null">
                    <![CDATA[and t.invoicebilldate <= #{condition.invoicedate2}]]>
                </if>
                <if test="condition.writeoffdate1 != null">
                    and t.writeoffdate >= #{condition.writeoffdate1}
                </if>
                <if test="condition.writeoffdate2 != null">
                    <![CDATA[and t.writeoffdate <= #{condition.writeoffdate2}]]>
                </if>
				<if test="condition.duefromdate1 != null">
					and t.duefromdate >= #{condition.duefromdate1}
				</if>
				<if test="condition.duefromdate2 != null">
					<![CDATA[and t.duefromdate <= #{condition.duefromdate2}]]>
				</if>
                <if test="condition.query_salesarea != null" >
                    ${condition.query_salesarea}
                </if>
                <if test="condition.query_dept != null" >
                    ${condition.query_dept}
                </if>
                <if test="condition.salesuser != null" >
                    and t.salesuser = #{condition.salesuser}
                </if>
                <if test="condition.customerid != null" >
                    and t.customerid = #{condition.customerid}
                </if>
                <if test="condition.pcustomerid != null" >
                    and t.pcustomerid = #{condition.pcustomerid}
                </if>
                <if test="condition.iswrite != null">
                    and t.iswrite = #{condition.iswrite}
                </if>
                <if test="1==1">
                    and ischeck = '1' and (t.STATUS = '3' OR t.STATUS = '4')
                </if>
                <if test="condition.sourceid != null">
                    and 1 != 1
                </if>
            </trim>
        </if>
        UNION ALL
        select IF(t.isinvoice='0','4',IF(t.isinvoice='1','5','6')) as billtype,t.id,'' as saleorderid,t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,'' as brandid,'' as branduser,'' as branddept,t.supplierid,t.supplieruser,
        t.businessdate,t.initsendamount,t.initsendcostamount,t.sendamount,t.sendnotaxamount,t.sendcostamount,
        IF(t.isinvoice='2',t.invoiceid,'') as receiptid ,t.checkdate,t.checkamount,t.invoicedate,
        IF(t.isinvoice!='2',t.invoiceid,'') as invoiceid,t.invoicebillamount,t.invoicebillnotaxamount,(t.checkamount-t.invoicebillamount) as uninvoicebillamount,(t.checknotaxamount-t.invoicebillnotaxamount) as uninvoicebillnotaxamount,
        t.writeoffdate,t.writeoffamount,t.writeoffnotaxamount,(t.checkamount-t.writeoffamount) as unwriteoffamount,(t.checknotaxamount-t.writeoffnotaxamount) as unwriteoffnotaxamount,
        t.audittime,'' as orderdate,'' as duefromdate,t.invoicebilldate, '' as sourceid,if(t.isinvoice!='2',if((SELECT r.remark from t_sales_receipt r where r.id = t.invoiceid) is null,'',(SELECT r.remark from t_sales_receipt r where r.id = t.invoiceid)),'') as receiptremark
        from t_account_customer_push_balance t
        <trim prefix="where" prefixOverrides="and|or" >
            <if test="condition.businessdate1 != null">
                and t.businessdate >= #{condition.businessdate1}
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.invoicedate1 != null">
                and t.invoicebilldate >= #{condition.invoicedate1}
            </if>
            <if test="condition.invoicedate2 != null">
                <![CDATA[and t.invoicebilldate <= #{condition.invoicedate2}]]>
            </if>
            <if test="condition.writeoffdate1 != null">
                and t.writeoffdate >= #{condition.writeoffdate1}
            </if>
            <if test="condition.writeoffdate2 != null">
                <![CDATA[and t.writeoffdate <= #{condition.writeoffdate2}]]>
            </if>
			<if test="condition.duefromdate1 != null">
				and 1 != 1
			</if>
			<if test="condition.duefromdate2 != null">
				and 1 != 1
			</if>
            <if test="condition.query_salesarea != null" >
                ${condition.query_salesarea}
            </if>
            <if test="condition.query_dept != null" >
                ${condition.query_dept}
            </if>
            <if test="condition.salesuser != null" >
                and t.salesuser = #{condition.salesuser}
            </if>
            <if test="condition.customerid != null" >
                and t.customerid = #{condition.customerid}
            </if>
            <if test="condition.pcustomerid != null" >
                and t.pcustomerid = #{condition.pcustomerid}
            </if>
            <if test="condition.iswrite != null">
                and t.iswriteoff = #{condition.iswrite}
            </if>
            <if test="condition.ischeck == 0">
                and (t.isinvoice = '0' or t.isinvoice = '1')
            </if>
            <if test="1==1">
                and (t.STATUS = '3' OR t.STATUS = '4')
            </if>
            <if test="condition.sourceid != null">
                 and 1 != 1
            </if>
        </trim>
		UNION ALL
		select '7' as billtype,t.id,'' as saleorderid,t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,'' as brandid,'' as branduser,'' as branddept,'' supplierid,'' supplieruser,
		t.businessdate,0 as initsendamount,0 as initsendcostamount,0 as sendamount,0 as sendnotaxamount,0 as sendcostamount,
		'' as receiptid ,t.businessdate as checkdate,t.amount as checkamount,t.invoicedate,
		'' as invoiceid,0 as invoicebillamount,0 as invoicebillnotaxamount,0 as uninvoicebillamount,0 as uninvoicebillnotaxamount,
		t.writeoffdate,t.writeoffamount,t.writeoffnotaxamount,(t.amount-t.writeoffamount) as unwriteoffamount,0 as unwriteoffnotaxamount,
		t.audittime,'' as orderdate,t.duefromdate,'' as invoicebilldate, '' as sourceid,'' as receiptremark
		from t_account_begin_amount t
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.invoicedate1 != null">
				and 1 != 1
			</if>
			<if test="condition.invoicedate2 != null">
				and 1 != 1
			</if>
			<if test="condition.writeoffdate1 != null">
				and t.writeoffdate >= #{condition.writeoffdate1}
			</if>
			<if test="condition.writeoffdate2 != null">
				<![CDATA[and t.writeoffdate <= #{condition.writeoffdate2}]]>
			</if>
			<if test="condition.duefromdate1 != null">
				and t.duefromdate >= #{condition.duefromdate1}
			</if>
			<if test="condition.duefromdate2 != null">
				<![CDATA[and t.duefromdate <= #{condition.duefromdate2}]]>
			</if>
			<if test="condition.query_salesarea != null" >
				${condition.query_salesarea}
			</if>
			<if test="condition.query_dept != null" >
				${condition.query_dept}
			</if>
			<if test="condition.salesuser != null" >
				and t.salesuser = #{condition.salesuser}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = #{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null" >
				and t.pcustomerid = #{condition.pcustomerid}
			</if>
			<if test="condition.iswrite != null">
				and t.iswriteoff = #{condition.iswrite}
			</if>
			<if test="condition.ischeck == 0">
				and 1 != 1
			</if>
			<if test="1==1">
				and (t.STATUS = '3' OR t.STATUS = '4')
			</if>
			<if test="condition.sourceid != null">
				and 1 != 1
			</if>
		</trim>
        )
    </sql>
  	<select id="showCustomerReceivableDynamicData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.CustomerReceivableDynamic">
  		select * from <include refid="showCustomerReceivableDynamicData_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		  <if test="condition.orderdate1 != null">
			 and z.orderdate >= #{condition.orderdate1}
		  </if>
		  <if test="condition.orderdate2 != null">
			 <![CDATA[and z.orderdate <= #{condition.orderdate2}]]>
		  </if>
		  <if test="condition.checkdate1 != null">
			 and z.checkdate >= #{condition.checkdate1}
		  </if>
		  <if test="condition.checkdate2 != null">
			 <![CDATA[and z.checkdate <= #{condition.checkdate2}]]>
		  </if>
		  <!-- <if test="condition.ischeck != null" >
		  	<choose>
		  		<when test="condition.ischeck==1">
		  		<![CDATA[ and z.checkdate <>'']]>
		  		</when>
		  		<otherwise>
		  		 and (z.checkdate ='' or z.checkdate is null)
		  		</otherwise>
		  	</choose>
	      </if> -->
		  <if test="condition.isinvoicebill != null" >
		  	<choose>
		  		<when test="condition.isinvoicebill==1">
		  		<![CDATA[ and z.invoicebilldate <>'']]>
		  		</when>
		  		<otherwise>
		  		 and (z.invoicebilldate ='' or z.invoicebilldate is null)
		  		</otherwise>
		  	</choose>
	      </if>
	      <if test="condition.billtype != null" >
	         and FIND_IN_SET(z.billtype,#{condition.billtype}) 
	      </if>
	      <if test="condition.nobilltype != null" >
	         and z.billtype != #{condition.nobilltype}
	      </if>
	      <if test="condition.id != null" >
	         and z.id = #{condition.id}
	      </if>
	      <if test="condition.saleorderid != null" >
	         and z.saleorderid = #{condition.saleorderid}
	      </if>
	      <if test="condition.receiptid != null" >
	         and z.receiptid = #{condition.receiptid}
	      </if>
	      <if test="condition.invoiceid != null" >
	         and z.invoiceid like CONCAT('%',#{condition.invoiceid},'%')
	      </if>
	    </trim>
	    <if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="showCustomerReceivableDynamicDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from <include refid="showCustomerReceivableDynamicData_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		  <if test="condition.orderdate1 != null">
			 and z.orderdate >= #{condition.orderdate1}
		  </if>
		  <if test="condition.orderdate2 != null">
			 <![CDATA[and z.orderdate <= #{condition.orderdate2}]]>
		  </if>
		  <if test="condition.checkdate1 != null">
			 and z.checkdate >= #{condition.checkdate1}
		  </if>
		  <if test="condition.checkdate2 != null">
			 <![CDATA[and z.checkdate <= #{condition.checkdate2}]]>
		  </if>
		  <!-- <if test="condition.ischeck != null" >
		  	<choose>
		  		<when test="condition.ischeck==1">
		  		<![CDATA[ and z.checkdate <>'']]>
		  		</when>
		  		<otherwise>
		  		 and (z.checkdate ='' or z.checkdate is null)
		  		</otherwise>
		  	</choose>
	      </if> -->
		  <if test="condition.isinvoicebill != null" >
		  	<choose>
		  		<when test="condition.isinvoicebill==1">
		  		<![CDATA[ and z.invoicebilldate <>'']]>
		  		</when>
		  		<otherwise>
		  		 and (z.invoicebilldate ='' or z.invoicebilldate is null)
		  		</otherwise>
		  	</choose>
	      </if>
	      <if test="condition.billtype != null" >
	         and FIND_IN_SET(z.billtype,#{condition.billtype}) 
	      </if>
	      <if test="condition.nobilltype != null" >
	         and z.billtype != #{condition.nobilltype}
	      </if>
	      <if test="condition.id != null" >
	         and z.id = #{condition.id}
	      </if>
	      <if test="condition.saleorderid != null" >
	         and z.saleorderid = #{condition.saleorderid}
	      </if>
	      <if test="condition.receiptid != null" >
	         and z.receiptid = #{condition.receiptid}
	      </if>
	      <if test="condition.invoiceid != null" >
	         and z.invoiceid like CONCAT('%',#{condition.invoiceid},'%')
	      </if>
	    </trim>
  	</select>
  	
  	<select id="showCustomerReceivableDynamicSum" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.CustomerReceivableDynamic">
  		select sum(z.initsendamount) as initsendamount,sum(z.initsendcostamount) as initsendcostamount,
  		sum(z.sendamount) as sendamount,sum(z.sendnotaxamount) as sendnotaxamount,sum(z.sendcostamount) as sendcostamount,
  		sum(z.checkamount) as checkamount,sum(z.invoicebillamount) as invoicebillamount,sum(z.invoicebillnotaxamount) as invoicebillnotaxamount,
  		sum(z.uninvoicebillamount) as uninvoicebillamount, sum(z.uninvoicebillnotaxamount) as uninvoicebillnotaxamount,
  		sum(z.writeoffamount) as writeoffamount, sum(z.writeoffnotaxamount) as writeoffnotaxamount,
  		sum(z.unwriteoffamount) as unwriteoffamount,sum(z.unwriteoffnotaxamount) as unwriteoffnotaxamount
  		from <include refid="showCustomerReceivableDynamicData_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		  <if test="condition.orderdate1 != null">
			 and z.orderdate >= #{condition.orderdate1}
		  </if>
		  <if test="condition.orderdate2 != null">
			 <![CDATA[and z.orderdate <= #{condition.orderdate2}]]>
		  </if>
		  <if test="condition.checkdate1 != null">
			 and z.checkdate >= #{condition.checkdate1}
		  </if>
		  <if test="condition.checkdate2 != null">
			 <![CDATA[and z.checkdate <= #{condition.checkdate2}]]>
		  </if>
		  <!-- <if test="condition.ischeck != null" >
		  	<choose>
		  		<when test="condition.ischeck==1">
		  		<![CDATA[ and z.checkdate <>'']]>
		  		</when>
		  		<otherwise>
		  		 and (z.checkdate ='' or z.checkdate is null)
		  		</otherwise>
		  	</choose>
	      </if> -->
			<if test="condition.isinvoicebill != null" >
				<choose>
					<when test="condition.isinvoicebill==1">
						<![CDATA[ and z.invoicebilldate <>'']]>
					</when>
					<otherwise>
						and (z.invoicebilldate ='' or z.invoicebilldate is null)
					</otherwise>
				</choose>
			</if>
	      <if test="condition.billtype != null" >
	         and FIND_IN_SET(z.billtype,#{condition.billtype}) 
	      </if>
	      <if test="condition.nobilltype != null" >
	         and z.billtype != #{condition.nobilltype}
	      </if>
	      <if test="condition.id != null" >
	         and z.id = #{condition.id}
	      </if>
	      <if test="condition.saleorderid != null" >
	         and z.saleorderid = #{condition.saleorderid}
	      </if>
	      <if test="condition.receiptid != null" >
	         and z.receiptid = #{condition.receiptid}
	      </if>
	      <if test="condition.invoiceid != null" >
	         and z.invoiceid like CONCAT('%',#{condition.invoiceid},'%')
	      </if>
	    </trim>
	    <if test="condition.groupcols != null" >
	    	group by ${groupcols}
	    </if>
  	</select>
  	
  	<select id="showCustomerInvoiceAccountBillData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
  		select * from (select '1' as billtype,t.businessdate,t.id,t.invoicecustomerid as customerid,t.customerid as pcustomerid,t.invoiceno,t.writeoffdate,
		t.taxamount,if(t.iswriteoff='1',t.taxamount,0) as allwriteoffamount,t.writeoffamount,t.tailamount,t.remark,t.writeoffusername
		from t_account_sales_invoice t 
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.writeoffdate1 != null">
			 and t.writeoffdate >= #{condition.writeoffdate1}
		  </if>
		  <if test="condition.writeoffdate2 != null">
			 <![CDATA[and t.writeoffdate <= #{condition.writeoffdate2}]]>
		  </if>
		  <if test="condition.customerid != null" >
	         and t.invoicecustomerid = #{condition.customerid}
	      </if>
	      <if test="condition.pcustomerid != null" >
	         and t.customerid = #{condition.pcustomerid}
	      </if>
	      <if test="condition.id != null" >
	         and t.id = #{condition.id}
	      </if>
	      <if test="condition.invoiceid != null" >
	         and t.invoiceno = #{condition.invoiceid}
	      </if>
		  <if test="1==1">
			 and (t.STATUS = '3' OR t.STATUS = '4')
		  </if>
		</trim>
		)z
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="showCustomerInvoiceAccountBillCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  			select '1' as billtype,t.businessdate,t.id,t.invoicecustomerid as customerid,t.customerid as pcustomerid,t.invoiceno,t.writeoffdate,
			t.taxamount,t.writeoffamount,t.tailamount,t.remark
			from t_account_sales_invoice t 
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.businessdate1 != null">
				 and t.businessdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  </if>
			  <if test="condition.writeoffdate1 != null">
				 and t.writeoffdate >= #{condition.writeoffdate1}
			  </if>
			  <if test="condition.writeoffdate2 != null">
				 <![CDATA[and t.writeoffdate <= #{condition.writeoffdate2}]]>
			  </if>
			  <if test="condition.customerid != null" >
		         and t.invoicecustomerid = #{condition.customerid}
		      </if>
		      <if test="condition.pcustomerid != null" >
		         and t.customerid = #{condition.pcustomerid}
		      </if>
		      <if test="condition.id != null" >
		         and t.id = #{condition.id}
		      </if>
		      <if test="condition.invoiceid != null" >
		         and t.invoiceno = #{condition.invoiceid}
		      </if>
			  <if test="1==1">
				and (t.STATUS = '3' OR t.STATUS = '4')
			  </if>
			</trim>
  		)z
  	</select>
  	<select id="showCustomerInvoiceAccountBillSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
  		select sum(z.taxamount) as taxamount,sum(z.allwriteoffamount) as allwriteoffamount,sum(z.writeoffamount) as writeoffamount, sum(z.tailamount) as tailamount from (
  			select '1' as billtype,t.businessdate,t.id,t.invoicecustomerid as customerid,t.customerid as pcustomerid,t.invoiceno,t.writeoffdate,
		t.taxamount,if(t.iswriteoff='1',t.taxamount,0) as allwriteoffamount,t.writeoffamount,t.tailamount,t.remark
		from t_account_sales_invoice t 
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.writeoffdate1 != null">
			 and t.writeoffdate >= #{condition.writeoffdate1}
		  </if>
		  <if test="condition.writeoffdate2 != null">
			 <![CDATA[and t.writeoffdate <= #{condition.writeoffdate2}]]>
		  </if>
		  <if test="condition.customerid != null" >
	         and t.invoicecustomerid = #{condition.customerid}
	      </if>
	      <if test="condition.pcustomerid != null" >
	         and t.customerid = #{condition.pcustomerid}
	      </if>
	      <if test="condition.id != null" >
	         and t.id = #{condition.id}
	      </if>
	      <if test="condition.invoiceid != null" >
	         and t.invoiceno = #{condition.invoiceid}
	      </if>
		  <if test="1==1">
			and (t.STATUS = '3' OR t.STATUS = '4')
		  </if>
		</trim>
  		)z
  	</select>
  	<select id="showWriteAccountDetailData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
  		select t1.sourcetype as billtype,t1.sourceid as billid, t.businessdate,t.writeoffdate,t.id,t.invoiceno,t1.customerid,t1.pcustomerid,
		t1.salesarea,t1.salesdept,t1.salesuser,
		t1.goodsid,t1.brandid,t1.branddept,t1.branduser,t1.taxamount as taxamount,if(t.iswriteoff='1',t1.taxamount,0) as writeoffamount,t.writeoffusername
		from t_account_sales_invoice t
		RIGHT JOIN t_account_sales_invoice_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.writeoffdate1 != null">
			 and t.writeoffdate >= #{condition.writeoffdate1}
		  </if>
		  <if test="condition.writeoffdate2 != null">
			 <![CDATA[and t.writeoffdate <= #{condition.writeoffdate2}]]>
		  </if>
		  <if test="condition.billtype != null" >
	         and t1.sourcetype =#{condition.billtype}
	      </if>
		  <if test="condition.customerid != null" >
	         and t1.customerid = #{condition.customerid}
	      </if>
	      <if test="condition.pcustomerid != null" >
	         and t1.pcustomerid = #{condition.pcustomerid}
	      </if>
	      <if test="condition.id != null" >
	         and t.id = #{condition.id}
	      </if>
	      <if test="condition.invoiceid != null" >
	         and t.invoiceno = #{condition.invoiceid}
	      </if>
	      <if test="condition.billid != null" >
	         and t.sourceid = #{condition.billid}
	      </if>
		  <if test="1==1">
			and (t.STATUS = '3' OR t.STATUS = '4')
		  </if>
		</trim>
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="showWriteAccountDetailCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  		select t1.sourcetype as billtype,t1.sourceid as billid, t.businessdate,t.writeoffdate,t.id,t.invoiceno,t1.customerid,t1.pcustomerid,
		t1.salesarea,t1.salesdept,t1.salesuser,
		t1.goodsid,t1.brandid,t1.branddept,t1.branduser,t1.taxamount as taxamount,if(t.iswriteoff='1',t1.taxamount,0) as writeoffamount,t.writeoffusername
		from t_account_sales_invoice t
		RIGHT JOIN t_account_sales_invoice_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.writeoffdate1 != null">
			 and t.writeoffdate >= #{condition.writeoffdate1}
		  </if>
		  <if test="condition.writeoffdate2 != null">
			 <![CDATA[and t.writeoffdate <= #{condition.writeoffdate2}]]>
		  </if>
		  <if test="condition.billtype != null" >
	         and t1.sourcetype =#{condition.billtype}
	      </if>
		  <if test="condition.customerid != null" >
	         and t1.customerid = #{condition.customerid}
	      </if>
	      <if test="condition.pcustomerid != null" >
	         and t1.pcustomerid = #{condition.pcustomerid}
	      </if>
	      <if test="condition.id != null" >
	         and t.id = #{condition.id}
	      </if>
	      <if test="condition.invoiceid != null" >
	         and t.invoiceno = #{condition.invoiceid}
	      </if>
	      <if test="condition.billid != null" >
	         and t.sourceid = #{condition.billid}
	      </if>
		  <if test="1==1">
			and (t.STATUS = '3' OR t.STATUS = '4')
		  </if>
		</trim>) z
  	</select>
  	<select id="showWriteAccountDetailSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
  		select sum(z.taxamount) as taxamount,sum(z.writeoffamount) as writeoffamount from (
  		select t1.sourcetype as billtype,t1.sourceid as billid, t.businessdate,t.writeoffdate,t.id,t.invoiceno,t1.customerid,t1.pcustomerid,
		t1.salesarea,t1.salesdept,t1.salesuser,
		t1.goodsid,t1.brandid,t1.branddept,t1.branduser,t1.taxamount as taxamount,if(t.iswriteoff='1',t1.taxamount,0) as writeoffamount,t.writeoffusername
		from t_account_sales_invoice t
		RIGHT JOIN t_account_sales_invoice_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or" >
		  <if test="condition.businessdate1 != null">
			 and t.businessdate >= #{condition.businessdate1}
		  </if>
		  <if test="condition.businessdate2 != null">
			 <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  </if>
		  <if test="condition.writeoffdate1 != null">
			 and t.writeoffdate >= #{condition.writeoffdate1}
		  </if>
		  <if test="condition.writeoffdate2 != null">
			 <![CDATA[and t.writeoffdate <= #{condition.writeoffdate2}]]>
		  </if>
		  <if test="condition.billtype != null" >
	         and t1.sourcetype =#{condition.billtype}
	      </if>
		  <if test="condition.customerid != null" >
	         and t1.customerid = #{condition.customerid}
	      </if>
	      <if test="condition.pcustomerid != null" >
	         and t1.pcustomerid = #{condition.pcustomerid}
	      </if>
	      <if test="condition.id != null" >
	         and t.id = #{condition.id}
	      </if>
	      <if test="condition.invoiceid != null" >
	         and t.invoiceno = #{condition.invoiceid}
	      </if>
	      <if test="condition.billid != null" >
	         and t.sourceid = #{condition.billid}
	      </if>
		  <if test="1==1">
			and (t.STATUS = '3' OR t.STATUS = '4')
		  </if>
		</trim>
		) z
  	</select>
  	
  	<select id="getBaseReceivablePassDueListDataRS" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
  		SELECT t.beginday,t.endday,t.seq FROM t_report_paymentdays_set t WHERE t.adduserid=#{condition.sysuserid} and t.type='1' ORDER BY t.seq ASC
  	</select>
  	<select id="getBaseReceivablePassDueListDataRSCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	    SELECT COUNT(1)  FROM t_report_paymentdays_set t WHERE t.adduserid=#{condition.sysuserid} and t.type='1'
  	</select>
    <sql id="BaseReceivablePassDueListData_sql">
        select z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,z.goodsid,z.brandid,z.branduser,z.branddept,z.supplierid,z.supplieruser,
        sum(z.saleamount) as saleamount,sum(z.salenotaxamount) as salenotaxamount,
        sum(z.returnamount) as returnamount,sum(z.pushamount) as pushamount,
        sum(z.costamount) as costamount,sum(z.unpassamount) as unpassamount ,sum(z.totalpassamount) as totalpassamount
        ${condition.column_sum}
        from (
            select t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.goodsid AS goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
            t1.taxamount AS saleamount, t1.notaxamount AS salenotaxamount, 0 as returnamount, 0 as pushamount,
            0 as costamount,if((t1.duefromdate='' or t1.duefromdate >=  '${condition.today}') , t1.taxamount,0) as unpassamount,if(<![CDATA[(t1.duefromdate <>'' and t1.duefromdate < '${condition.today}')]]>,t1.taxamount,0) as totalpassamount
            ${condition.column}
            from t_storage_saleout t
            RIGHT JOIN t_storage_saleout_detail t1 on t1.saleoutid=t.id
            where
            ${condition.query_sql}
            <if test="condition.ispastdue  == 1 " >
            <![CDATA[and t1.duefromdate <> '' and t1.duefromdate < #{condition.today}]]>
            </if>
            and t1.iswriteoff='0' and t.status in('3','4')
            UNION ALL
            SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
            -t1.taxamount AS saleamount,-t1.notaxamount AS salenotaxamount,if(t.sourcetype='1',-t1.taxamount,0) AS returnamount,0 as pushamount,
            -t1.unitnum*t1.costprice as costamount,if((t1.duefromdate='' or t1.duefromdate >=  '${condition.today}') , -t1.taxamount,0) as unpassamount,if(<![CDATA[(t1.duefromdate <>'' and t1.duefromdate < '${condition.today}')]]>,-t1.taxamount,0) as totalpassamount
            ${condition.column}
            FROM t_storage_salereject_enter t
            RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
            where
            ${condition.query_sql}
            <if test="condition.ispastdue  == 1 " >
                <![CDATA[and t1.duefromdate <> '' and t1.duefromdate < #{condition.today}]]>
            </if>
            and t.ischeck='1' and t1.iswriteoff='0' and t.status in('3','4')
            <if test="condition.ispastdue  == 0 " >
            UNION ALL
            SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t.brandid AS goodsid,t.brandid,t.branduser,t.branddept,t.supplierid,t.supplieruser,
            t.amount AS saleamount, 0 AS salenotaxamount, 0 as returnamount, t.amount as pushamount,
            0 as costamount,t.amount as unpassamount , 0 as totalpassamount
            ${condition.column}
            FROM t_account_customer_push_balance t
            where
            ${condition.query_sql_push}
            and t.iswriteoff='0' and t.status in('3','4')
            </if>
			UNION ALL
			SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,'QC' goodsid,'QC' brandid,'QC' branduser,'QC' branddept,'QC' supplierid,'QC' supplieruser,
			t.amount AS saleamount, 0 AS salenotaxamount, 0 as returnamount, 0 as pushamount,
			0 as costamount,if((t.duefromdate='' or t.duefromdate >=  '${condition.today}') , t.amount,0) as unpassamount,if(<![CDATA[(t.duefromdate <>'' and t.duefromdate < '${condition.today}')]]>,t.amount,0) as totalpassamount
			${condition.column}
			FROM t_account_begin_amount t
			where
			${condition.query_sql_begin}
			<if test="condition.ispastdue  == 1 " >
				<![CDATA[and t.duefromdate <> '' and t.duefromdate < #{condition.today}]]>
			</if>
			and t.iswriteoff='0' and t.status in('3','4')
            ${condition.pass_sql}
        ) z
        <trim prefix="where" prefixOverrides="and|or" >
			<if test="dataSql  != '' ">
				${dataSql}
			</if>
			<if test="1 == 1">
				and ${condition.query_sql_z}
			</if>
        </trim>
        <if test="condition.groupcols  != 'all' " >
            <choose>
                <when test="condition.ispastdue == 0 ">
                    <choose>
                        <when test="condition.groupcols == ''">
                            group by customerid,goodsid
                        </when>
                        <otherwise>
                            group by ${condition.groupcols}
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    <choose>
                        <when test="condition.groupcols == ''">
							<![CDATA[group by  customerid,goodsid HAVING sum(z.totalpassamount) <> 0]]>
                        </when>
                        <otherwise>
							<![CDATA[group by  ${condition.groupcols} HAVING sum(z.totalpassamount)<> 0]]>
                        </otherwise>
                    </choose>
                </otherwise>
            </choose>
        </if>
    </sql>
  	<select id="showBaseReceivablePassDueListData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        <include refid="BaseReceivablePassDueListData_sql"/>
        <if test="condition.orderstr  != null and condition.orderstr  != ''" >
            order by
            ${condition.orderstr}
        </if>
        <if test="condition.isflag == null and condition.groupcols != 'all'">
            LIMIT #{startNum},#{rows}
        </if>
  	</select>
  	<select id="showBaseReceivablePassDueListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	    select count(1) from(
          <include refid="BaseReceivablePassDueListData_sql"/>
		) co
  	
  	</select>
    <sql id="BaseWithdrawnPastdueListData_sql">
        select z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,z.goodsid,z.brandid,z.branduser,z.branddept,
        sum(z.unitnum) as unitnum,sum(z.taxamount) as taxamount,sum(z.costamount) as costamount,sum(z.marginamount) as marginamount,
        sum(z.unpassamount) as unpassamount,sum(z.returnamount) as returnamount,
        sum(z.pushamount) as pushamount,sum(z.totalpassamount) as totalpassamount
        ${condition.column_sum}
        from (
        select t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.goodsid AS goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
        t1.unitnum,t1.taxamount AS taxamount, t1.costprice*t1.unitnum as costamount,(t1.taxamount-t1.costprice*t1.unitnum) as marginamount,
        if(t1.duefromdate='' or t1.duefromdate >=t1.writeoffdate,t1.taxamount,0) as unpassamount,0 as returnamount,0 as pushamount,if(<![CDATA[t1.duefromdate<>'' and t1.duefromdate < t1.writeoffdate]]>,t1.taxamount,0) as totalpassamount
        ${condition.column}
        from t_storage_saleout t
        RIGHT JOIN t_storage_saleout_detail t1 on t1.saleoutid=t.id
        where
        ${condition.query_sql}
        and t1.iswriteoff='1' and t.status in('3','4')
        UNION ALL
        SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
        -t1.unitnum,-t1.taxamount AS taxamount,-t1.costprice*t1.unitnum AS costamount,-(t1.taxamount-t1.costprice*t1.unitnum) as marginamount,
        if(t1.duefromdate='' or t1.duefromdate >=t1.writeoffdate,-t1.taxamount,0) as unpassamount,if(t.sourcetype='1',t1.taxamount,0) as returnamount,0 as pushamount,if(<![CDATA[t1.duefromdate<>'' and t1.duefromdate < t1.writeoffdate]]>,-t1.taxamount,0) as totalpassamount
        ${condition.column}
        FROM t_storage_salereject_enter t
        RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
        where
        ${condition.query_sql}
        and t.ischeck='1' and t1.iswriteoff='1' and t.status in('3','4')
        UNION ALL
        SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t.brandid AS goodsid,t.brandid,t.branduser,t.branddept,t.supplierid,t.supplieruser,
        0 as unitnum,t.amount AS taxamount, 0 AS costamount, t.amount as marginamount,
        t.amount as unpassamount,0 as returnamount,t.amount as pushamount,0 as totalpassamount
        ${condition.column}
        FROM t_account_customer_push_balance t
        where
        ${condition.query_sql_push}
        and t.iswriteoff='1' and t.status in('3','4')
		UNION ALL
		SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,'QC' goodsid,'QC' brandid,'QC' branduser,'QC' branddept,'QC' supplierid,'QC' supplieruser,
		0 as unitnum,t.amount AS taxamount, 0 AS costamount, t.amount as marginamount,
		if(t.duefromdate='' or t.duefromdate >=t.writeoffdate,t.amount,0) as unpassamount,0 as returnamount,0 as pushamount,if(<![CDATA[t.duefromdate<>'' and t.duefromdate < t.writeoffdate]]>,t.amount,0) as totalpassamount
		${condition.column}
		FROM t_account_begin_amount t
		where
		${condition.query_sql_begin}
		and t.iswriteoff='1' and t.status in('3','4')
        ${condition.pass_sql}
        ) z
        <trim prefix="where" prefixOverrides="and|or" >
			<if test="dataSql  != '' ">
				${dataSql}
			</if>
			<if test="1 == 1">
				and ${condition.query_sql_z}
			</if>
        </trim>
        <if test="condition.groupcols  != 'all' " >
            <choose>
                <when test="condition.groupcols == ''">
                    group by customerid,goodsid
                </when>
                <otherwise>
                    group by ${condition.groupcols}
                </otherwise>
            </choose>
        </if>

    </sql>
  	<select id="showBaseWithdrawnPastdueListData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        <include refid="BaseWithdrawnPastdueListData_sql"/>
			<if test="condition.orderstr  != '' " >
				order by
				${condition.orderstr}
			</if>
  			<if test="condition.isflag == null and condition.groupcols != 'all'">
				LIMIT #{startNum},#{rows}
			</if>	
  	</select>
  	<select id="showBaseWithdrawnPastdueListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	select count(1) from(
        <include refid="BaseWithdrawnPastdueListData_sql"/>
  	)co
  	</select>
  	<select id="getBankId" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
  		select id from t_base_finance_bank
  	</select>
  	<select id="showBankWriteReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
	  	${condition.sql_text_sum} 
		from ( 
		    ${condition.sql_text_column}
		    FROM t_account_sales_invoice t																					
				RIGHT JOIN t_account_collection_order_statement t1 ON t.id=t1.billid
				LEFT JOIN t_account_collection_order t2 ON t2.id=t1.orderid
				WHERE
				 t.iswriteoff='1'
				${condition.query_sql}
			UNION ALL 
		    ${condition.sql_text_column}
		    FROM t_account_collection_order t
				RIGHT JOIN t_account_collection_order_statement t1 ON t.id=t1.billid
				LEFT JOIN t_account_collection_order t2 ON t2.id=t1.orderid
				WHERE t.iswriteoff='1' 
				${condition.query_sql}
 		) z
		<choose>
			<when test="condition.groupcols == ''">
				GROUP BY customerid
			</when>
			<when test="condition.groupcols =='all'">
				GROUP BY 'all'
			</when>
			<when test="condition.groupcols !=''">
				GROUP BY ${condition.groupcols}
			</when>
		</choose>
		<if test="condition.orderstr != ''" >
			order by ${condition.orderstr}
		</if> 
		<if test="condition.isflag == null and condition.groupcols  != 'all' ">
			LIMIT ${startNum},${rows}
		</if>
		
  	</select>
  	<select id="showBankWriteReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
		${condition.sql_text_sum} 
		from ( 
		    ${condition.sql_text_column}
		    FROM t_account_sales_invoice t																					
				RIGHT JOIN t_account_collection_order_statement t1 ON t.id=t1.billid
				LEFT JOIN t_account_collection_order t2 ON t2.id=t1.orderid
				WHERE t.iswriteoff='1'
				${condition.query_sql}
			UNION ALL 
		    ${condition.sql_text_column}
		    FROM t_account_collection_order t
				RIGHT JOIN t_account_collection_order_statement t1 ON t.id=t1.billid
				LEFT JOIN t_account_collection_order t2 ON t2.id=t1.orderid
				WHERE t.iswriteoff='1' 
				${condition.query_sql}
 		) z
		<if test="condition.groupcols != 'all'" >
			group by  ${condition.groupcols}
		</if> 
	 ) co
  	</select>
    <sql id="CustomerSalesAmount_sql">
        select t.customerid,t2.bank,t1.relateamount,t.id
        FROM t_account_sales_invoice t
        RIGHT JOIN t_account_collection_order_statement t1 ON t.id=t1.billid
        LEFT JOIN t_account_collection_order t2 ON t2.id=t1.orderid
        <trim prefix="where" prefixOverrides="and|or" >
            <if test="bank != null and bank != ''" >
                and FIND_IN_SET(t2.bank,#{bank})
            </if>
            <if test="businessdate1 != null">
                and t1.writeoffdate >= #{businessdate1}
            </if>
            <if test="businessdate2 != null">
                <![CDATA[and t1.writeoffdate <= #{businessdate2}]]>
            </if>
            <if test="customerid != '' and customerid != null" >
                and t.customerid = #{customerid}
            </if>
            <if test="1==1">
                and t.iswriteoff='1' AND t1.relateamount!=0
            </if>
        </trim>
        UNION ALL
        select t.customerid,t2.bank,t1.relateamount,t.id
        FROM t_account_collection_order t
        RIGHT JOIN t_account_collection_order_statement t1 ON t.id=t1.billid
        LEFT JOIN t_account_collection_order t2 ON t2.id=t1.orderid
        <trim prefix="where" prefixOverrides="and|or" >
            <if test="bank != null and bank != ''" >
                and FIND_IN_SET(t2.bank,#{bank})
            </if>
            <if test="businessdate1 != null">
                and t1.writeoffdate >= #{businessdate1}
            </if>
            <if test="businessdate2 != null">
                <![CDATA[and t1.writeoffdate <= #{businessdate2}]]>
            </if>
            <if test="customerid != '' and customerid != null" >
                and t.customerid = #{customerid}
            </if>
            <if test="1==1">
                and t1.iswrieteoff='1' and t1.billtype='3' AND t1.relateamount!=0
            </if>
        </trim>
    </sql>
    <select id="getCustomerSalesAmountByQueryMap" parameterType="java.util.Map" resultType="map">
        select z.customerid,z.bank,sum(z.relateamount) as amount from(<include refid="CustomerSalesAmount_sql"/> ) z
        <choose>
            <when test="grouptype == 1">
                GROUP BY z.customerid
            </when>
            <when test="grouptype == 2">
                GROUP BY z.customerid,z.bank
            </when>
        </choose>
    </select>
    <select id="getCustomerSalesAmountSum" parameterType="java.util.Map" resultType="map">
        select sum(z.relateamount) as amountsum from(<include refid="CustomerSalesAmount_sql"/> ) z
    </select>
  	<select id="showCustomerBankWriteReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
  		select z.customerid,z.bank,sum(z.relateamount) as amount from(
			select t.customerid,t2.bank,t1.relateamount
			FROM t_account_sales_invoice t
			RIGHT JOIN t_account_collection_order_statement t1 ON t.id=t1.billid
			LEFT JOIN t_account_collection_order t2 ON t2.id=t1.orderid
			<trim prefix="where" prefixOverrides="and|or" >
		      <if test="condition.bank != null" >
		         and FIND_IN_SET(t2.bank,#{condition.bank})
		      </if>
		      <if test="condition.businessdate1 != null">
				 and t1.writeoffdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t1.writeoffdate <= #{condition.businessdate2}]]>
			  </if>
		      <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
			  <if test="1==1">
				and t.iswriteoff='1'
			  </if>
			</trim>
			UNION ALL
			select t.customerid,t2.bank,t1.relateamount
			FROM t_account_collection_order t
			RIGHT JOIN t_account_collection_order_statement t1 ON t.id=t1.billid
			LEFT JOIN t_account_collection_order t2 ON t2.id=t1.orderid
			<trim prefix="where" prefixOverrides="and|or" >
		      <if test="condition.bank != null" >
		         and FIND_IN_SET(t2.bank,#{condition.bank})
		      </if>
		      <if test="condition.businessdate1 != null">
				 and t1.writeoffdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t1.writeoffdate <= #{condition.businessdate2}]]>
			  </if>
		      <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
			  <if test="1==1">
				and t1.iswrieteoff='1' and t1.billtype='3'
			  </if>
			</trim>
		) z
	 	<choose>
	 		<when test="condition.grouptype == 1">
	 			GROUP BY z.customerid
	 		</when>
	 		<when test="condition.grouptype == 2">
	 			GROUP BY z.customerid,z.bank
	 		</when>
	 	</choose>
	 	<choose>
	 		<when test="condition.isflag==null">
	 			<include refid="common.Page_limit"/>
	 		</when>
	 		<when test="condition.showOnlyPageOrder=='true'">	 			
	 			<include refid="common.Page_OrderOnly"/>
	 		</when>
	 		<when test="condition.isflag != null">
	 			order by z.bank,z.customerid asc
	 		</when>
	 	</choose>
  	</select>
  	<select id="showCustomerBankWriteReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from(
  			select t.customerid,t2.bank,sum(t1.relateamount) as amount
			FROM t_account_sales_invoice t
			RIGHT JOIN t_account_collection_order_statement t1 ON t.id=t1.billid
			LEFT JOIN t_account_collection_order t2 ON t2.id=t1.orderid
			<trim prefix="where" prefixOverrides="and|or" >
			  <if test="condition.bank != null" >
		         and FIND_IN_SET(t2.bank,#{condition.bank})
		      </if>
		      <if test="condition.businessdate1 != null">
				 and t.writeoffdate >= #{condition.businessdate1}
			  </if>
			  <if test="condition.businessdate2 != null">
				 <![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
			  </if>
		      <if test="condition.customerid != null" >
		         and t.customerid = #{condition.customerid}
		      </if>
			  <if test="1==1">
				and t.iswriteoff='1'
			  </if>
			</trim>
			<choose>
		 		<when test="condition.grouptype == 1">
		 			GROUP BY t.customerid
		 		</when>
		 		<when test="condition.grouptype == 2">
		 			GROUP BY t.customerid,t2.bank
		 		</when>
		 	</choose>
  		) z
  	</select>
  	<!-- 品牌业务员考核表 -->
  	<sql id="Brand_Column_List" >
	   id, businessdate, branduser, wdtargetamount, wdbonusbase, kpitargetamount, realaccomplish, kpibonusamount, remark, adduserid, 
	   addusername, addtime, modifyuserid, modifyusername, modifytime
	</sql>
  	<select id="getBranduserAssessList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BranduserAssess">
  		select <include refid="Brand_Column_List"/> from t_report_branduser_assess
  		<trim prefix="where" prefixOverrides="and|or">
  			<include refid="common.Page_querySql"/>
      		<include refid="common.Page_dataSql"/>
      		<if test="condition.businessdate1 != null">
				and businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.branduser != null">
				and branduser = #{condition.branduser}
			</if>
  		</trim>
  		<include refid="common.Page_limit" />
  	</select>
  	<select id="getBranduserAssessCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  			select <include refid="Brand_Column_List"/> from t_report_branduser_assess
	  		<trim prefix="where" prefixOverrides="and|or">
	  			<include refid="common.Page_querySql"/>
	      		<include refid="common.Page_dataSql"/>
	      		<if test="condition.businessdate1 != null">
					and businessdate >= #{condition.businessdate1}
				</if>
				<if test="condition.businessdate2 != null">
					<![CDATA[and businessdate <= #{condition.businessdate2}]]>
				</if>
				<if test="condition.branduser != null">
					and branduser = #{condition.branduser}
				</if>
	  		</trim>
  		)z
  	</select>
  	<select id="getBranduserAssessSum" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BranduserAssess">
  		select sum(wdtargetamount) as wdtargetamount,sum(kpitargetamount) as kpitargetamount,sum(realaccomplish) as realaccomplish,
  			sum(kpibonusamount) as kpibonusamount
  		from t_report_branduser_assess
  		<trim prefix="where" prefixOverrides="and|or">
  			<include refid="common.Page_querySql"/>
      		<include refid="common.Page_dataSql"/>
      		<if test="condition.businessdate1 != null">
				and businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.branduser != null">
				and branduser = #{condition.branduser}
			</if>
  		</trim>
  	</select>
  	<select id="getBranduserAssessInfo" parameterType="java.lang.String" resultType="com.hd.agent.report.model.BranduserAssess">
  		select <include refid="Brand_Column_List"/> from t_report_branduser_assess
  		where id = #{id}
  	</select>
  	<select id="getBranduserAssessByParam" parameterType="java.util.Map" resultType="com.hd.agent.report.model.BranduserAssess">
  		select <include refid="Brand_Column_List"/> from t_report_branduser_assess
  		<trim prefix="where" prefixOverrides="and|or">
  			<if test="id != null">
				and id = #{id}
			</if>
  			<if test="businessdate != null">
				and businessdate = #{businessdate}
			</if>
			<if test="branduser != null">
				and branduser = #{branduser}
			</if>
  		</trim>
  	</select>
  	<select id="checkBranduserAssess" parameterType="java.util.Map" resultType="int">
  		select count(1) from t_report_branduser_assess
  		<trim prefix="where" prefixOverrides="and|or">
  			<if test="businessdate != null">
				and businessdate = #{businessdate}
			</if>
			<if test="branduser != null">
				and branduser = #{branduser}
			</if>
  		</trim>
  	</select>
  	<insert id="addBranduserAssess" parameterType="com.hd.agent.report.model.BranduserAssess">
  		insert into t_report_branduser_assess
  		<trim prefix="(" suffix=")" suffixOverrides=",">
  			<if test="businessdate != null">
  				businessdate,
  			</if>
  			<if test="branduser != null">
  				branduser,
  			</if>
  			<if test="wdtargetamount != null">
  				wdtargetamount,
  			</if>
  			<if test="wdbonusbase != null">
  				wdbonusbase,
  			</if>
  			<if test="kpitargetamount != null">
  				kpitargetamount,
  			</if>
  			<if test="realaccomplish != null">
  				realaccomplish,
  			</if>
  			<if test="kpibonusamount != null">
  				kpibonusamount,
  			</if>
  			<if test="remark != null">
  				remark,
  			</if>
  			<if test="adduserid != null">
  				adduserid,
  			</if>
  			<if test="addusername != null">
  				addusername,
  			</if>
  			<if test="1==1">
  				addtime,
  			</if>
  		</trim>
  		<trim prefix="values (" suffix=")" suffixOverrides=",">
  			<if test="businessdate != null">
  				#{businessdate},
  			</if>
  			<if test="branduser != null">
  				#{branduser},
  			</if>
  			<if test="wdtargetamount != null">
  				#{wdtargetamount},
  			</if>
  			<if test="wdbonusbase != null">
  				#{wdbonusbase},
  			</if>
  			<if test="kpitargetamount != null">
  				#{kpitargetamount},
  			</if>
  			<if test="realaccomplish != null">
  				#{realaccomplish},
  			</if>
  			<if test="kpibonusamount != null">
  				#{kpibonusamount},
  			</if>
  			<if test="remark != null">
  				#{remark},
  			</if>
  			<if test="adduserid != null">
  				#{adduserid},
  			</if>
  			<if test="addusername != null">
  				#{addusername},
  			</if>
  			<if test="1==1">
  				now(),
  			</if>
  		</trim>
  	</insert>
  	<update id="editBranduserAssess" parameterType="com.hd.agent.report.model.BranduserAssess">
  		update t_report_branduser_assess
  		<set>
  			<if test="businessdate != null">
  				businessdate = #{businessdate},
  			</if>
  			<if test="branduser != null">
  				branduser = #{branduser},
  			</if>
  			<if test="wdtargetamount != null">
  				wdtargetamount = #{wdtargetamount},
  			</if>
  			<if test="wdbonusbase != null">
  				wdbonusbase = #{wdbonusbase},
  			</if>
  			<if test="kpitargetamount != null">
  				kpitargetamount = #{kpitargetamount},
  			</if>
  			<if test="realaccomplish != null">
  				realaccomplish = #{realaccomplish},
  			</if>
  			<if test="kpibonusamount != null">
  				kpibonusamount = #{kpibonusamount},
  			</if>
  			<if test="remark != null">
  				remark = #{remark},
  			</if>
  			<if test="modifyuserid != null">
  				modifyuserid = #{modifyuserid},
  			</if>
  			<if test="modifyusername != null">
  				modifyusername = #{modifyusername},
  			</if>
  			<if test="1==1">
  				modifytime = now(),
  			</if>
  		</set>
  		where id = #{id}
  	</update>
  	<delete id="deleteBranduserAssess" parameterType="java.lang.String">
  		delete from t_report_branduser_assess where id = #{id}
  	</delete>
  	<sql id="getBranduserAssessReport_sql">
  		(
			SELECT t.branduser,t.wdtargetamount,0 as wdaccomplishamount,0 as retaccomplishamount,
				t.wdbonusbase,t.kpitargetamount,t.realaccomplish,t.kpibonusamount
			from t_report_branduser_assess t
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate2 != null">
					and t.businessdate LIKE concat(#{condition.businessdate2},'%')
				</if>
				<if test="condition.branduser != null">
					and t.branduser = #{condition.branduser}
				</if>
			</trim>
			UNION ALL
			SELECT t1.branduser,0 as wdtargetamount,t1.taxamount AS wdaccomplishamount,0 as retaccomplishamount,
				'' as wdbonusbase,0 as kpitargetamount,0 as realaccomplish, 0 as kpibonusamount
			FROM t_account_sales_invoice t
			RIGHT JOIN t_account_sales_invoice_detail t1 ON t1.billid = t.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate2 != null">
					and t.writeoffdate LIKE concat(#{condition.businessdate2},'%')
				</if>
				<if test="condition.branduser != null">
					and t1.branduser = #{condition.branduser}
				</if>
				<if test="1 == 1">
					and t.iswriteoff = '1' AND t.STATUS = '4'
				</if>
			</trim>
			UNION ALL
			SELECT t.branduser,0 as wdtargetamount,t.amount AS wdaccomplishamount,0 as retaccomplishamount,
				'' as wdbonusbase,0 as kpitargetamount,0 as realaccomplish, 0 as kpibonusamount
			FROM t_account_customer_push_balance t
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate2 != null">
					and t.writeoffdate LIKE concat(#{condition.businessdate2},'%')
				</if>
				<if test="condition.branduser != null">
					and t.branduser = #{condition.branduser}
				</if>
				<if test="1 == 1">
					and t.isinvoice='0' and t.isrefer='0' AND t.iswriteoff = '1' AND ( t.STATUS = '3' OR t.STATUS = '4')
				</if>
			</trim>
			UNION ALL
			SELECT t1.branduser,0 as wdtargetamount,0 as wdaccomplishamount, t1.taxamount AS retaccomplishamount,
				'' as wdbonusbase,0 as kpitargetamount,0 as realaccomplish, 0 as kpibonusamount
			FROM t_storage_salereject_enter t 
			RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id 
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate2 != null">
					and t.businessdate LIKE concat(#{condition.businessdate2},'%')
				</if>
				<if test="condition.branduser != null">
					and t1.branduser = #{condition.branduser}
				</if>
				<if test="1 == 1">
					and ischeck='1' AND t.sourcetype = '1' AND t.STATUS IN ('3', '4')
				</if>
			</trim>
  		)
  	</sql>
  	<select id="getBranduserAssessReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BranduserAssessReport">
  		select z.branduser,SUM(z.wdtargetamount) as wdtargetamount,SUM(z.wdaccomplishamount) as wdaccomplishamount,
			SUM(z.retaccomplishamount) as retaccomplishamount,z.wdbonusbase,SUM(z.kpitargetamount) as kpitargetamount,
			SUM(z.realaccomplish) as realaccomplish,SUM(z.kpibonusamount) as kpibonusamount 
  		from <include refid="getBranduserAssessReport_sql"/> z
  		<trim prefix="where" prefixOverrides="and|or">
  			<include refid="common.Page_querySql"/>
  			<include refid="common.Page_dataSql"/>
  		</trim>
  		GROUP BY branduser
  		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getBranduserAssessReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  			select z.branduser,SUM(z.wdtargetamount) as wdtargetamount,SUM(z.wdaccomplishamount) as wdaccomplishamount,
				SUM(z.retaccomplishamount) as retaccomplishamount,z.wdbonusbase,SUM(z.kpitargetamount) as kpitargetamount,
				SUM(z.realaccomplish) as realaccomplish,SUM(z.kpibonusamount) as kpibonusamount 
	  		from <include refid="getBranduserAssessReport_sql"/> z
	  		<trim prefix="where" prefixOverrides="and|or">
	  			<include refid="common.Page_querySql"/>
	  			<include refid="common.Page_dataSql"/>
	  		</trim>
	  		GROUP BY branduser
  		) c
  	</select>
  	<select id="getBranduserAssessReportSum" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BranduserAssessReport">
  		select SUM(z.wdtargetamount) as wdtargetamount,SUM(z.wdaccomplishamount) as wdaccomplishamount,
			SUM(z.retaccomplishamount) as retaccomplishamount,SUM(z.kpitargetamount) as kpitargetamount,
			SUM(z.realaccomplish) as realaccomplish,SUM(z.kpibonusamount) as kpibonusamount 
  		from <include refid="getBranduserAssessReport_sql"/> z
  		<trim prefix="where" prefixOverrides="and|or">
  			<include refid="common.Page_querySql"/>
  			<include refid="common.Page_dataSql"/>
  		</trim>
  	</select>
  	
  	<!-- 品牌业务员考核扩展 -->
  	<sql id="BranduserAssess_Column_Extend" >
	   id, businessdate, branduser,salesarea, wdtargetamount,otherwdamount, kpitargetamount, kpibonusamount,wardenamount, 
	   totalpassamount1,totalpasssubamount1,totalpassamount2,totalpasssubamount2,totalpassamount3,totalpasssubamount3,totalpassamount4,totalpasssubamount4,
	   remark, adduserid,addusername, addtime, modifyuserid, modifyusername, modifytime
	</sql>
	<select id="getBranduserAssessExtendList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BranduserAssessExtend">
  		select <include refid="BranduserAssess_Column_Extend"/> from t_report_branduser_assess_extend
  		<trim prefix="where" prefixOverrides="and|or">
  			<include refid="common.Page_querySql"/>
      		<include refid="common.Page_dataSql"/>
      		<if test="condition.businessdate1 != null">
				and businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.branduser != null">
				and branduser = #{condition.branduser}
			</if>
  		</trim>
  		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getBranduserAssessExtendCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  			select <include refid="BranduserAssess_Column_Extend"/> from t_report_branduser_assess_extend
	  		<trim prefix="where" prefixOverrides="and|or">
	  			<include refid="common.Page_querySql"/>
	      		<include refid="common.Page_dataSql"/>
	      		<if test="condition.businessdate1 != null">
					and businessdate >= #{condition.businessdate1}
				</if>
				<if test="condition.businessdate2 != null">
					<![CDATA[and businessdate <= #{condition.businessdate2}]]>
				</if>
				<if test="condition.branduser != null">
					and branduser = #{condition.branduser}
				</if>
	  		</trim>
  		)z
  	</select>
	<select id="getBranduserAssessExtendByParam" parameterType="java.util.Map" resultType="com.hd.agent.report.model.BranduserAssessExtend">
  		select <include refid="BranduserAssess_Column_Extend"/> from t_report_branduser_assess_extend
  		<trim prefix="where" prefixOverrides="and|or">
  			<if test="id != null">
				and id = #{id}
			</if>
  			<if test="businessdate != null">
				and businessdate = #{businessdate}
			</if>
			<if test="branduser != null">
				and branduser = #{branduser}
			</if>
			<if test="salesarea != null">
				and salesarea = #{salesarea}
			</if>
  		</trim>
  	</select>
  	<select id="checkBranduserAssessExtend" parameterType="java.util.Map" resultType="int">
  		select count(1) from t_report_branduser_assess_extend
  		<trim prefix="where" prefixOverrides="and|or">
  			<if test="businessdate != null">
				and businessdate = #{businessdate}
			</if>
			<if test="branduser != null">
				and branduser = #{branduser}
			</if>
			<if test="salesarea != null">
				and salesarea = #{salesarea}
			</if>
  		</trim>
  	</select>
  	<insert id="addBranduserAssessExtend" parameterType="com.hd.agent.report.model.BranduserAssessExtend">
  		insert into t_report_branduser_assess_extend
  		<trim prefix="(" suffix=")" suffixOverrides=",">
  			<if test="businessdate != null">
  				businessdate,
  			</if>
  			<if test="branduser != null">
  				branduser,
  			</if>
  			<if test="salesarea != null">
  				salesarea,
  			</if>
  			<if test="wdtargetamount != null">
  				wdtargetamount,
  			</if>
  			<if test="otherwdamount != null">
  				otherwdamount,
  			</if>
  			<if test="kpitargetamount != null">
  				kpitargetamount,
  			</if>
  			<if test="kpibonusamount != null">
  				kpibonusamount,
  			</if>
  			<if test="wardenamount != null">
  				wardenamount,
  			</if>
  			<if test="totalpassamount1 != null">
  				totalpassamount1,
  			</if>
  			<if test="totalpasssubamount1 != null">
  				totalpasssubamount1,
  			</if>
  			<if test="totalpassamount2 != null">
  				totalpassamount2,
  			</if>
  			<if test="totalpasssubamount2 != null">
  				totalpasssubamount2,
  			</if>
  			<if test="totalpassamount3 != null">
  				totalpassamount3,
  			</if>
  			<if test="totalpasssubamount3 != null">
  				totalpasssubamount3,
  			</if>
  			<if test="totalpassamount4 != null">
  				totalpassamount4,
  			</if>
  			<if test="totalpasssubamount4 != null">
  				totalpasssubamount4,
  			</if>
  			<if test="remark != null">
  				remark,
  			</if>
  			<if test="adduserid != null">
  				adduserid,
  			</if>
  			<if test="addusername != null">
  				addusername,
  			</if>
  			<if test="1==1">
  				addtime,
  			</if>
  		</trim>
  		<trim prefix="values (" suffix=")" suffixOverrides=",">
  			<if test="businessdate != null">
  				#{businessdate},
  			</if>
  			<if test="branduser != null">
  				#{branduser},
  			</if>
  			<if test="salesarea != null">
  				#{salesarea},
  			</if>
  			<if test="wdtargetamount != null">
  				#{wdtargetamount},
  			</if>
  			<if test="otherwdamount != null">
  				#{otherwdamount},
  			</if>
  			<if test="kpitargetamount != null">
  				#{kpitargetamount},
  			</if>
  			<if test="kpibonusamount != null">
  				#{kpibonusamount},
  			</if>
  			<if test="wardenamount != null">
  				#{wardenamount},
  			</if>
  			<if test="totalpassamount1 != null">
  				#{totalpassamount1},
  			</if>
  			<if test="totalpasssubamount1 != null">
  				#{totalpasssubamount1},
  			</if>
  			<if test="totalpassamount2 != null">
  				#{totalpassamount2},
  			</if>
  			<if test="totalpasssubamount2 != null">
  				#{totalpasssubamount2},
  			</if>
  			<if test="totalpassamount3 != null">
  				#{totalpassamount3},
  			</if>
  			<if test="totalpasssubamount3 != null">
  				#{totalpasssubamount3},
  			</if>
  			<if test="totalpassamount4 != null">
  				#{totalpassamount4},
  			</if>
  			<if test="totalpasssubamount4 != null">
  				#{totalpasssubamount4},
  			</if>
  			<if test="remark != null">
  				#{remark},
  			</if>
  			<if test="adduserid != null">
  				#{adduserid},
  			</if>
  			<if test="addusername != null">
  				#{addusername},
  			</if>
  			<if test="1==1">
  				now(),
  			</if>
  		</trim>
  	</insert>
  	<update id="editBranduserAssessExtend" parameterType="com.hd.agent.report.model.BranduserAssessExtend">
  		update t_report_branduser_assess_extend
  		<set>
  			<if test="businessdate != null">
  				businessdate = #{businessdate},
  			</if>
  			<if test="branduser != null">
  				branduser = #{branduser},
  			</if>
  			<if test="salesarea != null">
  				salesarea = #{salesarea},
  			</if>
  			<if test="wdtargetamount != null">
  				wdtargetamount = #{wdtargetamount},
  			</if>
  			<if test="otherwdamount != null">
  				otherwdamount = #{otherwdamount},
  			</if>
  			<if test="kpitargetamount != null">
  				kpitargetamount = #{kpitargetamount},
  			</if>
  			<if test="kpibonusamount != null">
  				kpibonusamount = #{kpibonusamount},
  			</if>
  			<if test="wardenamount != null">
  				wardenamount = #{wardenamount},
  			</if>
  			<if test="totalpassamount1 != null">
  				totalpassamount1 = #{totalpassamount1},
  			</if>
  			<if test="totalpasssubamount1 != null">
  				totalpasssubamount1 = #{totalpasssubamount1},
  			</if>
  			<if test="totalpassamount2 != null">
  				totalpassamount2 = #{totalpassamount2},
  			</if>
  			<if test="totalpasssubamount2 != null">
  				totalpasssubamount2 = #{totalpasssubamount2},
  			</if>
  			<if test="totalpassamount3 != null">
  				totalpassamount3 = #{totalpassamount3},
  			</if>
  			<if test="totalpasssubamount3 != null">
  				totalpasssubamount3 = #{totalpasssubamount3},
  			</if>
  			<if test="totalpassamount4 != null">
  				totalpassamount4 = #{totalpassamount4},
  			</if>
  			<if test="totalpasssubamount4 != null">
  				totalpasssubamount4 = #{totalpasssubamount4},
  			</if>
  			<if test="remark != null">
  				remark = #{remark},
  			</if>
  			<if test="modifyuserid != null">
  				modifyuserid = #{modifyuserid},
  			</if>
  			<if test="modifyusername != null">
  				modifyusername = #{modifyusername},
  			</if>
  			<if test="1==1">
  				modifytime = now(),
  			</if>
  		</set>
  		where id = #{id}
  	</update>
  	<delete id="deleteBranduserAssessExtend" parameterType="java.lang.String">
  		delete from t_report_branduser_assess_extend where id = #{id}
  	</delete>
  	<select id="getBranduserAssessExtendTotalSum" parameterType="java.lang.String" resultType="com.hd.agent.report.model.BranduserAssessExtend">
  		select sum(wdtargetamount) as wdtargetamount,sum(otherwdamount) as otherwdamount,sum(kpitargetamount) as kpitargetamount,
  			sum(kpibonusamount) as kpibonusamount,sum(wardenamount) as wardenamount,
  			sum(totalpassamount1) as totalpassamount1,sum(totalpasssubamount1) as totalpasssubamount1,
  			sum(totalpassamount2) as totalpassamount2,sum(totalpasssubamount2) as totalpasssubamount2,
  			sum(totalpassamount3) as totalpassamount3,sum(totalpasssubamount3) as totalpasssubamount3,
  			sum(totalpassamount4) as totalpassamount4,sum(totalpasssubamount4) as totalpasssubamount4
  		from t_report_branduser_assess_extend
  		<trim prefix="where" prefixOverrides="and|or">
  			<if test="id != null">
				and id = #{id}
			</if>
  			<if test="businessdate != null">
				and businessdate LIKE concat(#{businessdate},'%')
			</if>
			<if test="branduser != null">
				and FIND_IN_SET(branduser,#{branduser})
			</if>
  		</trim>
  	</select>
  	
  	<sql id="getBranduserAssessReportExtend_sql">
  		(
  			select t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
				t1.goodsid AS goodsid,t1.brandid,t1.branduser,t1.branddept,
				t1.taxamount AS taxamount, t1.costprice*t1.unitnum as costamount,(t1.taxamount-t1.costprice*t1.unitnum) as marginamount,
				0 as unpassamount,0 as returnamount,0 as pushamount,0 as totalpassamount
			from t_storage_saleout t
			RIGHT JOIN t_storage_saleout_detail t1 on t1.saleoutid=t.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate != null">
					and t1.writeoffdate LIKE concat(#{condition.businessdate},'%')
				</if>
				<if test="condition.branduser != null">
					and FIND_IN_SET(t1.branduser,#{condition.branduser})
				</if>
				<if test="condition.salesarea != null">
					and t.salesarea LIKE concat(#{condition.salesarea},'%')
				</if>
				<if test="1 == 1">
					<![CDATA[and t.duefromdate < t1.writeoffdate and t1.iswriteoff='1' and t.status in('3','4')]]>
				</if>
			</trim>
			UNION ALL
			SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
				t1.goodsid AS goodsid,t1.brandid,t1.branduser,t1.branddept,
				t1.taxamount AS taxamount, t1.costprice*t1.unitnum as costamount,(t1.taxamount-t1.costprice*t1.unitnum) as marginamount,
				t1.taxamount as unpassamount,0 as returnamount,0 as pushamount,0 as totalpassamount
			from t_storage_saleout t
			RIGHT JOIN t_storage_saleout_detail t1 on t1.saleoutid=t.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate != null">
					and t1.writeoffdate LIKE concat(#{condition.businessdate},'%')
				</if>
				<if test="condition.branduser != null">
					and FIND_IN_SET(t1.branduser,#{condition.branduser})
				</if>
				<if test="condition.salesarea != null">
					and t.salesarea LIKE concat(#{condition.salesarea},'%')
				</if>
				<if test="1 == 1">
					<![CDATA[and t.duefromdate >=t1.writeoffdate and t1.iswriteoff='1' and t.status in('3','4')]]>
				</if>
			</trim>
			UNION ALL
			SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
				t1.goodsid,t1.brandid,t1.branduser,t1.branddept,
				-t1.taxamount AS taxamount,-t1.costprice*t1.unitnum AS costamount,-(t1.taxamount-t1.costprice*t1.unitnum) as marginamount,
				-t1.taxamount as unpassamount,0 as returnamount,0 as pushamount,0 as totalpassamount 
			FROM t_storage_salereject_enter t
			RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate != null">
					and t1.writeoffdate LIKE concat(#{condition.businessdate},'%')
				</if>
				<if test="condition.branduser != null">
					and FIND_IN_SET(t1.branduser,#{condition.branduser})
				</if>
				<if test="condition.salesarea != null">
					and t.salesarea LIKE concat(#{condition.salesarea},'%')
				</if>
				<if test="1 == 1">
					<![CDATA[and t.ischeck='1' and t1.iswriteoff='1' and t.status in('3','4')]]>
				</if>
			</trim>
			UNION ALL
			SELECT t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
				t1.goodsid,t1.brandid,t1.branduser,t1.branddept,
				0 AS taxamount,0 AS costamount,0 as marginamount,
				0 as unpassamount,t1.taxamount as returnamount,0 as pushamount,0 as totalpassamount 
			FROM t_storage_salereject_enter t
			RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate != null">
					and t.businessdate LIKE concat(#{condition.businessdate},'%')
				</if>
				<if test="condition.branduser != null">
					and FIND_IN_SET(t1.branduser,#{condition.branduser})
				</if>
				<if test="condition.salesarea != null">
					and t.salesarea LIKE concat(#{condition.salesarea},'%')
				</if>
				<if test="1 == 1">
					<![CDATA[and ischeck='1' AND t.STATUS IN ('3', '4')]]>
				</if>
			</trim>
			UNION ALL
			SELECT 
				t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
				t.brandid AS goodsid,t.brandid,t.branduser,t.branddept,
				t.amount AS taxamount, 0 AS costamount, t.amount as marginamount, 
				t.amount as unpassamount,0 as returnamount,t.amount as pushamount,0 as totalpassamount
			FROM t_account_customer_push_balance t
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate != null">
					and t.writeoffdate LIKE concat(#{condition.businessdate},'%')
				</if>
				<if test="condition.branduser != null">
					and FIND_IN_SET(t.branduser,#{condition.branduser})
				</if>
				<if test="condition.salesarea != null">
					and t.salesarea LIKE concat(#{condition.salesarea},'%')
				</if>
				<if test="1 == 1">
					<![CDATA[and t.iswriteoff='1' and t.status in('3','4')]]>
				</if>
			</trim>
			UNION ALL
			SELECT '' as customerid, '' as pcustomerid, t.salesarea, '' as salesdept, '' as salesuser,
				'' AS goodsid, '' as brandid, t.branduser, '' as branddept,
				0 AS taxamount, 0 AS costamount, 0 AS marginamount, 
				0 AS unpassamount, 0 AS returnamount, 0 AS pushamount, 0 AS totalpassamount
			FROM
				t_report_branduser_assess_extend t
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate != null">
					and t.businessdate LIKE concat(#{condition.businessdate},'%')
				</if>
				<if test="condition.branduser != null">
					and FIND_IN_SET(t.branduser,#{condition.branduser})
				</if>
				<if test="condition.salesarea != null">
					and t.salesarea LIKE concat(#{condition.salesarea},'%')
				</if>
			</trim>
  		)
  	</sql>
  	<select id="getBranduserAssessReportExtendList" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
  		SELECT * from (
	  		select z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,
				z.goodsid,z.brandid,z.branduser,z.branddept, 
				sum(z.taxamount) as taxamount,sum(z.costamount) as costamount,sum(z.marginamount) as marginamount,
				sum(z.unpassamount) as unpassamount,sum(z.returnamount) as returnamount,
				sum(z.pushamount) as pushamount,sum(z.totalpassamount) as totalpassamount
	  		from <include refid="getBranduserAssessReportExtend_sql"/> z
	  		<trim prefix="where" prefixOverrides="and|or">
	  			<include refid="common.Page_querySql"/>
	  			<include refid="common.Page_dataSql"/>
	  		</trim>
	  		GROUP BY salesarea,branduser
		)z
		ORDER BY salesarea,branduser
  	</select>
  	<select id="getBranduserAssessReportExtendCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  			select z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,
				z.goodsid,z.brandid,z.branduser,z.branddept, 
				sum(z.taxamount) as taxamount,sum(z.costamount) as costamount,sum(z.marginamount) as marginamount,
				sum(z.unpassamount) as unpassamount,sum(z.returnamount) as returnamount,
				sum(z.pushamount) as pushamount,sum(z.totalpassamount) as totalpassamount
	  		from <include refid="getBranduserAssessReportExtend_sql"/> z
	  		<trim prefix="where" prefixOverrides="and|or">
	  			<include refid="common.Page_querySql"/>
	  			<include refid="common.Page_dataSql"/>
	  		</trim>
	  		GROUP BY salesarea,branduser
  		) c
  	</select>
  	<select id="getBranduserAssessReportExtendSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
  		select sum(z.taxamount) as taxamount,sum(z.costamount) as costamount,sum(z.marginamount) as marginamount,
			sum(z.unpassamount) as unpassamount,sum(z.returnamount) as returnamount,
			sum(z.pushamount) as pushamount,sum(z.totalpassamount) as totalpassamount
  		from <include refid="getBranduserAssessReportExtend_sql"/> z
  		<trim prefix="where" prefixOverrides="and|or">
  			<include refid="common.Page_querySql"/>
  			<include refid="common.Page_dataSql"/>
  		</trim>
  	</select>
  	<select id="getTotalPassAmount" parameterType="java.lang.String" resultType="java.util.Map">
  		select z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,
			z.goodsid,z.brandid,z.branduser,z.branddept,sum(z.totalpassamount) as totalpassamount
		from(
			select t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
				t1.goodsid AS goodsid,t1.brandid,t1.branduser,t1.branddept, t1.taxamount as totalpassamount
			from t_storage_saleout t
			RIGHT JOIN t_storage_saleout_detail t1 on t1.saleoutid=t.id
			<trim prefix="where" prefixOverrides="and|or">
				<!-- <if test="businessdate2 != null">
					<![CDATA[and t.businessdate <= #{businessdate2}]]>
				</if> -->
				<if test="branduser != null">
					and FIND_IN_SET(t1.branduser,#{branduser})
				</if>
				<if test="businessdate2 != null">
					<![CDATA[and t.duefromdate < #{businessdate2}]]>
				</if>
				<if test="1 == 1">
					and t1.iswriteoff='0' and t.status in('3','4') and t.iswrite='0'
				</if>
			</trim>
		)z
		group by z.branduser
  	</select>
  	<!-- 预期应收款 -->
  	<sql id="customerExpectReceipt_sql">
  		(
	  		SELECT t.customerid, IF(t.pcustomerid='',t.customerid,t.pcustomerid) as pcustomerid,t.customersort, t.salesarea, t.salesdept, t.salesuser, c.payeeid, c.islongterm, c.iscash, t1.goodsid, t1.brandid,t1.goodssort, t1.branduser, t1.branddept,t1.supplierid,
				IF(c.islongterm = '1' and <![CDATA[t1.duefromdate<>'' and t1.duefromdate < '${condition.businessdate1}']]>,t1.taxamount,0) AS longtermamount,
				IF(c.iscash = '1',t1.taxamount,0) as cashamount,
				IF((t1.duefromdate = '' OR t1.duefromdate >= '${condition.businessdate1}'),t1.taxamount,0) AS unpassamount,
				IF(<![CDATA[t1.duefromdate<>'' and t1.duefromdate < '${condition.businessdate1}']]>,t1.taxamount,0) AS totalpassamount,
				t1.taxamount AS allsendamount, 0 AS allreturnamount, 0 AS allpushbalanceamount
			FROM t_storage_saleout t
			RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
			INNER JOIN t_base_sales_customer c ON c.id = t.customerid
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.type != null">
					<choose>
						<when test="condition.type == '1'">
							and c.islongterm = '1'
						</when>
					</choose>
				</if>
                <if test="condition.brandid != null">
                    and FIND_IN_SET(t1.brandid,#{condition.brandid})
                </if>
                <if test="condition.supplierid != null">
                    and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
                </if>
				<if test="1 == 1">
					AND t1.iswriteoff = '0'
					AND t.STATUS IN ('3', '4')
					AND t.iswrite = '0'
				</if>
			</trim>
			UNION ALL
			SELECT t.customerid, IF(t.pcustomerid='',t.customerid,t.pcustomerid) as pcustomerid,t.customersort, t.salesarea, t.salesdept, t.salesuser, c.payeeid, c.islongterm, c.iscash, t1.goodsid, t1.brandid,t1.goodssort, t1.branduser, t1.branddept,t1.supplierid,
				IF(c.islongterm = '1' and <![CDATA[t1.duefromdate<>'' and t1.duefromdate < '${condition.businessdate1}']]>,-t1.taxamount,0) AS longtermamount,
				IF(c.iscash = '1',-t1.taxamount,0) AS cashamount,
                IF((t1.duefromdate = '' OR t1.duefromdate >= '${condition.businessdate1}'),-t1.taxamount,0) AS unpassamount,
                IF(<![CDATA[t1.duefromdate<>'' and t1.duefromdate < '${condition.businessdate1}']]>,-t1.taxamount,0) AS totalpassamount,
				0 AS allsendamount, t1.taxamount AS allreturnamount, 0 AS allpushbalanceamount
			FROM t_storage_salereject_enter t
			RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
			INNER JOIN t_base_sales_customer c ON c.id = t.customerid
			<trim prefix="where" prefixOverrides="and|or">
				<if test="1 == 1">
					AND t.ischeck = '1'
					AND t1.iswriteoff = '0'
					AND t.STATUS IN ('3', '4')
				</if>
				<if test="condition.type != null">
					<choose>
						<when test="condition.type == '1'">
							and c.islongterm = '1'
						</when>
					</choose>
				</if>
                <if test="condition.brandid != null">
                    and FIND_IN_SET(t1.brandid,#{condition.brandid})
                </if>
                <if test="condition.supplierid != null">
                    and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
                </if>
			</trim>
			UNION ALL
			SELECT t.customerid, IF(t.pcustomerid='',t.customerid,t.pcustomerid) as pcustomerid,t.customersort, t.salesarea, t.salesdept, t.salesuser, c.payeeid, c.islongterm, c.iscash, t.brandid AS goodsid,'' as goodssort, t.brandid, t.branduser, t.branddept,t.supplierid,
				IF(c.islongterm = '1',t.amount,0) AS longtermamount, IF(c.iscash = '1',t.amount,0) AS cashamount,
				t.amount AS unpassamount, 0 AS totalpassamount,
				0 AS allsendamount, 0 AS allreturnamount, t.amount AS allpushbalanceamount
			FROM t_account_customer_push_balance t
			INNER JOIN t_base_sales_customer c ON c.id = t.customerid
			<trim prefix="where" prefixOverrides="and|or">
				<if test="1 == 1">
					AND t.iswriteoff = '0'
					AND t.STATUS IN ('3', '4')
				</if>
                <if test="condition.brandid != null">
                    and FIND_IN_SET(t.brandid,#{condition.brandid})
                </if>
                <if test="condition.supplierid != null">
                    and FIND_IN_SET(t.supplierid,#{condition.supplierid})
                </if>
			</trim>
  		)
  	</sql>
	<sql id="customerExpectReceipt_where_sql">
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
			<if test="condition.customerid != null">
				and FIND_IN_SET(z.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and FIND_IN_SET(z.pcustomerid,#{condition.pcustomerid})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(z.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(z.branduser,#{condition.branduser})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(z.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesdept != null">
				and FIND_IN_SET(z.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.payeeid != null">
				and FIND_IN_SET(z.payeeid,#{condition.payeeid})
			</if>
			<if test="condition.type == 1">
				and z.islongterm = '1'
			</if>
			<if test="condition.type == 2">
				and z.iscash = '1'
			</if>
		</trim>
		<if test="condition.groupcols  != 'all' " >
			group by
			<choose>
				<when test="condition.groupcols == ''">
					customerid
				</when>
				<otherwise>
					${condition.groupcols}
				</otherwise>
			</choose>
		</if>
	</sql>
  	<select id="getCustomerExpectReceiptListData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
  		SELECT z.customerid, z.pcustomerid,z.customersort, z.salesarea, z.salesdept, z.salesuser, z.goodsid, z.brandid,z.goodssort, z.branduser, z.branddept,z.supplierid, z.payeeid, z.islongterm, z.iscash,
			sum(z.longtermamount) AS longtermamount, sum(z.cashamount) AS cashamount,
			sum(z.longtermamount + z.cashamount) as expectreceipt,
			sum(z.unpassamount) AS unpassamount, sum(z.totalpassamount) AS totalpassamount,
			(sum(z.allsendamount)-sum(z.allreturnamount)+sum(z.allpushbalanceamount)) as allunwithdrawnamount
		FROM <include refid="customerExpectReceipt_sql"/> z
		<include refid="customerExpectReceipt_where_sql"/>
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
  	</select>
  	<select id="getCustomerExpectReceiptCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  			SELECT z.customerid, z.pcustomerid,z.customersort, z.salesarea, z.salesdept, z.salesuser, z.goodsid, z.brandid,z.goodssort, z.branduser, z.branddept,z.supplierid, z.payeeid, z.islongterm, z.iscash,
				sum(z.longtermamount) AS longtermamount, sum(z.cashamount) AS cashamount,
				sum(z.longtermamount + z.cashamount) as expectreceipt,
				sum(z.unpassamount) AS unpassamount, sum(z.totalpassamount) AS totalpassamount,
				(sum(z.allsendamount)-sum(z.allreturnamount)+sum(z.allpushbalanceamount)) as allunwithdrawnamount
			FROM <include refid="customerExpectReceipt_sql"/> z
			<include refid="customerExpectReceipt_where_sql"/>
  		)y
  	</select>

  	<select id="showMonthFinanceDrawnData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.MonthSaleWithdrawnReport">
  		select * ,
     			sum(CASE k.month when '01' then k.withdrawnamount else 0 end) 'withdrawnamount01',
     			sum(CASE k.month when '02' then k.withdrawnamount else 0 end) 'withdrawnamount02',
     			sum(CASE k.month when '03' then k.withdrawnamount else 0 end) 'withdrawnamount03',
     			sum(CASE k.month when '04' then k.withdrawnamount else 0 end) 'withdrawnamount04',
     			sum(CASE k.month when '05' then k.withdrawnamount else 0 end) 'withdrawnamount05',
     			sum(CASE k.month when '06' then k.withdrawnamount else 0 end) 'withdrawnamount06',
     			sum(CASE k.month when '07' then k.withdrawnamount else 0 end) 'withdrawnamount07',
     			sum(CASE k.month when '08' then k.withdrawnamount else 0 end) 'withdrawnamount08',
     			sum(CASE k.month when '09' then k.withdrawnamount else 0 end) 'withdrawnamount09',
     			sum(CASE k.month when '10' then k.withdrawnamount else 0 end) 'withdrawnamount10',
     			sum(CASE k.month when '11' then k.withdrawnamount else 0 end) 'withdrawnamount11',
     			sum(CASE k.month when '12' then k.withdrawnamount else 0 end) 'withdrawnamount12',
     			
     			sum(CASE k.month when '01' then k.costwriteoffamount else 0 end) 'costwriteoffamount01',
     			sum(CASE k.month when '02' then k.costwriteoffamount else 0 end) 'costwriteoffamount02',
     			sum(CASE k.month when '03' then k.costwriteoffamount else 0 end) 'costwriteoffamount03',
     			sum(CASE k.month when '04' then k.costwriteoffamount else 0 end) 'costwriteoffamount04',
     			sum(CASE k.month when '05' then k.costwriteoffamount else 0 end) 'costwriteoffamount05',
     			sum(CASE k.month when '06' then k.costwriteoffamount else 0 end) 'costwriteoffamount06',
     			sum(CASE k.month when '07' then k.costwriteoffamount else 0 end) 'costwriteoffamount07',
     			sum(CASE k.month when '08' then k.costwriteoffamount else 0 end) 'costwriteoffamount08',
     			sum(CASE k.month when '09' then k.costwriteoffamount else 0 end) 'costwriteoffamount09',
     			sum(CASE k.month when '10' then k.costwriteoffamount else 0 end) 'costwriteoffamount10',
     			sum(CASE k.month when '11' then k.costwriteoffamount else 0 end) 'costwriteoffamount11',
     			sum(CASE k.month when '12' then k.costwriteoffamount else 0 end) 'costwriteoffamount12'
     			FROM 
     			(
			     	select month,z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,z.goodsid,z.brandid,z.branduser,z.branddept,z.supplierid,z.supplieruser,
					sum(z.withdrawnamount) AS withdrawnamount, sum(z.costwriteoffamount) AS costwriteoffamount
					FROM
					(
			<!--      		销售发货单 -->
						select
						SUBSTRING(t1.writeoffdate,6,2) as month, t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
						t1.taxamount AS withdrawnamount, t1.costprice*t1.unitnum as costwriteoffamount
						from t_storage_saleout t
						RIGHT JOIN t_storage_saleout_detail t1 on t1.saleoutid=t.id
				     	<include refid="monthFundsReturnCondition"></include>
				     	and t1.iswriteoff='1' and t.status in('3','4')
			     		
				     	UNION ALL
				     	
			<!--      	  销售退货入库单 -->	     		
						select
						SUBSTRING(t1.writeoffdate,6,2) as month,t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
						
						-t1.taxamount AS withdrawnamount,-t1.costprice*t1.unitnum AS costwriteoffamount
						FROM t_storage_salereject_enter t
						RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
			     		<include refid="monthFundsReturnCondition"></include>
			     		and t.ischeck='1' and t1.iswriteoff='1' and t.status in('3','4')
			     		
			     		
			     		UNION ALL
			<!--      	客户应收款冲差 -->
						select 
					    SUBSTRING(t.writeoffdate,6,2) as month, t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t.brandid AS goodsid,t.brandid,t.branduser,t.branddept,t.supplierid,t.supplieruser,
					    t.amount AS withdrawnamount, 0 AS costwriteoffamount
						FROM t_account_customer_push_balance t
						<include refid="monthFundsReturnPushCondition"></include>
						and t.iswriteoff='1' and t.status in('3','4')

						UNION ALL
			<!--        应收款期初  -->
						select
						SUBSTRING(t.writeoffdate,6,2) as month, t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,'QC' goodsid,'QC' brandid,'QC' branduser,'QC' branddept,'QC' supplierid,'QC' supplieruser,
						t.amount AS withdrawnamount, 0 AS costwriteoffamount
						FROM t_account_begin_amount t
						<include refid="monthFundsReturnBeginCondition"></include>
						and t.iswriteoff='1' and t.status = '4'
			    	)z  
			    	<if test="dataSql!=null">
				    	where ${dataSql}
				    </if>
			    	group by  ${condition.groupcols},month
		    	)k
		    	<if test="condition.group == null">
    				group by ${condition.groupcols}
		    	</if>
    			<if test="condition.limit == null">
	    			<include refid="common.Page_limit"/>
    			</if>
  	</select>
    <select id="showMonthFinanceDrawnDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
    	select count(1)
    	  FROM(
  	  		select *
     			FROM 
     			(
			     	select month,z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,z.goodsid,z.brandid,z.branduser,z.branddept,z.supplierid,z.supplieruser,
					sum(z.withdrawnamount) AS withdrawnamount, sum(z.costwriteoffamount) AS costwriteoffamount
					FROM
					(
			<!--      		销售发货单 -->
						select
						SUBSTRING(t1.writeoffdate,6,2) as month, t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
						t1.taxamount AS withdrawnamount, t1.costprice*t1.unitnum as costwriteoffamount
						from t_storage_saleout t
						RIGHT JOIN t_storage_saleout_detail t1 on t1.saleoutid=t.id
				     	<include refid="monthFundsReturnCondition"></include>
				     	and t1.iswriteoff='1' and t.status in('3','4')
			     		
				     	UNION ALL
				     	
			<!--      	  销售退货入库单 -->	     		
						select
						SUBSTRING(t1.writeoffdate,6,2) as month,t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
						-t1.taxamount AS withdrawnamount,-t1.costprice*t1.unitnum AS costwriteoffamount
						FROM t_storage_salereject_enter t
						RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
			     		<include refid="monthFundsReturnCondition"></include>
			     		and t.ischeck='1' and t1.iswriteoff='1' and t.status in('3','4')
			     		
			     		
			     		UNION ALL
			<!--      	客户应收款冲差 -->
						select 
					    SUBSTRING(t.writeoffdate,6,2) as month, t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t.brandid AS goodsid,t.brandid,t.branduser,t.branddept,t.supplierid,t.supplieruser,
					    t.amount AS withdrawnamount, 0 AS costwriteoffamount
						FROM t_account_customer_push_balance t
						<include refid="monthFundsReturnPushCondition"></include>
						and t.iswriteoff='1' and t.status in('3','4')

						UNION ALL
		<!--        应收款期初  -->
						select
						SUBSTRING(t.writeoffdate,6,2) as month, t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,'QC' goodsid,'QC' brandid,'QC' branduser,'QC' branddept,'QC' supplierid,'QC' supplieruser,
						t.amount AS withdrawnamount, 0 AS costwriteoffamount
						FROM t_account_begin_amount t
						<include refid="monthFundsReturnBeginCondition"></include>
						and t.iswriteoff='1' and t.status = '4'
			
			    	)z  
			    	<if test="dataSql!=null">
				    	where ${dataSql}
				    </if>
			    	group by  ${condition.groupcols},month
		    	)k
    			group by ${condition.groupcols}
  	  		)m
  	  	
  	</select>

  	<sql id="monthFundsReturnCondition">
  		<if test="1==1">
   			 where SUBSTRING(t1.writeoffdate,1,4) = #{condition.year} 		  	
    	</if>
    	
  		<if test="condition.goodsid!=null">
  			and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
  		</if>
  		
  		<if test="condition.supplierid!=null">
  			and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
  		</if>
  		
  		<if test="condition.brandid!=null">
  			and FIND_IN_SET(t1.brandid,#{condition.brandid})
  		</if>
  		
  		<if test="condition.branduser!=null">
  			and FIND_IN_SET(t1.branduser,#{condition.branduser})
  		</if>
  		
  		<if test="condition.supplieruser!=null">
  			and FIND_IN_SET(t1.supplieruser,#{condition.supplieruser})
  		</if>
  		
  		<if test="condition.branddeptcondition!=null">
			${condition.branddeptcondition}  			
  		</if>
  		
  		<if test="condition.saledeptcondition!=null">
			${condition.saledeptcondition}  			
  		</if>
  		
  		<if test="condition.salesuser!=null">
  			and FIND_IN_SET(t.salesuser,#{condition.salesuser})
  		</if>
  		
  		<if test="condition.salesarea!=null">
  			and FIND_IN_SET(t.salesarea,#{condition.salesarea})
  		</if>
  		
  		<if test="condition.customerid!=null">
  			and FIND_IN_SET(t.customerid,#{condition.customerid})
  		</if>
  		
  		<if test="condition.pcustomerid!=null">
  			and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
  		</if>
  	</sql>

  	<sql id="monthFundsReturnPushCondition">
  		<if test="1==1">
   			 where SUBSTRING(t.writeoffdate,1,4) = #{condition.year} 		  	
    	</if>
  		
  		<if test="condition.goodsid!=null">
  			and FIND_IN_SET(t.brandid,#{condition.goodsid})
  		</if>
  		
  		<if test="condition.supplierid!=null">
  			and FIND_IN_SET(t.supplierid,#{condition.supplierid})
  		</if>
  		
  		<if test="condition.brandid!=null">
  			and FIND_IN_SET(t.brandid,#{condition.brandid})
  		</if>
  		
  		<if test="condition.branduser!=null">
  			and FIND_IN_SET(t.branduser,#{condition.branduser})
  		</if>
  		
  		<if test="condition.supplieruser!=null">
  			and FIND_IN_SET(t.supplieruser,#{condition.supplieruser})
  		</if>
  		
  		<if test="condition.branddeptcondition2!=null">
			${condition.branddeptcondition2}  			
  		</if>
  		
  		<if test="condition.saledeptcondition2!=null">
			${condition.saledeptcondition2}  			
  		</if>
  		
  		<if test="condition.salesuser!=null">
  			and FIND_IN_SET(t.salesuser,#{condition.salesuser})
  		</if>
  		
  		<if test="condition.salesarea!=null">
  			and FIND_IN_SET(t.salesarea,#{condition.salesarea})
  		</if>
  		
  		<if test="condition.customerid!=null">
  			and FIND_IN_SET(t.customerid,#{condition.customerid})
  		</if>
  		
  		<if test="condition.pcustomerid!=null">
  			and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
  		</if>
  	</sql>
	<sql id="monthFundsReturnBeginCondition">
		<if test="1==1">
			where SUBSTRING(t.writeoffdate,1,4) = #{condition.year}
		</if>
		<if test="condition.goodsid!=null">
			and 1 != 1
		</if>
		<if test="condition.supplierid!=null">
			and 1 != 1
		</if>
		<if test="condition.brandid!=null">
			and 1 != 1
		</if>
		<if test="condition.branduser!=null">
			and 1 != 1
		</if>
		<if test="condition.supplieruser!=null">
			and 1 != 1
		</if>
		<if test="condition.branddeptcondition2!=null">
			and 1 != 1
		</if>
		<if test="condition.saledeptcondition2!=null">
			${condition.saledeptcondition2}
		</if>
		<if test="condition.salesuser!=null">
			and FIND_IN_SET(t.salesuser,#{condition.salesuser})
		</if>
		<if test="condition.salesarea!=null">
			and FIND_IN_SET(t.salesarea,#{condition.salesarea})
		</if>
		<if test="condition.customerid!=null">
			and FIND_IN_SET(t.customerid,#{condition.customerid})
		</if>
		<if test="condition.pcustomerid!=null">
			and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
		</if>
	</sql>

    <sql id="getCustomerTotalReceiptReportList_sql">
        (
		<![CDATA[
        SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,t1.supplierid,
			if(t.businessdate<#{condition.businessdate1},t1.taxamount,0) AS inittotalreceiptamount,if(t.businessdate>=#{condition.businessdate1},t1.taxamount,0) AS saleamount,
			0 AS tailamount,0 AS receiptamount,if(t.businessdate>=#{condition.businessdate1},1,0) AS billcount
		]]>
        FROM t_storage_saleout t
        RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1 == 1">
                and (t.STATUS = '3' or t.STATUS = '4')
            </if>
			<if test="condition.businessdate2 != null">
                <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.salesuser != null">
                and t.salesuser = #{condition.salesuser}
            </if>
            <if test="condition.salesdept != null">
                and t.salesdept = #{condition.salesdept}
            </if>
            <if test="condition.customerid != null">
                and t.customerid = #{condition.customerid}
            </if>
            <if test="condition.pcustomerid != null">
                and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
            </if>
            <if test="condition.customersort != null">
                and FIND_IN_SET(t.customersort,#{condition.customersort})
            </if>
        </trim>
        UNION ALL
		<![CDATA[
        SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,t1.supplierid,
       	if(t.businessdate<#{condition.businessdate1},-t1.taxamount,0) AS inittotalreceiptamount,if(t.businessdate>=#{condition.businessdate1},-t1.taxamount,0) AS saleamount,
		0 AS tailamount,0 AS receiptamount,if(t.businessdate>=#{condition.businessdate1},1,0) AS billcount
		]]>
        FROM t_storage_salereject_enter t
        RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1 == 1">
                and ischeck='1' AND (t.STATUS = '3' or t.STATUS = '4')
            </if>
			<if test="condition.businessdate2 != null">
                <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.salesuser != null">
                and t.salesuser = #{condition.salesuser}
            </if>
            <if test="condition.salesdept != null">
                and t.salesdept = #{condition.salesdept}
            </if>
            <if test="condition.customerid != null">
                and t.customerid = #{condition.customerid}
            </if>
            <if test="condition.pcustomerid != null">
                and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
            </if>
            <if test="condition.customersort != null">
                and FIND_IN_SET(t.customersort,#{condition.customersort})
            </if>
        </trim>
        UNION ALL
		<![CDATA[
        SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t.brandid,t.branduser,t.branddept,t.supplieruser,t.supplierid,
        if(t.businessdate<#{condition.businessdate1},t.amount,0) AS inittotalreceiptamount,if(t.businessdate>=#{condition.businessdate1},t.amount,0) AS saleamount,
		0 AS tailamount,0 AS receiptamount,if(t.businessdate>=#{condition.businessdate1},1,0) AS billcount
		]]>
        FROM t_account_customer_push_balance t
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1 == 1">
                and (t.STATUS = '3' or t.STATUS = '4')
            </if>
			<if test="condition.businessdate2 != null">
                <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.salesuser != null">
                and t.salesuser = #{condition.salesuser}
            </if>
            <if test="condition.salesdept != null">
                and t.salesdept = #{condition.salesdept}
            </if>
            <if test="condition.customerid != null">
                and t.customerid = #{condition.customerid}
            </if>
            <if test="condition.pcustomerid != null">
                and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
            </if>
            <if test="condition.customersort != null">
                and FIND_IN_SET(t.customersort,#{condition.customersort})
            </if>
        </trim>
        UNION ALL
		<![CDATA[
        SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,'' as brandid,'' as branduser,'' as branddept,'' as supplieruser,'' as supplierid,
        if(t.businessdate<#{condition.businessdate1},t.amount,0) AS inittotalreceiptamount,if(t.businessdate>=#{condition.businessdate1},t.amount,0) AS saleamount,
		0 AS tailamount,0 AS receiptamount,if(t.businessdate>=#{condition.businessdate1},1,0) AS billcount
		]]>
        FROM t_account_begin_amount t
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1 == 1">
                and (t.STATUS = '3' or t.STATUS = '4')
            </if>
			<if test="condition.businessdate2 != null">
                <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.salesuser != null">
                and t.salesuser = #{condition.salesuser}
            </if>
            <if test="condition.salesdept != null">
                and t.salesdept = #{condition.salesdept}
            </if>
            <if test="condition.customerid != null">
                and t.customerid = #{condition.customerid}
            </if>
            <if test="condition.pcustomerid != null">
                and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
            </if>
            <if test="condition.customersort != null">
                and FIND_IN_SET(t.customersort,#{condition.customersort})
            </if>
        </trim>
        UNION ALL
		<![CDATA[
        SELECT t.customerid,t.pcustomerid,t1.customersort,t1.salesarea,t.salesdept,t.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,t1.supplierid,
        if(t.writeoffdate<#{condition.businessdate1},t.tailamount,0) AS inittotalreceiptamount,0 AS saleamount,
		if(t.writeoffdate>=#{condition.businessdate1},t.tailamount,0) AS tailamount,0 AS receiptamount,if(t.writeoffdate>=#{condition.businessdate1},1,0) AS billcount
		]]>
        FROM t_account_sales_invoice t
        LEFT JOIN t_account_sales_invoice_detail t1 ON t.id = t1.billid
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1 == 1">
                and t.status = '4'  and t.tailamount!=0
            </if>
			<if test="condition.businessdate2 != null">
                <![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.salesuser != null">
                and t.salesuser = #{condition.salesuser}
            </if>
            <if test="condition.salesdept != null">
                and t.salesdept = #{condition.salesdept}
            </if>
            <if test="condition.customerid != null">
                and t.customerid = #{condition.customerid}
            </if>
            <if test="condition.pcustomerid != null">
                and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
            </if>
            <if test="condition.customersort != null">
                and FIND_IN_SET(t1.customersort,#{condition.customersort})
            </if>
        </trim>
        GROUP BY t.id
        UNION ALL
		<![CDATA[
        SELECT t.customerid,t1.pid as pcustomerid,t1.customersort,t1.salesarea,t1.salesdeptid as salesdept,t1.salesuserid as salesuser,'' as brandid,'' as branduser,'' as branddept,'' as supplieruser,'' as supplierid,
      	 if(t.businessdate<#{condition.businessdate1},-t.amount,0) AS inittotalreceiptamount,0 AS saleamount,
      	 0 AS tailamount,if(t.businessdate>=#{condition.businessdate1},t.amount,0) AS receiptamount,1 AS billcount
		]]>
        FROM t_account_collection_order t
        LEFT JOIN t_base_sales_customer t1 ON t.customerid = t1.id
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1 == 1">
                and (t.status = '3' or t.status = '4')
            </if>
			 <if test="condition.businessdate2 != null">
                <![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.salesuser != null">
                and t1.salesuserid = #{condition.salesuser}
            </if>
            <if test="condition.salesdept != null">
                and t1.salesdeptid = #{condition.salesdept}
            </if>
            <if test="condition.customerid != null">
                and t.customerid = #{condition.customerid}
            </if>
            <if test="condition.pcustomerid != null">
                and (t.customerid = #{condition.pcustomerid} or t1.pid = #{condition.pcustomerid})
            </if>
            <if test="condition.customersort != null">
                and FIND_IN_SET(t1.customersort,#{condition.customersort})
            </if>
        </trim>
		UNION ALL
		<![CDATA[
        SELECT t1.customerid,t1.pcustomerid,t1.customersort,t1.salesarea,t.salesdept,t.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,t1.supplierid,
		if(t.writeoffdate<#{condition.businessdate1},-t1.taxamount,0) AS inittotalreceiptamount,0 AS saleamount,
		0 AS tailamount,if(t.writeoffdate>=#{condition.businessdate1},t1.taxamount,0) AS receiptamount,if(t.writeoffdate>=#{condition.businessdate1},1,0) AS billcount
		]]>
		FROM t_account_sales_invoice t
		LEFT JOIN t_base_sales_customer c on t.customerid=c.id
		LEFT JOIN t_account_sales_invoice_detail t1 ON t.id = t1.billid
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1 == 1">
              and c.islast='0' and t.status = '4'
            </if>
			<if test="condition.businessdate2 != null">
                <![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.salesuser != null">
                and t1.salesuser = #{condition.salesuser}
            </if>
            <if test="condition.salesdept != null">
                and t1.salesdept = #{condition.salesdept}
            </if>
            <if test="condition.customerid != null">
                and t1.customerid = #{condition.customerid}
            </if>
            <if test="condition.pcustomerid != null">
                and (t1.customerid = #{condition.pcustomerid} or t1.pcustomerid = #{condition.pcustomerid})
            </if>
            <if test="condition.customersort != null">
                and FIND_IN_SET(t1.customersort,#{condition.customersort})
            </if>
        </trim>
		UNION ALL
		<![CDATA[
        SELECT t.customerid,t.pcustomerid,t1.customersort,t1.salesarea,t.salesdept,t.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,t1.supplierid,
		if(t.writeoffdate<#{condition.businessdate1},t1.taxamount,0) AS inittotalreceiptamount,0 AS saleamount,
		0 AS tailamount,if(t.writeoffdate>=#{condition.businessdate1},-t1.taxamount,0) AS receiptamount,if(t.writeoffdate>=#{condition.businessdate1},1,0) AS billcount
		]]>
		FROM t_account_sales_invoice t
		LEFT JOIN t_base_sales_customer c on t.customerid=c.id
		LEFT JOIN t_account_sales_invoice_detail t1 ON t.id = t1.billid
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1 == 1">
              and c.islast='0' and t.status = '4'
            </if>
			<if test="condition.businessdate2 != null">
                <![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.salesuser != null">
                and t1.salesuser = #{condition.salesuser}
            </if>
            <if test="condition.salesdept != null">
                and t1.salesdept = #{condition.salesdept}
            </if>
            <if test="condition.customerid != null">
                and t.customerid = #{condition.customerid}
            </if>
            <if test="condition.pcustomerid != null">
                and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
            </if>
            <if test="condition.customersort != null">
                and FIND_IN_SET(t1.customersort,#{condition.customersort})
            </if>
        </trim>
        )
    </sql>
	<select id="getCustomerTotalReceiptReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		SELECT z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,
		SUM(z.billcount) as billcount,
		SUM(z.inittotalreceiptamount) as inittotalreceiptamount,
		SUM(z.saleamount) as saleamount,SUM(z.tailamount) as tailamount,SUM(z.receiptamount) as receiptamount,
		SUM(z.inittotalreceiptamount + z.saleamount + z.tailamount - z.receiptamount) as totalreceiptamount
		from <include refid="getCustomerTotalReceiptReportList_sql"/> z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
		</trim>
		GROUP BY z.customerid
		<![CDATA[HAVING sum(z.inittotalreceiptamount) <> 0 || sum(z.billcount) <> 0]]>
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="getCustomerTotalReceiptReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		SELECT count(1) from (
			SELECT z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,
			SUM(z.inittotalreceiptamount) as inittotalreceiptamount,
			SUM(z.saleamount) as saleamount,SUM(z.tailamount) as tailamount,SUM(z.receiptamount) as receiptamount,
			SUM(z.inittotalreceiptamount + z.saleamount + z.tailamount - z.receiptamount) as totalreceiptamount
			from <include refid="getCustomerTotalReceiptReportList_sql"/> z
			<trim prefix="where" prefixOverrides="and|or" >
				<include refid="common.Page_dataSql"/>
			</trim>
			GROUP BY z.customerid
			<![CDATA[HAVING sum(z.inittotalreceiptamount) <> 0 || sum(z.billcount) <> 0]]>
		)z
	</select>
	<select id="getCustomerTotalReceiptReportSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		SELECT SUM(z.inittotalreceiptamount) as inittotalreceiptamount,
		SUM(z.saleamount) as saleamount,SUM(z.tailamount) as tailamount,SUM(z.receiptamount) as receiptamount,
		SUM(z.inittotalreceiptamount + z.saleamount + z.tailamount - z.receiptamount) as totalreceiptamount
		from <include refid="getCustomerTotalReceiptReportList_sql"/> z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
		</trim>
	</select>
	<select id="getCustomerTotalReceiptReportDetailList" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		SELECT z.id,z.billtype,z.orderid,z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.businessdate,z.remark,
		sum(z.inittotalreceiptamount) as inittotalreceiptamount,
		SUM(z.saleamount) as saleamount,SUM(z.tailamount) as tailamount,SUM(z.receiptamount) as receiptamount,
		SUM(z.saleamount + z.tailamount - z.receiptamount) as totalreceiptamount
		from (
		SELECT '1' as billtype,t.id,t.saleorderid as orderid,t.businessdate,t.remark,t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,
		0 as inittotalreceiptamount,t1.taxamount AS saleamount,0 as tailamount,0 as receiptamount
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and (t.status = '3' or t.status = '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser = #{condition.salesuser}
			</if>
			<if test="condition.salesdept != null">
				and t.salesdept = #{condition.salesdept}
			</if>
			<if test="condition.customerid != null">
				and t.customerid = #{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
		</trim>
		UNION ALL
		SELECT '2' as billtype,t.id,t.orderid,t.businessdate,t.remark,t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,
		0 as inittotalreceiptamount,-t1.taxamount AS saleamount,0 as tailamount,0 as receiptamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and ischeck='1' AND (t.status = '3' or t.status = '4')
			</if>
			<if test="condition.businessdate1 != null">
				and  t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser = #{condition.salesuser}
			</if>
			<if test="condition.salesdept != null">
				and t.salesdept = #{condition.salesdept}
			</if>
			<if test="condition.customerid != null">
				and t.customerid = #{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
		</trim>
		UNION ALL
		SELECT '3' as billtype,t.id,'' as orderid,t.businessdate,t.remark,t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t.brandid,t.branduser,t.branddept,t.supplieruser,
		0 as inittotalreceiptamount,t.amount as saleamount,0 as tailamount,0 as receiptamount
		FROM t_account_customer_push_balance t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and (t.status = '3' or t.status = '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser = #{condition.salesuser}
			</if>
			<if test="condition.salesdept != null">
				and t.salesdept = #{condition.salesdept}
			</if>
			<if test="condition.customerid != null">
				and t.customerid = #{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
		</trim>
		UNION ALL
		SELECT '6' as billtype,t.id,'' as orderid,t.businessdate,t.remark,t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,'' as brandid,'' as branduser,'' as branddept,''as supplieruser,
		0 as inittotalreceiptamount,t.amount as saleamount,0 as tailamount,0 as receiptamount
		FROM t_account_begin_amount t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and (t.STATUS = '3' or t.STATUS = '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser = #{condition.salesuser}
			</if>
			<if test="condition.salesdept != null">
				and t.salesdept = #{condition.salesdept}
			</if>
			<if test="condition.customerid != null">
				and t.customerid = #{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
		</trim>
		UNION ALL
		SELECT '4' as billtype,t.id,'' as orderid,t.writeoffdate as businessdate,t.remark,t.customerid,t.pcustomerid,t1.customersort,t1.salesarea,t.salesdept,t.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,
		0 as inittotalreceiptamount,0 as saleamount,t.tailamount,0 as receiptamount
		FROM t_account_sales_invoice t
		LEFT JOIN t_account_sales_invoice_detail t1 ON t.id = t1.billid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and t.status = '4'
			</if>
			<if test="condition.businessdate1 != null">
				and t.writeoffdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser = #{condition.salesuser}
			</if>
			<if test="condition.salesdept != null">
				and t.salesdept = #{condition.salesdept}
			</if>
			<if test="condition.customerid != null">
				and t.customerid = #{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t1.customersort,#{condition.customersort})
			</if>
		</trim>
		GROUP BY t.id
		<![CDATA[HAVING t.tailamount <> 0]]>
		UNION ALL
		SELECT '5' as billtype,t.id,'' as orderid,t.businessdate,t.remark,t.customerid,t1.pid as pcustomerid,t1.customersort,t1.salesarea,t1.salesdeptid as salesdept,t1.salesuserid as salesuser,'' as brandid,'' as branduser,'' as branddept,'' as supplieruser,
		0 as inittotalreceiptamount,0 as saleamount,0 as tailamount,t.amount as receiptamount
		FROM t_account_collection_order t
		LEFT JOIN t_base_sales_customer t1 ON t.customerid = t1.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and (t.status = '3' or t.status = '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.salesuser != null">
				and t1.salesuserid = #{condition.salesuser}
			</if>
			<if test="condition.salesdept != null">
				and t1.salesdeptid = #{condition.salesdept}
			</if>
			<if test="condition.customerid != null">
				and t.customerid = #{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and (t.customerid = #{condition.pcustomerid} or t1.pid = #{condition.pcustomerid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t1.customersort,#{condition.customersort})
			</if>
		</trim>
		UNION ALL
		SELECT '5' as billtype,t.id,'' as orderid,t.writeoffdate as businessdate,t.remark,t1.customerid,t1.pcustomerid,t1.customersort,t1.salesarea,t.salesdept,t.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,
		0 as inittotalreceiptamount,0 as saleamount,0 as tailamount,sum(t1.taxamount) as receiptamount
		FROM t_account_sales_invoice t
		LEFT JOIN t_base_sales_customer c on t.customerid=c.id
		LEFT JOIN t_account_sales_invoice_detail t1 ON t.id = t1.billid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and c.islast='0' and t.status = '4'
			</if>
			<if test="condition.businessdate1 != null">
				and t.writeoffdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser = #{condition.salesuser}
			</if>
			<if test="condition.salesdept != null">
				and t.salesdept = #{condition.salesdept}
			</if>
			<if test="condition.customerid != null">
				and t1.customerid = #{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and (t1.customerid = #{condition.pcustomerid} or t1.pcustomerid = #{condition.pcustomerid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t1.customersort,#{condition.customersort})
			</if>
		</trim>
		GROUP BY t.id
		UNION ALL
		SELECT '5' as billtype,t.id,'' as orderid,t.writeoffdate as businessdate,t.remark,t.customerid,t.pcustomerid,t1.customersort,t1.salesarea,t.salesdept,t.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,
		0 as inittotalreceiptamount,0 as saleamount,0 as tailamount,sum(-t1.taxamount) as receiptamount
		FROM t_account_sales_invoice t
		LEFT JOIN t_base_sales_customer c on t.customerid=c.id
		LEFT JOIN t_account_sales_invoice_detail t1 ON t.id = t1.billid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and c.islast='0' and t.status = '4'
			</if>
			<if test="condition.businessdate1 != null">
				and t.writeoffdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser = #{condition.salesuser}
			</if>
			<if test="condition.salesdept != null">
				and t.salesdept = #{condition.salesdept}
			</if>
			<if test="condition.customerid != null">
				and t.customerid = #{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t1.customersort,#{condition.customersort})
			</if>
		</trim>
		GROUP BY t.id
		)z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
		</trim>
		GROUP BY z.id
		order by z.businessdate,z.id ASC
	</select>
	<select id="getCustomerTotalReceiptReportInittotalreceiptamount" parameterType="com.hd.agent.common.util.PageMap" resultType="java.math.BigDecimal">
		SELECT SUM(z.inittotalreceiptamount) AS inittotalreceiptamount from (
			SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,
			t1.taxamount as inittotalreceiptamount,0 AS saleamount,0 as tailamount,0 as receiptamount
			FROM t_storage_saleout t
			RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="1 == 1">
					and (t.status = '3' or t.status = '4')
				</if>
				<if test="condition.businessdate1 != null">
					<![CDATA[and t.businessdate < #{condition.businessdate1}]]>
				</if>
				<if test="condition.salesuser != null">
					and t.salesuser = #{condition.salesuser}
				</if>
				<if test="condition.salesdept != null">
					and t.salesdept = #{condition.salesdept}
				</if>
				<if test="condition.customerid != null">
					and t.customerid = #{condition.customerid}
				</if>
				<if test="condition.pcustomerid != null">
					and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
				</if>
				<if test="condition.customersort != null">
					and FIND_IN_SET(t.customersort,#{condition.customersort})
				</if>
			</trim>
			UNION ALL
			SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,
			-t1.taxamount as inittotalreceiptamount,0 AS saleamount,0 as tailamount,0 as receiptamount
			FROM t_storage_salereject_enter t
			RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="1 == 1">
					and ischeck='1' AND (t.status = '3' or t.status = '4')
				</if>
				<if test="condition.businessdate1 != null">
					<![CDATA[and t.businessdate < #{condition.businessdate1}]]>
				</if>
				<if test="condition.salesuser != null">
					and t.salesuser = #{condition.salesuser}
				</if>
				<if test="condition.salesdept != null">
					and t.salesdept = #{condition.salesdept}
				</if>
				<if test="condition.customerid != null">
					and t.customerid = #{condition.customerid}
				</if>
				<if test="condition.pcustomerid != null">
					and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
				</if>
				<if test="condition.customersort != null">
					and FIND_IN_SET(t.customersort,#{condition.customersort})
				</if>
			</trim>
			UNION ALL
			SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t.brandid,t.branduser,t.branddept,t.supplieruser,
			t.amount as inittotalreceiptamount,0 as saleamount,0 as tailamount,0 as receiptamount
			FROM t_account_customer_push_balance t
			<trim prefix="where" prefixOverrides="and|or">
				<if test="1 == 1">
					and (t.status = '3' or t.status = '4')
				</if>
				<if test="condition.businessdate1 != null">
					<![CDATA[and t.businessdate < #{condition.businessdate1}]]>
				</if>
				<if test="condition.salesuser != null">
					and t.salesuser = #{condition.salesuser}
				</if>
				<if test="condition.salesdept != null">
					and t.salesdept = #{condition.salesdept}
				</if>
				<if test="condition.customerid != null">
					and t.customerid = #{condition.customerid}
				</if>
				<if test="condition.pcustomerid != null">
					and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
				</if>
				<if test="condition.customersort != null">
					and FIND_IN_SET(t.customersort,#{condition.customersort})
				</if>
			</trim>
			UNION ALL
			SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,'' as brandid,'' as branduser,'' as branddept,'' as supplieruser,
			t.amount as inittotalreceiptamount,0 as saleamount,0 as tailamount,0 as receiptamount
			FROM t_account_begin_amount t
			<trim prefix="where" prefixOverrides="and|or">
				<if test="1 == 1">
					and (t.STATUS = '3' or t.STATUS = '4')
				</if>
				<if test="condition.businessdate1 != null">
					<![CDATA[and t.businessdate < #{condition.businessdate1}]]>
				</if>
				<if test="condition.salesuser != null">
					and t.salesuser = #{condition.salesuser}
				</if>
				<if test="condition.salesdept != null">
					and t.salesdept = #{condition.salesdept}
				</if>
				<if test="condition.customerid != null">
					and t.customerid = #{condition.customerid}
				</if>
				<if test="condition.pcustomerid != null">
					and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
				</if>
				<if test="condition.customersort != null">
					and FIND_IN_SET(t.customersort,#{condition.customersort})
				</if>
			</trim>
			UNION ALL
			SELECT t.customerid,t.pcustomerid,t1.customersort,t1.salesarea,t1.salesdept,t1.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,
			t.tailamount as inittotalreceiptamount,0 as saleamount,0 as tailamount,0 as receiptamount
			FROM t_account_sales_invoice t
			LEFT JOIN t_account_sales_invoice_detail t1 ON t.id = t1.billid
			<trim prefix="where" prefixOverrides="and|or">
				<if test="1 == 1">
					and t.status = '4'
				</if>
				<if test="condition.businessdate1 != null">
					<![CDATA[and t.writeoffdate < #{condition.businessdate1}]]>
				</if>
				<if test="condition.salesuser != null">
					and t1.salesuser = #{condition.salesuser}
				</if>
				<if test="condition.salesdept != null">
					and t1.salesdept = #{condition.salesdept}
				</if>
				<if test="condition.customerid != null">
					and t.customerid = #{condition.customerid}
				</if>
				<if test="condition.pcustomerid != null">
					and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
				</if>
				<if test="condition.customersort != null">
					and FIND_IN_SET(t1.customersort,#{condition.customersort})
				</if>
			</trim>
			GROUP BY t.id
			<![CDATA[HAVING t.tailamount <> 0]]>
			UNION ALL
			SELECT t.customerid,t1.pid as pcustomerid,t1.customersort,t1.salesarea,t1.salesdeptid as salesdept,t1.salesuserid as salesuser,'' as brandid,'' as branduser,'' as branddept,'' as supplieruser,
			-t.amount as inittotalreceiptamount,0 as saleamount,0 as tailamount,0 as receiptamount
			FROM t_account_collection_order t
			LEFT JOIN t_base_sales_customer t1 ON t.customerid = t1.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="1 == 1">
					and (t.status = '3' or t.status = '4')
				</if>
				<if test="condition.businessdate1 != null">
					<![CDATA[and t.businessdate < #{condition.businessdate1}]]>
				</if>
				<if test="condition.salesuser != null">
					and t1.salesuserid = #{condition.salesuser}
				</if>
				<if test="condition.salesdept != null">
					and t1.salesdeptid = #{condition.salesdept}
				</if>
				<if test="condition.customerid != null">
					and t.customerid = #{condition.customerid}
				</if>
				<if test="condition.pcustomerid != null">
					and (t.customerid = #{condition.pcustomerid} or t1.pid = #{condition.pcustomerid})
				</if>
				<if test="condition.customersort != null">
					and FIND_IN_SET(t1.customersort,#{condition.customersort})
				</if>
			</trim>
			UNION ALL
			SELECT t1.customerid,t.pcustomerid,t1.customersort,t1.salesarea,t1.salesdept,t1.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,
			-t1.taxamount as inittotalreceiptamount,0 as saleamount,0 as tailamount,0 as receiptamount
			FROM t_account_sales_invoice t
			LEFT JOIN t_base_sales_customer c on t.customerid=c.id
			LEFT JOIN t_account_sales_invoice_detail t1 ON t.id = t1.billid
			<trim prefix="where" prefixOverrides="and|or">
				<if test="1 == 1">
					and c.islast='0' and t.status = '4'
				</if>
				<if test="condition.businessdate1 != null">
					<![CDATA[and t.writeoffdate < #{condition.businessdate1}]]>
				</if>
				<if test="condition.salesuser != null">
					and t1.salesuser = #{condition.salesuser}
				</if>
				<if test="condition.salesdept != null">
					and t1.salesdept = #{condition.salesdept}
				</if>
				<if test="condition.customerid != null">
					and t1.customerid = #{condition.customerid}
				</if>
				<if test="condition.pcustomerid != null">
					and (t1.customerid = #{condition.pcustomerid} or t1.pcustomerid = #{condition.pcustomerid})
				</if>
				<if test="condition.customersort != null">
					and FIND_IN_SET(t1.customersort,#{condition.customersort})
				</if>
			</trim>
			UNION ALL
			SELECT t1.customerid,t.pcustomerid,t1.customersort,t1.salesarea,t1.salesdept,t1.salesuser,t1.brandid,t1.branduser,t1.branddept,t1.supplieruser,
			t1.taxamount as inittotalreceiptamount,0 as saleamount,0 as tailamount,0 as receiptamount
			FROM t_account_sales_invoice t
			LEFT JOIN t_base_sales_customer c on t.customerid=c.id
			LEFT JOIN t_account_sales_invoice_detail t1 ON t.id = t1.billid
			<trim prefix="where" prefixOverrides="and|or">
				<if test="1 == 1">
					and c.islast='0' and t.status = '4'
				</if>
				<if test="condition.businessdate1 != null">
					<![CDATA[and t.writeoffdate < #{condition.businessdate1}]]>
				</if>
				<if test="condition.salesuser != null">
					and t1.salesuser = #{condition.salesuser}
				</if>
				<if test="condition.salesdept != null">
					and t1.salesdept = #{condition.salesdept}
				</if>
				<if test="condition.customerid != null">
					and t.customerid = #{condition.customerid}
				</if>
				<if test="condition.pcustomerid != null">
					and (t.customerid = #{condition.pcustomerid} or t.pcustomerid = #{condition.pcustomerid})
				</if>
				<if test="condition.customersort != null">
					and FIND_IN_SET(t1.customersort,#{condition.customersort})
				</if>
			</trim>
		)z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
		</trim>
	</select>
	<select id="getCustomerSalesAmountByQueryMapForThird" parameterType="java.util.Map" resultType="map">
		select z.customerid,z.bank,sum(z.relateamount) as amount,z.id from(<include refid="CustomerSalesAmount_sql"/> ) z
		GROUP BY z.id
	</select>
    <select id="getSupplierPassDueListDataRSCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
        SELECT COUNT(1)  FROM t_report_paymentdays_set t WHERE t.adduserid=#{condition.sysuserid} and t.type=#{condition.type}
    </select>
</mapper>
