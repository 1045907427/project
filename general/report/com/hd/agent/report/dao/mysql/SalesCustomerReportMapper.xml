<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hd.agent.report.dao.SalesCustomerReportMapper">
	<sql id="temp_sales_report">
		(select * from
		(
		SELECT
		y.customerid,c.pid as pcustomerid,c.salesdeptid as deptid,c.salesarea as salesarea,c.salesuserid as salesuserid,
		y.goodsid,y.brand,b.deptid as branddept,y.unitid,y.costprice,y.ordernum,y.orderamount,y.ordernotaxamount,
		y.initsendnum,y.initsendamount,y.initsendnotaxamount,y.sendnum,y.sendamount,y.sendnotaxamount,
		y.returnnum,y.returnamount,y.returnnotaxamount,y.directreturnnum,y.directreturnamount,y.directreturnnotaxamount,
		y.checkreturnnum,y.checkreturnamount,y.checkreturnnotaxamount,(y.sendnum - y.returnnum) * y.costprice AS costamount,
		y.writeoffamount,y.costwriteoffamount
		FROM
		(
		select z.customerid,z.goodsid,z.brand,z.unitid,z.unitname,z.costprice,
		sum(z.ordernum) as ordernum,sum(z.orderamount) as orderamount,sum(z.ordernotaxamount) as ordernotaxamount,
		sum(z.initsendnum) as initsendnum,sum(z.initsendamount) as initsendamount,sum(z.initsendnotaxamount) as initsendnotaxamount,
		sum(z.sendnum) as sendnum,sum(z.sendamount) as sendamount,sum(z.sendnotaxamount) as sendnotaxamount,
		sum(z.returnnum) as returnnum,sum(z.returnamount) as returnamount,sum(z.returnnotaxamount) as returnnotaxamount,
		sum(z.directreturnnum) as directreturnnum,sum(z.directreturnamount) as directreturnamount,sum(z.directreturnnotaxamount) as directreturnnotaxamount,
		sum(z.checkreturnnum) as checkreturnnum,sum(z.checkreturnamount) as checkreturnamount,sum(z.checkreturnnotaxamount) as checkreturnnotaxamount,
		sum(z.writeoffamount) as writeoffamount,sum(z.costwriteoffamount) as costwriteoffamount
		from(
		select t.customerid,t1.goodsid,t1.brandid as brand,t1.unitid,t1.unitname,t1.costprice,
		t1.unitnum as ordernum,t1.taxamount as orderamount,t1.notaxamount as ordernotaxamount,
		0 as initsendnum,0 as initsendamount,0 as initsendnotaxamount,
		0 as sendnum,0 as sendamount,0 as sendnotaxamount,
		0 as returnnum,0 as returnamount,0 as returnnotaxamount,
		0 as directreturnnum,0 as directreturnamount,0 as directreturnnotaxamount,
		0 as checkreturnnum,0 as checkreturnamount,0 as checkreturnnotaxamount,
		0 as writeoffamount,0 as costwriteoffamount
		from t_sales_order t
		RIGHT JOIN t_sales_order_detail t1 on t.id=t1.orderid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null" >
				and t1.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brand != null" >
				and t1.brandid = #{condition.brand}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = #{condition.customerid}
			</if>
			<if test="1==1" >
				and  t.status in('3','4')
			</if>
		</trim>
		UNION ALL
		select t.customerid,t1.goodsid,t1.brandid as brand,t1.unitid,t1.unitname,t1.costprice,
		t1.unitnum as ordernum,t1.taxamount as orderamount,t1.notaxamount as ordernotaxamount,
		0 as initsendnum,0 as initsendamount,0 as initsendnotaxamount,
		0 as sendnum,0 as sendamount,0 as sendnotaxamount,
		0 as returnnum,0 as returnamount,0 as returnnotaxamount,
		0 as directreturnnum,0 as directreturnamount,0 as directreturnnotaxamount,
		0 as checkreturnnum,0 as checkreturnamount,0 as checkreturnnotaxamount,
		0 as writeoffamount,0 as costwriteoffamount
		from t_sales_order_car t
		RIGHT JOIN t_sales_order_car_detail t1 on t.id=t1.orderid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null" >
				and t1.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brand != null" >
				and t1.brandid = #{condition.brand}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = #{condition.customerid}
			</if>
			<if test="1==1" >
				and  t.status in('3','4')
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t1.goodsid,t1.brandid as brand,t1.unitid,t1.unitname,t1.costprice,
		0 as ordernum,0 as orderamount,0 as ordernotaxamount,
		t1.initnum as initsendnum,t1.inittaxamount as initsendamount,t1.initnotaxamount as initsendnotaxamount,
		t1.unitnum as sendnum,t1.taxamount as sendamount,t1.notaxamount as sendnotaxamount,
		0 as returnnum,0 as returnamount,0 as returnnotaxamount,
		0 as directreturnnum,0 as directreturnamount,0 as directreturnnotaxamount,
		0 as checkreturnnum,0 as checkreturnamount,0 as checkreturnnotaxamount,
		0 as writeoffamount,0 as costwriteoffamount
		FROM t_storage_saleout t
		right join t_storage_saleout_detail t1 on t1.saleoutid=t.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null" >
				and t1.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brand != null" >
				and t1.brandid = #{condition.brand}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = #{condition.customerid}
			</if>
			<if test="1==1" >
				and  t.status in('3','4')
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t1.goodsid,t1.brandid as brand,t1.unitid,t1.unitname,t1.costprice,
		0 as ordernum,0 as orderamount,0 as ordernotaxamount,
		0 as initsendnum,0 as initsendamount,0 as initsendnotaxamount,
		0 as sendnum,0 as sendamount,0 as sendnotaxamount,
		t1.unitnum as returnnum,t1.taxamount as returnamount,t1.notaxamount as returnnotaxamount,
		t1.unitnum as directreturnnum,t1.taxamount as directreturnamount,t1.notaxamount as directreturnnotaxamount,
		0 as checkreturnnum,0 as checkreturnamount,0 as checkreturnnotaxamount,
		0 as writeoffamount,0 as costwriteoffamount
		FROM t_storage_salereject_enter t
		right join t_storage_salereject_enter_detail t1 on t1.salerejectid=t.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.brand != null" >
				and t1.brandid = #{condition.brand}
			</if>
			<if test="condition.goodsid != null" >
				and t1.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = #{condition.customerid}
			</if>
			<if test="1==1" >
				and t.sourcetype='2' and t.status in('3','4')
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t1.goodsid,t1.brandid as brand,t1.unitid,t1.unitname,t1.costprice,
		0 as ordernum,0 as orderamount,0 as ordernotaxamount,
		0 as initsendnum,0 as initsendamount,0 as initsendnotaxamount,
		0 as sendnum,0 as sendamount,0 as sendnotaxamount,
		t1.unitnum as returnnum,t1.taxamount as returnamount,t1.notaxamount as returnnotaxamount,
		0 as directreturnnum,0 as directreturnamount,0 as directreturnnotaxamount,
		t1.unitnum as checkreturnnum,t1.taxamount as checkreturnamount,t1.notaxamount as checkreturnnotaxamount,
		0 as writeoffamount,0 as costwriteoffamount
		FROM t_storage_salereject_enter t
		right join t_storage_salereject_enter_detail t1 on t1.salerejectid=t.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null" >
				and t1.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brand != null" >
				and t1.brandid = #{condition.brand}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = #{condition.customerid}
			</if>
			<if test="1==1" >
				and t.sourcetype='1' and t.status in('3','4')
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid, t.brandid AS goodsid, t.brandid as brand, '' AS unitid, '' AS unitname, 0 as costprice,
		0 AS ordernum, 0 AS orderamount, 0 AS ordernotaxamount, 0 AS initsendnum, 0 AS initsendamount, 0 AS initsendnotaxamount,
		0 AS sendnum, t.amount AS sendamount, 0 AS sendnotaxamount, 0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS directreturnnum, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
		0 AS checkreturnnum, 0 AS checkreturnamount, 0 AS checkreturnnotaxamount,
		0 as writeoffamount,0 as costwriteoffamount
		FROM t_account_customer_push_balance t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null" >
				and 1!=1
			</if>
			<if test="condition.brand != null" >
				and t.brand = #{condition.brand}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = #{condition.customerid}
			</if>
			<if test="1==1" >
				and t.status in('3','4')
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t1.goodsid,t1.brandid AS brand,t1.unitid,t1.unitname,t1.costprice,
		0 AS ordernum, 0 AS orderamount, 0 AS ordernotaxamount, 0 AS initsendnum, 0 AS initsendamount, 0 AS initsendnotaxamount,
		0 AS sendnum, 0 AS sendamount, 0 AS sendnotaxamount, 0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS directreturnnum, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
		0 AS checkreturnnum, 0 AS checkreturnamount, 0 AS checkreturnnotaxamount,
		t1.receipttaxamount as writeoffamount,t1.costprice*t1.receiptnum as costwriteoffamount
		from t_sales_receipt t
		RIGHT JOIN t_sales_receipt_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null" >
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.brand != null" >
				and t1.brandid = #{condition.brand}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = #{condition.customerid}
			</if>
			<if test="1==1" >
				and t1.iswriteoff='1' and t.status in('3','4')
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t1.goodsid,t1.brandid AS brand,t1.unitid,t1.unitname,t1.costprice,
		0 AS ordernum, 0 AS orderamount, 0 AS ordernotaxamount, 0 AS initsendnum, 0 AS initsendamount, 0 AS initsendnotaxamount,
		0 AS sendnum, 0 AS sendamount, 0 AS sendnotaxamount, 0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS directreturnnum, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
		0 AS checkreturnnum, 0 AS checkreturnamount, 0 AS checkreturnnotaxamount,
		-t1.taxamount as writeoffamount,-t1.costprice*t1.unitnum as costwriteoffamount
		from t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null" >
				and t1.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brand != null" >
				and t1.brandid = #{condition.brand}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = #{condition.customerid}
			</if>
			<if test="1==1" >
				and t1.iswriteoff='1' and t.sourcetype='1' and t.status in('3','4')
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid, t.brandid AS goodsid, t.brandid as brand, '' AS unitid, '' AS unitname, 0 as costprice,
		0 AS ordernum, 0 AS orderamount, 0 AS ordernotaxamount, 0 AS initsendnum, 0 AS initsendamount, 0 AS initsendnotaxamount,
		0 AS sendnum, 0 AS sendamount, 0 AS sendnotaxamount, 0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS directreturnnum, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
		0 AS checkreturnnum, 0 AS checkreturnamount, 0 AS checkreturnnotaxamount,
		t.amount as writeoffamount,0 as costwriteoffamount
		FROM t_account_customer_push_balance t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null" >
				and 1!=1
			</if>
			<if test="condition.brand != null" >
				and t.brand = #{condition.brand}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = #{condition.customerid}
			</if>
			<if test="1==1" >
				and t.iswriteoff='1' and t.status in('3','4')
			</if>
		</trim>
		) z GROUP BY z.customerid,z.goodsid
		)y
		LEFT JOIN t_base_goods_brand b on y.brand=b.id
		inner join t_base_sales_customer c on y.customerid=c.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.pcustomerid != null" >
				and c.pid = #{condition.pcustomerid}
			</if>
			<if test="condition.deptid != null" >
				and c.salesdeptid like CONCAT(#{condition.deptid},'%')
			</if>
			<if test="condition.salesarea != null" >
				and c.salesarea like CONCAT(#{condition.salesarea},'%')
			</if>
			<if test="condition.salesuser != null" >
				<choose>
					<when test="condition.salesuser == 0">
						and (c.salesuserid ='' or c.salesuserid is null)
					</when>
					<otherwise>
						and c.salesuserid =#{condition.salesuser}
					</otherwise>
				</choose>
			</if>
		</trim>
		) sdata
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
		)
	</sql>

	<select id="showSalesCustomerReportDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesCustomerReport">
		select t.customerid,t.pcustomerid,t.deptid,t.salesarea,
		sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
		group by t.customerid
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="showSalesCustomerReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		select t.customerid,t.pcustomerid,t.deptid,t.salesarea,
		sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
		group by t.customerid
		) x
	</select>

	<select id="getSalesCustomerReportSumData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesCustomerReport">
		select t.customerid,t.pcustomerid,
		sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
	</select>

	<select id="getSalesDeptReportDataBySalesDeptList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesDepartmentReport">
		SELECT * FROM (
		select t.deptid as salesdept, sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		FROM <include refid="temp_sales_report"/> t
		GROUP BY t.deptid
		)z
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="getSalesDeptReportDataBySalesDeptCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		SELECT count(1) FROM (
		select t.deptid
		FROM <include refid="temp_sales_report"/> t
		GROUP BY t.deptid
		)z
	</select>
	<select id="getSalesDeptReportBySalesDeptSumData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesDepartmentReport">
		select sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
	</select>
	<select id="getSalesuserReportDataListBySalesUser" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesUserReport">
		SELECT * FROM (
		SELECT t.salesuserid as salesuser, sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		FROM <include refid="temp_sales_report"/> t
		GROUP BY t.salesuserid
		)z
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="getSalesuserReportDataCountBySalesUser" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		SELECT count(1) FROM (
		SELECT t.salesuserid as salesuser
		FROM <include refid="temp_sales_report"/> t
		GROUP BY t.salesuserid
		)z
	</select>
	<select id="getSalesuserReportSumDataBySalesUser" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesUserReport">
		select sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
	</select>
	<select id="getSalesBranduserReportDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesBranduserReport">
		select * from (
		select t1.personid as branduser, sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
		inner join t_base_personnel_brandandcustomer t1 on t.customerid=t1.customerid and t.brand = t1.brandid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.branduserid != null" >
				and t1.personid = #{condition.branduserid}
			</if>
		</trim>
		group by t1.personid
		)z
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="getSalesBranduserReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		select  t1.personid as branduser,sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
		inner join t_base_personnel_brandandcustomer t1 on t.customerid=t1.customerid and t.brand = t1.brandid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.branduserid != null" >
				and t1.personid = #{condition.branduserid}
			</if>
		</trim>
		group by t1.personid
		)z
	</select>
	<!-- 获取按品牌业务员销售情况合计数据 -->
	<select id="getSalesBranduserReportSumData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesBranduserReport">
		select sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
		inner join t_base_personnel_brandandcustomer t1 on t.customerid=t1.customerid and t.brand = t1.brandid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.branduserid != null" >
				and t1.personid = #{condition.branduserid}
			</if>
		</trim>
	</select>

	<select id="getBranduserReportDetailListByBranduser" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesBranduserDetailReport">
		select
		id,t1.personid as branduser,brand as brandid, sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
		inner join t_base_personnel_brandandcustomer t1 on t.customerid=t1.customerid and t.brand = t1.brandid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.branduser != null" >
				and t1.personid = #{condition.branduser}
			</if>
		</trim>
		GROUP BY t.brand
	</select>
	<select id="showSalesUserGoodsReportDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesGoodsReport">
		select t.customerid,t.goodsid,t.pcustomerid,t.deptid,t.salesarea,
		sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
		group by goodsid
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="showSalesUserGoodsReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		select t.customerid,t.goodsid,t.pcustomerid,t.deptid,t.salesarea,
		sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
		group by goodsid
		) t
	</select>
	<select id="showSalesUserCustomerGoodsReportDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesGoodsReport">
		select t.* from <include refid="temp_sales_report"/> t
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="showSalesUserCustomerGoodsReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from <include refid="temp_sales_report"/> t
	</select>
	<select id="showSalesDeptBrandReportDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesBrandReport">
		select t.customerid,t.goodsid,t.brand,t.pcustomerid,t.deptid,t.salesarea,
		sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
		group by t.brand
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="showSalesDeptBrandReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		select t.customerid,t.goodsid,t.brand,t.pcustomerid,t.deptid,t.salesarea,
		sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
		group by t.brand
		) x
	</select>
	<select id="showSalesBranduserDetialListByBrand" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesBrandReport">
		select t.customerid,t.goodsid,t.brand,t.pcustomerid,t.deptid,t.salesarea,
		sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
		inner join t_base_personnel_brandandcustomer t1 on t.customerid=t1.customerid and t.brand = t1.brandid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.branduserid != null" >
				and t1.personid = #{condition.branduserid}
			</if>
		</trim>
		group by t.brand
		<include refid="common.Page_limit"/>
	</select>
	<select id="showSalesBranduserDetialCountByBrand" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from(
		select t.customerid,t.goodsid,t.brand,t.pcustomerid,t.deptid,t.salesarea,
		sum(t.ordernum) as ordernum, sum(t.orderamount) as orderamount, sum(t.ordernotaxamount) as ordernotaxamount,
		sum(t.initsendnum) as initsendnum, sum(t.initsendamount) as initsendamount, sum(t.initsendnotaxamount) as initsendnotaxamount,
		SUM(t.sendnum) AS sendnum, SUM(t.sendamount) AS sendamount, SUM(t.sendnotaxamount) AS sendnotaxamount,
		SUM(t.returnnum) AS returnnum, SUM(t.returnamount) AS returnamount, SUM(t.returnnotaxamount) AS returnnotaxamount,
		SUM(t.directreturnnum) AS directreturnnum, SUM(t.directreturnamount) AS directreturnamount, SUM(t.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(t.checkreturnnum) AS checkreturnnum, SUM(t.checkreturnamount) AS checkreturnamount, SUM(t.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(t.costamount) AS costamount,sum(t.writeoffamount) as writeoffamount,sum(t.costwriteoffamount) as costwriteoffamount
		from <include refid="temp_sales_report"/> t
		inner join t_base_personnel_brandandcustomer t1 on t.customerid=t1.customerid and t.brand = t1.brandid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.branduserid != null" >
				and t1.personid = #{condition.branduserid}
			</if>
		</trim>
		group by t.brand
		)x
	</select>
	<sql id="query_sql">
		<trim prefixOverrides="and|or">
			<if test="1==1">
				1=1
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= ${condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= ${condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null" >
				and t1.goodsid = ${condition.goodsid}
			</if>
			<if test="condition.brand != null" >
				and t1.brandid = ${condition.brand}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = ${condition.customerid}
			</if>
		</trim>
	</sql>


	<sql id="showSalesDeptReportData_sql">
		(
		SELECT
		z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.goodssort,z.supplierid,z.adduserid,z.addusername,z.branduserdept as branduserdept ,
		z.goodsid,z.brandid,z.branduser,z.supplieruser,z.branddept,z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice as price,z.costprice,
		SUM(z.ordernum) AS ordernum,SUM(z.ordertotalbox) AS ordertotalbox,SUM(z.orderamount) AS orderamount,SUM(z.ordernotaxamount) AS ordernotaxamount,
		SUM(z.initsendnum) AS initsendnum,SUM(z.initsendtotalbox) AS initsendtotalbox,SUM(z.initsendamount) AS initsendamount,SUM(z.initsendnotaxamount) AS initsendnotaxamount,
		SUM(z.sendnum) AS sendnum,SUM(z.sendtotalbox) AS sendtotalbox,SUM(z.sendamount) AS sendamount,SUM(z.sendnotaxamount) AS sendnotaxamount,sum(z.sendcostamount) as sendcostamount,
		SUM(z.returnnum) AS returnnum,SUM(z.returntotalbox) AS returntotalbox,SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.directreturnnum) AS directreturnnum,SUM(z.directreturntotalbox) AS directreturntotalbox,SUM(z.directreturnamount) AS directreturnamount,SUM(z.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(z.checkreturnnum) AS checkreturnnum,SUM(z.checkreturntotalbox) AS checkreturntotalbox,SUM(z.checkreturnamount) AS checkreturnamount,SUM(z.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(z.costamount) as costamount,sum(z.pushbalanceamount) as pushbalanceamount,sum(z.pushbalancenotaxamount) as pushbalancenotaxamount
		FROM
		(
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(p.belongdeptid,'') as branduserdept ,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		t1.unitnum AS ordernum,t1.totalbox as ordertotalbox,t1.taxamount AS orderamount,t1.notaxamount AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount
		FROM t_sales_order t
		RIGHT JOIN t_sales_order_detail t1 ON t.id = t1.orderid
		LEFT JOIN t_base_personnel p on p.id = t1.branduser
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(p.belongdeptid,'') as branduserdept ,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		t1.unitnum AS initsendnum,t1.totalbox as initsendtotalbox,t1.taxamount AS initsendamount,t1.notaxamount AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount
		FROM t_sales_dispatchbill t
		RIGHT JOIN t_sales_dispatchbill_detail t1 ON t.id = t1.billid
		LEFT JOIN t_base_personnel p on p.id = t1.branduser
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(p.belongdeptid,'') as branduserdept ,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		t1.unitnum AS sendnum,t1.totalbox as sendtotalbox,t1.taxamount AS sendamount,t1.notaxamount AS sendnotaxamount,t1.unitnum*t1.costprice as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		LEFT JOIN t_base_personnel p on p.id = t1.branduser
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(p.belongdeptid,'') as branduserdept ,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		t1.unitnum AS returnnum,t1.totalbox as returntotalbox,t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,
		t1.unitnum AS directreturnnum,t1.totalbox as directreturntotalbox,t1.taxamount AS directreturnamount,t1.notaxamount AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		LEFT JOIN t_base_personnel p on p.id = t1.branduser
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '2'
					AND t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '2'
					AND t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>

		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(p.belongdeptid,'') as branduserdept ,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice, t1.costprice,
		0 AS ordernum,0 as ordertotalbox, 0 AS orderamount, 0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox, 0 AS initsendamount, 0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox, 0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
		t1.unitnum AS returnnum,t1.totalbox as returntotalbox, t1.taxamount AS returnamount, t1.notaxamount AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
		t1.unitnum AS checkreturnnum,t1.totalbox as checkreturntotalbox, t1.taxamount AS checkreturnamount, t1.notaxamount AS checkreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		LEFT JOIN t_base_personnel p on p.id = t1.branduser
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '1'
					AND t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '1'
					AND t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>

		<if test="condition.goodssort == null   and condition.goodstype == null and condition.goodsid==null" >
			UNION ALL
			SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
			'' as goodssort,IFNULL(t.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(p.belongdeptid,'') as branduserdept ,
			IFNULL(t.brandid,'') AS goodsid,IFNULL(t.brandid,'') as brandid,IFNULL(t.branduser,'') as branduser,IFNULL(t.supplieruser,'') as supplieruser,IFNULL(t.branddept,'') as branddept,
			'' AS unitid, '' AS unitname,'' as auxunitid,'' as auxunitname,0 as taxprice, 0 AS costprice,
			0 AS ordernum,0 as ordertotalbox, 0 AS orderamount, 0 AS ordernotaxamount,
			0 AS initsendnum,0 as initsendtotalbox, 0 AS initsendamount, 0 AS initsendnotaxamount,
			0 AS sendnum,0 as sendtotalbox, 0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
			0 AS returnnum,0 as returntotalbox, 0 AS returnamount, 0 AS returnnotaxamount,
			0 AS directreturnnum,0 as directreturntotalbox, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
			0 AS checkreturnnum,0 as checkreturntotalbox, 0 AS checkreturnamount, 0 AS checkreturnnotaxamount,
			0 as costamount,t.amount as pushbalanceamount,t.notaxamount as pushbalancenotaxamount
			FROM t_account_customer_push_balance t
			LEFT JOIN t_base_personnel p on p.id = t.branduser
			<trim prefix="where" prefixOverrides="and|or">
				${condition.query_sql_push}
				AND t.STATUS IN ('3', '4')
			</trim>
		</if>
		)z
		<if test="dataSql  != '' " >
			<trim prefix="where" prefixOverrides="and|or">
				<include refid="common.Page_querySql"/>
				<include refid="common.Page_dataSql"/>
			</trim>
		</if>
		<if test="condition.groupcols  != 'all' " >
			group by
			<choose>
				<when test="condition.groupcols == ''">
					customerid,goodsid
				</when>
				<otherwise>
					${condition.groupcols}
				</otherwise>
			</choose>
		</if>
		<if test="condition.orderstr  != '' " >
			order by
			${condition.orderstr}
		</if>
		)
	</sql>
	<!-- 人员部门销售报表 -->
	<select id="showSalesDeptReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BaseSalesReport">
		SELECT z.* from <include refid="showSalesDeptReportData_sql"/> z
		<if test="condition.isflag == null and condition.groupcols  != 'all' " >
			LIMIT ${startNum},${rows}
		</if>
	</select>
	<select id="showSalesDeptReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from <include refid="showSalesDeptReportData_sql"/> z
	</select>

	<sql id="showBaseSalesReportData_sql">
		(
		SELECT
		z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.goodssort,z.supplierid,z.adduserid,z.addusername,z.storageid,
		z.goodsid,z.brandid,z.branduser,z.supplieruser,z.branddept,z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice as price,z.costprice,
		SUM(z.ordernum) AS ordernum,SUM(z.ordertotalbox) AS ordertotalbox,SUM(z.orderamount) AS orderamount,SUM(z.ordernotaxamount) AS ordernotaxamount,
		SUM(z.initsendnum) AS initsendnum,SUM(z.initsendtotalbox) AS initsendtotalbox,SUM(z.initsendamount) AS initsendamount,SUM(z.initsendnotaxamount) AS initsendnotaxamount,
		SUM(z.sendnum) AS sendnum,SUM(z.sendtotalbox) AS sendtotalbox,SUM(z.sendamount) AS sendamount,SUM(z.sendnotaxamount) AS sendnotaxamount,sum(z.sendcostamount) as sendcostamount,
		SUM(z.returnnum) AS returnnum,SUM(z.returntotalbox) AS returntotalbox,SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.directreturnnum) AS directreturnnum,SUM(z.directreturntotalbox) AS directreturntotalbox,SUM(z.directreturnamount) AS directreturnamount,SUM(z.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(z.checkreturnnum) AS checkreturnnum,SUM(z.checkreturntotalbox) AS checkreturntotalbox,SUM(z.checkreturnamount) AS checkreturnamount,SUM(z.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(z.costamount) as costamount,sum(z.pushbalanceamount) as pushbalanceamount,sum(z.pushbalancenotaxamount) as pushbalancenotaxamount
		FROM
		(
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		t1.unitnum AS ordernum,t1.totalbox as ordertotalbox,t1.taxamount AS orderamount,t1.notaxamount AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount
		FROM t_sales_order t
		RIGHT JOIN t_sales_order_detail t1 ON t.id = t1.orderid
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		t1.unitnum AS initsendnum,t1.totalbox as initsendtotalbox,t1.taxamount AS initsendamount,t1.notaxamount AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount
		FROM t_sales_dispatchbill t
		RIGHT JOIN t_sales_dispatchbill_detail t1 ON t.id = t1.billid
		left join t_sales_order t2 on t2.id = t.billno
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		t1.unitnum AS sendnum,t1.totalbox as sendtotalbox,t1.taxamount AS sendamount,t1.notaxamount AS sendnotaxamount,t1.unitnum*t1.costprice as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		left join t_sales_order t2 on t2.id = t.saleorderid
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		t1.unitnum AS returnnum,t1.totalbox as returntotalbox,t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,
		t1.unitnum AS directreturnnum,t1.totalbox as directreturntotalbox,t1.taxamount AS directreturnamount,t1.notaxamount AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '2'
					AND t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '2'
					AND t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice, t1.costprice,
		0 AS ordernum,0 as ordertotalbox, 0 AS orderamount, 0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox, 0 AS initsendamount, 0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox, 0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
		t1.unitnum AS returnnum,t1.totalbox as returntotalbox, t1.taxamount AS returnamount, t1.notaxamount AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
		t1.unitnum AS checkreturnnum,t1.totalbox as checkreturntotalbox, t1.taxamount AS checkreturnamount, t1.notaxamount AS checkreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '1'
					AND t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '1'
					AND t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		<if test="condition.goodssort == null   and condition.goodstype == null and condition.goodsid==null" >
			UNION ALL
			SELECT
			IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
			'' as goodssort,IFNULL(t.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,'' as storageid,
			IFNULL(t.brandid,'') as goodsid,IFNULL(t.brandid,'') as brandid,IFNULL(t.branduser,'') as branduser,IFNULL(t.supplieruser,'') as supplieruser,IFNULL(t.branddept,'') as branddept,
			'' AS unitid, '' AS unitname,'' as auxunitid,'' as auxunitname,0 as taxprice, 0 AS costprice,
			0 AS ordernum,0 as ordertotalbox, 0 AS orderamount, 0 AS ordernotaxamount,
			0 AS initsendnum,0 as initsendtotalbox, 0 AS initsendamount, 0 AS initsendnotaxamount,
			0 AS sendnum,0 as sendtotalbox, 0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
			0 AS returnnum,0 as returntotalbox, 0 AS returnamount, 0 AS returnnotaxamount,
			0 AS directreturnnum,0 as directreturntotalbox, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
			0 AS checkreturnnum,0 as checkreturntotalbox, 0 AS checkreturnamount, 0 AS checkreturnnotaxamount,
			0 as costamount,t.amount as pushbalanceamount,t.notaxamount as pushbalancenotaxamount
			FROM t_account_customer_push_balance t
			<trim prefix="where" prefixOverrides="and|or">
				${condition.query_sql_push}
				AND t.STATUS IN ('3', '4')
			</trim>
		</if>
		)z
		<if test="dataSql  != '' " >
			<trim prefix="where" prefixOverrides="and|or">
				<include refid="common.Page_querySql"/>
				<include refid="common.Page_dataSql"/>
			</trim>
		</if>
		<if test="condition.groupcols  != 'all' " >
			group by
			<choose>
				<when test="condition.groupcols == ''">
					customerid,goodsid
				</when>
				<otherwise>
					${condition.groupcols}
				</otherwise>
			</choose>
		</if>
		<if test="condition.orderstr  != '' " >
			order by
			${condition.orderstr}
		</if>
		)
	</sql>
	<select id="showBaseSalesReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BaseSalesReport">
		SELECT z.* from <include refid="showBaseSalesReportData_sql"/> z
		<if test="condition.isflag == null and condition.groupcols  != 'all' " >
			LIMIT ${startNum},${rows}
		</if>
	</select>
	<select id="showBaseSalesReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from <include refid="showBaseSalesReportData_sql"/> z
	</select>
	<!-- 财务销售情况统计表 -->
	<select id="getFinanceSalesReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BaseSalesReport">
		call p_finance_sales_report("${condition.query_sql}",#{condition.groupcols},"${dataSql}",#{startNum},#{rows},#{condition.isflag},#{condition.orderstr})
	</select>
	<select id="getFinanceSalesReportListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		call p_finance_sales_report_count("${condition.query_sql}",#{condition.groupcols},"${dataSql}");
	</select>
	<!-- 赠品情况统计表 -->
	<sql id="getSalesPresentReportData_sql">
		(
		SELECT
		z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.goodssort,z.supplierid,z.adduserid,z.addusername,z.storageid,
		z.goodsid,z.brandid,z.branduser,z.supplieruser,z.branddept,z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice as price,z.costprice,
		SUM(z.sendnum) AS sendnum,SUM(z.sendtotalbox) AS sendtotalbox,SUM(z.sendamount) AS sendamount,SUM(z.sendnotaxamount) AS sendnotaxamount,sum(z.sendcostamount) as sendcostamount,
		SUM(z.returnnum) AS returnnum,SUM(z.returntotalbox) AS returntotalbox,SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,SUM(z.costamount) as costamount
		from (
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		t1.unitnum AS sendnum,t1.totalbox as sendtotalbox,t1.taxamount AS sendamount,t1.notaxamount AS sendnotaxamount,t1.unitnum*t1.costprice as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,t1.unitnum*t1.costprice as costamount
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1==1"> and t.STATUS in ('3','4') and t1.deliverytype = '1'  </if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.storageid != null">
				and FIND_IN_SET(t.storageid,#{condition.storageid})
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodssort != null">
				and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
			</if>
			<if test="condition.branddept != null">
				and FIND_IN_SET(t1.branddept,#{condition.branddept})
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t1.branduser.,#{condition.branduser})
			</if>
			<if test="condition.supplieruser != null">
				and FIND_IN_SET(t1.supplieruser,#{condition.supplieruser})
			</if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
		</trim>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		t1.unitnum AS returnnum,t1.totalbox as returntotalbox,t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,
		-t1.unitnum*t1.costprice as costamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_sales_rejectbill_detail t1 ON t1.billid = t.sourceid
		INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1==1"> and t.STATUS ='4' and t1.deliverytype = '1'  </if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.storageid != null">
				and FIND_IN_SET(t.storageid,#{condition.storageid})
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodssort != null">
				and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
			</if>
			<if test="condition.branddept != null">
				and FIND_IN_SET(t1.branddept,#{condition.branddept})
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t1.branduser.,#{condition.branduser})
			</if>
			<if test="condition.supplieruser != null">
				and FIND_IN_SET(t1.supplieruser,#{condition.supplieruser})
			</if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
		</trim>
		) z
		<if test ="condition.groupcols != 'all' and condition.groupcols != null ">
			group by ${condition.groupcols}
		</if>
		<if test="condition.orderstr  != '' " >
			order by  ${condition.orderstr}
		</if>
		)
	</sql>
	<select id="getSalesPresentReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BaseSalesReport">
		SELECT z.* from <include refid="getSalesPresentReportData_sql"/> z
		<if test="condition.isflag !='true' and condition.groupcols != 'all'" >
			<include refid="common.Page_limit" />
		</if>
	</select>
	<select id="getSalesPresentReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from <include refid="getSalesPresentReportData_sql"/> z
	</select>
	<!-- 销售同比环比情况 -->
	<sql id="correspondPeriod_sql">
		(
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.supplieruser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.unitid,t1.unitname,t1.goodssort,t1.costprice,
		t1.unitnum AS sendnum,t1.taxamount AS sendamount,t1.notaxamount AS sendnotaxamount,
		0 AS qqsendnum,0 AS qqsendamount,0 AS qqsendnotaxamount,
		0 AS returnnum,0 AS returnamount,0 AS returnnotaxamount,
		0 AS qqreturnnum,0 AS qqreturnamount,0 AS qqreturnnotaxamount,
		t1.unitnum*t1.costprice as costamount,0 AS qqcostamount,
		0 AS writeoffamount,0 AS costwriteoffamount,
		0 AS qqwriteoffamount,0 AS qqcostwriteoffamount,t1.supplierid,t1.totalbox as saletotalbox , 0 as qqsaletotalbox
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.STATUS IN ('3', '4') </if>
			<if test="condition.bqstartdate != null">
				<![CDATA[  and t.businessdate >= #{condition.bqstartdate} ]]>
			</if>
			<if test="condition.bqenddate != null">
				<![CDATA[  and t.businessdate <= #{condition.bqenddate} ]]>
			</if>
			<if test="condition.goodsid != null">
				<choose>
					<when test="condition.isgoodsidarr !=null and condition.isgoodsidarr == 1">
						and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
					</when>
					<otherwise>
						and t1.goodsid=#{condition.goodsid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.goodssort != null">
				<choose>
					<when test="condition.isgoodssortidarr !=null and condition.isgoodssortidarr == 1">
						and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
					</when>
					<otherwise>
						and t1.goodssort=#{condition.goodssort}
					</otherwise>
				</choose>
			</if>
			<if test="condition.brandid != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t1.brandid,#{condition.brandid})
					</when>
					<otherwise>
						and t1.brandid=#{condition.brandid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.customerid != null">
				<choose>
					<when test="condition.iscustomerarr !=null and condition.iscustomerarr == 1">
						and FIND_IN_SET(t.customerid,#{condition.customerid})
					</when>
					<otherwise>
						and t.customerid=#{condition.customerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.pcustomerid != null">
				<choose>
					<when test="condition.ispcustomerarr !=null and condition.ispcustomerarr == 1">
						and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
					</when>
					<otherwise>
						and t.pcustomerid=#{condition.pcustomerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t1.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t1.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesuser != null">
				<choose>
					<when test="condition.issalesuserarr != null and condition.issalesuserarr == 1">
						and FIND_IN_SET(t.salesuser,#{condition.salesuser})
					</when>
					<otherwise>
						and t.salesuser=#{condition.salesuser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t1.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t1.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.isdeptidarr != null and condition.isdeptidarr == 1">
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</when>
					<otherwise>
						and t.salesdept=#{condition.salesdept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesarea != null">
				<choose>
					<when test="condition.issalesareaarr != null and condition.issalesareaarr == 1">
						and FIND_IN_SET(t.salesarea,#{condition.salesarea})
					</when>
					<otherwise>
						and t.salesarea=#{condition.salesarea}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.supplieruser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.unitid,t1.unitname,t1.goodssort,t1.costprice,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		t1.unitnum AS qqsendnum,t1.taxamount AS qqsendamount,t1.notaxamount AS qqsendnotaxamount,
		0 AS returnnum,0 AS returnamount,0 AS returnnotaxamount,
		0 AS qqreturnnum,0 AS qqreturnamount,0 AS qqreturnnotaxamount,
		0 AS costamount,t1.unitnum*t1.costprice as qqcostamount,
		0 AS writeoffamount,0 AS costwriteoffamount,
		0 AS qqwriteoffamount,0 AS qqcostwriteoffamount,t1.supplierid,0 as saletotalbox,t1.totalbox as qqsaletotalbox
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.STATUS IN ('3', '4') </if>
			<if test="condition.qqstartdate != null">
				<![CDATA[  and t.businessdate >= #{condition.qqstartdate} ]]>
			</if>
			<if test="condition.qqenddate != null">
				<![CDATA[  and t.businessdate <= #{condition.qqenddate} ]]>
			</if>
			<if test="condition.goodsid != null">
				<choose>
					<when test="condition.isgoodsidarr !=null and condition.isgoodsidarr == 1">
						and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
					</when>
					<otherwise>
						and t1.goodsid=#{condition.goodsid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.goodssort != null">
				<choose>
					<when test="condition.isgoodssortidarr !=null and condition.isgoodssortidarr == 1">
						and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
					</when>
					<otherwise>
						and t1.goodssort=#{condition.goodssort}
					</otherwise>
				</choose>
			</if>
			<if test="condition.brandid != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t1.brandid,#{condition.brandid})
					</when>
					<otherwise>
						and t1.brandid=#{condition.brandid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.customerid != null">
				<choose>
					<when test="condition.iscustomerarr !=null and condition.iscustomerarr == 1">
						and FIND_IN_SET(t.customerid,#{condition.customerid})
					</when>
					<otherwise>
						and t.customerid=#{condition.customerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.pcustomerid != null">
				<choose>
					<when test="condition.ispcustomerarr !=null and condition.ispcustomerarr == 1">
						and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
					</when>
					<otherwise>
						and t.pcustomerid=#{condition.pcustomerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t1.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t1.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesuser != null">
				<choose>
					<when test="condition.issalesuserarr != null and condition.issalesuserarr == 1">
						and FIND_IN_SET(t.salesuser,#{condition.salesuser})
					</when>
					<otherwise>
						and t.salesuser=#{condition.salesuser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t1.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t1.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.isdeptidarr != null and condition.isdeptidarr == 1">
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</when>
					<otherwise>
						and t.salesdept=#{condition.salesdept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesarea != null">
				<choose>
					<when test="condition.issalesareaarr != null and condition.issalesareaarr == 1">
						and FIND_IN_SET(t.salesarea,#{condition.salesarea})
					</when>
					<otherwise>
						and t.salesarea=#{condition.salesarea}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.supplieruser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.unitid,t1.unitname,t1.goodssort,t1.costprice,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		0 AS qqsendnum,0 AS qqsendamount,0 AS qqsendnotaxamount,
		t1.unitnum AS returnnum,t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,
		0 AS qqreturnnum,0 AS qqreturnamount,0 AS qqreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 AS qqcostamount,
		0 AS writeoffamount,0 AS costwriteoffamount,
		0 AS qqwriteoffamount,0 AS qqcostwriteoffamount,t1.supplierid,-t1.totalbox as saletotalbox , 0 as qqsaletotalbox
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1">  and t.ischeck='1' AND t.STATUS IN ('3', '4') </if>
			<if test="condition.bqstartdate != null">
				<![CDATA[  and t.businessdate >= #{condition.bqstartdate} ]]>
			</if>
			<if test="condition.bqenddate != null">
				<![CDATA[  and t.businessdate <= #{condition.bqenddate} ]]>
			</if>
			<if test="condition.goodsid != null">
				<choose>
					<when test="condition.isgoodsidarr !=null and condition.isgoodsidarr == 1">
						and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
					</when>
					<otherwise>
						and t1.goodsid=#{condition.goodsid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.goodssort != null">
				<choose>
					<when test="condition.isgoodssortidarr !=null and condition.isgoodssortidarr == 1">
						and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
					</when>
					<otherwise>
						and t1.goodssort=#{condition.goodssort}
					</otherwise>
				</choose>
			</if>
			<if test="condition.brandid != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t1.brandid,#{condition.brandid})
					</when>
					<otherwise>
						and t1.brandid=#{condition.brandid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.customerid != null">
				<choose>
					<when test="condition.iscustomerarr !=null and condition.iscustomerarr == 1">
						and FIND_IN_SET(t.customerid,#{condition.customerid})
					</when>
					<otherwise>
						and t.customerid=#{condition.customerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.pcustomerid != null">
				<choose>
					<when test="condition.ispcustomerarr !=null and condition.ispcustomerarr == 1">
						and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
					</when>
					<otherwise>
						and t.pcustomerid=#{condition.pcustomerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t1.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t1.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesuser != null">
				<choose>
					<when test="condition.issalesuserarr != null and condition.issalesuserarr == 1">
						and FIND_IN_SET(t.salesuser,#{condition.salesuser})
					</when>
					<otherwise>
						and t.salesuser=#{condition.salesuser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t1.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t1.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.isdeptidarr != null and condition.isdeptidarr == 1">
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</when>
					<otherwise>
						and t.salesdept=#{condition.salesdept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesarea != null">
				<choose>
					<when test="condition.issalesareaarr != null and condition.issalesareaarr == 1">
						and FIND_IN_SET(t.salesarea,#{condition.salesarea})
					</when>
					<otherwise>
						and t.salesarea=#{condition.salesarea}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.supplieruser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.unitid,t1.unitname,t1.goodssort,t1.costprice,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		0 AS qqsendnum,0 AS qqsendamount,0 AS qqsendnotaxamount,
		0 AS returnnum,0 AS returnamount,0 AS returnnotaxamount,
		t1.unitnum AS qqreturnnum,t1.taxamount AS qqreturnamount,t1.notaxamount AS qqreturnnotaxamount,
		0 AS costamount,-t1.unitnum*t1.costprice as qqcostamount,
		0 AS writeoffamount,0 AS costwriteoffamount,
		0 AS qqwriteoffamount,0 AS qqcostwriteoffamount,t1.supplierid,0 as saletotalbox,-t1.totalbox as qqsaletotalbox
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1">  and t.ischeck='1' AND t.STATUS IN ('3', '4') </if>
			<if test="condition.qqstartdate != null">
				<![CDATA[  and t.businessdate >= #{condition.qqstartdate} ]]>
			</if>
			<if test="condition.qqenddate != null">
				<![CDATA[  and t.businessdate <= #{condition.qqenddate} ]]>
			</if>
			<if test="condition.goodsid != null">
				<choose>
					<when test="condition.isgoodsidarr !=null and condition.isgoodsidarr == 1">
						and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
					</when>
					<otherwise>
						and t1.goodsid=#{condition.goodsid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.goodssort != null">
				<choose>
					<when test="condition.isgoodssortidarr !=null and condition.isgoodssortidarr == 1">
						and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
					</when>
					<otherwise>
						and t1.goodssort=#{condition.goodssort}
					</otherwise>
				</choose>
			</if>
			<if test="condition.brandid != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t1.brandid,#{condition.brandid})
					</when>
					<otherwise>
						and t1.brandid=#{condition.brandid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.customerid != null">
				<choose>
					<when test="condition.iscustomerarr !=null and condition.iscustomerarr == 1">
						and FIND_IN_SET(t.customerid,#{condition.customerid})
					</when>
					<otherwise>
						and t.customerid=#{condition.customerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.pcustomerid != null">
				<choose>
					<when test="condition.ispcustomerarr !=null and condition.ispcustomerarr == 1">
						and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
					</when>
					<otherwise>
						and t.pcustomerid=#{condition.pcustomerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t1.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t1.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesuser != null">
				<choose>
					<when test="condition.issalesuserarr != null and condition.issalesuserarr == 1">
						and FIND_IN_SET(t.salesuser,#{condition.salesuser})
					</when>
					<otherwise>
						and t.salesuser=#{condition.salesuser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t1.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t1.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.isdeptidarr != null and condition.isdeptidarr == 1">
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</when>
					<otherwise>
						and t.salesdept=#{condition.salesdept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesarea != null">
				<choose>
					<when test="condition.issalesareaarr != null and condition.issalesareaarr == 1">
						and FIND_IN_SET(t.salesarea,#{condition.salesarea})
					</when>
					<otherwise>
						and t.salesarea=#{condition.salesarea}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t.supplieruser,
		t.brandid AS goodsid,t.brandid,t.branduser,t.branddept, '' AS unitid, '' AS unitname,t.brandid as goodssort, 0 AS costprice,
		0 AS sendnum, t.amount AS sendamount,0 AS sendnotaxamount,
		0 AS qqsendnum,0 AS qqsendamount,0 AS qqsendnotaxamount,
		0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS qqreturnnum,0 AS qqreturnamount,0 AS qqreturnnotaxamount,
		0 as costamount,0 AS qqcostamount,
		0 AS writeoffamount, 0 AS costwriteoffamount,
		0 AS qqwriteoffamount,0 AS qqcostwriteoffamount,t.supplierid,0 as saletotalbox,0 as qqsaletotalbox
		FROM t_account_customer_push_balance t
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1">
				and  t.STATUS IN ('3', '4')
			</if>
			<if test="condition.bqstartdate != null">
				<![CDATA[  and t.businessdate >= #{condition.bqstartdate} ]]>
			</if>
			<if test="condition.bqenddate != null">
				<![CDATA[  and t.businessdate <= #{condition.bqenddate} ]]>
			</if>
			<if test="condition.goodsid != null">
				and 1 = 2
			</if>
			<if test="condition.brandid != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t.brandid,#{condition.brandid})
					</when>
					<otherwise>
						and t.brandid=#{condition.brandid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.customerid != null">
				<choose>
					<when test="condition.iscustomerarr !=null and condition.iscustomerarr == 1">
						and FIND_IN_SET(t.customerid,#{condition.customerid})
					</when>
					<otherwise>
						and t.customerid=#{condition.customerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.pcustomerid != null">
				<choose>
					<when test="condition.ispcustomerarr !=null and condition.ispcustomerarr == 1">
						and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
					</when>
					<otherwise>
						and t.pcustomerid=#{condition.pcustomerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesuser != null">
				<choose>
					<when test="condition.issalesuserarr != null and condition.issalesuserarr == 1">
						and FIND_IN_SET(t.salesuser,#{condition.salesuser})
					</when>
					<otherwise>
						and t.salesuser=#{condition.salesuser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.isdeptidarr != null and condition.isdeptidarr == 1">
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</when>
					<otherwise>
						and t.salesdept=#{condition.salesdept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesarea != null">
				<choose>
					<when test="condition.issalesareaarr != null and condition.issalesareaarr == 1">
						and FIND_IN_SET(t.salesarea,#{condition.salesarea})
					</when>
					<otherwise>
						and t.salesarea=#{condition.salesarea}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t.supplieruser,
		t.brandid AS goodsid,t.brandid,t.branduser,t.branddept, '' AS unitid, '' AS unitname,t.brandid as goodssort, 0 AS costprice,
		0 AS sendnum, 0 AS sendamount,0 AS sendnotaxamount,
		0 AS qqsendnum,t.amount AS qqsendamount,0 AS qqsendnotaxamount,
		0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS qqreturnnum,0 AS qqreturnamount,0 AS qqreturnnotaxamount,
		0 as costamount,0 AS qqcostamount,
		0 AS writeoffamount, 0 AS costwriteoffamount,
		0 AS qqwriteoffamount,0 AS qqcostwriteoffamount ,t.supplierid,0 as saletotalbox,0 as qqsaletotalbox
		FROM t_account_customer_push_balance t
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.STATUS IN ('3', '4')</if>
			<if test="condition.qqstartdate != null">
				<![CDATA[  and t.businessdate >= #{condition.qqstartdate} ]]>
			</if>
			<if test="condition.qqenddate != null">
				<![CDATA[  and t.businessdate <= #{condition.qqenddate} ]]>
			</if>
			<if test="condition.goodsid != null">
				and 1 = 2
			</if>
			<if test="condition.brandid != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t.brandid,#{condition.brandid})
					</when>
					<otherwise>
						and t.brandid=#{condition.brandid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.customerid != null">
				<choose>
					<when test="condition.iscustomerarr !=null and condition.iscustomerarr == 1">
						and FIND_IN_SET(t.customerid,#{condition.customerid})
					</when>
					<otherwise>
						and t.customerid=#{condition.customerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.pcustomerid != null">
				<choose>
					<when test="condition.ispcustomerarr !=null and condition.ispcustomerarr == 1">
						and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
					</when>
					<otherwise>
						and t.pcustomerid=#{condition.pcustomerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesuser != null">
				<choose>
					<when test="condition.issalesuserarr != null and condition.issalesuserarr == 1">
						and FIND_IN_SET(t.salesuser,#{condition.salesuser})
					</when>
					<otherwise>
						and t.salesuser=#{condition.salesuser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.isdeptidarr != null and condition.isdeptidarr == 1">
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</when>
					<otherwise>
						and t.salesdept=#{condition.salesdept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesarea != null">
				<choose>
					<when test="condition.issalesareaarr != null and condition.issalesareaarr == 1">
						and FIND_IN_SET(t.salesarea,#{condition.salesarea})
					</when>
					<otherwise>
						and t.salesarea=#{condition.salesarea}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT t1.customerid,t1.pcustomerid,t1.salesarea,t1.salesdept,t1.salesuser,t1.supplieruser,
		t1.goodsid, t1.brandid,t1.branduser,t1.branddept, t1.unitid, t1.unitname,t1.goodssort, t1.costprice,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		0 AS qqsendnum,0 AS qqsendamount,0 AS qqsendnotaxamount,
		0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS qqreturnnum,0 AS qqreturnamount,0 AS qqreturnnotaxamount,
		0 as costamount,0 AS qqcostamount,
		t1.taxamount AS writeoffamount, t1.costprice * t1.unitnum AS costwriteoffamount,
		0 AS qqwriteoffamount,0 AS qqcostwriteoffamount ,t1.supplierid,
		0 as saletotalbox,0 as qqsaletotalbox
		FROM t_account_sales_invoice t
		RIGHT JOIN t_account_sales_invoice_detail t1 ON t1.billid=t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.iswriteoff='1' AND  t.status='4' </if>
			<if test="condition.bqstartdate != null">
				<![CDATA[  and t.writeoffdate >= #{condition.bqstartdate} ]]>
			</if>
			<if test="condition.bqenddate != null">
				<![CDATA[  and t.writeoffdate <= #{condition.bqenddate} ]]>
			</if>
			<if test="condition.goodsid != null">
				<choose>
					<when test="condition.isgoodsidarr !=null and condition.isgoodsidarr == 1">
						and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
					</when>
					<otherwise>
						and t1.goodsid=#{condition.goodsid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.goodssort != null">
				<choose>
					<when test="condition.isgoodssortidarr !=null and condition.isgoodssortidarr == 1">
						and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
					</when>
					<otherwise>
						and t1.goodssort=#{condition.goodssort}
					</otherwise>
				</choose>
			</if>
			<if test="condition.brandid != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t1.brandid,#{condition.brandid})
					</when>
					<otherwise>
						and t1.brandid=#{condition.brandid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.customerid != null">
				<choose>
					<when test="condition.iscustomerarr !=null and condition.iscustomerarr == 1">
						and FIND_IN_SET(t1.customerid,#{condition.customerid})
					</when>
					<otherwise>
						and t1.customerid=#{condition.customerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.pcustomerid != null">
				<choose>
					<when test="condition.ispcustomerarr !=null and condition.ispcustomerarr == 1">
						and FIND_IN_SET(t1.pcustomerid,#{condition.pcustomerid})
					</when>
					<otherwise>
						and t1.pcustomerid=#{condition.pcustomerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t1.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t1.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesuser != null">
				<choose>
					<when test="condition.issalesuserarr != null and condition.issalesuserarr == 1">
						and FIND_IN_SET(t.salesuser,#{condition.salesuser})
					</when>
					<otherwise>
						and t.salesuser=#{condition.salesuser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t1.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t1.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.isdeptidarr != null and condition.isdeptidarr == 1">
						and FIND_IN_SET(t1.salesdept,#{condition.salesdept})
					</when>
					<otherwise>
						and t1.salesdept=#{condition.salesdept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesarea != null">
				<choose>
					<when test="condition.issalesareaarr != null and condition.issalesareaarr == 1">
						and FIND_IN_SET(t1.salesarea,#{condition.salesarea})
					</when>
					<otherwise>
						and t1.salesarea=#{condition.salesarea}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t.supplieruser,
		t.brandid AS goodsid, t.brandid,t.branduser,t.branddept,  '' AS unitid, '' AS unitname,t.brandid as goodssort, 0 AS costprice,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		0 AS qqsendnum,0 AS qqsendamount,0 AS qqsendnotaxamount,
		0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS qqreturnnum,0 AS qqreturnamount,0 AS qqreturnnotaxamount,
		0 as costamount,0 AS qqcostamount,
		t.amount AS writeoffamount, 0 AS costwriteoffamount,
		0 AS qqwriteoffamount,0 AS qqcostwriteoffamount ,t.supplierid,0 as saletotalbox,0 as qqsaletotalbox
		FROM t_account_customer_push_balance t
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test=" 1==1 ">and t.isinvoice='0'  and t.isrefer='0' AND t.iswriteoff = '1'  AND t.STATUS IN ('3', '4')</if>
			<if test="condition.bqstartdate != null">
				<![CDATA[  and t.writeoffdate >= #{condition.bqstartdate} ]]>
			</if>
			<if test="condition.bqenddate != null">
				<![CDATA[  and t.writeoffdate <= #{condition.bqenddate} ]]>
			</if>
			<if test="condition.goodsid != null">
				and 1 = 2
			</if>
			<if test="condition.brandid != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t.brandid,#{condition.brandid})
					</when>
					<otherwise>
						and t.brandid=#{condition.brandid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.customerid != null">
				<choose>
					<when test="condition.iscustomerarr !=null and condition.iscustomerarr == 1">
						and FIND_IN_SET(t.customerid,#{condition.customerid})
					</when>
					<otherwise>
						and t.customerid=#{condition.customerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.pcustomerid != null">
				<choose>
					<when test="condition.ispcustomerarr !=null and condition.ispcustomerarr == 1">
						and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
					</when>
					<otherwise>
						and t.pcustomerid=#{condition.pcustomerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesuser != null">
				<choose>
					<when test="condition.issalesuserarr != null and condition.issalesuserarr == 1">
						and FIND_IN_SET(t.salesuser,#{condition.salesuser})
					</when>
					<otherwise>
						and t.salesuser=#{condition.salesuser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.isdeptidarr != null and condition.isdeptidarr == 1">
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</when>
					<otherwise>
						and t.salesdept=#{condition.salesdept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesarea != null">
				<choose>
					<when test="condition.issalesareaarr != null and condition.issalesareaarr == 1">
						and FIND_IN_SET(t.salesarea,#{condition.salesarea})
					</when>
					<otherwise>
						and t.salesarea=#{condition.salesarea}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT t1.customerid,t1.pcustomerid,t1.salesarea,t1.salesdept,t1.salesuser,t1.supplieruser,
		t1.goodsid, t1.brandid,t1.branduser,t1.branddept, t1.unitid, t1.unitname,t1.goodssort, t1.costprice,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		0 AS qqsendnum,0 AS qqsendamount,0 AS qqsendnotaxamount,
		0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS qqreturnnum,0 AS qqreturnamount,0 AS qqreturnnotaxamount,
		0 as costamount,0 AS qqcostamount,
		0 AS writeoffamount,0 AS costwriteoffamount,
		t1.taxamount AS qqwriteoffamount, t1.costprice * t1.unitnum AS qqcostwriteoffamount ,t1.supplierid,
		0 as saletotalbox,0 as qqsaletotalbox
		FROM t_account_sales_invoice t
		RIGHT JOIN t_account_sales_invoice_detail t1 ON t1.billid=t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.iswriteoff='1' AND  t.status='4'</if>
			<if test="condition.qqstartdate != null">
				<![CDATA[  and t.writeoffdate >= #{condition.qqstartdate} ]]>
			</if>
			<if test="condition.qqenddate != null">
				<![CDATA[  and t.writeoffdate <= #{condition.qqenddate} ]]>
			</if>
			<if test="condition.goodsid != null">
				<choose>
					<when test="condition.isgoodsidarr !=null and condition.isgoodsidarr == 1">
						and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
					</when>
					<otherwise>
						and t1.goodsid=#{condition.goodsid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.goodssort != null">
				<choose>
					<when test="condition.isgoodssortidarr !=null and condition.isgoodssortidarr == 1">
						and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
					</when>
					<otherwise>
						and t1.goodssort=#{condition.goodssort}
					</otherwise>
				</choose>
			</if>
			<if test="condition.brandid != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t1.brandid,#{condition.brandid})
					</when>
					<otherwise>
						and t1.brandid=#{condition.brandid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.customerid != null">
				<choose>
					<when test="condition.iscustomerarr !=null and condition.iscustomerarr == 1">
						and FIND_IN_SET(t1.customerid,#{condition.customerid})
					</when>
					<otherwise>
						and t1.customerid=#{condition.customerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.pcustomerid != null">
				<choose>
					<when test="condition.ispcustomerarr !=null and condition.ispcustomerarr == 1">
						and FIND_IN_SET(t1.pcustomerid,#{condition.pcustomerid})
					</when>
					<otherwise>
						and t1.pcustomerid=#{condition.pcustomerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t1.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t1.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesuser != null">
				<choose>
					<when test="condition.issalesuserarr != null and condition.issalesuserarr == 1">
						and FIND_IN_SET(t.salesuser,#{condition.salesuser})
					</when>
					<otherwise>
						and t.salesuser=#{condition.salesuser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t1.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t1.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.isdeptidarr != null and condition.isdeptidarr == 1">
						and FIND_IN_SET(t1.salesdept,#{condition.salesdept})
					</when>
					<otherwise>
						and t1.salesdept=#{condition.salesdept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesarea != null">
				<choose>
					<when test="condition.issalesareaarr != null and condition.issalesareaarr == 1">
						and FIND_IN_SET(t1.salesarea,#{condition.salesarea})
					</when>
					<otherwise>
						and t1.salesarea=#{condition.salesarea}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t.supplieruser,
		t.brandid AS goodsid, t.brandid,t.branduser,t.branddept,  '' AS unitid, '' AS unitname,t.brandid as goodssort, 0 AS costprice,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		0 AS qqsendnum,0 AS qqsendamount,0 AS qqsendnotaxamount,
		0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS qqreturnnum,0 AS qqreturnamount,0 AS qqreturnnotaxamount,
		0 as costamount,0 AS qqcostamount,
		0 AS writeoffamount,0 AS costwriteoffamount,
		t.amount AS qqwriteoffamount, 0 AS qqcostwriteoffamount,t.supplierid,0 as saletotalbox,0 as qqsaletotalbox
		FROM t_account_customer_push_balance t
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1">and t.isinvoice='0'  and t.isrefer='0' AND t.iswriteoff = '1'  AND t. STATUS IN ('3', '4')	</if>
			<if test="condition.qqstartdate != null">
				<![CDATA[  and t.writeoffdate >= #{condition.qqstartdate} ]]>
			</if>
			<if test="condition.qqenddate != null">
				<![CDATA[  and t.writeoffdate <= #{condition.qqenddate} ]]>
			</if>
			<if test="condition.goodsid != null">
				and 1 = 2
			</if>
			<if test="condition.brandid != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t.brandid,#{condition.brandid})
					</when>
					<otherwise>
						and t.brandid=#{condition.brandid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.customerid != null">
				<choose>
					<when test="condition.iscustomerarr !=null and condition.iscustomerarr == 1">
						and FIND_IN_SET(t.customerid,#{condition.customerid})
					</when>
					<otherwise>
						and t.customerid=#{condition.customerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.pcustomerid != null">
				<choose>
					<when test="condition.ispcustomerarr !=null and condition.ispcustomerarr == 1">
						and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
					</when>
					<otherwise>
						and t.pcustomerid=#{condition.pcustomerid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesuser != null">
				<choose>
					<when test="condition.issalesuserarr != null and condition.issalesuserarr == 1">
						and FIND_IN_SET(t.salesuser,#{condition.salesuser})
					</when>
					<otherwise>
						and t.salesuser=#{condition.salesuser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.isdeptidarr != null and condition.isdeptidarr == 1">
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</when>
					<otherwise>
						and t.salesdept=#{condition.salesdept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.salesarea != null">
				<choose>
					<when test="condition.issalesareaarr != null and condition.issalesareaarr == 1">
						and FIND_IN_SET(t.salesarea,#{condition.salesarea})
					</when>
					<otherwise>
						and t.salesarea=#{condition.salesarea}
					</otherwise>
				</choose>
			</if>
		</trim>
		)
	</sql>
	<select id="showSalesCorrespondPeriodReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesCorrespondPeriodReport">
		SELECT
		z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,
		z.goodsid,z.brandid,z.branduser,z.branddept,z.unitid,z.unitname,z.goodssort,z.costprice,
		(SUM(z.sendnum)-SUM(z.returnnum)) AS salenum,(SUM(z.sendamount)-SUM(z.returnamount)) AS saleamount,(SUM(z.sendnotaxamount)-SUM(z.returnnotaxamount)) AS salenotaxamount,
		(SUM(z.qqsendnum)-SUM(z.qqreturnnum)) AS qqsalenum,(SUM(z.qqsendamount)-SUM(z.qqreturnamount)) AS qqsaleamount,(SUM(z.qqsendnotaxamount)-SUM(z.qqreturnnotaxamount)) AS qqsalenotaxamount,
		(SUM(z.sendamount)-SUM(z.returnamount)-SUM(z.costamount)) AS salegrossamount,(SUM(z.qqsendamount)-SUM(z.qqreturnamount)-SUM(z.qqcostamount)) AS qqsalegrossamount,
		SUM(z.costamount) as costamount,SUM(z.qqcostamount) as qqcostamount,
		SUM(z.writeoffamount) AS writeoffamount,SUM(z.costwriteoffamount) AS costwriteoffamount,
		SUM(z.qqwriteoffamount) AS qqwriteoffamount,SUM(z.qqcostwriteoffamount) AS qqcostwriteoffamount,
		(SUM(z.writeoffamount) - SUM(z.costwriteoffamount) ) AS writeoffgrossamount,
		(SUM(z.qqwriteoffamount) - SUM(z.qqcostwriteoffamount) ) AS qqwriteoffgrossamount,z.supplierid,
		SUM(z.saletotalbox) as saletotalbox, SUM(z.qqsaletotalbox) as qqsaletotalbox
		FROM
		<include refid="correspondPeriod_sql" /> z
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="condition.supplierid != null">
				<choose>
					<when test="condition.issupplieridarr != null and condition.issupplieridarr == 1">
						and FIND_IN_SET( z.supplierid ,#{condition.supplierid})
					</when>
					<otherwise>
						and z.supplierid =#{condition.supplierid}
					</otherwise>
				</choose>
			</if>
			<include refid="common.Page_dataSql"/>
		</trim>
		<if test="condition.groupcols !=null and condition.groupcols !='' and condition.groupcols != 'all' ">
			group by ${condition.groupcols}
		</if>
		<if test="condition.ispageflag !='true' and condition.groupcols != 'all'">
			<include refid="common.Page_limit" />
		</if>
	</select>
	<select id="showSalesCorrespondPeriodReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		SELECT COUNT(*) FROM (
		SELECT
		z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,
		z.goodsid,z.brandid,z.branduser,z.branddept,z.unitid,z.unitname,z.goodssort,z.costprice,
		z.sendnum
		FROM
		<include refid="correspondPeriod_sql" /> z
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="condition.supplierid != null">
				<choose>
					<when test="condition.issupplieridarr != null and condition.issupplieridarr == 1">
						and FIND_IN_SET( z.supplierid ,#{condition.supplierid})
					</when>
					<otherwise>
						and z.supplierid =#{condition.supplierid}
					</otherwise>
				</choose>
			</if>
			<include refid="common.Page_dataSql"/>
		</trim>
		<if test="condition.groupcols !=null and condition.groupcols !='' and condition.groupcols != 'all' ">
			group by ${condition.groupcols}
		</if>
		) t
	</select>
	<sql id="buySalesBillCountReportData_sql">
		SELECT
		t1.goodsid,t1.brandid AS brand,t.buyuserid AS branduser,t.buydeptid AS branddept,t1.unitid,t1.unitname,0 AS costprice,1 AS buybillcount,0 AS salebillcount,
		t1.unitnum AS buynum,t1.taxamount AS buyamount,t1.notaxamount AS buynotaxamount,
		0 AS buyreturnnum,0 AS buyreturnamount,0 AS buyreturnnotaxamount,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		0 AS returnnum,0 AS returnamount,0 AS returnnotaxamount,
		0 AS costamount,
		0 AS writeoffamount,0 AS costwriteoffamount,
		t.supplierid
		FROM t_purchase_arrivalorder t
		RIGHT JOIN t_purchase_arrivalorder_detail t1 ON t1.orderid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1">
				AND t.STATUS IN ('3', '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null">
				<choose>
					<when test="condition.isgoodsidarr !=null and condition.isgoodsidarr == 1">
						and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
					</when>
					<otherwise>
						and t1.goodsid=#{condition.goodsid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.brand != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t1.brandid,#{condition.brand})
					</when>
					<otherwise>
						and t1.brandid=#{condition.brand}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t.buyuserid,#{condition.branduser})
					</when>
					<otherwise>
						and t.buyuserid=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t.buydeptid,#{condition.branddept})
					</when>
					<otherwise>
						and t.buydeptid=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.supplierid != null">
				<choose>
					<when test="condition.issupplieridarr != null and condition.issupplieridarr == 1">
						and FIND_IN_SET(t.supplierid,#{condition.supplierid})
					</when>
					<otherwise>
						and t.supplierid=#{condition.supplierid}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t1.goodsid,t1.brandid AS brand,t.buyuserid AS branduser,t.buydeptid AS branddept,t1.unitid,t1.unitname,0 AS costprice,1 AS buybillcount,0 AS salebillcount,
		0 AS buynum,0 AS buyamount,0 AS buynotaxamount,
		t1.unitnum AS buyreturnnum,t1.taxamount AS buyreturnamount,t1.notaxamount AS buyreturnnotaxamount,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		0 AS returnnum,0 AS returnamount,0 AS returnnotaxamount,
		0 AS costamount,
		0 AS writeoffamount,0 AS costwriteoffamount,
		t.supplierid
		FROM t_storage_purchasereject_out t
		RIGHT JOIN t_storage_purchasereject_out_detail t1 ON t1.orderid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1">
				AND t.status='4' <!-- 采购退货出库单验收后，关闭 -->
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null">
				<choose>
					<when test="condition.isgoodsidarr !=null and condition.isgoodsidarr == 1">
						and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
					</when>
					<otherwise>
						and t1.goodsid=#{condition.goodsid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.brand != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t1.brandid,#{condition.brand})
					</when>
					<otherwise>
						and t1.brandid=#{condition.brand}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t.buyuserid,#{condition.branduser})
					</when>
					<otherwise>
						and t.buyuserid=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t.buydeptid,#{condition.branddept})
					</when>
					<otherwise>
						and t.buydeptid=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.supplierid != null">
				<choose>
					<when test="condition.issupplieridarr != null and condition.issupplieridarr == 1">
						and FIND_IN_SET(t.supplierid,#{condition.supplierid})
					</when>
					<otherwise>
						and t.supplierid=#{condition.supplierid}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t1.goodsid,t1.brandid AS brand,t1.branduser,t1.branddept,t1.unitid,t1.unitname,t1.costprice,0 AS buybillcount,1 AS salebillcount,
		0 AS buynum,0 AS buyamount,0 AS buynotaxamount,
		0 AS buyreturnnum,0 AS buyreturnamount,0 AS buyreturnnotaxamount,
		t1.unitnum AS sendnum,t1.taxamount AS sendamount,t1.notaxamount AS sendnotaxamount,
		0 AS returnnum,0 AS returnamount,0 AS returnnotaxamount,
		t1.unitnum*t1.costprice AS costamount,
		0 AS writeoffamount,0 AS costwriteoffamount,
		t1.supplierid
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1">
				AND t.STATUS IN ('3', '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null">
				<choose>
					<when test="condition.isgoodsidarr !=null and condition.isgoodsidarr == 1">
						and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
					</when>
					<otherwise>
						and t1.goodsid=#{condition.goodsid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.brand != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t1.brandid,#{condition.brand})
					</when>
					<otherwise>
						and t1.brandid=#{condition.brand}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t1.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t1.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t1.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t1.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.supplierid != null">
				<choose>
					<when test="condition.issupplieridarr != null and condition.issupplieridarr == 1">
						and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
					</when>
					<otherwise>
						and t1.supplierid=#{condition.supplierid}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t1.goodsid,t1.brandid AS brand,t1.branduser,t1.branddept,t1.unitid,t1.unitname,t1.costprice,0 AS buybillcount,1 AS salebillcount,
		0 AS buynum,0 AS buyamount,0 AS buynotaxamount,
		0 AS buyreturnnum,0 AS buyreturnamount,0 AS buyreturnnotaxamount,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		t1.unitnum AS returnnum,t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,
		-t1.unitnum*t1.costprice AS costamount,
		0 AS writeoffamount,0 AS costwriteoffamount,
		t1.supplierid
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1">
				AND t.ischeck='1' AND t.STATUS IN ('3', '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null">
				<choose>
					<when test="condition.isgoodsidarr !=null and condition.isgoodsidarr == 1">
						and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
					</when>
					<otherwise>
						and t1.goodsid=#{condition.goodsid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.brand != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t1.brandid,#{condition.brand})
					</when>
					<otherwise>
						and t1.brandid=#{condition.brand}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t1.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t1.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t1.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t1.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.supplierid != null">
				<choose>
					<when test="condition.issupplieridarr != null and condition.issupplieridarr == 1">
						and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
					</when>
					<otherwise>
						and t1.supplierid=#{condition.supplierid}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t.brandid AS goodsid,t.brandid AS brand,t.branduser,t.branddept, '' AS unitid, '' AS unitname, 0 AS costprice,0 AS buybillcount, 1 AS salebillcount,
		0 AS buynum,0 AS buyamount,0 AS buynotaxamount,
		0 AS buyreturnnum,0 AS buyreturnamount,0 AS buyreturnnotaxamount,
		0 AS sendnum, t.amount AS sendamount,0 AS sendnotaxamount,
		0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS costamount,
		0 AS writeoffamount, 0 AS costwriteoffamount,
		t.supplierid
		FROM t_account_customer_push_balance t
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1">
				AND t.STATUS IN ('3', '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null">
				and 1 = 2
			</if>
			<if test="condition.brand != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t.brandid,#{condition.brand})
					</when>
					<otherwise>
						and t.brandid=#{condition.brand}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.supplierid != null">
				<choose>
					<when test="condition.issupplieridarr != null and condition.issupplieridarr == 1">
						and FIND_IN_SET(t.supplierid,#{condition.supplierid})
					</when>
					<otherwise>
						and t.supplierid=#{condition.supplierid}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t1.goodsid, t1.brandid AS brand,t1.branduser,t1.branddept, t1.unitid, t1.unitname, t1.costprice,0 AS buybillcount, 0 AS salebillcount,
		0 AS buynum,0 AS buyamount,0 AS buynotaxamount,
		0 AS buyreturnnum,0 AS buyreturnamount,0 AS buyreturnnotaxamount,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS costamount,
		t1.taxamount AS writeoffamount, t1.costprice * t1.unitnum AS costwriteoffamount,
		t1.supplierid
		FROM t_account_sales_invoice t
		RIGHT JOIN t_account_sales_invoice_detail t1 ON t1.billid=t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1">
				AND t.iswriteoff='1' AND  t.status='4'
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null">
				<choose>
					<when test="condition.isgoodsidarr !=null and condition.isgoodsidarr == 1">
						and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
					</when>
					<otherwise>
						and t1.goodsid=#{condition.goodsid}
					</otherwise>
				</choose>
			</if>
			<if test="condition.brand != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t1.brandid,#{condition.brand})
					</when>
					<otherwise>
						and t1.brandid=#{condition.brand}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t1.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t1.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t1.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t1.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.supplierid != null">
				<choose>
					<when test="condition.issupplieridarr != null and condition.issupplieridarr == 1">
						and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
					</when>
					<otherwise>
						and t1.supplierid=#{condition.supplierid}
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT
		t.brandid AS goodsid, t.brandid AS brand,t.branduser,t.branddept,  '' AS unitid, '' AS unitname, 0 AS costprice,0 AS buybillcount, 0 AS salebillcount,
		0 AS buynum,0 AS buyamount,0 AS buynotaxamount,
		0 AS buyreturnnum,0 AS buyreturnamount,0 AS buyreturnnotaxamount,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS costamount,
		t.amount AS writeoffamount, 0 AS costwriteoffamount,
		t.supplierid
		FROM t_account_customer_push_balance t
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1">
				AND t.isinvoice='0' AND t.iswriteoff = '1'  AND t. STATUS IN ('3', '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null">
				and 1 = 2
			</if>
			<if test="condition.brand != null">
				<choose>
					<when test="condition.isbrandarr !=null and condition.isbrandarr == 1">
						and FIND_IN_SET(t.brandid,#{condition.brand})
					</when>
					<otherwise>
						and t.brandid=#{condition.brand}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branduser != null">
				<choose>
					<when test="condition.isbranduserarr != null and condition.isbranduserarr == 1">
						and FIND_IN_SET(t.branduser,#{condition.branduser})
					</when>
					<otherwise>
						and t.branduser=#{condition.branduser}
					</otherwise>
				</choose>
			</if>
			<if test="condition.branddept != null">
				<choose>
					<when test="condition.isbranddeptarr != null and condition.isbranddeptarr == 1">
						and FIND_IN_SET(t.branddept,#{condition.branddept})
					</when>
					<otherwise>
						and t.branddept=#{condition.branddept}
					</otherwise>
				</choose>
			</if>
			<if test="condition.supplierid != null">
				<choose>
					<when test="condition.issupplieridarr != null and condition.issupplieridarr == 1">
						and FIND_IN_SET(t.supplierid,#{condition.supplierid})
					</when>
					<otherwise>
						and t.supplierid=#{condition.supplierid}
					</otherwise>
				</choose>
			</if>
		</trim>
	</sql>
	<!-- 部门采购销售汇总统计表 -->
	<select id="showBuySalesBillCountReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BuySalesBillCountReport">
		SELECT
		z.goodsid,z.brand,z.branduser,z.branddept,z.unitid,z.unitname,z.costprice,SUM(z.buybillcount) AS buybillcount,SUM(z.salebillcount) AS salebillcount,
		(SUM(z.buynum)-SUM(z.buyreturnnum)) AS buynum,(SUM(z.buyamount)-SUM(z.buyreturnamount)) AS buyamount,(SUM(buynotaxamount)-SUM(z.buyreturnnotaxamount)) AS buynotaxamount,
		(SUM(z.sendnum)-SUM(z.returnnum)) AS salenum,(SUM(z.sendamount)-SUM(z.returnamount)) AS saleamount,(SUM(z.sendnotaxamount)-SUM(z.returnnotaxamount)) AS salenotaxamount,
		(SUM(z.sendamount)-SUM(z.returnamount)-SUM(z.costamount)) AS salegrossamount,
		SUM(z.costamount) AS costamount,
		SUM(z.writeoffamount) AS writeoffamount,SUM(z.costwriteoffamount) AS costwriteoffamount,
		(SUM(z.writeoffamount) - SUM(z.costwriteoffamount) ) AS writeoffgrossamount,
		z.supplierid
		FROM
		(
		<include refid="buySalesBillCountReportData_sql"/>
		) z
		<if test="condition.groupcols !=null and condition.groupcols !='' and condition.groupcols != 'all' ">
			group by ${condition.groupcols}
		</if>
		<if test="condition.ispageflag !='true' and condition.groupcols != 'all'">
			<include refid="common.Page_limit" />
		</if>
	</select>
	<select id="showBuySalesBillCountReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		SELECT COUNT(goodsid) from (
		SELECT
		z.goodsid,z.brand,z.branduser,z.branddept,z.unitid,z.unitname,z.costprice,SUM(z.buybillcount) AS buybillcount,SUM(z.salebillcount) AS salebillcount
		FROM
		(
		<include refid="buySalesBillCountReportData_sql"/>
		) z
		<if test="condition.groupcols !=null and condition.groupcols !='' and condition.groupcols != 'all' ">
			group by ${condition.groupcols}
		</if>
		) t
	</select>
	<sql id="salesOrderTrackReportData_sql">
		(
		SELECT
		z.orderid,z.sourcetype,z.sourceid,z.businessdate,z.deliverytype,z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,z.indooruserid,z.adduserid,z.addusername,
		z.goodsid1,z.goodsid2,z.brandid,z.branduser,z.branddept,z.unitid,z.unitname,z.taxprice,z.costprice,z.dispatchprice,z.sendprice,z.returnprice,z.checkprice,
		z.unitprice,z.unitpriceamount,z.ordernum,z.ordertotalbox,z.orderamount,z.ordernotaxamount,
		z.initsendnum,z.initsendtotalbox,z.initsendamount,z.initsendnotaxamount,
		z.sendnum,z.sendtotalbox,z.sendamount,z.sendnotaxamount,z.sendcostamount,
		z.checknum,z.checktotalbox,z.checkamount,z.checknotaxamount,
		z.checkreturnnum,z.checkreturtotalbox,z.checkreturnamount,z.checkreturnnotaxamount,
		z.returnnum,z.returntotalbox,z.returnamount,z.returnnotaxamount,z.returncostamount,
		z.salesnum,z.salestotalbox, z.salesamount,z.salescostamount,z.salemarginamount,z.goodssort
		from (
		SELECT t.id as
		orderid,t.sourcetype,t.sourceid,t.businessdate,t1.deliverytype,t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t.indooruserid,t.adduserid,t.addusername,
		t1.goodsid as goodsid1,t2.goodsid as
		goodsid2,t1.brandid,t1.branduser,t1.branddept,t1.unitid,t1.unitname,t1.taxprice,max(t3.costprice) as
		costprice,t2.taxprice as dispatchprice,max(t3.taxprice) as sendprice,0 as
		returnprice,sum(t4.taxprice*t4.unitnum)/sum(t4.unitnum) as checkprice,
		sum(t4.taxprice*t4.receiptnum)/sum(t4.receiptnum)-t3.taxprice as
		unitprice,(sum(t4.taxprice*t4.receiptnum)/sum(t4.receiptnum)-t3.taxprice)*sum(t4.receiptnum) as
		unitpriceamount,t1.unitnum AS ordernum,t1.totalbox as ordertotalbox,t1.taxamount AS orderamount,t1.notaxamount
		AS ordernotaxamount,
		t2.unitnum AS initsendnum,t2.totalbox as initsendtotalbox,t2.taxamount AS initsendamount,t2.notaxamount AS
		initsendnotaxamount,
		sum(t3.unitnum) AS sendnum,sum(t3.totalbox) as sendtotalbox,sum(t3.taxamount) AS sendamount,sum(t3.notaxamount)
		AS sendnotaxamount,max(t3.unitnum*t3.costprice) as sendcostamount,
		sum(t4.receiptnum) AS checknum,sum(t4.receiptbox) as checktotalbox,sum(t4.receipttaxamount) AS
		checkamount,sum(t4.receiptnotaxamount) AS checknotaxamount,
		sum(t4.unitnum-t4.receiptnum) as checkreturnnum,sum(t4.totalbox-t4.receiptbox) as
		checkreturtotalbox,sum(t4.taxamount-t4.receipttaxamount) as
		checkreturnamount,sum(t4.notaxamount-t4.receiptnotaxamount) as checkreturnnotaxamount,
		sum(t4.unitnum-t4.receiptnum) AS returnnum,sum(t4.totalbox-t4.receiptbox) as returntotalbox,sum(if((t4.unitnum -
		t4.receiptnum) = 0,0,t4.taxprice*(t4.unitnum - t4.receiptnum))) AS returnamount,sum(if((t4.unitnum -
		t4.receiptnum) = 0,0,t4.notaxprice*(t4.unitnum - t4.receiptnum))) AS returnnotaxamount,
		sum(if((t4.unitnum - t4.receiptnum) = 0,0,t4.costprice*(t4.unitnum - t4.receiptnum))) as returncostamount,
		sum(t3.unitnum-(t4.unitnum-t4.receiptnum)) as salesnum,sum(t3.totalbox-(t4.totalbox-t4.receiptbox)) as
		salestotalbox, sum(t3.taxamount-(t4.taxamount-t4.receipttaxamount)) as
		salesamount,sum((t3.unitnum*t3.costprice)-(if((t4.unitnum - t4.receiptnum) = 0,0,t4.costprice*(t4.unitnum -
		t4.receiptnum)))) as salescostamount,
		sum((t4.receipttaxamount)-/*(if((t4.unitnum - t4.receiptnum) = 0,0,t4.taxprice*(t4.unitnum - t4.receiptnum))) -*/
		((t3.unitnum*t3.costprice)-(if((t4.unitnum - t4.receiptnum) = 0,0,t4.costprice*(t4.unitnum - t4.receiptnum))))) as
		salemarginamount,t1.goodssort
		FROM t_sales_order t
		RIGHT JOIN t_sales_order_detail t1 ON t.id = t1.orderid
		LEFT JOIN t_sales_dispatchbill t5 on t5.billno=t.id
		LEFT JOIN t_sales_dispatchbill_detail t2 on t2.billid=t5.id and t2.billdetailno=t1.id and (t5.status='3' or
		t5.status='4')
		LEFT JOIN t_storage_saleout t6 on t6.sourceid=t2.billid
		LEFT JOIN t_storage_saleout_detail t3 on t3.saleoutid=t6.id and t3.dispatchbilldetailid=t2.id and (t6.status='3'
		or t6.status='4')
		LEFT JOIN t_sales_receipt t7 on t7.saleorderid=t.id
		LEFT JOIN t_sales_receipt_detail t4 on t4.billno=t3.saleoutid and t4.billdetailno=t3.id and (t7.status='3' or
		t7.status='4')
		<trim prefix="WHERE" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="1==1">
				and (t.STATUS='3' or t.status='4')
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid = #{condition.pcustomerid}
			</if>
			<if test="condition.customerid != null">
				and t.customerid = #{condition.customerid}
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.indooruserid != null">
				and FIND_IN_SET(t.indooruserid,#{condition.indooruserid})
			</if>
			<if test="condition.adduserid != null">
				and t.adduserid = #{condition.adduserid}
			</if>
			<if test="condition.id != null">
				and t.id like concat('%',#{condition.id},'%')
			</if>
			<if test="condition.sourceid != null">
				and t.sourceid like concat('%',#{condition.sourceid},'%')
			</if>
			<if test="condition.goodssort != null">
				and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
			</if>
		</trim>
		GROUP BY t.id,t1.id,t2.id
		) z
		<trim prefix="WHERE" prefixOverrides="and|or">
			<if test="condition.checkstatus != null">
				<choose>
					<when test="condition.checkstatus == 1">
						and (z.sendprice = z.checkprice and z.sendnum = z.checknum)
					</when>
					<when test="condition.checkstatus  == 2">
						<![CDATA[and (z.sendprice <> z.checkprice or z.sendnum <> z.checknum)]]>
					</when>
				</choose>
			</if>
		</trim>
		)
	</sql>
	<select id="showSalesOrderTrackReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		SELECT z.* from <include refid="salesOrderTrackReportData_sql"/> z
		<if test="condition.ispageflag==null">
			<include refid="common.Page_limit" />
		</if>
	</select>
	<select id="showSalesOrderTrackReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		SELECT count(1) FROM <include refid="salesOrderTrackReportData_sql"/> z
	</select>
	<select id="showSalesOrderTrackReportDataSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		SELECT sum(z.ordernum) AS ordernum, sum(z.ordertotalbox) AS ordertotalbox, sum(z.orderamount) AS orderamount, sum(z.ordernotaxamount) AS ordernotaxamount,
		sum(z.initsendnum) AS initsendnum, sum(z.initsendtotalbox) AS initsendtotalbox, sum(z.initsendamount) AS initsendamount, sum(z.initsendnotaxamount) AS initsendnotaxamount,
		sum(z.sendnum) AS sendnum, sum(z.sendtotalbox) AS sendtotalbox, sum(z.sendamount) AS sendamount, sum(z.sendnotaxamount) AS sendnotaxamount,
		sum(z.sendcostamount) AS sendcostamount, sum(z.checknum) AS checknum, sum(z.checktotalbox) AS checktotalbox, sum(z.checkamount) AS checkamount,
		sum(z.unitpriceamount) AS unitpriceamount, sum(z.checknotaxamount) AS checknotaxamount, sum(z.checkreturnnum) AS checkreturnnum,
		sum(z.checkreturtotalbox) AS checkreturtotalbox, sum(z.checkreturnamount) AS checkreturnamount, sum(z.checkreturnnotaxamount) AS checkreturnnotaxamount,
		sum(z.returnnum) AS returnnum, sum(z.returntotalbox) AS returntotalbox, sum(z.returnamount) AS returnamount, sum(z.returnnotaxamount) AS returnnotaxamount,
		sum(z.returncostamount) AS returncostamount, sum(z.salesnum) AS salesnum, sum(z.salestotalbox) AS salestotalbox, sum(z.salesamount) AS salesamount,
		sum(z.salescostamount) AS salescostamount, sum(z.salemarginamount) AS salemarginamount
		FROM <include refid="salesOrderTrackReportData_sql"/> z
	</select>
	<select id="getSalesRejectTrackReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		SELECT a.* FROM(
		SELECT a.*, b.*, '2' qtype, '直退' qtypename FROM
		(
		SELECT a.* FROM(
		SELECT
		b.id,
		b.businessdate,
		b.customerid,
		a.goodsid,
		a.brandid,
		a.unitid,
		a.unitname,
		a.taxprice,
		a.unitnum,
		a.receiptnum,
		(a.unitnum-a.receiptnum) qnum,
		a.taxamount,
		a.receipttaxamount,
		(a.taxamount-a.receipttaxamount) qamount
		FROM t_sales_receipt_detail a
		LEFT JOIN t_sales_receipt b ON a.billid=b.id
		) a WHERE a.qnum>0
		) a
		LEFT JOIN
		(
		SELECT
		b.id tid,
		a.goodsid tgoodsid,
		b.sourceid,
		a.unitnum tunitnum,
		a.taxamount ttaxamount
		FROM t_storage_salereject_enter_detail a
		LEFT JOIN t_storage_salereject_enter b ON a.salerejectid=b.id WHERE FIND_IN_SET(b.status, '3,4') AND sourcetype='2'
		) b ON a.id = b.sourceid AND a.goodsid = b.tgoodsid
		UNION ALL
		SELECT a.*, b.*, '1' qtype, '售后退货' qtypename FROM
		(
		SELECT
		b.id,
		b.businessdate,
		b.customerid,
		a.goodsid,
		a.brandid,
		a.unitid,
		a.unitname,
		a.taxprice,
		a.unitnum,
		0 receiptnum,
		a.unitnum qnum,
		a.taxamount,
		0 receipttaxamount,
		a.taxamount qamount
		FROM t_sales_rejectbill_detail a
		LEFT JOIN t_sales_rejectbill b ON a.billid=b.id
		) a
		LEFT JOIN
		(
		SELECT
		b.id tid,
		a.goodsid tgoodsid,
		b.sourceid,
		a.unitnum tunitnum,
		a.taxamount ttaxamount
		FROM t_storage_salereject_enter_detail a
		LEFT JOIN t_storage_salereject_enter b ON a.salerejectid=b.id WHERE FIND_IN_SET(b.status, '3,4') AND sourcetype='1'
		) b ON a.id = b.sourceid AND a.goodsid = b.tgoodsid
		) a
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="condition.pcustomerid != null">
				and a.customerid like CONCAT(#{condition.pcustomerid}, '%')
			</if>
			<if test="condition.customerid != null">
				and a.customerid = #{condition.customerid}
			</if>
			<if test="condition.goodsid != null">
				and a.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brandid != null">
				and a.brandid = #{condition.brandid}
			</if>
			<if test="condition.businessdate1 != null">
				and a.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and a.businessdate <= #{condition.businessdate2}]]>
			</if>
		</trim>
		<if test="condition.ispageflag==null">
			<include refid="common.Page_limit" />
		</if>
	</select>
	<select id="getSalesRejectTrackReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		SELECT count(1) FROM(
		SELECT a.*, b.*, '2' qtype, '直退' qtypename FROM
		(
		SELECT a.* FROM(
		SELECT
		b.id,
		b.businessdate,
		b.customerid,
		a.goodsid,
		a.brandid,
		a.unitid,
		a.unitname,
		a.taxprice,
		a.unitnum,
		a.receiptnum,
		(a.unitnum-a.receiptnum) qnum,
		a.taxamount,
		a.receipttaxamount,
		(a.taxamount-a.receipttaxamount) qamount
		FROM t_sales_receipt_detail a
		LEFT JOIN t_sales_receipt b ON a.billid=b.id
		) a WHERE a.qnum>0
		) a
		LEFT JOIN
		(
		SELECT
		b.id tid,
		a.goodsid tgoodsid,
		b.sourceid,
		a.unitnum tunitnum,
		a.taxamount ttaxamount
		FROM t_storage_salereject_enter_detail a
		LEFT JOIN t_storage_salereject_enter b ON a.salerejectid=b.id WHERE FIND_IN_SET(b.status, '3,4') AND sourcetype='2'
		) b ON a.id = b.sourceid AND a.goodsid = b.tgoodsid
		UNION ALL
		SELECT a.*, b.*, '1' qtype, '售后退货' qtypename FROM
		(
		SELECT
		b.id,
		b.businessdate,
		b.customerid,
		a.goodsid,
		a.brandid,
		a.unitid,
		a.unitname,
		a.taxprice,
		a.unitnum,
		0 receiptnum,
		a.unitnum qnum,
		a.taxamount,
		0 receipttaxamount,
		a.taxamount qamount
		FROM t_sales_rejectbill_detail a
		LEFT JOIN t_sales_rejectbill b ON a.billid=b.id
		) a
		LEFT JOIN
		(
		SELECT
		b.id tid,
		a.goodsid tgoodsid,
		b.sourceid,
		a.unitnum tunitnum,
		a.taxamount ttaxamount
		FROM t_storage_salereject_enter_detail a
		LEFT JOIN t_storage_salereject_enter b ON a.salerejectid=b.id WHERE FIND_IN_SET(b.status, '3,4') AND sourcetype='1'
		) b ON a.id = b.sourceid AND a.goodsid = b.tgoodsid
		) a
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="condition.pcustomerid != null">
				and a.customerid like CONCAT(#{condition.pcustomerid}, '%')
			</if>
			<if test="condition.customerid != null">
				and a.customerid = #{condition.customerid}
			</if>
			<if test="condition.goodsid != null">
				and a.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brandid != null">
				and a.brandid = #{condition.brandid}
			</if>
			<if test="condition.businessdate1 != null">
				and a.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and a.businessdate <= #{condition.businessdate2}]]>
			</if>
		</trim>
	</select>

	<sql id="BaseSalesUNJIAReportData_sql">
		(select * from (
		SELECT
		t.id,t.businessdate,t.customerid,t.pcustomerid,x.name as customername,t.customersort,t.salesarea,t.salesdept,t.salesuser,a.barcode AS barcode,a.spell,x.shortcode,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.unitid,t1.unitname,t1.taxprice,t1.notaxprice AS notaxprice,t1.costprice,t1.supplierid,t1.supplieruser,
		0 AS ordernum,0 AS orderamount,0 AS ordernotaxamount,
		0 AS initsendnum,0 AS initsendamount,0 AS initsendnotaxamount,
		t1.unitnum AS unitnum,t1.unitnum AS sendnum,t1.taxamount AS sendamount,t1.notaxamount AS sendnotaxamount,t1.unitnum*t1.costprice as sendcostamount,
		0 AS returnnum,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS checkreturnnum,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		t1.unitnum*t1.costprice as costamount,
		0 AS writeoffamount,0 AS costwriteoffamount
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		left join t_base_sales_customer x on x.id = t.customerid
		LEFT JOIN t_base_goods_info a ON a.id = t1.goodsid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.brandid != null" >
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="1==1">
				and (t.status='3' or t.status='4')
			</if>
		</trim>
		union ALL
		SELECT
		t.id,t.businessdate,t.customerid,t.pcustomerid,x.name as customername,x.customersort,t.salesarea,t.salesdept,t.salesuser,a.barcode AS barcode,a.spell,x.shortcode,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.unitid,t1.unitname,t1.taxprice,t1.notaxprice AS notaxprice,t1.costprice,t1.supplierid,t1.supplieruser,
		0 AS ordernum,0 AS orderamount,0 AS ordernotaxamount,
		0 AS initsendnum,0 AS initsendamount,0 AS initsendnotaxamount,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		-t1.unitnum AS unitnum,t1.unitnum AS returnnum,t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,
		t1.unitnum AS directreturnnum,t1.taxamount AS directreturnamount,t1.notaxamount AS directreturnnotaxamount,
		0 AS checkreturnnum,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,
		0 AS writeoffamount,0 AS costwriteoffamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		left join t_base_sales_customer x on x.id=t.customerid
		LEFT JOIN t_base_goods_info a ON a.id = t1.goodsid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.brandid != null" >
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="1==1">
				and (t.status='3' or t.status='4')
			</if>
		</trim>
		)z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>)
	</sql>
	<select id="getUNJIASalesReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesUNJIAReport">
		select * from (
		SELECT z.id,z.businessdate,z.customerid,z.customername,z.goodsid,z.unitnum,z.notaxprice,z.brandid,z.spell,z.shortcode,z.supplierid,z.supplieruser,
		'CN01000111' AS field1,'1' AS field2,'尤妮佳大仓' AS field3,'0' AS field4,'7' AS field5,'126' AS field6,'0' AS field7,
		'0' AS field8,'0' AS field9,'0' AS field10,z.barcode
		FROM <include refid="BaseSalesUNJIAReportData_sql"/> z
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(z.brandid, #{condition.brandid})
			</if>
		</trim>
		GROUP BY z.customerid,z.goodsid
		)y
	</select>

	<select id="getSalesGoodsSandPriceReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesCustomerPriceReport">
		select
		a.id,a.shopid,a.customerid,a.goodsid,a.barcode,
		a.price,a.noprice,a.remark,a.addtime
		FROM t_base_sales_customer cus
		INNER JOIN t_base_sales_customer_price a
		ON a.customerid=cus.id
		<if test="condition.brandid != null">
			LEFT JOIN t_base_goods_info c
			ON c.id = a.goodsid
		</if>
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.customerid != null">
				and cus.id = #{condition.customerid}
			</if>
			<if test="condition.goodsid != null">
				and a.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brandid != null">
				and c.brand = #{condition.brandid}
			</if>
			<if test="condition.customerid == null and condition.goodsid == null and condition.brandid ==null">
				1=2
			</if>
			<if test="condition.customerDataSql != null">
				and ${condition.customerDataSql}
			</if>
		</trim>
		UNION
		select
		a.id,a.shopid,cus.id as customerid,a.goodsid,a.barcode,
		a.price,a.noprice,a.remark,a.addtime
		FROM t_base_sales_customer cus
		INNER JOIN t_base_sales_customer_price a
		ON a.customerid=cus.pid
		<if test="condition.brandid != null">
			LEFT JOIN t_base_goods_info c
			ON c.id = a.goodsid
		</if>
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.customerid != null">
				and cus.id = #{condition.customerid}
			</if>
			<if test="condition.goodsid != null">
				and a.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brandid != null">
				and c.brand = #{condition.brandid}
			</if>
			<if test="condition.customerid == null and condition.goodsid == null and condition.brandid ==null">
				1=2
			</if>
			<if test="condition.customerDataSql != null">
				and ${condition.customerDataSql}
			</if>
			<if test="1 == 1">
				and cus.islast='1'
			</if>
		</trim>
		<choose>
			<when test="condition.ispageflag == null or condition.ispageflag !='true'">
				<include refid="common.Page_limit"/>
			</when>
			<otherwise>
				<include refid="common.Page_OrderOnly"/>
			</otherwise>
		</choose>
	</select>
	<select id="getSalesGoodsSandPriceReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		select
		a.id,a.shopid,a.customerid,a.goodsid,a.barcode,
		a.price,a.noprice,a.remark,a.addtime
		FROM t_base_sales_customer cus
		INNER JOIN t_base_sales_customer_price a
		ON a.customerid=cus.id
		<if test="condition.brandid != null">
			LEFT JOIN t_base_goods_info c
			ON c.id = a.goodsid
		</if>
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.customerid != null">
				and cus.id = #{condition.customerid}
			</if>
			<if test="condition.goodsid != null">
				and a.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brandid != null">
				and c.brand = #{condition.brandid}
			</if>
			<if test="condition.customerid == null and condition.goodsid == null and condition.brandid ==null">
				and 1=2
			</if>
			<if test="condition.customerDataSql != null">
				and ${condition.customerDataSql}
			</if>
		</trim>
		UNION
		select
		a.id,a.shopid,cus.id as customerid,a.goodsid,a.barcode,
		a.price,a.noprice,a.remark,a.addtime
		FROM t_base_sales_customer cus
		INNER JOIN t_base_sales_customer_price a
		ON a.customerid=cus.pid
		<if test="condition.brandid != null">
			LEFT JOIN t_base_goods_info c
			ON c.id = a.goodsid
		</if>
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.customerid != null">
				and cus.id = #{condition.customerid}
			</if>
			<if test="condition.goodsid != null">
				and a.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brandid != null">
				and c.brand = #{condition.brandid}
			</if>
			<if test="condition.customerid == null and condition.goodsid == null and condition.brandid ==null">
				and 1=2
			</if>
			<if test="condition.customerDataSql != null">
				and ${condition.customerDataSql}
			</if>
			<if test="1 == 1">
				and cus.islast='1'
			</if>
		</trim>
		)z
	</select>
	<select id="getSalesGoodsTradeReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesCustomerPriceReport">
		select
		a.id,a.customerid,a.goodsid,a.remark
		FROM t_base_sales_customer cus
		INNER JOIN t_base_sales_customer_goods a
		ON a.customerid=cus.id
		<if test="condition.brandid != null">
			LEFT JOIN t_base_goods_info c on c.id = a.goodsid
		</if>
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.customerid != null">
				and a.customerid = #{condition.customerid}
			</if>
			<if test="condition.goodsid != null">
				and a.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brandid != null">
				and c.brand = #{condition.brandid}
			</if>
			<if test="condition.customerDataSql != null">
				and ${condition.customerDataSql}
			</if>
			<if test="condition.customerid == null and condition.goodsid == null and condition.brandid ==null">
				and 1=2
			</if>
		</trim>
		<choose>
			<when test="condition.ispageflag == null or condition.ispageflag !='true'">
				<include refid="common.Page_limit"/>
			</when>
			<otherwise>
				<include refid="common.Page_OrderOnly"/>
			</otherwise>
		</choose>
	</select>
	<select id="getSalesGoodsTradeReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		select
		a.id,a.customerid,a.goodsid,a.remark
		FROM t_base_sales_customer cus
		INNER JOIN t_base_sales_customer_goods a
		ON a.customerid=cus.id
		<if test="condition.brandid != null">
			LEFT JOIN t_base_goods_info c on c.id = a.goodsid
		</if>
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.customerid != null">
				and customerid = #{condition.customerid}
			</if>
			<if test="condition.goodsid != null">
				and goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brandid != null">
				and c.brand = #{condition.brandid}
			</if>
			<if test="condition.customerDataSql != null">
				and ${condition.customerDataSql}
			</if>
			<if test="condition.customerid == null and condition.goodsid == null and condition.brandid ==null">
				and 1=2
			</if>
		</trim>
		)z
	</select>
	<select id="getSalesGoodsNotTradeReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesCustomerPriceReport">
		<choose>
			<when test="condition.showCustomerNotTrade=='true'">
				SELECT t.customerid,g.id as goodsid,g.name as goodsname,g.brand as brandid,g.barcode FROM t_base_goods_info g
				inner join
				(
				SELECT id as customerid,#{condition.goodsid} AS goodsid FROM t_base_sales_customer cus
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="1==1">
						NOT EXISTS
						(
						SELECT 1 FROM t_base_sales_customer_goods a
						<trim prefix="where" prefixOverrides="and|or" >
							<if test="1==1">
								and a.customerid=cus.id
							</if>
							<if test="condition.goodsid != null">
								and a.goodsid = #{condition.goodsid}
							</if>
						</trim>
						)
					</if>
					<if test="condition.customerDataSql != null">
						and ${condition.customerDataSql}
					</if>
				</trim>
				) t on g.id=t.goodsid
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="condition.goodsid != null">
						and g.id = #{condition.goodsid}
					</if>
					<if test="condition.brandid != null">
						and g.brand = #{condition.brandid}
					</if>
				</trim>
			</when>
			<otherwise>
				SELECT '' AS customerid,g.id as goodsid,g.name as goodsname,g.brand as brandid,g.barcode FROM t_base_goods_info g
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="1 == 1">
						NOT EXISTS  (
						SELECT 1 FROM t_base_sales_customer cus
						INNER JOIN t_base_sales_customer_goods a
						ON cus.id=a.customerid
						WHERE
						<trim prefixOverrides="and|or" >
							<if test="1==1">
								and a.goodsid=g.id
							</if>
							<if test="condition.customerid != null">
								and a.customerid = #{condition.customerid}
							</if>
							<if test="condition.customerDataSql != null">
								and ${condition.customerDataSql}
							</if>
						</trim>
						)
					</if>
					<if test="condition.customerid == null">
						and 1 = 2
					</if>
					<if test="condition.goodsid != null">
						and g.id = #{condition.goodsid}
					</if>
					<if test="condition.brandid != null">
						and g.brand = #{condition.brandid}
					</if>
				</trim>
			</otherwise>
		</choose>
		<choose>
			<when test="condition.ispageflag == null or condition.ispageflag !='true'">
				<include refid="common.Page_limit"/>
			</when>
			<otherwise>
				<include refid="common.Page_OrderOnly"/>
			</otherwise>
		</choose>
	</select>
	<select id="getSalesGoodsNotTradeReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		<choose>
			<when test="condition.showCustomerNotTrade=='true'">
				SELECT t.customerid,g.id as goodsid,g.name as goodsname,g.brand as brandid,g.barcode FROM t_base_goods_info g
				inner join
				(
				SELECT id as customerid,#{condition.goodsid} AS goodsid FROM t_base_sales_customer cus
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="1==1">
						NOT EXISTS
						(
						SELECT 1 FROM t_base_sales_customer_goods a
						<trim prefix="where" prefixOverrides="and|or" >
							<if test="1==1">
								and a.customerid=cus.id
							</if>
							<if test="condition.goodsid != null">
								and a.goodsid = #{condition.goodsid}
							</if>
						</trim>
						)
					</if>
					<if test="condition.customerDataSql != null">
						and ${condition.customerDataSql}
					</if>
				</trim>
				) t on g.id=t.goodsid
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="condition.goodsid != null">
						and g.id = #{condition.goodsid}
					</if>
					<if test="condition.brandid != null">
						and g.brand = #{condition.brandid}
					</if>
				</trim>
			</when>
			<otherwise>
				SELECT '' AS customerid,g.id as goodsid,g.name as goodsname,g.brand as brandid,g.barcode FROM t_base_goods_info g
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="1 == 1">
						NOT EXISTS  (
						SELECT 1 FROM t_base_sales_customer cus
						INNER JOIN t_base_sales_customer_goods a
						ON cus.id=a.customerid
						WHERE
						<trim prefixOverrides="and|or" >
							<if test="1==1">
								and a.goodsid=g.id
							</if>
							<if test="condition.customerid != null">
								and a.customerid = #{condition.customerid}
							</if>
							<if test="condition.customerDataSql != null">
								and ${condition.customerDataSql}
							</if>
						</trim>
						)
					</if>
					<if test="condition.customerid == null">
						and 1 = 2
					</if>
					<if test="condition.goodsid != null">
						and g.id = #{condition.goodsid}
					</if>
					<if test="condition.brandid != null">
						and g.brand = #{condition.brandid}
					</if>
				</trim>
			</otherwise>
		</choose>
		)z
	</select>
	<!-- 要货金额报表 -->
	<sql id="SalesDemandReportList_sql">
		SELECT z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.goodsid,z.brandid,z.branduser,z.branddept,z.supplierid,z.supplieruser,
		z.unitid,z.unitname,z.auxunitid,z.auxunitname,MAX(z.taxprice) as taxprice,MAX(z.notaxprice) as notaxprice,MAX(z.costprice) as costprice,MAX(z.oldprice) as oldprice,
		SUM(z.unitnum) as unitnum,SUM(z.auxnum) as auxnum,SUM(z.overnum) as overnum,SUM(z.taxamount) as taxamount,
		SUM(z.notaxamount) as notaxamount,SUM(z.tax) as tax,z.goodssort
		from (
		SELECT t.customerid,c.pid as pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.notaxprice,t1.costprice,t1.oldprice,
		t1.unitnum,t1.auxnum,t1.overnum,t1.taxamount,t1.notaxamount,t1.tax,t1.goodssort
		FROM t_sales_demand t
		RIGHT JOIN t_sales_demand_detail t1 ON t.id = t1.orderid
		LEFT JOIN  t_base_sales_customer c on t.customerid=c.id
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_querySql"/>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t1.branduser,#{condition.branduser})
			</if>
			<if test="condition.branddept != null">
				and FIND_IN_SET(t1.branddept,#{condition.branddept})
			</if>
			<if test="condition.status != null">
				and FIND_IN_SET(t.status,#{condition.status})
			</if>
			<if test="condition.goodssort != null">
				and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
			</if>
		</trim>
		)z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
		</trim>
		<choose>
			<when test="condition.groupcols != null and condition.groupcols != 'all'">
				GROUP BY ${condition.groupcols}
			</when>
			<when test="condition.groupcols == 'all'"></when>
			<otherwise>
				GROUP BY customerid,goodsid
			</otherwise>
		</choose>
	</sql>
	<select id="getSalesDemandReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesDemandReport">
		<include refid="SalesDemandReportList_sql"/>
		<if test="condition.groupcols != 'all'">
			<choose>
				<when test="condition.isflag == null">
					<include refid="common.Page_limit"/>
				</when>
				<otherwise>
					<include refid="common.Page_OrderOnly"/>
				</otherwise>
			</choose>
		</if>
	</select>
	<select id="getSalesDemandReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		<include refid="SalesDemandReportList_sql"/>
		)c
	</select>

	<!-- 直营销售报表 -->
	<sql id="getSalesCarReportList_sql">
		(
		select t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t2.id as caruser, t2.employetype,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.notaxprice,t1.costprice,t1.initprice,
		t1.unitnum,t1.auxnum,t1.overnum,t1.taxamount,t1.notaxamount,t1.tax,
		t1.costprice*t1.unitnum as costamount,(t1.taxamount - t1.costprice*t1.unitnum) as marginamount
		FROM t_sales_order_car t
		RIGHT JOIN t_sales_order_car_detail t1 ON t.id = t1.orderid
		LEFT JOIN (
		SELECT t.userid,t1.* FROM t_sys_user t
		LEFT JOIN t_base_personnel t1 ON t.personnelid = t1.id
		) t2 ON t2.userid = t.adduserid
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_querySql"/>
			<!--<if test="condition.iscaruser != null">-->
			<!--and t2.employetype like '%5%'-->
			<!--</if>-->
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.caruser != null">
				and FIND_IN_SET(t2.id,#{condition.caruser})
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t1.branduser,#{condition.branduser})
			</if>
			<if test="condition.branddept != null">
				and FIND_IN_SET(t1.branddept,#{condition.branddept})
			</if>
			<choose>
				<when test="condition.isClose != null">
					<choose>
						<when test="condition.isClose == 'oppaudit' ">
							and status in("1","2")
						</when>
						<when test="condition.isClose == 'audit' ">
							and status in("3","4")
						</when>
						<otherwise>
							and status in("1","2","3","4")
						</otherwise>
					</choose>
				</when>
				<otherwise>
					and status in("1","2","3","4")
				</otherwise>
			</choose>
		</trim>
		)
	</sql>
	<select id="getSalesCarReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesCarReport">
		SELECT z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.caruser,
		z.goodsid,z.brandid,z.branduser,z.branddept,z.supplierid,z.supplieruser,
		z.unitid,z.unitname,z.auxunitid,z.auxunitname,MAX(z.taxprice) as taxprice,MAX(z.notaxprice) as notaxprice,MAX(z.costprice) as costprice,MAX(z.initprice) as initprice,
		SUM(z.unitnum) as unitnum,SUM(z.auxnum) as auxnum,SUM(z.overnum) as overnum,
		SUM(z.taxamount) as taxamount,SUM(z.notaxamount) as notaxamount,SUM(z.tax) as tax,
		SUM(z.costamount) as costamount,SUM(z.marginamount) as marginamount,
		SUM(z.marginamount)/SUM(z.taxamount)*100 as realrate
		from <include refid="getSalesCarReportList_sql"/> z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
		</trim>
		<choose>
			<when test="condition.groupcols != null and condition.groupcols != 'all'">
				GROUP BY ${condition.groupcols}
			</when>
			<when test="condition.groupcols == 'all'"></when>
			<otherwise>
				GROUP BY customerid,goodsid
			</otherwise>
		</choose>
		<if test="condition.groupcols != 'all'">
			<if test="condition.isflag == null">
				<include refid="common.Page_limit"/>
			</if>
		</if>

	</select>
	<select id="getSalesCarReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		SELECT z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.caruser,
		z.goodsid,z.brandid,z.branduser,z.branddept,z.supplierid,z.supplieruser,
		z.unitid,z.unitname,z.auxunitid,z.auxunitname,MAX(z.taxprice) as taxprice,MAX(z.notaxprice) as notaxprice,MAX(z.costprice) as costprice,MAX(z.initprice) as initprice,
		SUM(z.unitnum) as unitnum,SUM(z.auxnum) as auxnum,SUM(z.overnum) as overnum,
		SUM(z.taxamount) as taxamount,SUM(z.notaxamount) as notaxamount,SUM(z.tax) as tax,
		SUM(z.costamount) as costamount,SUM(z.marginamount) as marginamount,
		SUM(z.marginamount)/SUM(z.taxamount)*100 as realrate
		from <include refid="getSalesCarReportList_sql"/> z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
		</trim>
		<choose>
			<when test="condition.groupcols != null and condition.groupcols != 'all'">
				GROUP BY ${condition.groupcols}
			</when>
			<when test="condition.groupcols == 'all'"></when>
			<otherwise>
				GROUP BY customerid,goodsid
			</otherwise>
		</choose>
		)c
	</select>
	<select id="getSalesGoodsQuotationReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SalesCustomerPriceReport">
		SELECT g.id as goodsid,g.name as goodsname,g.brand as brandid,g.barcode,g.basesaleprice as price FROM t_base_goods_info g
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.goodsid != null">
				and g.id = #{condition.goodsid}
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(g.brand ,#{condition.brandid})
			</if>
			<if test="condition.goodsidarr">
				and FIND_IN_SET(g.id,#{condition.goodsidarr})
			</if>
			<if test="condition.shownodata =='true'">
				and 1=2
			</if>
			<if test="condition.goodsidarr">
				and FIND_IN_SET(g.id,#{condition.goodsidarr})
			</if>
			<if test="1==1">
				and g.state='1'
			</if>
			<!-- 分销规则 start -->
			<if test="condition.okDistributions != null">
				and ( 1 = 2
				<foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.id in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.goodsid != '' and rd.goodsid is not null and rd.ruleid in(" close="))">
					#{distribution.id }
				</foreach>
				<foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.brand in (select brandid from t_base_sales_distribution_rule_detail rd where rd.brandid != '' and rd.brandid is not null and rd.ruleid in(" close="))">
					#{distribution.id }
				</foreach>
				<foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.defaultsort in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.goodssort != '' and rd.goodssort is not null and rd.ruleid in(" close="))">
					#{distribution.id }
				</foreach>
				<foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.goodstype in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.goodstype != '' and rd.goodstype is not null and rd.ruleid in(" close="))">
					#{distribution.id }
				</foreach>
				<foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.defaultsupplier in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.supplierid != '' and rd.supplierid is not null and rd.ruleid in(" close="))">
					#{distribution.id }
				</foreach>
				)
			</if>
			<if test="condition.ngDistributions != null">
				<foreach collection="condition.ngDistributions" item="distribution" separator="" open="  " close="">
					and
					<choose>
						<when test="distribution.goodsruletype == 1">
							g.id not in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodsid != '' and rd.goodsid is not null )
						</when>
						<when test="distribution.goodsruletype == 2">
							g.brand not in (select brandid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.brandid != '' and rd.brandid is not null )
						</when>
						<when test="distribution.goodsruletype == 3">
							g.defaultsort not in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodssort != '' and rd.goodssort is not null )
						</when>
						<when test="distribution.goodsruletype == 4">
							g.goodstype not in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodstype != '' and rd.goodstype is not null )
						</when>
						<when test="distribution.goodsruletype == 5">
							g.defaultsupplier not in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.supplierid != '' and rd.supplierid is not null )
						</when>
						<otherwise>
							1 = 2
						</otherwise>
					</choose>
				</foreach>
			</if>
			<!-- 分销规则 end -->
		</trim>
		<choose>
			<when test="condition.ispageflag == null or condition.ispageflag !='true'">
				<include refid="common.Page_limit"/>
			</when>
			<otherwise>
				<include refid="common.Page_OrderOnly"/>
			</otherwise>
		</choose>
	</select>
	<select id="getSalesGoodsQuotationReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		SELECT g.id FROM t_base_goods_info g
		<trim prefix="where" prefixOverrides="and|or" >

			<if test="condition.goodsid != null">
				and g.id = #{condition.goodsid}
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(g.brand ,#{condition.brandid})
			</if>
			<if test="condition.goodsidarr">
				and FIND_IN_SET(g.id,#{condition.goodsidarr})
			</if>
			<if test="1==1">
				and g.state='1'
			</if>
			<!-- 分销规则 start -->
			<if test="condition.okDistributions != null">
				and ( 1 = 2
				<foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.id in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.goodsid != '' and rd.goodsid is not null and rd.ruleid in(" close="))">
					#{distribution.id }
				</foreach>
				<foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.brand in (select brandid from t_base_sales_distribution_rule_detail rd where rd.brandid != '' and rd.brandid is not null and rd.ruleid in(" close="))">
					#{distribution.id }
				</foreach>
				<foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.defaultsort in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.goodssort != '' and rd.goodssort is not null and rd.ruleid in(" close="))">
					#{distribution.id }
				</foreach>
				<foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.goodstype in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.goodstype != '' and rd.goodstype is not null and rd.ruleid in(" close="))">
					#{distribution.id }
				</foreach>
				<foreach collection="condition.okDistributions" item="distribution" separator="," open="or g.defaultsupplier in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.supplierid != '' and rd.supplierid is not null and rd.ruleid in(" close="))">
					#{distribution.id }
				</foreach>
				)
			</if>
			<if test="condition.ngDistributions != null">
				<foreach collection="condition.ngDistributions" item="distribution" separator="" open="  " close="">
					and
					<choose>
						<when test="distribution.goodsruletype == 1">
							g.id not in (select goodsid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodsid != '' and rd.goodsid is not null )
						</when>
						<when test="distribution.goodsruletype == 2">
							g.brand not in (select brandid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.brandid != '' and rd.brandid is not null )
						</when>
						<when test="distribution.goodsruletype == 3">
							g.defaultsort not in (select goodssort from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodssort != '' and rd.goodssort is not null )
						</when>
						<when test="distribution.goodsruletype == 4">
							g.goodstype not in (select goodstype from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.goodstype != '' and rd.goodstype is not null )
						</when>
						<when test="distribution.goodsruletype == 5">
							g.defaultsupplier not in (select supplierid from t_base_sales_distribution_rule_detail rd where rd.ruleid = #{distribution.id } and rd.supplierid != '' and rd.supplierid is not null )
						</when>
						<otherwise>
							1 = 2
						</otherwise>
					</choose>
				</foreach>
			</if>
			<!-- 分销规则 end -->
		</trim>
		)z
	</select>
	<select id="getSalesTargetReportBranduserCustomerData" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT c.id AS customerid, p.id AS branduser,p.belongdeptid as branddept,0.000000 AS saleamount,0.000000 AS qqsaleamount
		<if test="condition.dyncBrandCustomerColumn !=null">
			${condition.dyncBrandCustomerColumn}
		</if>
		FROM t_base_personnel p
		inner join t_base_personnel_customer pc ON p.id = pc.personid
		inner join t_base_sales_customer c ON c.id=pc.customerid
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and p.employetype='3' </if>
			<if test="condition.branduser != null" >
				and p.id=#{condition.branduser}
			</if>
			<if test="condition.branddept != null">
				and p.belongdeptid like concat(#{condition.branddept},'%')
			</if>
			<if test="condition.customerid != null" >
				and c.id=#{condition.customerid}
			</if>
			<if test="condition.customeridarr != null" >
				and FIND_IN_SET(c.id,#{condition.customeridarr})
			</if>
		</trim>
		<if test="condition.isPageflag !='true'">
			<include refid="common.Page_limit" />
		</if>
	</select>
	<select id="getSalesTargetReportBranduserCustomerCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(p.id) from t_base_personnel p
		inner join t_base_personnel_customer pc ON p.id = pc.personid
		inner join t_base_sales_customer c ON c.id=pc.customerid
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and p.employetype='3' </if>
			<if test="condition.branduser != null" >
				and p.id=#{condition.branduser}
			</if>
			<if test="condition.branddept != null">
				and p.belongdeptid like concat(#{condition.branddept},'%')
			</if>
			<if test="condition.customerid != null" >
				and c.id=#{condition.customerid}
			</if>
			<if test="condition.customeridarr != null" >
				and FIND_IN_SET(c.id,#{condition.customeridarr})
			</if>
		</trim>
	</select>
	<sql id="salesUserCustomerTarget_sql">
		(
		SELECT t.customerid,t1.brandid AS brand,t.salesuser,t1.taxamount AS sendamount,0 AS qqsendamount,0 AS returnamount,0 AS qqreturnamount
		FROM
		t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.STATUS IN ('3', '4') </if>
			<if test="condition.bqstartdate != null">
				<![CDATA[  and  t.businessdate>= #{condition.bqstartdate} ]]>
			</if>
			<if test="condition.bqenddate != null">
				<![CDATA[  and  t.businessdate<= #{condition.bqenddate} ]]>
			</if>
			<if test="condition.salesuser != null" >
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customeridarr != null" >
				and t.customerid=#{condition.customeridarr}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(t1.brandid,#{condition.brandidarr})
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t1.brandid AS brand,t.salesuser,0 AS sendamount,t1.taxamount AS qqsendamount,0 AS returnamount,0 AS qqreturnamount
		FROM
		t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.STATUS IN ('3', '4') </if>
			<if test="condition.qqstartdate != null">
				<![CDATA[  and  t.businessdate >= #{condition.qqstartdate} ]]>
			</if>
			<if test="condition.qqenddate != null">
				<![CDATA[  and  t.businessdate <= #{condition.qqenddate} ]]>
			</if>
			<if test="condition.salesuser != null" >
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customeridarr != null" >
				and t.customerid=#{condition.customeridarr}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(t1.brandid,#{condition.brandidarr})
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t1.brandid AS brand,t.salesuser,0 AS sendamount,0 AS qqsendamount,t1.taxamount AS returnamount,0 AS qqreturnamount
		FROM
		t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.ischeck = '1' and t.STATUS IN ('3', '4') </if>
			<if test="condition.bqstartdate != null">
				<![CDATA[  and  t.businessdate>= #{condition.bqstartdate} ]]>
			</if>
			<if test="condition.bqenddate != null">
				<![CDATA[  and  t.businessdate <= #{condition.bqenddate} ]]>
			</if>
			<if test="condition.salesuser != null" >
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customeridarr != null" >
				and t.customerid=#{condition.customeridarr}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(t1.brandid,#{condition.brandidarr})
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t1.brandid AS brand,t.salesuser,0 AS sendamount,0 AS qqsendamount,0 AS returnamount,t1.taxamount AS qqreturnamount
		FROM
		t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.ischeck = '1' and t.STATUS IN ('3', '4') </if>
			<if test="condition.qqstartdate != null">
				<![CDATA[  and  t.businessdate >= #{condition.qqstartdate} ]]>
			</if>
			<if test="condition.qqenddate != null">
				<![CDATA[  and  t.businessdate <= #{condition.qqenddate} ]]>
			</if>
			<if test="condition.salesuser != null" >
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customeridarr != null" >
				and t.customerid=#{condition.customeridarr}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(t1.brandid,#{condition.brandidarr})
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t.brandid AS brand,t.salesuser,t.amount AS sendamount,0 AS qqsendamount,0 AS returnamount,0 AS qqreturnamount
		FROM t_account_customer_push_balance t
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.STATUS IN ('3', '4') </if>
			<if test="condition.bqstartdate != null">
				<![CDATA[  and  t.businessdate >= #{condition.bqstartdate} ]]>
			</if>
			<if test="condition.bqenddate != null">
				<![CDATA[  and  t.businessdate <= #{condition.bqenddate} ]]>
			</if>
			<if test="condition.salesuser != null" >
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customeridarr != null" >
				and t.customerid=#{condition.customeridarr}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(t.brandid,#{condition.brandidarr})
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t.brandid AS brand,t.salesuser,0 AS sendamount,t.amount AS qqsendamount,0 AS returnamount,0 AS qqreturnamount
		FROM t_account_customer_push_balance t
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.STATUS IN ('3', '4') </if>
			<if test="condition.qqstartdate != null">
				<![CDATA[  and  t.businessdate >= #{condition.qqstartdate}]]>
			</if>
			<if test="condition.qqenddate != null">
				<![CDATA[  and  t.businessdate <= #{condition.qqenddate} ]]>
			</if>
			<if test="condition.salesuser != null" >
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customeridarr != null" >
				and t.customerid=#{condition.customeridarr}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(t.brandid,#{condition.brandidarr})
			</if>
		</trim>
		UNION ALL
		SELECT t.id as customerid,b.id as brandid,p.id as salesuser,0 AS sendamount,0 AS qqsendamount,0 AS returnamount,0 AS qqreturnamount
		from t_base_personnel p
		left join t_base_sales_customer t on p.id = t.salesuserid
		INNER JOIN t_base_goods_brand b
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and b.state = '1' </if>
			<if test="condition.salesuser != null" >
				and p.id = #{condition.salesuser}
			</if>
			<if test="condition.customeridarr != null" >
				and t.id=#{condition.customeridarr}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(b.id,#{condition.brandidarr})
			</if>
		</trim>
		)
	</sql>
	<select id="getSalesTargetReportSalesUserCustomerData" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT z.customerid,z.brand,z.salesuser,(SUM(z.sendamount) - SUM(z.returnamount)) AS saleamount,(SUM(z.qqsendamount) - SUM(z.qqreturnamount)) AS qqsaleamount
		FROM <include refid="salesUserCustomerTarget_sql"></include> z GROUP BY z.customerid,z.brand,z.salesuser
		<if test="condition.ispageflag == null or condition.ispageflag !='true'">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="getSalesTargetReportSalesUserCustomerCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		SELECT z.customerid,z.brand,z.salesuser,(SUM(z.sendamount) - SUM(z.returnamount)) AS saleamount,(SUM(z.qqsendamount) - SUM(z.qqreturnamount)) AS qqsaleamount
		FROM <include refid="salesUserCustomerTarget_sql"></include> z GROUP BY z.customerid,z.brand,z.salesuser
		) z
	</select>
	<select id="sumSalesTargetReportSalesUser" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT (SUM(z.sendamount) - SUM(z.returnamount)) AS saleamount,(SUM(z.qqsendamount) - SUM(z.qqreturnamount)) AS qqsaleamount
		FROM <include refid="salesUserCustomerTarget_sql"></include> z
	</select>
	<select id="getSalesCustomerTargetReportSalesData" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT
		customerid,
		branduser
		<if test="condition.dyncSalesColumn !=null">
			${condition.dyncSalesColumn}
		</if>
		FROM (
		SELECT
		z.customerid,
		z.brand,
		z.branduser,
		(
		SUM(z.sendamount) - SUM(z.returnamount)
		) AS saleamount,
		(
		SUM(z.qqsendamount) - SUM(z.qqreturnamount)
		) AS qqsaleamount
		FROM
		(
		SELECT
		t.customerid,
		t1.brandid AS brand,
		t1.branduser,
		t1.taxamount AS sendamount,
		0 AS qqsendamount,
		0 AS returnamount,
		0 AS qqreturnamount
		FROM
		t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.STATUS IN ('3', '4') </if>
			<if test="condition.bqstartdate != null">
				<![CDATA[  and  t.businessdate>= #{condition.bqstartdate} ]]>
			</if>
			<if test="condition.bqenddate != null">
				<![CDATA[  and  t.businessdate<= #{condition.bqenddate} ]]>
			</if>
			<if test="condition.branddept != null">
				and t1.branddept like concat(#{condition.branddept},'%')
			</if>
			<if test="condition.branduser != null" >
				and t1.branduser=#{condition.branduser}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(t1.brandid,#{condition.brandidarr})
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,
		t1.brandid AS brand,
		t1.branduser,
		0 AS sendamount,
		t1.taxamount AS qqsendamount,
		0 AS returnamount,
		0 AS qqreturnamount
		FROM
		t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.STATUS IN ('3', '4') </if>
			<if test="condition.qqstartdate != null">
				<![CDATA[  and  t.businessdate >= #{condition.qqstartdate} ]]>
			</if>
			<if test="condition.qqenddate != null">
				<![CDATA[  and  t.businessdate <= #{condition.qqenddate} ]]>
			</if>
			<if test="condition.branddept != null">
				and t1.branddept like concat(#{condition.branddept},'%')
			</if>
			<if test="condition.branduser != null" >
				and t1.branduser=#{condition.branduser}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(t1.brandid,#{condition.brandidarr})
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,
		t1.brandid AS brand,
		t1.branduser,
		0 AS sendamount,
		0 AS qqsendamount,
		t1.taxamount AS returnamount,
		0 AS qqreturnamount
		FROM
		t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.ischeck = '1' and t.STATUS IN ('3', '4') </if>
			<if test="condition.bqstartdate != null">
				<![CDATA[  and  t.businessdate>= #{condition.bqstartdate} ]]>
			</if>
			<if test="condition.bqenddate != null">
				<![CDATA[  and  t.businessdate <= #{condition.bqenddate} ]]>
			</if>
			<if test="condition.branddept != null">
				and t1.branddept like concat(#{condition.branddept},'%')
			</if>
			<if test="condition.branduser != null" >
				and t1.branduser=#{condition.branduser}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(t1.brandid,#{condition.brandidarr})
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,
		t1.brandid AS brand,
		t1.branduser,
		0 AS sendamount,
		0 AS qqsendamount,
		0 AS returnamount,
		t1.taxamount AS qqreturnamount
		FROM
		t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.ischeck = '1' and t.STATUS IN ('3', '4') </if>
			<if test="condition.qqstartdate != null">
				<![CDATA[  and  t.businessdate >= #{condition.qqstartdate} ]]>
			</if>
			<if test="condition.qqenddate != null">
				<![CDATA[  and  t.businessdate <= #{condition.qqenddate} ]]>
			</if>
			<if test="condition.branddept != null">
				and t1.branddept like concat(#{condition.branddept},'%')
			</if>
			<if test="condition.branduser != null" >
				and t1.branduser=#{condition.branduser}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(t1.brandid,#{condition.brandidarr})
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,
		t.brandid AS brand,
		t.branduser,
		t.amount AS sendamount,
		0 AS qqsendamount,
		0 AS returnamount,
		0 AS qqreturnamount
		FROM t_account_customer_push_balance t
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.STATUS IN ('3', '4') </if>
			<if test="condition.bqstartdate != null">
				<![CDATA[  and  t.businessdate >= #{condition.bqstartdate} ]]>
			</if>
			<if test="condition.bqenddate != null">
				<![CDATA[  and  t.businessdate <= #{condition.bqenddate} ]]>
			</if>
			<if test="condition.branddept != null">
				and t.branddept like concat(#{condition.branddept},'%')
			</if>
			<if test="condition.branduser != null" >
				and t.branduser=#{condition.branduser}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(t.brandid,#{condition.brandidarr})
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,
		t.brandid AS brand,
		t.branduser,
		0 AS sendamount,
		t.amount AS qqsendamount,
		0 AS returnamount,
		0 AS qqreturnamount
		FROM t_account_customer_push_balance t
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="1==1"> and t.STATUS IN ('3', '4') </if>
			<if test="condition.qqstartdate != null">
				<![CDATA[  and  t.businessdate >= #{condition.qqstartdate}]]>
			</if>
			<if test="condition.qqenddate != null">
				<![CDATA[  and  t.businessdate <= #{condition.qqenddate} ]]>
			</if>
			<if test="condition.branddept != null">
				and t.branddept like concat(#{condition.branddept},'%')
			</if>
			<if test="condition.branduser != null" >
				and t.branduser=#{condition.branduser}
			</if>
			<if test="condition.customerid != null" >
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(t.brandid,#{condition.brandidarr})
			</if>
		</trim>

		) z
		GROUP BY
		branduser,
		customerid,
		brand
		) t
		GROUP BY
		branduser,
		customerid

	</select>
	<select id="getSalesCustomerTargetReportTargetsData" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT
		customerid,
		branduser
		<if test="condition.dyncTargetsColumn !=null">
			${condition.dyncTargetsColumn}
		</if>
		FROM
		t_report_sales_customertarget
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="condition.bqstartdate != null">
				<![CDATA[  AND startdate = #{condition.bqstartdate} ]]>
			</if>
			<if test="condition.bqenddate != null">
				<![CDATA[  AND enddate = #{condition.bqenddate}]]>
			</if>
			<if test="condition.branddept != null">
				and branddept like concat(#{condition.branddept},'%')
			</if>
			<if test="condition.branduser != null" >
				and branduser=#{condition.branduser}
			</if>
			<if test="condition.customerid != null" >
				and customerid=#{condition.customerid}
			</if>
			<if test="condition.brandidarr">
				and FIND_IN_SET(brand,#{condition.brandidarr})
			</if>
		</trim>
	</select>
	<select id="getSalesCustomerTargetReportTargetsCount" parameterType="com.hd.agent.report.model.SalesCustomerTargetReport" resultType="int">
		select count(*) from t_report_sales_customertarget
		<trim prefix="WHERE" prefixOverrides="and|or" >
			<if test="branduser != null" >
				and branduser=#{branduser}
			</if>
			<if test="customerid != null" >
				and customerid=#{customerid}
			</if>
			<if test="startdate != null" >
				and startdate=#{startdate}
			</if>
			<if test="enddate != null" >
				and enddate=#{enddate}
			</if>
			<if test="brand != null" >
				and brand=#{brand}
			</if>
		</trim>
	</select>
	<insert id="addSalesCustomerTargetReport" parameterType="com.hd.agent.report.model.SalesCustomerTargetReport" >
		insert into t_report_sales_customertarget
		<trim prefix="(" suffix=")" suffixOverrides="," >
			<if test="branduser != null" >
				branduser,
			</if>
			<if test="customerid != null" >
				customerid,
			</if>
			<if test="startdate != null" >
				startdate,
			</if>
			<if test="enddate != null" >
				enddate,
			</if>
			<if test="branddept != null" >
				branddept,
			</if>
			<if test="brand != null" >
				brand,
			</if>
			<if test="targets != null" >
				targets,
			</if>
			<if test="nweektargets != null" >
				nweektargets,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides="," >
			<if test="branduser != null" >
				#{branduser},
			</if>
			<if test="customerid != null" >
				#{customerid},
			</if>
			<if test="startdate != null" >
				#{startdate},
			</if>
			<if test="enddate != null" >
				#{enddate},
			</if>
			<if test="branddept != null" >
				#{branddept},
			</if>
			<if test="brand != null" >
				#{brand},
			</if>
			<if test="targets != null" >
				#{targets},
			</if>
			<if test="nweektargets != null" >
				#{nweektargets},
			</if>
		</trim>
	</insert>
	<update id="updateSalesCustomerTargetReport" parameterType="com.hd.agent.report.model.SalesCustomerTargetReport" >
		update t_report_sales_customertarget
		<set >
			<if test="targets != null" >
				targets=#{targets},
			</if>
			<if test="nweektargets != null" >
				nweektargets=#{nweektargets},
			</if>
		</set >
		where
		<trim prefixOverrides="and|or">
			<if test="branduser != null" >
				and branduser=#{branduser}
			</if>
			<if test="customerid != null" >
				and customerid=#{customerid}
			</if>
			<if test="startdate != null" >
				and startdate=#{startdate}
			</if>
			<if test="enddate != null" >
				and enddate=#{enddate}
			</if>
			<if test="brand != null" >
				and brand=#{brand}
			</if>
		</trim>
	</update>
	<select id="getSalesReportListByPcustomer" parameterType="java.lang.String" resultType="map">
		SELECT
		z.customerid,z.pcustomerid,'' as customersort,z.salesarea,z.salesdept,z.salesuser,
		z.goodsid,z.brandid,z.branduser,z.branddept,z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice as price,z.costprice,
		SUM(z.sendnum) AS sendnum,SUM(z.sendamount) AS sendamount,SUM(z.sendnotaxamount) AS sendnotaxamount,sum(z.sendcostamount) as sendcostamount,
		SUM(z.returnnum) AS returnnum,SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.directreturnnum) AS directreturnnum,SUM(z.directreturnamount) AS directreturnamount,SUM(z.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(z.checkreturnnum) AS checkreturnnum,SUM(z.checkreturnamount) AS checkreturnamount,SUM(z.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(z.costamount) as costamount,sum(z.pushamount) as pushamount,(SUM(z.sendamount)-SUM(z.returnamount)+sum(z.pushamount)) as salesamount
		FROM
		(
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		t1.unitnum AS sendnum,t1.taxamount AS sendamount,t1.notaxamount AS sendnotaxamount,t1.unitnum*t1.costprice as sendcostamount,
		0 AS returnnum,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS checkreturnnum,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		t1.unitnum*t1.costprice as costamount,0 as pushamount
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="begindate != null">
				and t.businessdate >= #{begindate}
			</if>
			<if test="enddate != null">
				<![CDATA[ and t.businessdate <= #{enddate}]]>
			</if>
			<if test="pcustomerid != null">
				and t.pcustomerid=#{pcustomerid}
			</if>
			<if test="1==1">
				and t.STATUS IN ('3', '4')
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		t1.unitnum AS returnnum,t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,
		if(t.sourcetype = '2',t1.unitnum,0) AS directreturnnum,if(t.sourcetype = '2',t1.taxamount,0) AS directreturnamount,if(t.sourcetype = '2',t1.notaxamount,0) AS directreturnnotaxamount,
		if(t.sourcetype = '1',t1.unitnum,0) AS checkreturnnum,if(t.sourcetype = '1',t1.taxamount,0) AS checkreturnamount,if(t.sourcetype = '1',t1.notaxamount,0) AS checkreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 as pushamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="begindate != null">
				and t.businessdate >= #{begindate}
			</if>
			<if test="enddate != null">
				<![CDATA[ and t.businessdate <= #{enddate}]]>
			</if>
			<if test="pcustomerid != null">
				and t.pcustomerid=#{pcustomerid}
			</if>
			<if test="1==1">
				and ischeck='1' AND t.STATUS IN ('3', '4')
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t.brandid AS goodsid,t.brandid,t.branduser,t.branddept, '' AS unitid, '' AS unitname,'' as auxunitid,'' as auxunitname,0 as taxprice, 0 AS costprice,
		0 AS sendnum, 0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
		0 AS returnnum, 0 AS returnamount, 0 AS returnnotaxamount,
		0 AS directreturnnum, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
		0 AS checkreturnnum, 0 AS checkreturnamount, 0 AS checkreturnnotaxamount,
		0 as costamount,t.amount as pushamount
		FROM t_account_customer_push_balance t
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="begindate != null">
				and t.businessdate >= #{begindate}
			</if>
			<if test="enddate != null">
				<![CDATA[ and t.businessdate <= #{enddate}]]>
			</if>
			<if test="pcustomerid != null">
				and t.pcustomerid=#{pcustomerid}
			</if>
			<if test="1==1">
				AND t.STATUS IN ('3', '4')
			</if>
		</trim>
		)z
		group by z.customerid
	</select>
	<select id="getSupplierSalesAmountByDetpid" parameterType="java.lang.String" resultType="map">
		SELECT
		z.supplierid,z.branddept,SUM(z.salesamount) as salesamount,SUM(z.costamount) as costamount
		FROM
		(
		SELECT t1.supplierid,t1.branddept,t1.taxamount AS salesamount,t1.unitnum*t1.costprice as costamount
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="deptid != null">
				and t1.branddept like '${deptid}%'
			</if>
			<if test="1==1">
				and t.STATUS IN ('3', '4')
			</if>
			<if test="begindate != null">
				and t.businessdate >= #{begindate}
			</if>
			<if test="enddate != null">
				<![CDATA[ and t.businessdate <= #{enddate}]]>
			</if>
		</trim>
		UNION ALL
		SELECT t1.supplierid,t1.branddept,-t1.taxamount AS salesamount,-t1.unitnum*t1.costprice as costamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="deptid != null">
				and t1.branddept like '${deptid}%'
			</if>
			<if test="1==1">
				and ischeck='1' AND t.STATUS IN ('3', '4')
			</if>
			<if test="begindate != null">
				and t.businessdate >= #{begindate}
			</if>
			<if test="enddate != null">
				<![CDATA[ and t.businessdate <= #{enddate}]]>
			</if>
		</trim>
		UNION ALL
		SELECT t.supplierid,t.branddept,t.amount as salesamount,0 as costamount
		FROM t_account_customer_push_balance t
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="deptid != null">
				and t.branddept like '${deptid}%'
			</if>
			<if test="1==1">
				AND t.STATUS IN ('3', '4')
			</if>
			<if test="begindate != null">
				and t.businessdate >= #{begindate}
			</if>
			<if test="enddate != null">
				<![CDATA[ and t.businessdate <= #{enddate}]]>
			</if>
		</trim>
		)z
		group by z.supplierid
	</select>
	<select id="getCustomerSalesAmountByDate" parameterType="java.lang.String" resultType="map">
		SELECT
		z.customerid,SUM(z.taxamount) as taxamount,SUM(z.costamount) as costamount,sum(z.notaxamount) as notaxamount,sum(z.tax) as tax,
		count(DISTINCT z.id) as billnums,GROUP_CONCAT(DISTINCT z.orderid ) as orderid
		FROM
		(
		<choose>
			<when test="salesDataType == 2">
				SELECT t.id,t.customerid,t1.taxamount ,t1.unitnum*t1.costprice as costamount,t1.notaxamount,t1.tax,t.id as orderid
				FROM t_sales_dispatchbill t
				RIGHT JOIN t_sales_dispatchbill_detail t1 ON t.id = t1.billid
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="1==1">
						and t.STATUS IN ('3', '4')
					</if>
					<if test="date != null">
						and t.businessdate = #{date}
					</if>
					<if test="salesdept != null and salesdept != '' ">
						and FIND_IN_SET(t.salesdept,#{salesdept})
					</if>
				</trim>
			</when>
			<otherwise>
				SELECT t.id,t.customerid,t1.taxamount ,t1.unitnum*t1.costprice as costamount,t1.notaxamount,t1.tax,saleorderid as orderid
				FROM t_storage_saleout t
				RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="1==1">
						and t.STATUS IN ('3', '4')
					</if>
					<if test="date != null">
						and t.businessdate = #{date}
					</if>
					<if test="salesdept != null and salesdept != '' ">
						and FIND_IN_SET(t.salesdept,#{salesdept})
					</if>
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT t.id,t.customerid,-t1.taxamount t,-t1.unitnum*t1.costprice as costamount,-t1.notaxamount,-t1.tax,t.id as orderid
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="1==1">
				and ischeck='1' AND t.STATUS IN ('3', '4')
			</if>
			<if test="date != null">
				and t.businessdate = #{date}
			</if>
			<if test="salesdept != null and salesdept != ''">
				and FIND_IN_SET(t.salesdept,#{salesdept})
			</if>
		</trim>
		UNION ALL
		SELECT t.id,t.customerid,t.amount as taxamount,0 as costamount,t.notaxamount,t.tax,t.id as orderid
		FROM t_account_customer_push_balance t
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="1==1">
				AND t.STATUS IN ('3', '4')
			</if>
			<if test="date != null">
				and t.businessdate = #{date}
			</if>
			<if test="salesdept != null and salesdept != '' ">
				and FIND_IN_SET(t.salesdept,#{salesdept})
			</if>
		</trim>
		) z
		group by z.customerid
	</select>
	<select id="getBrandSalesReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT
		z.customerid,z.pcustomerid,'' as customersort,z.salesarea,z.salesdept,z.salesuser,
		z.goodsid,z.brandid,z.branduser,z.branddept,z.taxprice as price,z.costprice,z.supplieruser,
		sum(z.salesamount) as salesamount,sum(z.salesnotaxamount) as salesnotaxamount,sum(z.costamount) as costamount
		FROM
		(
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.taxprice,t1.costprice,
		t1.taxamount AS salesamount,t1.notaxamount AS salesnotaxamount,t1.unitnum*t1.costprice as costamount,t1.supplieruser
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.branddept != null">
				and t1.branddept like '${condition.branddept}%'
			</if>
			<if test="condition.begindate != null">
				and t.businessdate >= #{condition.begindate}
			</if>
			<if test="condition.enddate != null">
				<![CDATA[ and t.businessdate <= #{condition.enddate}]]>
			</if>
			<if test="condition.ymonth != null">
				and t.businessdate like '${condition.ymonth}%'
			</if>
			<if test="1==1">
				and t.STATUS IN ('3', '4')
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.taxprice,t1.costprice,
		-t1.taxamount AS salesamount,-t1.notaxamount AS salesnotaxamount,-t1.unitnum*t1.costprice as costamount,t1.supplieruser
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.branddept != null">
				and t1.branddept like '${condition.branddept}%'
			</if>
			<if test="condition.begindate != null">
				and t.businessdate >= #{condition.begindate}
			</if>
			<if test="condition.enddate != null">
				<![CDATA[ and t.businessdate <= #{condition.enddate}]]>
			</if>
			<if test="condition.ymonth != null">
				and t.businessdate like '${condition.ymonth}%'
			</if>
			<if test="1==1">
				and ischeck='1' AND t.STATUS IN ('3', '4')
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t.brandid AS goodsid,t.brandid,t.branduser,t.branddept, 0 as taxprice, 0 AS costprice,
		t.amount AS salesamount,t.amount/1.17 AS salesnotaxamount,0 as costamount,t.supplieruser
		FROM t_account_customer_push_balance t
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t.brandid,#{condition.brandid})
			</if>
			<if test="condition.branddept != null">
				and t.branddept like '${condition.branddept}%'
			</if>
			<if test="condition.begindate != null">
				and t.businessdate >= #{condition.begindate}
			</if>
			<if test="condition.enddate != null">
				<![CDATA[ and t.businessdate <= #{condition.enddate}]]>
			</if>
			<if test="condition.ymonth != null">
				and t.businessdate like '${condition.ymonth}%'
			</if>
			<if test="1==1">
				AND t.STATUS IN ('3', '4')
			</if>
		</trim>
		union all
		SELECT
		'' as customerid,'' as pcustomerid,'' as salesarea,'' as salesdept,'' as salesuser,
		'' as goodsid,t.id as brandid,'' as branduser,t.deptid as branddept,0 as taxprice,0 as costprice,
		0 AS salesamount,0 AS salesnotaxamount,0 as costamount,'' as supplieruser
		FROM t_base_goods_brand t
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t.id,#{condition.brandid})
			</if>
			<if test="condition.branddept != null">
				and t.deptid like '${condition.branddept}%'
			</if>
			<if test="1==1">
				AND t.state='1'
			</if>
		</trim>
		)z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
		group by z.brandid
		<include refid="common.Page_OrderOnly"/>
	</select>

	<select id="getCustomersortSalesReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT
		z.customerid,z.pcustomerid,z.salesarea,z.goodsid,z.customersort,z.taxprice as price,z.costprice,z.supplieruser,z.salesdept,z.salesuser,z.branduser,
		sum(z.salesamount) as salesamount,sum(z.salesnotaxamount) as salesnotaxamount,sum(z.costamount) as costamount
		FROM
		(
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.goodsid,t.customersort,t1.taxprice,t1.costprice,t1.branduser,
		t1.taxamount AS salesamount,t1.notaxamount AS salesnotaxamount,t1.unitnum*t1.costprice as costamount,t1.supplieruser
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.branddept != null">
				and t1.branddept like '${condition.branddept}%'
			</if>
			<if test="condition.begindate != null">
				and t.businessdate >= #{condition.begindate}
			</if>
			<if test="condition.enddate != null">
				<![CDATA[ and t.businessdate <= #{condition.enddate}]]>
			</if>
			<if test="condition.ymonth != null">
				and t.businessdate like '${condition.ymonth}%'
			</if>
			<if test="1==1">
				and t.STATUS IN ('3', '4')
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t1.goodsid,t.customersort,t1.taxprice,t1.costprice,t1.branduser,
		-t1.taxamount AS salesamount,-t1.notaxamount AS salesnotaxamount,-t1.unitnum*t1.costprice as costamount,t1.supplieruser
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.branddept != null">
				and t1.branddept like '${condition.branddept}%'
			</if>
			<if test="condition.begindate != null">
				and t.businessdate >= #{condition.begindate}
			</if>
			<if test="condition.enddate != null">
				<![CDATA[ and t.businessdate <= #{condition.enddate}]]>
			</if>
			<if test="condition.ymonth != null">
				and t.businessdate like '${condition.ymonth}%'
			</if>
			<if test="1==1">
				and ischeck='1' AND t.STATUS IN ('3', '4')
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,t.brandid AS goodsid,t.customersort,0 as taxprice, 0 AS costprice,t.branduser,
		t.amount AS salesamount,t.amount/1.17 AS salesnotaxamount,0 as costamount,t.supplieruser
		FROM t_account_customer_push_balance t
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.begindate != null">
				and t.businessdate >= #{condition.begindate}
			</if>
			<if test="condition.enddate != null">
				<![CDATA[ and t.businessdate <= #{condition.enddate}]]>
			</if>
			<if test="1==1">
				AND t.STATUS IN ('3', '4')
			</if>
		</trim>
		)z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
		group by z.customersort
		<include refid="common.Page_OrderOnly"/>
	</select>

	<select id="showCustomerNewGoodsReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		select * from (
		select t.businessdate,t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.taxprice,t1.unitnum,t1.auxnumdetail,t1.taxamount
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.exportids != null" >
				and FIND_IN_SET(t1.goodsid,#{condition.exportids})
			</if>
			<if test="condition.goodsid != null">
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.salesarea != null">
				and t.salesarea=#{condition.salesarea}
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid=#{condition.pcustomerid}
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.computeBeginDate != null">
				<![CDATA[and t.businessdate >= #{condition.computeBeginDate}]]>
			</if>
			<if test="1==1">
				AND t1.isdiscount='0' and (t.status='3' or t.status='4')
			</if>
		</trim>
		GROUP BY t.customerid,t1.goodsid
		ORDER BY t.businessdate asc,t.audittime asc
		) z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
		<choose>
			<when test="condition.ispageflag == null or condition.ispageflag !='true'">
				<include refid="common.Page_limit"/>
			</when>
			<otherwise>
				<include refid="common.Page_OrderOnly"/>
			</otherwise>
		</choose>
	</select>
	<select id="showCustomerNewGoodsReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		select t.businessdate,t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.taxprice,t1.unitnum,t1.auxnumdetail,t1.taxamount
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodsid != null">
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.salesarea != null">
				and t.salesarea=#{condition.salesarea}
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid=#{condition.pcustomerid}
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.computeBeginDate != null">
				<![CDATA[and t.businessdate >= #{condition.computeBeginDate}]]>
			</if>
			<if test="1==1">
				AND t1.isdiscount='0' and (t.status='3' or t.status='4')
			</if>
		</trim>
		GROUP BY t.customerid,t1.goodsid
		ORDER BY t.businessdate asc,t.audittime asc
		) z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
	</select>
	<select id="showCustomerNewGoodsReportSum" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		select sum(z.unitnum) as unitnum,sum(z.taxamount) as taxamount from (
		select t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.taxprice,t1.unitnum,t1.auxnumdetail,t1.taxamount
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodsid != null">
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.salesarea != null">
				and t.salesarea=#{condition.salesarea}
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid=#{condition.pcustomerid}
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.computeBeginDate != null">
				<![CDATA[and t.businessdate >= #{condition.computeBeginDate}]]>
			</if>
			<if test="1==1">
				AND t1.isdiscount='0' and (t.status='3' or t.status='4')
			</if>
		</trim>
		GROUP BY t.customerid,t1.goodsid
		ORDER BY t.businessdate asc,t.audittime asc
		) z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
	</select>
	<select id="showCustomerOldGoodsReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		select z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,
		z.goodsid,z.brandid,z.branduser,z.branddept,z.supplierid,z.supplieruser,
		z.taxprice,sum(z.unitnum) as unitnum,sum(z.taxamount) as taxamount,
		sum(z.auxnum) as auxnum,sum(z.auxremainder) as auxremainder
		from(
		select t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.taxprice,t1.unitnum,t1.taxamount,t1.auxnum,t1.auxremainder
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.exportids != null" >
				and FIND_IN_SET(t1.goodsid,#{condition.exportids})
			</if>
			<if test="condition.goodsid != null">
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.salesarea != null">
				and t.salesarea=#{condition.salesarea}
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid=#{condition.pcustomerid}
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.computeBeginDate != null">
				<![CDATA[and t.businessdate >= #{condition.computeBeginDate}]]>
			</if>
			<if test="1==1">
				AND t1.isdiscount='0' and (t.status='3' or t.status='4')
			</if>
		</trim>
		UNION ALL
		select t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.taxprice,-t1.unitnum,-t1.taxamount ,-t1.auxnum,-t1.auxremainder
		from t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodsid != null">
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.salesarea != null">
				and t.salesarea=#{condition.salesarea}
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid=#{condition.pcustomerid}
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.computeBeginDate != null">
				<![CDATA[and t.businessdate >= #{condition.computeBeginDate}]]>
			</if>
			<if test="1==1">
				AND t.ischeck='1' and (t.status='3' or t.status='4')
			</if>
		</trim>
		UNION ALL
		select y.customerid,y.pcustomerid,y.salesarea,y.salesdept,y.salesuser,
		y.goodsid,y.brandid,y.branduser,y.branddept,y.supplierid,y.supplieruser,
		y.taxprice,y.unitnum,y.taxamount,y.auxnum,y.auxremainder
		from (
		select t.businessdate, t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.taxprice,-t1.unitnum as unitnum,-t1.taxamount as taxamount,-t1.auxnum as auxnum,-t1.auxremainder as auxremainder
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodsid != null">
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.salesarea != null">
				and t.salesarea=#{condition.salesarea}
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid=#{condition.pcustomerid}
			</if>
			<if test="condition.computeBeginDate != null">
				<![CDATA[and t.businessdate >= #{condition.computeBeginDate}]]>
			</if>
			<if test="1==1">
				AND t1.isdiscount='0' and (t.status='3' or t.status='4')
			</if>
		</trim>
		GROUP BY t.customerid,t1.goodsid
		ORDER BY t.businessdate asc,t.audittime asc) y
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				and y.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and y.businessdate <= #{condition.businessdate2}]]>
			</if>
		</trim>
		) z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
		GROUP BY z.customerid,z.goodsid
		<![CDATA[HAVING sum(z.unitnum)<>0]]>
		<choose>
			<when test="condition.ispageflag == null or condition.ispageflag !='true'">
				<include refid="common.Page_limit"/>
			</when>
			<otherwise>
				<include refid="common.Page_OrderOnly"/>
			</otherwise>
		</choose>
	</select>
	<select id="showCustomerOldGoodsReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		select z.customerid,z.pcustomerid,z.salesarea,z.salesdept,z.salesuser,
		z.goodsid,z.brandid,z.branduser,z.branddept,z.supplierid,z.supplieruser,
		z.taxprice,sum(z.unitnum) as unitnum,sum(z.taxamount) as taxamount,
		sum(z.auxnum) as auxnum,sum(z.auxremainder) as auxremainder
		from(
		select t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.taxprice,t1.unitnum,t1.taxamount,t1.auxnum,t1.auxremainder
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodsid != null">
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.salesarea != null">
				and t.salesarea=#{condition.salesarea}
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid=#{condition.pcustomerid}
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.computeBeginDate != null">
				<![CDATA[and t.businessdate >= #{condition.computeBeginDate}]]>
			</if>
			<if test="1==1">
				AND t1.isdiscount='0' and (t.status='3' or t.status='4')
			</if>
		</trim>
		UNION ALL
		select t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.taxprice,-t1.unitnum,-t1.taxamount ,-t1.auxnum,-t1.auxremainder
		from t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodsid != null">
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.salesarea != null">
				and t.salesarea=#{condition.salesarea}
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid=#{condition.pcustomerid}
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.computeBeginDate != null">
				<![CDATA[and t.businessdate >= #{condition.computeBeginDate}]]>
			</if>
			<if test="1==1">
				AND t.ischeck='1' and (t.status='3' or t.status='4')
			</if>
		</trim>
		UNION ALL
		select y.customerid,y.pcustomerid,y.salesarea,y.salesdept,y.salesuser,
		y.goodsid,y.brandid,y.branduser,y.branddept,y.supplierid,y.supplieruser,
		y.taxprice,y.unitnum,y.taxamount,y.auxnum,y.auxremainder
		from (
		select t.businessdate, t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.taxprice,-t1.unitnum as unitnum,-t1.taxamount as taxamount,-t1.auxnum as auxnum,-t1.auxremainder as auxremainder
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodsid != null">
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.salesarea != null">
				and t.salesarea=#{condition.salesarea}
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid=#{condition.pcustomerid}
			</if>
			<if test="condition.computeBeginDate != null">
				<![CDATA[and t.businessdate >= #{condition.computeBeginDate}]]>
			</if>
			<if test="1==1">
				AND t1.isdiscount='0' and (t.status='3' or t.status='4')
			</if>
		</trim>
		GROUP BY t.customerid,t1.goodsid
		ORDER BY t.businessdate asc,t.audittime asc) y
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				and y.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and y.businessdate <= #{condition.businessdate2}]]>
			</if>
		</trim>
		) z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
		GROUP BY z.customerid,z.goodsid
		<![CDATA[HAVING sum(z.unitnum)<>0]]>
		) x
	</select>
	<select id="showCustomerOldGoodsReportSum" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		select sum(z.unitnum) as unitnum,sum(z.taxamount) as taxamount,
		sum(z.auxnum) as auxnum,sum(z.auxremainder) as auxremainder
		from(
		select t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.taxprice,t1.unitnum,t1.taxamount,t1.auxnum,t1.auxremainder
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodsid != null">
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.salesarea != null">
				and t.salesarea=#{condition.salesarea}
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid=#{condition.pcustomerid}
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.computeBeginDate != null">
				<![CDATA[and t.businessdate >= #{condition.computeBeginDate}]]>
			</if>
			<if test="1==1">
				AND t1.isdiscount='0' and (t.status='3' or t.status='4')
			</if>
		</trim>
		UNION ALL
		select t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.taxprice,-t1.unitnum,-t1.taxamount ,-t1.auxnum,-t1.auxremainder
		from t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodsid != null">
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.salesarea != null">
				and t.salesarea=#{condition.salesarea}
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid=#{condition.pcustomerid}
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.computeBeginDate != null">
				<![CDATA[and t.businessdate >= #{condition.computeBeginDate}]]>
			</if>
			<if test="1==1">
				AND t.ischeck='1' and (t.status='3' or t.status='4')
			</if>
		</trim>
		UNION ALL
		select y.customerid,y.pcustomerid,y.salesarea,y.salesdept,y.salesuser,
		y.goodsid,y.brandid,y.branduser,y.branddept,y.supplierid,y.supplieruser,
		y.taxprice,y.unitnum,y.taxamount,y.auxnum,y.auxremainder
		from (
		select t.businessdate, t.customerid,t.pcustomerid,t.salesarea,t.salesdept,t.salesuser,
		t1.goodsid,t1.brandid,t1.branduser,t1.branddept,t1.supplierid,t1.supplieruser,
		t1.taxprice,-t1.unitnum as unitnum,-t1.taxamount as taxamount,-t1.auxnum as auxnum,-t1.auxremainder as auxremainder
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodsid != null">
				and t1.goodsid=#{condition.goodsid}
			</if>
			<if test="condition.salesarea != null">
				and t.salesarea=#{condition.salesarea}
			</if>
			<if test="condition.salesuser != null">
				and t.salesuser=#{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t.customerid=#{condition.customerid}
			</if>
			<if test="condition.pcustomerid != null">
				and t.pcustomerid=#{condition.pcustomerid}
			</if>
			<if test="condition.computeBeginDate != null">
				<![CDATA[and t.businessdate >= #{condition.computeBeginDate}]]>
			</if>
			<if test="1==1">
				AND t1.isdiscount='0' and (t.status='3' or t.status='4')
			</if>
		</trim>
		GROUP BY t.customerid,t1.goodsid
		ORDER BY t.businessdate asc,t.audittime asc) y
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.businessdate1 != null">
				and y.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and y.businessdate <= #{condition.businessdate2}]]>
			</if>
		</trim>
		) z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
	</select>

	<sql id="SalesRejectEnterReport_sql">
		(
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,t.driverid,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		t1.unitnum AS returnnum,t1.auxnum as auxreturnnum,t1.auxremainder as auxremainderreturnnum,t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,
		t1.unitnum AS directreturnnum,t1.auxnum as auxdirectnum,t1.auxremainder as auxremainderdirectnum,t1.taxamount AS directreturnamount,t1.notaxamount AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as auxchecknum,0 as auxremainderchecknum,0 AS checkreturnamount,0 AS checkreturnnotaxamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="1 == 1">
				and ischeck='1' AND t.sourcetype = '2' AND t.STATUS IN ('3', '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<choose>
				<when test="condition.brandid != null">
					and FIND_IN_SET(t1.brandid,#{condition.brandid})
				</when>
				<otherwise>
					<if test="condition.brandids != null">
						and FIND_IN_SET(t1.brandid,#{condition.brandids})
					</if>
				</otherwise>
			</choose>
			<if test="condition.driverid != null">
				and FIND_IN_SET(t.driverid,#{condition.driverid})
			</if>

		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,t.driverid,
		t1.goodsid, t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice, t1.costprice,
		t1.unitnum AS returnnum,t1.auxnum as auxreturnnum,t1.auxremainder as auxremainderreturnnum, t1.taxamount AS returnamount, t1.notaxamount AS returnnotaxamount,
		0 AS directreturnnum, 0 as auxdirectnum,0 as auxremainderdirectnum,0 AS directreturnamount, 0 AS directreturnnotaxamount,
		t1.unitnum AS checkreturnnum, t1.auxnum as auxchecknum,t1.auxremainder as auxremainderchecknum,t1.taxamount AS checkreturnamount, t1.notaxamount AS checkreturnnotaxamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="1 == 1">
				and ischeck='1' AND t.sourcetype = '1' AND t.STATUS IN ('3', '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<choose>
				<when test="condition.brandid != null">
					and FIND_IN_SET(t1.brandid,#{condition.brandid})
				</when>
				<otherwise>
					<if test="condition.brandids != null">
						and FIND_IN_SET(t1.brandid,#{condition.brandids})
					</if>
				</otherwise>
			</choose>
			<if test="condition.driverid != null">
				and FIND_IN_SET(t.driverid,#{condition.driverid})
			</if>
		</trim>
		)
	</sql>
	<select id="getSalesRejectEnterReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BaseSalesReport">
		SELECT
		z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.goodssort,z.supplierid,z.adduserid,z.addusername,z.driverid,
		z.goodsid,z.brandid,z.branduser,z.supplieruser,z.branddept,z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice as price,z.costprice,
		SUM(z.returnnum) AS returnnum,SUM(z.auxreturnnum) AS auxreturnnum,SUM(z.auxremainderreturnnum) as auxremainderreturnnum,SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.directreturnnum) AS directreturnnum,SUM(z.auxdirectnum) as auxdirectnum,SUM(z.auxremainderdirectnum) as auxremainderdirectnum,SUM(z.directreturnamount) AS directreturnamount,SUM(z.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(z.checkreturnnum) AS checkreturnnum,SUM(z.auxchecknum) as auxchecknum,SUM(z.auxremainderchecknum) as auxremainderchecknum,SUM(z.checkreturnamount) AS checkreturnamount,SUM(z.checkreturnnotaxamount) AS checkreturnnotaxamount
		FROM <include refid="SalesRejectEnterReport_sql"/> z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
		</trim>
		GROUP BY z.driverid
		<if test="condition.isflag == null">
			<include refid="common.Page_limit" />
		</if>
	</select>
	<select id="getSalesRejectEnterReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		SELECT
		z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.goodssort,z.supplierid,z.adduserid,z.addusername,z.driverid,
		z.goodsid,z.brandid,z.branduser,z.supplieruser,z.branddept,z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice as price,z.costprice,
		SUM(z.returnnum) AS returnnum,SUM(z.auxreturnnum) AS auxreturnnum,SUM(z.auxremainderreturnnum) as auxremainderreturnnum,SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.directreturnnum) AS directreturnnum,SUM(z.auxdirectnum) as auxdirectnum,SUM(z.auxremainderdirectnum) as auxremainderdirectnum,SUM(z.directreturnamount) AS directreturnamount,SUM(z.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(z.checkreturnnum) AS checkreturnnum,SUM(z.auxchecknum) as auxchecknum,SUM(z.auxremainderchecknum) as auxremainderchecknum,SUM(z.checkreturnamount) AS checkreturnamount,SUM(z.checkreturnnotaxamount) AS checkreturnnotaxamount
		FROM <include refid="SalesRejectEnterReport_sql"/> z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
		</trim>
		GROUP BY z.driverid
		)z
	</select>
	<select id="getSalesRejectEnterReportSum" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BaseSalesReport">
		SELECT z.auxunitname,SUM(z.returnnum) AS returnnum,SUM(z.auxreturnnum) AS auxreturnnum,SUM(z.auxremainderreturnnum) as auxremainderreturnnum,SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.directreturnnum) AS directreturnnum,SUM(z.auxdirectnum) as auxdirectnum,SUM(z.auxremainderdirectnum) as auxremainderdirectnum,SUM(z.directreturnamount) AS directreturnamount,SUM(z.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(z.checkreturnnum) AS checkreturnnum,SUM(z.auxchecknum) as auxchecknum,SUM(z.auxremainderchecknum) as auxremainderchecknum,SUM(z.checkreturnamount) AS checkreturnamount,SUM(z.checkreturnnotaxamount) AS checkreturnnotaxamount
		FROM <include refid="SalesRejectEnterReport_sql"/> z
		<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_dataSql"/>
		</trim>
	</select>

	<!-- condition.salesdeptbrand区分查询数据是否为分销售部门品牌销售回笼报表，null不是，不为null是 -->
	<sql id="BranduserSalesWithdrawnAssess_sql">
		SELECT z.branduser,z.branddept,z.brandid,z.salesuser,z.salesdept,z.customersort,
		SUM(z.sendamount) AS sendamount,SUM(z.sendnotaxamount) as sendnotaxamount,SUM(z.sendcostamount) AS sendcostamount,
		SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.costamount) as costamount,SUM(z.pushbalanceamount) as pushbalanceamount,
		SUM(z.withdrawnamount) as withdrawnamount,SUM(z.costwriteoffamount) as costwriteoffamount
		from (
		SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.taxprice,t1.costprice,
		t1.taxamount AS sendamount,t1.notaxamount AS sendnotaxamount,t1.unitnum*t1.costprice as sendcostamount,
		0 AS returnamount,0 AS returnnotaxamount,
		t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,
		0 AS withdrawnamount, 0 AS costwriteoffamount
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<if test="condition.salesdeptbrand == null">
			LEFT JOIN  t_base_personnel p on p.id = t.salesuser
		</if>
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and (t.STATUS = '3' or t.STATUS = '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= '${condition.businessdate1}'
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= '${condition.businessdate2}']]>
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t1.branduser,#{condition.branduser})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.salesdeptbrand == null">
						and FIND_IN_SET(p.belongdeptid,#{condition.salesdept})
					</when>
					<otherwise>
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.taxprice,t1.costprice,
		0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,
		0 AS withdrawnamount, 0 AS costwriteoffamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<if test="condition.salesdeptbrand == null">
			LEFT JOIN  t_base_personnel p on p.id = t.salesuser
		</if>
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and ischeck='1' AND (t.STATUS = '3' or t.STATUS = '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= '${condition.businessdate1}'
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= '${condition.businessdate2}']]>
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t1.branduser,#{condition.branduser})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.salesdeptbrand == null">
						and FIND_IN_SET(p.belongdeptid,#{condition.salesdept})
					</when>
					<otherwise>
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,'' as goodssort,t.supplierid,t.adduserid,t.addusername,
		t.brandid AS goodsid,t.brandid,t.branduser,t.supplieruser,t.branddept,0 as taxprice, 0 AS costprice,
		0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
		0 AS returnamount, 0 AS returnnotaxamount,
		0 as costamount,t.amount as pushbalanceamount,
		0 AS withdrawnamount, 0 AS costwriteoffamount
		FROM t_account_customer_push_balance t
		<if test="condition.salesdeptbrand == null">
			LEFT JOIN  t_base_personnel p on p.id = t.salesuser
		</if>
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and (t.STATUS = '3' or t.STATUS = '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= '${condition.businessdate1}'
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= '${condition.businessdate2}']]>
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t.branduser,#{condition.branduser})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t.brandid,#{condition.brandid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.salesdeptbrand == null">
						and FIND_IN_SET(p.belongdeptid,#{condition.salesdept})
					</when>
					<otherwise>
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.taxprice,t1.costprice,
		0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		0 AS returnamount,0 AS returnnotaxamount,
		0 as costamount,0 as pushbalanceamount,
		t1.taxamount AS withdrawnamount, t1.costprice*t1.unitnum AS costwriteoffamount
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<if test="condition.salesdeptbrand == null">
			LEFT JOIN  t_base_personnel p on p.id = t.salesuser
		</if>
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and t1.iswriteoff='1' and t.status in('3','4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.writeoffdate >= '${condition.businessdate1}'
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.writeoffdate <= '${condition.businessdate2}']]>
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t1.branduser,#{condition.branduser})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.salesdeptbrand == null">
						and FIND_IN_SET(p.belongdeptid,#{condition.salesdept})
					</when>
					<otherwise>
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.taxprice,t1.costprice,
		0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		0 AS returnamount,0 AS returnnotaxamount,
		0 as costamount,0 as pushbalanceamount,
		-t1.taxamount AS withdrawnamount, -t1.costprice*t1.unitnum AS costwriteoffamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<if test="condition.salesdeptbrand == null">
			LEFT JOIN  t_base_personnel p on p.id = t.salesuser
		</if>
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and ischeck='1' and t1.iswriteoff='1' AND (t.STATUS = '3' or t.STATUS = '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.writeoffdate >= '${condition.businessdate1}'
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.writeoffdate <= '${condition.businessdate2}']]>
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t1.branduser,#{condition.branduser})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.salesdeptbrand == null">
						and FIND_IN_SET(p.belongdeptid,#{condition.salesdept})
					</when>
					<otherwise>
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</otherwise>
				</choose>
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,'' as goodssort,t.supplierid,t.adduserid,t.addusername,
		t.brandid AS goodsid,t.brandid,t.branduser,t.supplieruser,t.branddept,0 as taxprice, 0 AS costprice,
		0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
		0 AS returnamount, 0 AS returnnotaxamount,
		0 as costamount,0 as pushbalanceamount,
		t.amount AS withdrawnamount, 0 AS costwriteoffamount
		FROM t_account_customer_push_balance t
		<if test="condition.salesdeptbrand == null">
			LEFT JOIN  t_base_personnel p on p.id = t.salesuser
		</if>
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and t.iswriteoff='1' and (t.STATUS = '3' or t.STATUS = '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.writeoffdate >= '${condition.businessdate1}'
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.writeoffdate <= '${condition.businessdate2}']]>
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t.branduser,#{condition.branduser})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t.brandid,#{condition.brandid})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesdept != null">
				<choose>
					<when test="condition.salesdeptbrand == null">
						and FIND_IN_SET(p.belongdeptid,#{condition.salesdept})
					</when>
					<otherwise>
						and FIND_IN_SET(t.salesdept,#{condition.salesdept})
					</otherwise>
				</choose>
			</if>
		</trim>
		<if test="condition.customer != null">
			UNION ALL
			SELECT '' as customerid,'' as pcustomerid,'' as customersort,'' as salesarea,t.belongdeptid as salesdept,t.id as salesuser,'' as goodssort,'' as supplierid,'' as adduserid,'' as addusername,
			'' AS goodsid, t.id as brandid,t.id as branduser,'' as supplieruser,t.belongdeptid as branddept,0 as taxprice, 0 AS costprice,
			0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
			0 AS returnamount, 0 AS returnnotaxamount,
			0 as costamount,0 AS pushbalanceamount,
			0 AS withdrawnamount, 0 AS costwriteoffamount
			from t_base_personnel t
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.user != null">
					and t.employetype like '%3%' and t.state = '1'
				</if>
				<if test="condition.customer != null">
					and t.employetype like '%1%' and t.state = '1'
				</if>
				<if test="condition.bid != null">
					and t.state = '1'
				</if>
				<if test="condition.branduser != null">
					and FIND_IN_SET(t.id,#{condition.branduser})
				</if>
				<if test="condition.salesuser != null">
					and FIND_IN_SET(t.id,#{condition.salesuser})
				</if>
				<if test="condition.brandid != null">
					and FIND_IN_SET(t.id,#{condition.brandid})
				</if>
				<if test="condition.salesdept != null">
					and FIND_IN_SET(t.belongdeptid,#{condition.salesdept})
				</if>
			</trim>
		</if>
		<if test="condition.user != null">
			UNION ALL
			SELECT '' as customerid,'' as pcustomerid,'' as customersort,'' as salesarea,'' as salesdept,'' as salesuser,'' as goodssort,'' as supplierid,'' as adduserid,'' as addusername,
			'' AS goodsid, t.id as brandid,t.id as branduser,'' as supplieruser,t.belongdeptid as branddept,0 as taxprice, 0 AS costprice,
			0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
			0 AS returnamount, 0 AS returnnotaxamount,
			0 as costamount,0 AS pushbalanceamount,
			0 AS withdrawnamount, 0 AS costwriteoffamount
			from t_base_personnel t
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.user != null">
					and t.employetype like '%3%' and t.state = '1'
				</if>
				<if test="condition.customer != null">
					and t.employetype like '%1%' and t.state = '1'
				</if>
				<if test="condition.bid != null">
					and t.state = '1'
				</if>
				<if test="condition.branduser != null">
					and FIND_IN_SET(t.id,#{condition.branduser})
				</if>
				<if test="condition.brandid != null">
					and FIND_IN_SET(t.id,#{condition.brandid})
				</if>
				<if test="condition.salesdept != null">
					and FIND_IN_SET(t.belongdeptid,#{condition.salesdept})
				</if>
			</trim>
		</if>
		<if test="condition.bid != null">
			UNION ALL
			SELECT '' as customerid,'' as pcustomerid,'' as customersort,'' as salesarea,'' as salesdept,'' as salesuser,'' as goodssort,'' as supplierid,'' as adduserid,'' as addusername,
			'' AS goodsid, t.id as brandid,t.id as branduser,'' as supplieruser,t.deptid as branddept,0 as taxprice, 0 AS costprice,
			0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
			0 AS returnamount, 0 AS returnnotaxamount,
			0 as costamount,0 AS pushbalanceamount,
			0 AS withdrawnamount, 0 AS costwriteoffamount
			from t_base_goods_brand t
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.user != null">
					and t.employetype like '%3%' and t.state = '1'
				</if>
				<if test="condition.customer != null">
					and t.employetype like '%1%' and t.state = '1'
				</if>
				<if test="condition.bid != null">
					and t.state = '1'
				</if>
				<if test="condition.branduser != null">
					and FIND_IN_SET(t.id,#{condition.branduser})
				</if>
				<if test="condition.brandid != null">
					and FIND_IN_SET(t.id,#{condition.brandid})
				</if>
				<if test="condition.salesdept != null">
					and FIND_IN_SET(t.belongdeptid,#{condition.salesdept})
				</if>
			</trim>
		</if>
		<if test="condition.salesdeptbrand != null">
			UNION ALL
			SELECT
			t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t.goodssort,t.supplierid,t.adduserid,t.addusername,
			t.goodsid, t.brandid,t.branduser,t.supplieruser,t.branddept,t.taxprice, t.costprice,
			t.sendamount, t.sendnotaxamount, t.sendcostamount,t.returnamount,
			t.returnnotaxamount,t.costamount,t.pushbalanceamount,t.withdrawnamount, t.costwriteoffamount
			from (
			SELECT '' as customerid,'' as pcustomerid,'' as customersort,'' as salesarea,t.id as salesdept,'' as
			salesuser,'' as goodssort,'' as supplierid,'' as adduserid,'' as addusername,
			'' AS goodsid, t1.brandid,'' as branduser,'' as supplieruser,t1.branddept,0 as taxprice, 0 AS costprice,
			0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
			0 AS returnamount, 0 AS returnnotaxamount,
			0 as costamount,0 AS pushbalanceamount,
			0 AS withdrawnamount, 0 AS costwriteoffamount
			from t_base_department t
			INNER JOIN (
			SELECT '' as customerid,'' as pcustomerid,'' as customersort,'' as salesarea,'' as salesdept,'' as
			salesuser,'' as goodssort,'' as supplierid,'' as adduserid,'' as addusername,
			'' AS goodsid, t.id as brandid,'' as branduser,'' as supplieruser,t.id as branddept,0 as taxprice, 0 AS
			costprice,
			0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
			0 AS returnamount, 0 AS returnnotaxamount,
			0 as costamount,0 AS pushbalanceamount,
			0 AS withdrawnamount, 0 AS costwriteoffamount
			from t_base_goods_brand t
			where t.state = '1'
			) t1
			where t.state = '1' and t.depttype like '%4%'
			) t
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.salesdept != null">
					and FIND_IN_SET(t.salesdept,#{condition.salesdept})
				</if>
				<if test="condition.brandid != null">
					and FIND_IN_SET(t.brandid,#{condition.brandid})
				</if>
			</trim>
		</if>
		<if test="condition.customerbrand != null">
			UNION ALL
			SELECT '' AS customerid, '' AS pcustomerid, '' AS customersort, '' AS salesarea, t.salesdept, t.salesuser, '' AS goodssort, '' AS supplierid, '' AS adduserid, '' AS addusername,
			'' AS goodsid, t.brandid, '' AS branduser, '' AS supplieruser, t.branddept, 0 AS taxprice, 0 AS costprice,
			0 AS sendamount, 0 AS sendnotaxamount, 0 AS sendcostamount,
			0 AS returnamount, 0 AS returnnotaxamount,
			0 AS costamount, 0 AS pushbalanceamount,
			0 AS withdrawnamount, 0 AS costwriteoffamount
			FROM
			(
			SELECT t.id as salesuser,t.belongdeptid AS salesdept,t1.id as brandid,t1.deptid as branddept from t_base_personnel t ,t_base_goods_brand t1
			where t.employetype LIKE '%1%' and t1.state = '1' and t.state = '1'
			) t
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.salesuser != null">
					and FIND_IN_SET(salesuser,#{condition.salesuser})
				</if>
				<if test="condition.brandid != null">
					and FIND_IN_SET(brandid,#{condition.brandid})
				</if>
				<if test="condition.salesdept != null">
					and FIND_IN_SET(t.salesdept,#{condition.salesdept})
				</if>
			</trim>
		</if>
		<if test="condition.personbranduser != null">
			UNION ALL
			SELECT '' AS customerid, '' AS pcustomerid, '' AS customersort, '' AS salesarea, '' AS salesdept, '' AS salesuser, '' AS goodssort, '' AS supplierid, '' AS adduserid, '' AS addusername,
			'' AS goodsid, t.brandid AS brandid, t.personid AS branduser, '' AS supplieruser, '' AS branddept, 0 AS taxprice, 0 AS costprice,
			0 AS sendamount, 0 AS sendnotaxamount, 0 AS sendcostamount,
			0 AS returnamount, 0 AS returnnotaxamount,
			0 AS costamount, 0 AS pushbalanceamount,
			0 AS withdrawnamount, 0 AS costwriteoffamount
			FROM
			( select t.personid ,t.brandid from t_base_personnel_brand t
			left join t_base_personnel t2 on t2.id = t.personid
			where t2.state = '1'
			)t
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.branduser != null">
					and FIND_IN_SET(t.personid,#{condition.branduser})
				</if>
				<if test="condition.brandid != null">
					and FIND_IN_SET(t.brandid,#{condition.brandid})
				</if>
				<if test="condition.salesdept != null">
					and 1 != 1
				</if>
			</trim>
		</if>
		<if test="condition.groupcols == 'customersort'">
			UNION ALL
			SELECT '' AS customerid, '' AS pcustomerid, id AS customersort, '' AS salesarea, '' AS salesdept, '' AS salesuser, '' AS goodssort, '' AS supplierid, '' AS adduserid, '' AS addusername,
			'' AS goodsid, '' AS brandid, '' AS branduser, '' AS supplieruser, '' AS branddept, 0 AS taxprice, 0 AS costprice,
			0 AS sendamount, 0 AS sendnotaxamount, 0 AS sendcostamount,
			0 AS returnamount, 0 AS returnnotaxamount,
			0 AS costamount, 0 AS pushbalanceamount,
			0 AS withdrawnamount, 0 AS costwriteoffamount
			FROM t_base_sales_customersort
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.customersort != null">
					and FIND_IN_SET(id,#{condition.customersort})
				</if>
				<if test="1 == 1">
					and state = '1'
				</if>
			</trim>
		</if>
		)z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
			<if test="condition.personbranduser != null or condition.customerbrand != null">
				and EXISTS (SELECT t.id from t_base_goods_brand t where z.brandid = t.id and t.state = '1')
			</if>
		</trim>
		GROUP BY ${condition.groupcols}
	</sql>
	<select id="getSalesWithdrawnAssessList" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		<include refid="BranduserSalesWithdrawnAssess_sql"/>
		<if test="condition.isflag == null">
			<include refid="common.Page_limit" />
		</if>
	</select>
	<select id="getSalesWithdrawnAssessCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from ( <include refid="BranduserSalesWithdrawnAssess_sql"/> ) z
	</select>
	<select id="getSalesWithdrawnAssessSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select SUM(z.sendamount) AS sendamount,SUM(z.sendnotaxamount) as sendnotaxamount,SUM(z.sendcostamount) AS sendcostamount,
		SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.costamount) as costamount,SUM(z.pushbalanceamount) as pushbalanceamount,
		SUM(z.withdrawnamount) as withdrawnamount,SUM(z.costwriteoffamount) as costwriteoffamount
		from ( <include refid="BranduserSalesWithdrawnAssess_sql"/> ) z
	</select>
	<sql id="showCollectReportData_sql">
		SELECT
		z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,
		SUM(z.sendnum) AS sendnum,SUM(z.sendamount) AS sendamount,SUM(z.sendnotaxamount) AS sendnotaxamount,
		SUM(z.returnnum) AS returnnum,SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.costamount) as costamount,sum(z.pushbalanceamount) as pushbalanceamount,sum(z.pushbalancenotaxamount) as pushbalancenotaxamount,sum(z.beginamount) as beginamount,sum(z.withdrawnamount) as withdrawnamount,
		sum(z.allsendamount) as allsendamount,sum(z.allreturnamount) as allreturnamount,sum(z.allpushbalanceamount) as allpushbalanceamount,sum(z.allbeginamount) as allbeginamount,
		sum(z.sendamount- z.returnamount + z.pushbalanceamount + z.beginamount - (z.writeallsendamount - z.writeallreturnamount + z.writeallpushbalanceamount + z.writeallbeginamount)) as hidallunwithdrawnamount,
		sum(z.customeramount) as customeramount,sum(z.balanceamount) as balanceamount
		FROM
		(
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,
		t1.unitnum AS sendnum,t1.taxamount AS sendamount,t1.notaxamount AS sendnotaxamount,
		0 AS returnnum,0 AS returnamount,0 AS returnnotaxamount,
		t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount,0 as beginamount,0 AS withdrawnamount,
		IF(
		<trim prefix="" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null" >
				<![CDATA[and t1.writeoffdate >= #{condition.businessdate1}]]>
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t1.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			and t1.iswriteoff = '1'
		</trim>
		,t1.taxamount,0 ) as writeallsendamount,
		0 as writeallreturnamount,0 as writeallpushbalanceamount,0 as writeallbeginamount,
		if(t1.iswriteoff = '0',t1.taxamount,0) as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,0 as allbeginamount,
		0 as customeramount,0 as balanceamount
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}) or FIND_IN_SET(t.customerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null" >
				<![CDATA[ and t.businessdate >= #{condition.businessdate1}]]>
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[ and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			AND t.STATUS IN ('3', '4')
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		0 AS returnnum,0 AS returnamount,0 AS returnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount,0 as beginamount, t1.taxamount AS withdrawnamount,
		0 as writeallsendamount,0 as writeallreturnamount,0 as writeallpushbalanceamount,0 as writeallbeginamount,
		0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,0 as allbeginamount,
		0 as customeramount,0 as balanceamount
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t1.saleoutid=t.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}) or FIND_IN_SET(t.customerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null" >
				<![CDATA[ and t1.writeoffdate >= #{condition.businessdate1}]]>
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[ and t1.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			and t1.iswriteoff='1' and t.status in('3','4')
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		t1.unitnum AS returnnum,t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,-t1.unitnum*t1.costprice as costamount,
		0 as pushbalanceamount,0 as pushbalancenotaxamount,0 as beginamount,0 AS withdrawnamount,0 as writeallsendamount,
		IF(
		<trim prefix="" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null" >
				<![CDATA[and t1.writeoffdate >= #{condition.businessdate1}]]>
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t1.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			and t1.iswriteoff = '1'
		</trim>
		,t1.taxamount,0 ) as writeallreturnamount,
		0 as writeallpushbalanceamount,0 as writeallbeginamount,
		0 as allsendamount,if(t1.iswriteoff = '0',t1.taxamount,0) as allreturnamount,0 as allpushbalanceamount,0 as allbeginamount,
		0 as customeramount,0 as balanceamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}) or FIND_IN_SET(t.customerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null" >
				<![CDATA[ and t.businessdate >= #{condition.businessdate1}]]>
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[ and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			and ischeck='1' AND t.STATUS IN ('3', '4')
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,
		0 AS sendnum,0 AS sendamount,0 AS sendnotaxamount,
		0 AS returnnum,0 AS returnamount,0 AS returnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount,0 as beginamount,-t1.taxamount AS withdrawnamount,
		0 as writeallsendamount,0 as writeallreturnamount,0 as writeallpushbalanceamount,0 as writeallbeginamount,
		0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,0 as allbeginamount,
		0 as customeramount,0 as balanceamount
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}) or FIND_IN_SET(t.customerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null" >
				<![CDATA[ and t1.writeoffdate >= #{condition.businessdate1}]]>
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[ and t1.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			and t.ischeck='1' and t1.iswriteoff='1' and t.status in('3','4')
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,
		0 AS sendnum,0 AS sendamount, 0 AS sendnotaxamount,
		0 AS returnnum,0 AS returnamount, 0 AS returnnotaxamount,
		0 as costamount,t.amount as pushbalanceamount,t.notaxamount as pushbalancenotaxamount,0 as beginamount,0 AS withdrawnamount,
		0 as writeallsendamount,0 as writeallreturnamount,
		IF(
		<trim prefix="" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null" >
				<![CDATA[and t.writeoffdate >= #{condition.businessdate1}]]>
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			and t.iswriteoff = '1'
		</trim>
		,t.amount,0) as writeallpushbalanceamount,
		0 as writeallbeginamount,0 as allsendamount,0 as allreturnamount,if(t.iswriteoff = '0',t.amount,0) as allpushbalanceamount,
		0 as allbeginamount,0 as customeramount,0 as balanceamount
		FROM t_account_customer_push_balance t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}) or FIND_IN_SET(t.customerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null" >
				<![CDATA[ and t.businessdate >= #{condition.businessdate1}]]>
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[ and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			AND t.STATUS IN ('3', '4')
		</trim>
		UNION ALL
		SELECT t.* from (
		SELECT t.id as customerid,t1.pid as pcustomerid,t1.customersort,t1.salesarea,t1.salesdeptid as salesdept,t1.salesuserid as salesuser,
		0 AS sendnum,0 AS sendamount, 0 AS sendnotaxamount,
		0 AS returnnum,0 AS returnamount, 0 AS returnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount,0 as beginamount,0 AS withdrawnamount,
		0 as writeallsendamount,0 as writeallreturnamount,0 as writeallpushbalanceamount,0 as writeallbeginamount,
		0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,0 as allbeginamount,
		t.amount as customeramount,0 as balanceamount
		from (
		SELECT t.* FROM t_account_customer_capital t <![CDATA[ where t.amount <> 0 ]]>
		) t
		LEFT JOIN t_base_sales_customer t1 ON t.id = t1.id
		) t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}) or FIND_IN_SET(t.customerid,#{condition.pcustomerid}))
			</if>
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,
		0 AS sendnum,0 AS sendamount, 0 AS sendnotaxamount,
		0 AS returnnum,0 AS returnamount, 0 AS returnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount,0 as beginamount,t.amount AS withdrawnamount,
		0 as writeallsendamount,0 as writeallreturnamount,0 as writeallpushbalanceamount,0 as writeallbeginamount,
		0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,0 as allbeginamount,
		0 as customeramount,0 as balanceamount
		FROM t_account_customer_push_balance t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}) or FIND_IN_SET(t.customerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null" >
				<![CDATA[ and t.writeoffdate >= #{condition.businessdate1}]]>
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[ and t.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			and t.iswriteoff='1' and t.status in('3','4')
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,
		0 AS sendnum,0 AS sendamount, 0 AS sendnotaxamount,
		0 AS returnnum,0 AS returnamount, 0 AS returnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount,t.amount as beginamount,0 AS withdrawnamount,
		0 as writeallsendamount,0 as writeallreturnamount,0 as writeallpushbalanceamount,
		IF(
		<trim prefix="" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null" >
				<![CDATA[and t.writeoffdate >= #{condition.businessdate1}]]>
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			and t.iswriteoff = '1'
		</trim>
		,t.amount,0) as writeallbeginamount,
		0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,if(t.iswriteoff = '0',t.amount,0) as allbeginamount,
		0 as customeramount,0 as balanceamount
		FROM t_account_begin_amount t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}) or FIND_IN_SET(t.customerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null" >
				<![CDATA[ and t.businessdate >= #{condition.businessdate1}]]>
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[ and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			AND t.STATUS IN ('3', '4')
		</trim>
		UNION ALL
		SELECT
		t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,
		0 AS sendnum,0 AS sendamount, 0 AS sendnotaxamount,
		0 AS returnnum,0 AS returnamount, 0 AS returnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount,0 as beginamount,t.amount AS withdrawnamount,
		0 as writeallsendamount,0 as writeallreturnamount,0 as writeallpushbalanceamount,0 as writeallbeginamount,
		0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,0 as allbeginamount,
		0 as customeramount,0 as balanceamount
		FROM t_account_begin_amount t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}) or FIND_IN_SET(t.customerid,#{condition.pcustomerid}))
			</if>
			<if test="condition.businessdate1 != null" >
				<![CDATA[ and t.writeoffdate >= #{condition.businessdate1}]]>
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[ and t.writeoffdate <= #{condition.businessdate2}]]>
			</if>
			and t.iswriteoff='1' and (t.status = '4' or t.STATUS = '3')
		</trim>
		UNION ALL
		SELECT t.* from (
		SELECT t.customerid,t1.pid as pcustomerid,t1.customersort,t1.salesarea,t1.salesdeptid as salesdept,t1.salesuserid as salesuser,
		0 AS sendnum,0 AS sendamount, 0 AS sendnotaxamount,
		0 AS returnnum,0 AS returnamount, 0 AS returnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount,0 as beginamount,0 AS withdrawnamount,
		0 as writeallsendamount,0 as writeallreturnamount,0 as writeallpushbalanceamount,0 as writeallbeginamount,
		0 as allsendamount,0 as allreturnamount,0 as allpushbalanceamount,0 as allbeginamount,
		0 as customeramount,t.balanceamount as balanceamount
		from ( SELECT t.* FROM t_account_customer_capital_log t, (SELECT t.customerid, max(t.addtime) addtime,MAX(t.id) as id FROM t_account_customer_capital_log t
		<if test="condition.businessdate2 != null">
			where <![CDATA[  DATE_FORMAT(t.addtime,'%Y-%m-%d') <= STR_TO_DATE(#{condition.businessdate2},'%Y-%m-%d') ]]>
		</if>
		GROUP BY t.customerid ) t1 WHERE t.id=t1.id and t.customerid = t1.customerid AND t.addtime = t1.addtime  <![CDATA[ and t.balanceamount <> 0 ]]> ) t
		LEFT JOIN t_base_sales_customer t1 ON t.customerid = t1.id ) t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and (FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid}) or FIND_IN_SET(t.customerid,#{condition.pcustomerid}))
			</if>
		</trim>
		) z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
		<if test="condition.groupcols != 'all'">
			group by customerid
		</if>
	</sql>
	<select id="showCollectReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		<include refid="showCollectReportData_sql" />
		<if test="condition.isflag == null">
			<include refid="common.Page_limit" />
		</if>
	</select>
	<select id="showCollectReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from ( <include refid="showCollectReportData_sql" /> ) z
	</select>
	<sql id="getCustomerUnsaleQueryReportList_sql">
		(
		SELECT t1.id as customerid, t1.customersort, t1.salesarea, t1.salesuserid as salesuser, t1.contact, t1.mobile,
		if(z.demandamount IS NULL,0,z.demandamount) as demandamount, if(z.orderamount IS NULL,0,z.orderamount) as orderamount, if(z.saleoutamount IS NULL,0,z.saleoutamount) as saleoutamount, if(z.saleamount IS NULL,0,z.saleamount) as saleamount
		from (
		SELECT z.customerid,z.customersort,z.salesarea,z.salesuser,
		SUM(z.demandamount) AS demandamount, SUM(z.orderamount) AS orderamount, SUM(z.saleoutamount) AS saleoutamount, SUM(z.saleamount) AS saleamount
		FROM (
		SELECT t.customerid,t.customersort,t.salesarea,t.salesuser,
		t1.taxamount as demandamount,0 as orderamount,0 as saleoutamount,0 as saleamount
		FROM t_sales_demand t
		RIGHT JOIN t_sales_demand_detail t1 ON t.id = t1.orderid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and t.status = '0'
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= '${condition.businessdate1}'
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= '${condition.businessdate2}']]>
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t.customersort,t.salesarea,t.salesuser,
		0 as demandamount,t1.taxamount as orderamount,0 as saleoutamount,0 as saleamount
		FROM t_sales_order t
		RIGHT JOIN t_sales_order_detail t1 ON t.id = t1.orderid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and t.status = '2'
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= '${condition.businessdate1}'
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= '${condition.businessdate2}']]>
			</if>
		</trim>
		UNION ALL
		SELECT t.customerid,t.customersort,t.salesarea,t.salesuser,
		0 as demandamount,0 as orderamount,if(t.status = '2',t1.taxamount,0) as saleoutamount,if(t.status = '3' or t.status = '4',t1.taxamount,0) as saleamount
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t.id = t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and (t.status = '2' OR t.status = '3' or t.status = '4')
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= '${condition.businessdate1}'
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= '${condition.businessdate2}']]>
			</if>
		</trim>
		) z GROUP BY customerid
		) z
		right JOIN t_base_sales_customer t1 ON z.customerid = t1.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and t1.state = '1'
			</if>
			<if test="condition.contact != null">
				and t1.contact like CONCAT('%',#{condition.contact},'%')
			</if>
			<if test="condition.salesarea != null">
				and t1.salesarea = #{condition.salesarea}
			</if>
			<if test="condition.customersort != null">
				and t1.customersort = #{condition.customersort}
			</if>
			<if test="condition.salesuser != null">
				and t1.salesuserid = #{condition.salesuser}
			</if>
			<if test="condition.customerid != null">
				and t1.id = #{condition.customerid}
			</if>
		</trim>
		)
	</sql>
	<select id="getCustomerUnsaleQueryReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		select z.* from <include refid="getCustomerUnsaleQueryReportList_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.ismarkets != null">
				<choose>
					<when test="condition.ismarkets == 0">
						and (z.demandamount = 0 and z.orderamount =0 and z.saleoutamount = 0 and z.saleamount = 0)
					</when>
					<when test="condition.ismarkets == 1">
						and (z.demandamount != 0 or z.orderamount != 0 or z.saleoutamount != 0 or z.saleamount != 0)
					</when>
				</choose>
			</if>
		</trim>
		<if test="condition.isflag == null">
			<include refid="common.Page_limit" />
		</if>
	</select>
	<select id="getCustomerUnsaleQueryReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from <include refid="getCustomerUnsaleQueryReportList_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.ismarkets != null">
				<choose>
					<when test="condition.ismarkets == 0">
						and (z.demandamount = 0 and z.orderamount =0 and z.saleoutamount = 0 and z.saleamount = 0)
					</when>
					<when test="condition.ismarkets == 1">
						and (z.demandamount != 0 or z.orderamount != 0 or z.saleoutamount != 0 or z.saleamount != 0)
					</when>
				</choose>
			</if>
		</trim>
	</select>
	<select id="getCustomerUnsaleQueryReportSum" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		select SUM(z.demandamount) AS demandamount, SUM(z.orderamount) AS orderamount, SUM(z.saleoutamount) AS saleoutamount, SUM(z.saleamount) AS saleamount
		from <include refid="getCustomerUnsaleQueryReportList_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.ismarkets != null">
				<choose>
					<when test="condition.ismarkets == 0">
						and (z.demandamount = 0 and z.orderamount =0 and z.saleoutamount = 0 and z.saleamount = 0)
					</when>
					<when test="condition.ismarkets == 1">
						and (z.demandamount != 0 or z.orderamount != 0 or z.saleoutamount != 0 or z.saleamount != 0)
					</when>
				</choose>
			</if>
		</trim>
	</select>

	<select id="showMonthSalesReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.SaleMonthReport">
		select * ,
		sum(CASE k.month when '01' then k.costamount else 0 end) 'costamount01',
		sum(CASE k.month when '02' then k.costamount else 0 end) 'costamount02',
		sum(CASE k.month when '03' then k.costamount else 0 end) 'costamount03',
		sum(CASE k.month when '04' then k.costamount else 0 end) 'costamount04',
		sum(CASE k.month when '05' then k.costamount else 0 end) 'costamount05',
		sum(CASE k.month when '06' then k.costamount else 0 end) 'costamount06',
		sum(CASE k.month when '07' then k.costamount else 0 end) 'costamount07',
		sum(CASE k.month when '08' then k.costamount else 0 end) 'costamount08',
		sum(CASE k.month when '09' then k.costamount else 0 end) 'costamount09',
		sum(CASE k.month when '10' then k.costamount else 0 end) 'costamount10',
		sum(CASE k.month when '11' then k.costamount else 0 end) 'costamount11',
		sum(CASE k.month when '12' then k.costamount else 0 end) 'costamount12',

		sum(CASE k.month when '01' then k.sendamount else 0 end) 'sendamount01',
		sum(CASE k.month when '02' then k.sendamount else 0 end) 'sendamount02',
		sum(CASE k.month when '03' then k.sendamount else 0 end) 'sendamount03',
		sum(CASE k.month when '04' then k.sendamount else 0 end) 'sendamount04',
		sum(CASE k.month when '05' then k.sendamount else 0 end) 'sendamount05',
		sum(CASE k.month when '06' then k.sendamount else 0 end) 'sendamount06',
		sum(CASE k.month when '07' then k.sendamount else 0 end) 'sendamount07',
		sum(CASE k.month when '08' then k.sendamount else 0 end) 'sendamount08',
		sum(CASE k.month when '09' then k.sendamount else 0 end) 'sendamount09',
		sum(CASE k.month when '10' then k.sendamount else 0 end) 'sendamount10',
		sum(CASE k.month when '11' then k.sendamount else 0 end) 'sendamount11',
		sum(CASE k.month when '12' then k.sendamount else 0 end) 'sendamount12',


		sum(CASE k.month when '01' then k.returnamount else 0 end) 'returnamount01',
		sum(CASE k.month when '02' then k.returnamount else 0 end) 'returnamount02',
		sum(CASE k.month when '03' then k.returnamount else 0 end) 'returnamount03',
		sum(CASE k.month when '04' then k.returnamount else 0 end) 'returnamount04',
		sum(CASE k.month when '05' then k.returnamount else 0 end) 'returnamount05',
		sum(CASE k.month when '06' then k.returnamount else 0 end) 'returnamount06',
		sum(CASE k.month when '07' then k.returnamount else 0 end) 'returnamount07',
		sum(CASE k.month when '08' then k.returnamount else 0 end) 'returnamount08',
		sum(CASE k.month when '09' then k.returnamount else 0 end) 'returnamount09',
		sum(CASE k.month when '10' then k.returnamount else 0 end) 'returnamount10',
		sum(CASE k.month when '11' then k.returnamount else 0 end) 'returnamount11',
		sum(CASE k.month when '12' then k.returnamount else 0 end) 'returnamount12',

		sum(CASE k.month when '01' then k.pushbalanceamount else 0 end) 'pushbalanceamount01',
		sum(CASE k.month when '02' then k.pushbalanceamount else 0 end) 'pushbalanceamount02',
		sum(CASE k.month when '03' then k.pushbalanceamount else 0 end) 'pushbalanceamount03',
		sum(CASE k.month when '04' then k.pushbalanceamount else 0 end) 'pushbalanceamount04',
		sum(CASE k.month when '05' then k.pushbalanceamount else 0 end) 'pushbalanceamount05',
		sum(CASE k.month when '06' then k.pushbalanceamount else 0 end) 'pushbalanceamount06',
		sum(CASE k.month when '07' then k.pushbalanceamount else 0 end) 'pushbalanceamount07',
		sum(CASE k.month when '08' then k.pushbalanceamount else 0 end) 'pushbalanceamount08',
		sum(CASE k.month when '09' then k.pushbalanceamount else 0 end) 'pushbalanceamount09',
		sum(CASE k.month when '10' then k.pushbalanceamount else 0 end) 'pushbalanceamount10',
		sum(CASE k.month when '11' then k.pushbalanceamount else 0 end) 'pushbalanceamount11',
		sum(CASE k.month when '12' then k.pushbalanceamount else 0 end) 'pushbalanceamount12',

		sum(CASE k.month when '01' then k.totalbox else 0 end) 'saleboxnum01',
		sum(CASE k.month when '02' then k.totalbox else 0 end) 'saleboxnum02',
		sum(CASE k.month when '03' then k.totalbox else 0 end) 'saleboxnum03',
		sum(CASE k.month when '04' then k.totalbox else 0 end) 'saleboxnum04',
		sum(CASE k.month when '05' then k.totalbox else 0 end) 'saleboxnum05',
		sum(CASE k.month when '06' then k.totalbox else 0 end) 'saleboxnum06',
		sum(CASE k.month when '07' then k.totalbox else 0 end) 'saleboxnum07',
		sum(CASE k.month when '08' then k.totalbox else 0 end) 'saleboxnum08',
		sum(CASE k.month when '09' then k.totalbox else 0 end) 'saleboxnum09',
		sum(CASE k.month when '10' then k.totalbox else 0 end) 'saleboxnum10',
		sum(CASE k.month when '11' then k.totalbox else 0 end) 'saleboxnum11',
		sum(CASE k.month when '12' then k.totalbox else 0 end) 'saleboxnum12'
		FROM
		(
		SELECT
		z.month,z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.goodssort,z.supplierid,z.adduserid,z.addusername,
		z.goodsid,z.brandid,z.branduser,z.supplieruser,z.branddept,z.unitid,z.unitname,z.auxunitid,z.auxunitname,
		sum(z.costamount) as costamount,SUM(z.sendamount) AS sendamount,SUM(z.returnamount) AS returnamount,sum(z.pushbalanceamount) as pushbalanceamount,
		sum(z.totalbox) as totalbox
		FROM
		(
		<!--      		销售发货单 -->
		select
		SUBSTRING(t.businessdate,6,2) as month,t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,
		t1.unitnum*t1.costprice as costamount,t1.taxamount AS sendamount,0 AS returnamount,0 as pushbalanceamount,t1.totalbox

		from t_storage_saleout t  RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		LEFT JOIN t_base_goods_info t2 ON t1.goodsid = t2.id

		<include refid="monthconditionSQL"></include>

		<!--      		销售退货入库单 -->
		UNION ALL

		select
		SUBSTRING(t.businessdate,6,2) as month,t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,
		-t1.unitnum*t1.costprice as costamount,	0 AS sendamount	, t1.taxamount AS returnamount,0 as pushbalanceamount,-t1.totalbox

		from  t_storage_salereject_enter t  RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		LEFT JOIN t_base_goods_info t2 ON t1.goodsid = t2.id
		<include refid="monthconditionSQL"></include>
		and FIND_IN_SET(t.sourcetype,"1,2") and ischeck='1'

		<!--      		客户应收款冲差 -->
		<if test="condition.goodssort== null and condition.goodstype == null">
			UNION ALL
			select
			SUBSTRING(t.businessdate,6,2) as month,t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,'' as goodssort,t.supplierid,t.adduserid,t.addusername,
			t.brandid AS goodsid,t.brandid,t.branduser,t.supplieruser,t.branddept, '' AS unitid, '' AS unitname,'' as auxunitid,'' as auxunitname,
			0 as costamount,0 AS sendamount,0 AS returnamount,t.amount as pushbalanceamount,0 as totalbox
			from t_account_customer_push_balance t
			<include refid="monthconditionSQLPush"></include>
		</if>

		)z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
		group by  ${condition.groupcols},month
		)k

		<if test="condition.group == null">
			group by ${condition.groupcols}
		</if>
		<if test="condition.limit == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>

	<select id="getMonthSalesReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1)
		FROM(
		select *
		FROM
		(
		SELECT
		z.month,z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.goodssort,z.supplierid,z.adduserid,z.addusername,
		z.goodsid,z.brandid,z.branduser,z.supplieruser,z.branddept,z.unitid,z.unitname,z.auxunitid,z.auxunitname,
		sum(z.costamount) as costamount,SUM(z.sendamount) AS sendamount,SUM(z.returnamount) AS returnamount,sum(z.pushbalanceamount) as pushbalanceamount
		FROM
		(
		<!--      		销售发货单 -->
		select
		SUBSTRING(t.businessdate,6,2) as month,t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,
		t1.unitnum*t1.costprice as costamount,t1.taxamount AS sendamount,0 AS returnamount,0 as pushbalanceamount

		from t_storage_saleout t  RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		LEFT JOIN t_base_goods_info t2 ON t1.goodsid = t2.id
		<include refid="monthconditionSQL"></include>

		<!--      		销售退货入库单 -->
		UNION ALL

		select
		SUBSTRING(t.businessdate,6,2) as month,t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,t1.goodssort,t1.supplierid,t.adduserid,t.addusername,
		t1.goodsid,t1.brandid,t1.branduser,t1.supplieruser,t1.branddept,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,
		-t1.unitnum*t1.costprice as costamount,	0 AS sendamount	, t1.taxamount AS returnamount,0 as pushbalanceamount
		from  t_storage_salereject_enter t  RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		LEFT JOIN t_base_goods_info t2 ON t1.goodsid = t2.id
		<include refid="monthconditionSQL"></include>
		and FIND_IN_SET(t.sourcetype,"1,2") and ischeck='1'

		<!--      		客户应收款冲差 -->
		<if test="condition.goodssort== null and condition.goodstype == null">
			UNION ALL
			select
			SUBSTRING(t.businessdate,6,2) as month,t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser,'' as goodssort,t.supplierid,t.adduserid,t.addusername,
			t.brandid AS goodsid,t.brandid,t.branduser,t.supplieruser,t.branddept, '' AS unitid, '' AS unitname,'' as auxunitid,'' as auxunitname,
			0 as costamount,0 AS sendamount,0 AS returnamount,t.amount as pushbalanceamount
			from t_account_customer_push_balance t
			<include refid="monthconditionSQLPush"></include>
		</if>

		)z
		<if test="dataSql!=null">
			where ${dataSql}
		</if>
		group by  ${condition.groupcols},month
		)k
		group by ${condition.groupcols}
		)m
	</select>


	<sql id = "monthconditionSQL">
		<trim>
			<if test="condition.goodstype!=null">
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
			</if>
			<if test="1==1">
				where SUBSTRING(t.businessdate,1,4) = #{condition.year}
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t1.branduser,#{condition.branduser})
			</if>
			<if test="condition.supplieruser != null">
				and FIND_IN_SET(t1.supplieruser,#{condition.supplieruser})
			</if>

			<if test="condition.branddept != null">
				and FIND_IN_SET(t1.branddept,#{condition.branddept})
			</if>
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>

			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
			</if>
			<if test="condition.goodssort != null">
				and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
			</if>
			<if test="condition.goodstype != null">
				and FIND_IN_SET(t2.goodstype,#{condition.goodstype})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
			</if>
			<if test="condition.adduserid	!= null">
				and FIND_IN_SET(t.adduserid,#{condition.adduserid})
			</if>
			<if test="1==1">
				AND t.STATUS IN ('3', '4')
			</if>
		</trim>
	</sql>

	<sql id = "monthconditionSQLPush">
		<trim>
			<if test="condition.goodstype!=null">
				INNER JOIN t_base_goods_info g ON t.goodsid = g.id
			</if>
			<if test="1==1">
				where SUBSTRING(t.businessdate,1,4) = #{condition.year}
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t.brandid,#{condition.goodsid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t.brandid,#{condition.brandid})
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(t.branduser,#{condition.branduser})
			</if>
			<if test="condition.supplieruser != null">
				and FIND_IN_SET(t.supplieruser,#{condition.supplieruser})
			</if>
			<if test="condition.branddept != null">
				and FIND_IN_SET(t.branddept,#{condition.branddept})
			</if>
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>

			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(t.supplierid,#{condition.supplierid})
			</if>
			<if test="condition.goodssort != null">
				and FIND_IN_SET(t.goodssort,#{condition.goodssort})
			</if>
			<if test="condition.goodstype != null">
				and FIND_IN_SET(t.goodstype,#{condition.goodstype})
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null">
				and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
			</if>
			<if test="condition.adduserid	!= null">
				and FIND_IN_SET(t.adduserid,#{condition.adduserid})
			</if>
			<if test="1==1">
				AND t.STATUS IN ('3', '4')
			</if>
		</trim>

	</sql>

	<select id="getAllunwithdrawnamount" parameterType="java.lang.String" resultType="java.math.BigDecimal">
		select sum(z.unwithdrawnamount) as allunwithdrawnamount from
		(
		select if(t1.iswriteoff = '0',t1.taxamount,0) as unwithdrawnamount from t_storage_saleout_detail t1
		left join t_storage_saleout t on t1.saleoutid = t.id
		where t.customerid = #{customerid}
		union all
		select if(t1.iswriteoff = '0',t1.taxamount,0) as unwithdrawnamount from t_storage_salereject_enter_detail t1
		left join t_storage_salereject_enter t on t1.salerejectid = t.id
		where t.customerid = #{customerid}
		union all
		select if(iswriteoff = '0',amount,0) as unwithdrawnamount from t_account_customer_push_balance where customerid = #{customerid}
		union all
		select if(iswriteoff = '0',amount,0) as unwithdrawnamount from t_account_begin_amount where customerid = #{customerid}
		) z
	</select>

	<sql id="getSalesPromotionReportData_sql">
		(
		SELECT z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,
		z.goodssort,z.supplierid,z.adduserid,z.addusername,z.storageid,
		z.goodsid,z.brandid,<![CDATA[if(z.ptype <> '0',z.saleoutid,'') as saleoutid]]>,z.promotionid,
		z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.groupid,z.ptype,z.businessdate,
		SUM(z.salesnum)as salesnum,SUM(z.salestotalbox) as salestotalbox,SUM(z.salesamount) as salesamount,SUM(z.salesnotaxamount) as salesnotaxamount,
		SUM(z.promonum)as promonum,SUM(z.promoamount)as promoamount
		from (
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,
		IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,
		IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,t1.saleoutid as saleoutid,
		if(t2.billid is NOT NULL ,t2.billid,IF((SELECT t3.id from t_sales_offprice t3 where t3.id = t1.groupid) is null,'',(SELECT t3.id from t_sales_offprice t3 where t3.id = t1.groupid))) as promotionid,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.groupid,IF(t2.ptype is not null,t2.ptype,IF((SELECT t3.id from t_sales_offprice t3 where t3.id = t1.groupid) is null,'0','4')) as ptype,
		t.businessdate,t1.unitnum as salesnum,t1.totalbox as salestotalbox,t1.taxamount as salesamount,t1.notaxamount as salesnotaxamount,
		<![CDATA[if(t1.deliverytype <> '0',t1.unitnum,0) as promonum]]>,<![CDATA[if(t1.deliverytype <> '0',t1.taxamount,0) as promoamount]]>
		from t_storage_saleout t
		LEFT JOIN t_storage_saleout_detail t1 ON t.id = t1.saleoutid
		LEFT JOIN t_sales_promotion_package_group t2 ON t1.groupid = t2.groupid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and (t.status = '3' or t.status = '4') <![CDATA[and t1.groupid <> '']]>
			</if>
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.billid != null">
				and (t.id like concat('%',#{condition.billid},'%') or t2.billid like concat('%',#{condition.billid},'%'))
			</if>
			<if test="condition.customerid != null" >
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null" >
				and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
			</if>
			<if test="condition.goodssort != null">
				and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.storageid != null">
				and FIND_IN_SET(t.storageid,#{condition.storageid})
			</if>
		</trim>
		) z
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="condition.ptype != null">
				and z.ptype = #{condition.ptype}
			</if>
		</trim>
		<if test="condition.groupcols != 'all'">
			GROUP BY ${condition.groupcols}
		</if>
		)
	</sql>
	<select id="getSalesPromotionReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT z.* from <include refid="getSalesPromotionReportData_sql"/> z
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="getSalesPromotionReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		SELECT count(1) from <include refid="getSalesPromotionReportData_sql"/> z
	</select>
	<select id="getSalesPromotionReportDataSum" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT SUM(z.salesnum)as salesnum,SUM(z.salestotalbox) as salestotalbox,SUM(z.salesamount) as salesamount,SUM(z.salesnotaxamount) as salesnotaxamount,
		SUM(z.promonum)as promonum,SUM(z.promoamount)as promoamount
		from <include refid="getSalesPromotionReportData_sql"/> z
	</select>

	<sql id="getSalesScheduleActivityDiscountReportData_sql">
		(
		SELECT z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.goodssort,z.supplierid,z.storageid,
		z.goodsid,z.brandid,z.groupid,z.saleorderid,z.unitid,z.unitname,
		z.schedule,z.begindate,z.enddate,z.oldprice,z.offprice,sum(z.schedulenum) as schedulenum,
		sum(z.schedulediscountamount) as schedulediscountamount
		from (
		SELECT t.customerid,t.pcustomerid,t.customersort,t.salesarea,t.salesdept,t.salesuser, t1.goodssort,t1.supplierid,t.storageid,
		t1.goodsid,t1.brandid,t1.groupid,t.saleorderid,t1.unitid,t1.unitname,IFNULL(t3.schedule,'') as schedule,t3.begindate,t3.enddate,
		t4.fixprice as oldprice,t1.taxprice as offprice,t1.unitnum as schedulenum,
		(t4.fixprice-t1.taxprice)*t1.unitnum as schedulediscountamount
		from t_storage_saleout t
		right JOIN t_storage_saleout_detail t1 ON t.id = t1.saleoutid
		LEFT JOIN t_sales_dispatchbill_detail t2 on t1.dispatchbillid=t2.billid and t1.dispatchbilldetailid=t2.id
		LEFT JOIN t_sales_order_detail t4 on t2.billdetailno=t4.id
		left JOIN t_sales_offprice t3 on t3.id = t1.groupid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and (t.status = '3' or t.status = '4') <![CDATA[and t1.groupid <> '']]>
			</if>
			<if test="condition.begindate != null">
				and t3.begindate >= #{condition.begindate}
			</if>
			<if test="condition.enddate != null">
				<![CDATA[and t3.enddate <= #{condition.enddate}]]>
			</if>
			<if test="condition.schedule != null">
				and t3.schedule = #{condition.schedule}
			</if>
			<if test="condition.customerid != null" >
				and FIND_IN_SET(t.customerid,#{condition.customerid})
			</if>
			<if test="condition.pcustomerid != null" >
				and FIND_IN_SET(t.pcustomerid,#{condition.pcustomerid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.salesdept != null">
				and FIND_IN_SET(t.salesdept,#{condition.salesdept})
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(t.customersort,#{condition.customersort})
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(t.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(t.salesuser,#{condition.salesuser})
			</if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(t1.supplierid,#{condition.supplierid})
			</if>
			<if test="condition.goodssort != null">
				and FIND_IN_SET(t1.goodssort,#{condition.goodssort})
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.storageid != null">
				and FIND_IN_SET(t.storageid,#{condition.storageid})
			</if>
		</trim>
		)z
		<if test="condition.groupcols != 'all'">
			GROUP BY ${condition.groupcols}
		</if>
		)
	</sql>
	<select id="getSalesScheduleActivityDiscountReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT z.* from <include refid="getSalesScheduleActivityDiscountReportData_sql"/> z
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="getSalesScheduleActivityDiscountReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		SELECT count(1) from <include refid="getSalesScheduleActivityDiscountReportData_sql"/> z
	</select>
	<select id="getSalesScheduleActivityDiscountReportDataSum" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT sum(z.schedulenum) as schedulenum,sum(schedulediscountamount) as schedulediscountamount
		from <include refid="getSalesScheduleActivityDiscountReportData_sql"/> z
	</select>
	<sql id="selectSalesBillStatementList_sql">
		select businessdate, customerid, pcustomerid, salesarea, customersort, salesuser, salesdept, salesamount, rejectamount, pushbalanceamount
		from (
		select r.businessdate, r.customerid, r.pcustomerid, r.salesarea, r.customersort, r.salesuser, r.salesdept, sum(rd.taxamount) salesamount, 0 rejectamount, 0 pushbalanceamount
		from t_sales_receipt r left join t_sales_receipt_detail rd on r.id = rd.billid
		where status = '3'
		group by r.businessdate, r.customerid, r.pcustomerid, r.salesarea, r.customersort, r.salesuser, r.salesdept
		union ALL
		select r.businessdate, r.customerid, r.pcustomerid, r.salesarea, r.customersort, r.salesuser, r.salesdept, 0 salesamount, sum(rd.taxamount) rejectamount, 0 pushbalanceamount
		from t_sales_rejectbill r left join t_sales_rejectbill_detail rd on r.id = rd.billid
		where r.isinvoice in('1', '2', '3', '4', '5') and billtype = '2'
		group by r.businessdate, r.customerid, r.pcustomerid, r.salesarea, r.customersort, r.salesuser, r.salesdept
		union ALL
		select pb.businessdate, pb.customerid, pb.pcustomerid, pb.salesarea, pb.customersort, pb.salesuser, pb.salesdept, 0 salesamount, 0 rejectamount, sum(amount) pushbalanceamount
		from t_account_customer_push_balance pb
		where status = '3'
		group by pb.businessdate, pb.customerid, pb.pcustomerid, pb.salesarea, pb.customersort, pb.salesuser, pb.salesdept
		) t
		<trim prefix="where" prefixOverrides="and|or">
			and 1 = 1
			<if test="condition.begindate != null">
				and businessdate <![CDATA[ >= ]]> #{condition.begindate }
			</if>
			<if test="condition.enddate != null">
				and businessdate <![CDATA[ <= ]]> #{condition.enddate }
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(customerid, #{condition.customerid })
			</if>
			<if test="condition.pcustomerid != null">
				and FIND_IN_SET(pcustomerid, #{condition.pcustomerid })
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(salesarea, #{condition.salesarea })
			</if>
			<if test="condition.customersort != null">
				and FIND_IN_SET(customersort, #{condition.customersort })
			</if>
			<if test="condition.salesuser != null">
				and FIND_IN_SET(salesuser, #{condition.salesuser })
			</if>
			<if test="condition.salesdept != null">
				and FIND_IN_SET(salesdept, #{condition.salesdept })
			</if>
		</trim>
		group by businessdate, customerid, pcustomerid, salesarea, customersort, salesuser, salesdept
	</sql>
	<select id="selectSalesBillStatementList" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		<include refid="selectSalesBillStatementList_sql" />
		<include refid="common.Page_LimitOnly" />
	</select>
	<select id="selectSalesBillStatementTotalCount" parameterType="com.hd.agent.common.util.PageMap" resultType="java.lang.Integer">
		select count(1)
		from (<include refid="selectSalesBillStatementList_sql" />)
		t
	</select>
	<select id="selectSalesBillStatementSumData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select '合计' customername, sum(salesamount) salesamount, sum(rejectamount) rejectamount, sum(pushbalanceamount) pushbalanceamount
		from (<include refid="selectSalesBillStatementList_sql" />)
		t
	</select>
	<sql id="selectSalesBillStatementDetailList_sql">
		select businessdate, customerid, pcustomerid, salesarea, customersort, salesuser, salesdept, salesamount, rejectamount, pushbalanceamount, billtype, salesbillamount, rejectbillamount, pushbalancebillamount, billid
		from (
		select '1' billtype, r.saleorderid billid, r.businessdate, r.customerid, r.pcustomerid, r.salesarea, r.customersort, r.salesuser, r.salesdept, sum(rd.taxamount) salesamount, 0 rejectamount, 0 pushbalanceamount, count(distinct r.saleorderid) salesbillamount, 0 rejectbillamount, 0 pushbalancebillamount
		from t_sales_receipt r left join t_sales_receipt_detail rd on r.id = rd.billid
		where status = '3'
		<if test="condition.orderids != null and condition.orderids != ''">
			and FIND_IN_SET(saleorderid, #{condition.orderids})
		</if>
		group by r.id, r.businessdate, r.customerid, r.pcustomerid, r.salesarea, r.customersort, r.salesuser, r.salesdept
		union ALL
		select '2' billtype, r.id billid, r.businessdate, r.customerid, r.pcustomerid, r.salesarea, r.customersort, r.salesuser, r.salesdept, 0 salesamount, sum(rd.taxamount) rejectamount, 0 pushbalanceamount, 0 salesbillamount, count(distinct r.id) rejectbillamount, 0 pushbalancebillamount
		from t_sales_rejectbill r left join t_sales_rejectbill_detail rd on r.id = rd.billid
		where r.isinvoice in('1', '2', '3', '4', '5') and billtype = '2'
		<if test="condition.rejectids != null and condition.rejectids != ''">
			and FIND_IN_SET(r.id, #{condition.rejectids})
		</if>
		group by r.id, r.businessdate, r.customerid, r.pcustomerid, r.salesarea, r.customersort, r.salesuser, r.salesdept
		union ALL
		select '3' billtype, pb.id billid, pb.businessdate, pb.customerid, pb.pcustomerid, pb.salesarea, pb.customersort, pb.salesuser, pb.salesdept, 0 salesamount, 0 rejectamount, sum(amount) pushbalanceamount, 0 salesbillamount, 0 rejectbillamount, count(distinct pb.id) pushbalancebillamount
		from t_account_customer_push_balance pb
		where status = '3'
		<if test="condition.pushbalanceids != null and condition.pushbalanceids != ''">
			and FIND_IN_SET(pb.id, #{condition.pushbalanceids})
		</if>
		group by pb.id, pb.businessdate, pb.customerid, pb.pcustomerid, pb.salesarea, pb.customersort, pb.salesuser, pb.salesdept
		) t
		<trim prefix="where" prefixOverrides="and|or">
			and 1 = 1
			<if test="condition.begindate != null">
				and businessdate <![CDATA[ >= ]]> #{condition.begindate }
			</if>
			<if test="condition.enddate != null">
				and businessdate <![CDATA[ <= ]]> #{condition.enddate }
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(customerid, #{condition.customerid })
			</if>
		</trim>
		group by businessdate, customerid, pcustomerid, salesarea, customersort, salesuser, salesdept
	</sql>
	<select id="selectSalesBillStatementDetailList" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select * FROM
		(
		select *
		from
		(<include refid="selectSalesBillStatementDetailList_sql" />)t
		order by businessdate ${condition.order}, billtype asc
		) t
		<include refid="common.Page_limit" />
	</select>
	<select id="selectSalesBillStatementDetailTotalCount" parameterType="com.hd.agent.common.util.PageMap" resultType="java.lang.Integer">
		select count(1)
		from (<include refid="selectSalesBillStatementDetailList_sql" />)
		t
	</select>
	<select id="selectSalesBillStatementDetailSumData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select '合计' billid, sum(salesamount) salesamount, sum(rejectamount) rejectamount, sum(pushbalanceamount) pushbalanceamount,
		sum(salesbillamount) salesbillamount, sum(rejectbillamount) rejectbillamount, sum(pushbalancebillamount) pushbalancebillamount
		from (<include refid="selectSalesBillStatementDetailList_sql" />)
		t
	</select>

	<!--厂商月毛利率统计报表-->
	<sql id="showSalesSuppliserGrossReportDataList_sql">
		select t.supplierid,t.goodsid,t.brandid,sum(t.beginnum) as beginnum,sum(t.beginnotaxamount) as beginnotaxamount,sum(t.beginamount) as beginamount,sum(t.enternum) as enternum,sum(t.enternotaxamount) as enternotaxamount,sum(t.enteramount) as enteramount,sum(t.outnum) as outnum,sum(t.outnotaxamount) as outnotaxamount,sum(t.outamount) as outamount,sum(t.beginnum)+sum(t.enternum)-sum(t.outnum) as endnum,sum(t.beginnotaxamount)+sum(t.enternotaxamount)-sum(t.costnotaxamount) as endnotaxamount,sum(t.beginamount)+sum(t.enteramount)-sum(t.costamount) as endamount,sum(t.costamount) as costamount,sum(t.outamount) - sum(t.costamount) as grossamount,((sum(t.outamount) - sum(t.costamount))/sum(t.outamount)) as grossrate,sum(t.costnotaxamount) as costnotaxamount
		from (
			SELECT t.supplierid,t.goodsid,t.brandid,
			t.beginnum,
			(case when
				t.goodsid='pushbalance' or t.goodsid='purchasepush'
			then t.beginnotaxamount else t.beginamount/(1+(t2.rate/100)) end
			) as beginnotaxamount,
			t.beginamount,
			t.enternum,
			(case when
				t.goodsid='pushbalance' or t.goodsid='purchasepush'
				then t.enternotaxamount else t.enteramount/(1+(t2.rate/100)) end
			) as enternotaxamount,
			t.enteramount,
			t.outnum,
			(case when
				t.goodsid='pushbalance' or t.goodsid='purchasepush'
				then t.outnotaxamount else t.outamount/(1+(t2.rate/100)) end
			) as outnotaxamount,
			t.outamount,
			t.endnum,
			(case when
				t.goodsid='pushbalance' or t.goodsid='purchasepush'
				then t.endnotaxamount else t.endamount/(1+(t2.rate/100)) end
			) as endnotaxamount,
			t.endamount,
			t.costamount,t.grossamount,t.grossrate,
			(case when
			t.goodsid='pushbalance' or t.goodsid='purchasepush'
			then t.costnotaxamount else t.costamount/(1+(t2.rate/100)) end
			) as costnotaxamount
			from(
				<!--期初 -->
				select t1.defaultsupplier as supplierid,t.goodsid,t1.brand as brandid,t.unitnum as beginnum,t.unitamount as beginamount,0 enternum,0 enteramount,0 outnum,0 outamount,0 endnum,0 endamount,0 costamount,0 grossamount,0 grossrate,0 beginnotaxamount,0 enternotaxamount,0 outnotaxamount,0 endnotaxamount,0 costnotaxamount
				from t_storage_stockinit t
				LEFT JOIN  t_base_goods_info t1 on t.goodsid = t1.id
				<trim prefix="where" prefixOverrides="and|or">
					<if test="condition.goodsid != null">
						and FIND_IN_SET(t1.id, #{condition.goodsid })
					</if>
					<if test="condition.supplierid != null">
						and FIND_IN_SET(t1.defaultsupplier, #{condition.supplierid })
					</if>
					<if test="condition.brandid != null">
						and FIND_IN_SET(t1.brand, #{condition.brandid })
					</if>
					<if test="1 == 1">
						and t.status = '3'
					</if>
				</trim>
				union all
				select t2.defaultsupplier as supplierid,t1.goodsid,t2.brand as brandid,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[ < ]]> #{condition.begindate }
				</if>
				then t1.unitnum else 0 end
				) as beginnum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[ < ]]> #{condition.begindate }
				</if>
				then t1.taxamount else 0 end
				) as beginamount,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then t1.unitnum else 0 end
				) as enternum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then t1.taxamount else 0 end
				) as enteramount,
				0 outnum,0 outamount,0 endnum,0 endamount,0 costamount,0 grossamount,0 grossrate,0 beginnotaxamount,0 enternotaxamount,0 outnotaxamount,0 endnotaxamount,0 costnotaxamount
				from t_purchase_arrivalorder t
				RIGHT JOIN  t_purchase_arrivalorder_detail t1 on t.id = t1.orderid
				LEFT JOIN  t_base_goods_info t2 on t1.goodsid = t2.id
				<trim prefix="where" prefixOverrides="and|or">
					<if test="condition.goodsid != null">
						and FIND_IN_SET(t1.goodsid, #{condition.goodsid })
					</if>
					<if test="condition.supplierid != null">
						and FIND_IN_SET(t2.defaultsupplier , #{condition.supplierid })
					</if>
					<if test="condition.brandid != null">
						and FIND_IN_SET(t2.brand, #{condition.brandid })
					</if>
					<if test="1 == 1">
						and (t.status = '3' or t.status = '4')
					</if>
				</trim>
				union all
				select t2.defaultsupplier as supplierid,t1.goodsid,t2.brand as brandid,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[ < ]]> #{condition.begindate }
				</if>
				then -t1.unitnum else 0 end
				) as beginnum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[ < ]]> #{condition.begindate }
				</if>
				then -t1.taxamount else 0 end
				) as beginamount,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then -t1.unitnum else 0 end
				) as enternum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then -t1.taxamount else 0 end
				) as enteramount,
				0 outnum,0 outamount,0 endnum,0 endamount,0 costamount,0 grossamount,0 grossrate,0 beginnotaxamount,0 enternotaxamount,0 outnotaxamount,0 endnotaxamount,0 costnotaxamount
				from t_purchase_returnorder t
				RIGHT JOIN  t_purchase_returnorder_detail t1 on t.id = t1.orderid
				LEFT JOIN  t_base_goods_info t2 on t1.goodsid = t2.id
				<trim prefix="where" prefixOverrides="and|or">
					<if test="condition.goodsid != null">
						and FIND_IN_SET(t1.goodsid, #{condition.goodsid })
					</if>
					<if test="condition.supplierid != null">
						and FIND_IN_SET(t2.defaultsupplier , #{condition.supplierid })
					</if>
					<if test="condition.brandid != null">
						and FIND_IN_SET(t2.brand, #{condition.brandid })
					</if>
					<if test="1 == 1">
						and t.ischeck='1'
					</if>
				</trim>
				union all
				select t2.defaultsupplier as supplierid,t1.goodsid,t2.brand as brandid,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[ < ]]> #{condition.begindate }
				</if>
				then t1.unitnum else 0 end
				) as beginnum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[ < ]]> #{condition.begindate }
				</if>
				then t1.taxamount else 0 end
				) as beginamount,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then t1.unitnum else 0 end
				) as enternum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then t1.taxamount else 0 end
				) as enteramount,
				0 outnum,0 outamount,0 endnum,0 endamount,0 costamount,0 grossamount,0 grossrate,0 beginnotaxamount,0 enternotaxamount,0 outnotaxamount,0 endnotaxamount,0 costnotaxamount
				from t_storage_other_enter t
				RIGHT JOIN  t_storage_other_enter_detail t1 on t.id = t1.billid
				LEFT JOIN  t_base_goods_info t2 on t1.goodsid = t2.id
				<trim prefix="where" prefixOverrides="and|or">
					<if test="condition.goodsid != null">
						and FIND_IN_SET(t1.goodsid, #{condition.goodsid })
					</if>
					<if test="condition.supplierid != null">
						and FIND_IN_SET(t2.defaultsupplier, #{condition.supplierid })
					</if>
					<if test="condition.brandid != null">
						and FIND_IN_SET(t2.brand, #{condition.brandid })
					</if>
					<if test="1 == 1">
						and (t.status = '3' or t.status = '4')
					</if>
				</trim>
				union all
				select t2.defaultsupplier as supplierid,t1.goodsid,t2.brand as brandid,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[ < ]]> #{condition.begindate }
				</if>
				then -t1.unitnum else 0 end
				) as beginnum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[ < ]]> #{condition.begindate }
				</if>
				then -t1.taxamount else 0 end
				) as beginamount,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then -t1.unitnum else 0 end
				) as enternum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then -t1.taxamount else 0 end
				) as enteramount,
				0 outnum,0 outamount,0 endnum,0 endamount,0 costamount,0 grossamount,0 grossrate,0 beginnotaxamount,0 enternotaxamount,0 outnotaxamount,0 endnotaxamount,0 costnotaxamount
				from t_storage_other_out t
				RIGHT JOIN  t_storage_other_out_detail t1 on t.id = t1.billid
				LEFT JOIN  t_base_goods_info t2 on t1.goodsid = t2.id
				<trim prefix="where" prefixOverrides="and|or">
					<if test="condition.goodsid != null">
						and FIND_IN_SET(t1.goodsid, #{condition.goodsid })
					</if>
					<if test="condition.supplierid != null">
						and FIND_IN_SET(t2.defaultsupplier, #{condition.supplierid })
					</if>
					<if test="condition.brandid != null">
						and FIND_IN_SET(t2.brand, #{condition.brandid })
					</if>
					<if test="1 == 1">
						and (t.status = '3' or t.status = '4')
					</if>
				</trim>
				union all
				select t2.defaultsupplier as supplierid,t1.goodsid,t2.brand as brandid,
				(case
				when 1 = 1 and t.billtype='1'
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[ < ]]> #{condition.begindate }
				</if>
				then t1.adjustnum
				when 1 = 1 and t.billtype='2'
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[ < ]]> #{condition.begindate }
				</if>
				then -t1.adjustnum
				else 0 end
				) as beginnum,
				(case
				when 1 = 1 and t.billtype='1'
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[ < ]]> #{condition.begindate }
				</if>
				then t1.amount
				when 1 = 1 and t.billtype='2'
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[ < ]]> #{condition.begindate }
				</if>
				then -t1.amount else 0 end
				) as beginamount,
				(case
				when 1 = 1  and t.billtype='1'
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then t1.adjustnum
				when 1 = 1 and t.billtype='2'
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then -t1.adjustnum else 0 end
				) as enternum,
				(case
				when 1 = 1 and t.billtype='1'
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then t1.amount
				when 1 = 1 and t.billtype='2'
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then -t1.amount else 0 end
				) as enteramount,
				0 outnum,0 outamount,0 endnum,0 endamount,0 costamount,0 grossamount,0 grossrate,0 beginnotaxamount,0 enternotaxamount,0 outnotaxamount,0 endnotaxamount,0 costnotaxamount
				from t_storage_adjustments t
				RIGHT JOIN  t_storage_adjustments_detail t1 on t.id = t1.adjustmentsid
				LEFT JOIN  t_base_goods_info t2 on t1.goodsid = t2.id
				<trim prefix="where" prefixOverrides="and|or">
					<if test="condition.goodsid != null">
						and FIND_IN_SET(t1.goodsid, #{condition.goodsid })
					</if>
					<if test="condition.supplierid != null">
						and FIND_IN_SET(t2.defaultsupplier, #{condition.supplierid })
					</if>
					<if test="condition.brandid != null">
						and FIND_IN_SET(t2.brand, #{condition.brandid })
					</if>
					<if test="1 == 1">
						and (t.status = '3' or t.status = '4')
					</if>
				</trim>
				union all
				select t2.defaultsupplier as supplierid,t1.goodsid,t2.brand as brandid,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and (
						 t1.writeoffdate  <![CDATA[ <  ]]> #{condition.begindate } and t1.iswriteoff = '1'
					)
				</if>
				then -t1.unitnum else 0 end
				) as beginnum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and (
					   t1.writeoffdate  <![CDATA[ <  ]]> #{condition.begindate } and t1.iswriteoff = '1'
					)
				</if>
				then (-t1.unitnum*t1.costprice) else 0 end
				) as beginamount,
				0 enternum,0 enteramount,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and (
					   t1.writeoffdate  <![CDATA[ >=  ]]> #{condition.begindate } and t1.iswriteoff = '1'
					)
				</if>
				<if test="condition.enddate != null">
					and (
					    t1.writeoffdate  <![CDATA[ <=  ]]> #{condition.enddate } and t1.iswriteoff = '1'
					)
				</if>
				then t1.unitnum else 0 end
				) as outnum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and (
					   t1.writeoffdate  <![CDATA[ >=  ]]> #{condition.begindate } and t1.iswriteoff = '1'
					)
				</if>
				<if test="condition.enddate != null">
					and (
						 t1.writeoffdate  <![CDATA[ <=  ]]> #{condition.enddate } and t1.iswriteoff = '1'
					)
				</if>
				then (t1.taxamount) else 0 end
				) as outamount,
				0 endnum,0 endamount,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and (
						 t1.writeoffdate  <![CDATA[ >=  ]]> #{condition.begindate } and t1.iswriteoff = '1'
					)
				</if>
				<if test="condition.enddate != null">
					and (
						  t1.writeoffdate  <![CDATA[ <=  ]]> #{condition.enddate } and t1.iswriteoff = '1'
					)
				</if>
				then (t1.unitnum*t1.costprice) else 0 end
				) as costamount,
				0 grossamount,0 grossrate,0 beginnotaxamount,0 enternotaxamount,0 outnotaxamount,0 endnotaxamount,0 costnotaxamount
				from t_storage_saleout t
				RIGHT JOIN  t_storage_saleout_detail t1 on t.id = t1.saleoutid
				LEFT JOIN  t_base_goods_info t2 on t1.goodsid = t2.id
				<trim prefix="where" prefixOverrides="and|or">
					<if test="condition.goodsid != null">
						and FIND_IN_SET(t1.goodsid, #{condition.goodsid })
					</if>
					<if test="condition.supplierid != null">
						and FIND_IN_SET(t2.defaultsupplier, #{condition.supplierid })
					</if>
					<if test="condition.brandid != null">
						and FIND_IN_SET(t2.brand, #{condition.brandid })
					</if>
					<if test="1 == 1">
						and (t.status = '3' or t.status = '4')
					</if>
				</trim>
				union all
				select t2.defaultsupplier as supplierid,t1.goodsid,t2.brand as brandid,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and (
						  t1.writeoffdate  <![CDATA[ <  ]]> #{condition.begindate } and t1.iswriteoff = '1'
					)
				</if>
				then t1.unitnum else 0 end
				) as beginnum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and (
					   t1.writeoffdate  <![CDATA[ <  ]]> #{condition.begindate } and t1.iswriteoff = '1'
					)
				</if>
				then (t1.unitnum*t1.costprice) else 0 end
				) as beginamount,
				0 enternum,0 enteramount,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and (
						  t1.writeoffdate  <![CDATA[ >=  ]]> #{condition.begindate } and t1.iswriteoff = '1'
					)
				</if>
				<if test="condition.enddate != null">
					and (
						 t1.writeoffdate  <![CDATA[ <=  ]]> #{condition.enddate } and t1.iswriteoff = '1'
					)
				</if>
				then -t1.unitnum else 0 end
				) as outnum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and (
						  t1.writeoffdate  <![CDATA[ >=  ]]> #{condition.begindate }   and t1.iswriteoff = '1'
					)
				</if>
				<if test="condition.enddate != null">
					and (
					   t1.writeoffdate  <![CDATA[ <=  ]]> #{condition.enddate } and t1.iswriteoff = '1'
					)
				</if>
				then (-t1.taxamount) else 0 end
				) as outamount,
				0 endnum,0 endamount,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and (
					   t1.writeoffdate  <![CDATA[ >=  ]]> #{condition.begindate } and t1.iswriteoff = '1'
					)
				</if>
				<if test="condition.enddate != null">
					and (
					   t1.writeoffdate  <![CDATA[ <=  ]]> #{condition.enddate } and t1.iswriteoff = '1'
					)
				</if>
				then (-t1.unitnum*t1.costprice) else 0 end
				) as costamount,
				0 grossamount,0 grossrate,0 beginnotaxamount,0 enternotaxamount,0 outnotaxamount,0 endnotaxamount,0 costnotaxamount
				from t_storage_salereject_enter t
				RIGHT JOIN  t_storage_salereject_enter_detail t1 on t.id = t1.salerejectid
				LEFT JOIN  t_base_goods_info t2 on t1.goodsid = t2.id
				<trim prefix="where" prefixOverrides="and|or">
					<if test="condition.goodsid != null">
						and FIND_IN_SET(t1.goodsid, #{condition.goodsid })
					</if>
					<if test="condition.supplierid != null">
						and FIND_IN_SET(t2.defaultsupplier , #{condition.supplierid })
					</if>
					<if test="condition.brandid != null">
						and FIND_IN_SET(t2.brand, #{condition.brandid })
					</if>
					<if test="1 == 1">
						and (t.status = '3' or t.status = '4')
					</if>
				</trim>
				union all
				select t.supplierid ,"pushbalance" as goodsid,t.brandid,
				0 beginnum,
				0 beginamount,
				0 enternum,0 enteramount,
				0  outnum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and (
					   t.writeoffdate  <![CDATA[ >=  ]]> #{condition.begindate } and t.iswriteoff = '1'
					)
				</if>
				<if test="condition.enddate != null">
					and (
					    t.writeoffdate  <![CDATA[ <=  ]]> #{condition.enddate } and t.iswriteoff = '1'
					)
				</if>
				then t.amount else 0 end
				) as outamount,
				0 endnum,0 endamount,
				0 costamount,0 grossamount,0 grossrate,
                0 as beginnotaxamount,
                0 enternotaxamount,
                (case when 1 = 1
                <if test="condition.begindate != null">
                    and (
                        t.writeoffdate  <![CDATA[ >=  ]]> #{condition.begindate } and t.iswriteoff = '1'
                    )
                </if>
                <if test="condition.enddate != null">
                    and (
                        t.writeoffdate  <![CDATA[ <=  ]]> #{condition.enddate } and t.iswriteoff = '1'
                    )
                </if>
                then t.notaxamount else 0 end
                ) as outnotaxamount,
                 0 endnotaxamount,
				0 costnotaxamount
				from t_account_customer_push_balance t
				<trim prefix="where" prefixOverrides="and|or">
					<if test="condition.supplierid != null">
						and FIND_IN_SET(t.supplierid, #{condition.supplierid })
					</if>
					<if test="condition.brandid != null">
						and FIND_IN_SET(t.brandid, #{condition.brandid })
					</if>
					<if test="1 == 1">
						and (t.status = '3' or t.status = '4')
					</if>
				</trim>

				union all
				select t.supplierid ,"purchasepush" as goodsid,t.brand as brandid,
				0 beginnum,
				0  beginamount,
				0 enternum,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then t.amount else 0 end
				) as enteramount,
				0  outnum,0 outamount,
				0 endnum,0 endamount,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then t.amount else 0 end
				) as costamount,
				0 grossamount,0 grossrate,
				0  beginnotaxamount,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then t.amount/(1+(t2.rate/100)) else 0 end
				) as enternotaxamount,
				0 outnotaxamount,
				0 endnotaxamount,
				(case when 1 = 1
				<if test="condition.begindate != null">
					and t.businessdate <![CDATA[  >= ]]> #{condition.begindate }
				</if>
				<if test="condition.enddate != null">
					and t.businessdate <![CDATA[ <= ]]> #{condition.enddate }
				</if>
				then t.amount/(1+(t2.rate/100)) else 0 end
				) as costnotaxamount
				from t_account_purchase_invoice_push t
				left join t_base_goods_brand t1 on t1.id = t.brand
				LEFT JOIN  t_base_finance_taxtype t2 on t2.id = t1.defaulttaxtype
				<trim prefix="where" prefixOverrides="and|or">
					<if test="condition.supplierid != null">
						and FIND_IN_SET(t.supplierid, #{condition.supplierid })
					</if>
					<if test="condition.brandid != null">
						and FIND_IN_SET(t.brand, #{condition.brandid })
					</if>
					<if test="1 == 1">
						and t.status = '4'
					</if>
				</trim>
			) t
			LEFT JOIN  t_base_goods_info t1 on t.goodsid = t1.id
			LEFT JOIN  t_base_finance_taxtype t2 on t2.id = t1.defaulttaxtype
		) t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t.goodsid, #{condition.goodsid })
			</if>
		</trim>
		group by
		<choose>
			<when test="condition.groupcols == ''">
				supplierid
			</when>
			<otherwise>
				${condition.groupcols}
			</otherwise>
		</choose>
		order by goodsid asc
	</sql>
	<select id="showSalesSuppliserGrossReportDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">

		select *
		from
		(<include refid="showSalesSuppliserGrossReportDataList_sql" />)t
		<if test="condition.isflag == null">
			<include refid="common.Page_limit" />
		</if>
	</select>

	<select id="showSalesSuppliserGrossReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="java.lang.Integer">
		select count(1)
		from (<include refid="showSalesSuppliserGrossReportDataList_sql" />)
		t
	</select>
	<select id="showSalesSuppliserGrossReportDataSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select '合计' supplierid, sum(t.beginnum) as beginnum, sum(t.beginnotaxamount) as beginnotaxamount, sum(t.beginamount) as beginamount,sum(t.enternum) as enternum,sum(t.enternotaxamount) as enternotaxamount,sum(t.enteramount) as enteramount,sum(t.outnum) as outnum,sum(t.outnotaxamount) as outnotaxamount,sum(t.outamount) as outamount,
		sum(t.endnum) as endnum,sum(t.endnotaxamount) as endnotaxamount,sum(t.endamount) as endamount,sum(t.costamount) as costamount,sum(t.grossamount) as grossamount
		from (<include refid="showSalesSuppliserGrossReportDataList_sql" />)
		t
	</select>
	<select id="getCustomerSalesAmountByDateForThird" parameterType="java.lang.String" resultType="map">
		SELECT
		z.customerid,SUM(z.taxamount) as taxamount,SUM(z.costamount) as costamount,sum(z.notaxamount) as notaxamount,sum(z.tax) as tax,
		count(DISTINCT z.id) as billnums,GROUP_CONCAT(DISTINCT z.orderid ) as orderid,z.id,z.goodsid,z.brandid,z.taxtype
		FROM
		(
		<choose>
			<when test="salesDataType == 2">
				SELECT t.id,t.customerid,t1.taxamount ,t1.unitnum*t1.costprice as costamount,t1.notaxamount,t1.tax,t.id as orderid,t1.goodsid,'' as brandid,t1.taxtype
				FROM t_sales_dispatchbill t
				RIGHT JOIN t_sales_dispatchbill_detail t1 ON t.id = t1.billid
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="1==1">
						and t.STATUS IN ('3', '4') and t1.taxamount!=0
					</if>
					<if test="date != null">
						and t.businessdate = #{date}
					</if>
					<if test="salesdept != null and salesdept != '' ">
						and FIND_IN_SET(t.salesdept,#{salesdept})
					</if>
				</trim>
			</when>
			<otherwise>
				SELECT t.id,t.customerid,t1.taxamount ,t1.unitnum*t1.costprice as costamount,t1.notaxamount,t1.tax,saleorderid as orderid,t1.goodsid,'' as brandid,t1.taxtype
				FROM t_storage_saleout t
				RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
				<trim prefix="where" prefixOverrides="and|or" >
					<if test="1==1">
						and t.STATUS IN ('3', '4') and t1.taxamount!=0
					</if>
					<if test="date != null">
						and t.businessdate = #{date}
					</if>
					<if test="salesdept != null and salesdept != '' ">
						and FIND_IN_SET(t.salesdept,#{salesdept})
					</if>
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT t.id,t.customerid,-t1.taxamount t,-t1.unitnum*t1.costprice as costamount,-t1.notaxamount,-t1.tax,t.id as orderid,t1.goodsid,'' as brandid,t1.taxtype
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="1==1">
				and ischeck='1' AND t.STATUS IN ('3', '4') and t1.taxamount!=0
			</if>
			<if test="date != null">
				and t.businessdate = #{date}
			</if>
			<if test="salesdept != null and salesdept != ''">
				and FIND_IN_SET(t.salesdept,#{salesdept})
			</if>
		</trim>
		UNION ALL
		SELECT t.id,t.customerid,t.amount as taxamount,0 as costamount,t.notaxamount,t.tax,t.id as orderid,'' as goodsid,t.brandid,t.defaulttaxtype as taxtype
		FROM t_account_customer_push_balance t
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="1==1">
				AND t.STATUS IN ('3', '4') and t.amount!=0
			</if>
			<if test="date != null">
				and t.businessdate = #{date}
			</if>
			<if test="salesdept != null and salesdept != '' ">
				and FIND_IN_SET(t.salesdept,#{salesdept})
			</if>
		</trim>
		) z
		group by z.id,z.goodsid,z.taxtype
	</select>

	<sql id="showBaseSalesAnalysisReportData_sql">
		(
		SELECT
		z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.goodssort,z.supplierid,z.adduserid,z.addusername,z.storageid,
		z.goodsid,z.brandid,z.branduser,z.supplieruser,z.branddept,z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice as price,z.costprice,
		SUM(z.ordernum) AS ordernum,SUM(z.ordertotalbox) AS ordertotalbox,SUM(z.orderamount) AS orderamount,SUM(z.ordernotaxamount) AS ordernotaxamount,
		SUM(z.initsendnum) AS initsendnum,SUM(z.initsendtotalbox) AS initsendtotalbox,SUM(z.initsendamount) AS initsendamount,SUM(z.initsendnotaxamount) AS initsendnotaxamount,
		SUM(z.sendnum) AS sendnum,SUM(z.sendtotalbox) AS sendtotalbox,SUM(z.sendamount) AS sendamount,SUM(z.sendnotaxamount) AS sendnotaxamount,sum(z.sendcostamount) as sendcostamount,
		SUM(z.returnnum) AS returnnum,SUM(z.returntotalbox) AS returntotalbox,SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.directreturnnum) AS directreturnnum,SUM(z.directreturntotalbox) AS directreturntotalbox,SUM(z.directreturnamount) AS directreturnamount,SUM(z.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(z.aftersalereturnnum) AS aftersalereturnnum,SUM(z.aftersalereturntotalbox) AS aftersalereturntotalbox,SUM(z.aftersalereturnamount) AS aftersalereturnamount,SUM(z.aftersalereturnnotaxamount) AS aftersalereturnnotaxamount,
		SUM(z.checkreturnnum) AS checkreturnnum,SUM(z.checkreturntotalbox) AS checkreturntotalbox,SUM(z.checkreturnamount) AS checkreturnamount,SUM(z.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(z.costamount) as costamount,sum(z.pushbalanceamount) as pushbalanceamount,sum(z.pushbalancenotaxamount) as pushbalancenotaxamount ${condition.pushtype_sqlall} ${condition.rejectcategory_sqlall}
		FROM
		(
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		t1.unitnum AS ordernum,t1.totalbox as ordertotalbox,t1.taxamount AS orderamount,t1.notaxamount AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS aftersalereturnnum,0 as aftersalereturntotalbox,0 AS aftersalereturnamount,0 AS aftersalereturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount ${condition.pushtype_sqlother} ${condition.rejectcategory_sqlother}
		FROM t_sales_order t
		RIGHT JOIN t_sales_order_detail t1 ON t.id = t1.orderid
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		t1.unitnum AS initsendnum,t1.totalbox as initsendtotalbox,t1.taxamount AS initsendamount,t1.notaxamount AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS aftersalereturnnum,0 as aftersalereturntotalbox,0 AS aftersalereturnamount,0 AS aftersalereturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		0 as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount ${condition.pushtype_sqlother} ${condition.rejectcategory_sqlother}
		FROM t_sales_dispatchbill t
		RIGHT JOIN t_sales_dispatchbill_detail t1 ON t.id = t1.billid
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		t1.unitnum AS sendnum,t1.totalbox as sendtotalbox,t1.taxamount AS sendamount,t1.notaxamount AS sendnotaxamount,t1.unitnum*t1.costprice as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS aftersalereturnnum,0 as aftersalereturntotalbox,0 AS aftersalereturnamount,0 AS aftersalereturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount ${condition.pushtype_sqlother} ${condition.rejectcategory_sqlother}
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		t1.unitnum AS returnnum,t1.totalbox as returntotalbox,t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,
		t1.unitnum AS directreturnnum,t1.totalbox as directreturntotalbox,t1.taxamount AS directreturnamount,t1.notaxamount AS directreturnnotaxamount,
		0 AS aftersalereturnnum,0 as aftersalereturntotalbox,0 AS aftersalereturnamount,0 AS aftersalereturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount ${condition.pushtype_sqlother} ${condition.rejectcategory_sql}
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '2'
					AND t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '2'
					AND t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice, t1.costprice,
		0 AS ordernum,0 as ordertotalbox, 0 AS orderamount, 0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox, 0 AS initsendamount, 0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox, 0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
		t1.unitnum AS returnnum,t1.totalbox as returntotalbox, t1.taxamount AS returnamount, t1.notaxamount AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
		t1.unitnum AS aftersalereturnnum,t1.totalbox as aftersalereturntotalbox,t1.taxamount AS aftersalereturnamount,t1.notaxamount AS aftersalereturnnotaxamount,
		t1.unitnum AS checkreturnnum,t1.totalbox as checkreturntotalbox, t1.taxamount AS checkreturnamount, t1.notaxamount AS checkreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount ${condition.pushtype_sqlother} ${condition.rejectcategory_sql}
		FROM t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '1'
					AND t.STATUS IN ('3', '4')
				</trim>
			</when>
			<otherwise>
				INNER JOIN t_base_goods_info g ON t1.goodsid = g.id
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '1'
					AND t.STATUS IN ('3', '4')
				</trim>
			</otherwise>
		</choose>
		<if test="condition.goodssort == null   and condition.goodstype == null and condition.goodsid==null" >
			UNION ALL
			SELECT
			IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
			'' as goodssort,IFNULL(t.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,'' as storageid,
			IFNULL(t.brandid,'') as goodsid,IFNULL(t.brandid,'') as brandid,IFNULL(t.branduser,'') as branduser,IFNULL(t.supplieruser,'') as supplieruser,IFNULL(t.branddept,'') as branddept,
			'' AS unitid, '' AS unitname,'' as auxunitid,'' as auxunitname,0 as taxprice, 0 AS costprice,
			0 AS ordernum,0 as ordertotalbox, 0 AS orderamount, 0 AS ordernotaxamount,
			0 AS initsendnum,0 as initsendtotalbox, 0 AS initsendamount, 0 AS initsendnotaxamount,
			0 AS sendnum,0 as sendtotalbox, 0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
			0 AS returnnum,0 as returntotalbox, 0 AS returnamount, 0 AS returnnotaxamount,
			0 AS directreturnnum,0 as directreturntotalbox, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
			0 AS aftersalereturnnum,0 as aftersalereturntotalbox, 0 AS aftersalereturnamount, 0 AS aftersalereturnnotaxamount,
			0 AS checkreturnnum,0 as checkreturntotalbox, 0 AS checkreturnamount, 0 AS checkreturnnotaxamount,
			0 as costamount,t.amount as pushbalanceamount,t.notaxamount as pushbalancenotaxamount ${condition.pushtype_sql} ${condition.rejectcategory_sqlother}
			FROM t_account_customer_push_balance t
			<trim prefix="where" prefixOverrides="and|or">
				${condition.query_sql_push}
				AND t.STATUS IN ('3', '4')
			</trim>
		</if>
		)z
		<if test="dataSql  != '' " >
			<trim prefix="where" prefixOverrides="and|or">
				<include refid="common.Page_querySql"/>
				<include refid="common.Page_dataSql"/>
			</trim>
		</if>
		<if test="condition.groupcols  != 'all' " >
			group by
			<choose>
				<when test="condition.groupcols == ''">
					customerid,goodsid
				</when>
				<otherwise>
					${condition.groupcols}
				</otherwise>
			</choose>
		</if>
		<if test="condition.orderstr  != '' " >
			order by
			${condition.orderstr}
		</if>
		)
	</sql>
	<select id="showBaseSalesAnalysisReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT z.* from <include refid="showBaseSalesAnalysisReportData_sql"/> z
		<if test="condition.isflag == null and condition.groupcols  != 'all' " >
			LIMIT ${startNum},${rows}
		</if>
	</select>
	<select id="showBaseSalesAnalysisReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from <include refid="showBaseSalesAnalysisReportData_sql"/> z
	</select>

	<select id="showSalesAnalysisReportSubjectDetailPage"  resultType="Map">
		SELECT
		t.subject , sum(t.amount) as amount
		FROM
		t_account_customer_push_balance t
		WHERE
		${con.query_sql}
		group by t.subject
	</select>
	<sql id="dyBaseSalesReportData_sql">
		(
		SELECT
		z.customerid,z.pcustomerid,z.customersort,z.salesarea,z.salesdept,z.salesuser,z.goodssort,z.supplierid,z.adduserid,z.addusername,z.storageid,
		z.goodsid,z.brandid,z.branduser,z.supplieruser,z.branddept,z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.taxprice as price,z.costprice,
		SUM(z.ordernum) AS ordernum,SUM(z.ordertotalbox) AS ordertotalbox,SUM(z.orderamount) AS orderamount,SUM(z.ordernotaxamount) AS ordernotaxamount,
		SUM(z.initsendnum) AS initsendnum,SUM(z.initsendtotalbox) AS initsendtotalbox,SUM(z.initsendamount) AS initsendamount,SUM(z.initsendnotaxamount) AS initsendnotaxamount,
		SUM(z.sendnum) AS sendnum,SUM(z.sendtotalbox) AS sendtotalbox,SUM(z.sendamount) AS sendamount,SUM(z.sendnotaxamount) AS sendnotaxamount,sum(z.sendcostamount) as sendcostamount,
		SUM(z.returnnum) AS returnnum,SUM(z.returntotalbox) AS returntotalbox,SUM(z.returnamount) AS returnamount,SUM(z.returnnotaxamount) AS returnnotaxamount,
		SUM(z.directreturnnum) AS directreturnnum,SUM(z.directreturntotalbox) AS directreturntotalbox,SUM(z.directreturnamount) AS directreturnamount,SUM(z.directreturnnotaxamount) AS directreturnnotaxamount,
		SUM(z.checkreturnnum) AS checkreturnnum,SUM(z.checkreturntotalbox) AS checkreturntotalbox,SUM(z.checkreturnamount) AS checkreturnamount,SUM(z.checkreturnnotaxamount) AS checkreturnnotaxamount,
		SUM(z.costamount) as costamount,sum(z.pushbalanceamount) as pushbalanceamount,sum(z.pushbalancenotaxamount) as pushbalancenotaxamount,
		z.barcode
		FROM
		(
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		t1.unitnum AS sendnum,t1.totalbox as sendtotalbox,t1.taxamount AS sendamount,t1.notaxamount AS sendnotaxamount,t1.unitnum*t1.costprice as sendcostamount,
		0 AS returnnum,0 as returntotalbox,0 AS returnamount,0 AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox,0 AS directreturnamount,0 AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount,
		IFNULL(g.barcode,'') as barcode
		FROM t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 ON t1.saleoutid = t.id
		left join t_sales_order t2 on t2.id = t.saleorderid
		left JOIN t_base_goods_info g on g.id=t1.goodsid
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
					<if test="condition.billtype!=null and condition.billtype.indexOf('1')==-1" >
						AND 1!=1
					</if>
				</trim>
			</when>
			<otherwise>
				<!--INNER JOIN t_base_goods_info g ON t1.goodsid = g.id-->
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and t.STATUS IN ('3', '4')
					<if test="condition.billtype!=null and condition.billtype.indexOf('1')==-1" >
						AND 1!=1
					</if>
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice,t1.costprice,
		0 AS ordernum,0 as ordertotalbox,0 AS orderamount,0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox,0 AS initsendamount,0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox,0 AS sendamount,0 AS sendnotaxamount,0 as sendcostamount,
		t1.unitnum AS returnnum,t1.totalbox as returntotalbox,t1.taxamount AS returnamount,t1.notaxamount AS returnnotaxamount,
		t1.unitnum AS directreturnnum,t1.totalbox as directreturntotalbox,t1.taxamount AS directreturnamount,t1.notaxamount AS directreturnnotaxamount,
		0 AS checkreturnnum,0 as checkreturntotalbox,0 AS checkreturnamount,0 AS checkreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount,
		IFNULL(g.barcode,'') as barcode
		FROM t_storage_salereject_enter t
		left join t_sales_rejectbill t2 on t2.id = t.sourceid
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		left JOIN t_base_goods_info g on g.id=t1.goodsid
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '2'
					AND t.STATUS IN ('3', '4')
					<if test="condition.billtype!=null and condition.billtype.indexOf('2')==-1" >
						AND 1!=1
					</if>
				</trim>
			</when>
			<otherwise>
				<!--INNER JOIN t_base_goods_info g ON t1.goodsid = g.id-->
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '2'
					AND t.STATUS IN ('3', '4')
					<if test="condition.billtype!=null and condition.billtype.indexOf('2')==-1" >
						AND 1!=1
					</if>
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		SELECT IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
		IFNULL(t1.goodssort,'') as goodssort,IFNULL(t1.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,IFNULL(t.storageid,'') as storageid,
		IFNULL(t1.goodsid,'') as goodsid,IFNULL(t1.brandid,'') as brandid,IFNULL(t1.branduser,'') as branduser,IFNULL(t1.supplieruser,'') as supplieruser,IFNULL(t1.branddept,'') as branddept,
		t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.taxprice, t1.costprice,
		0 AS ordernum,0 as ordertotalbox, 0 AS orderamount, 0 AS ordernotaxamount,
		0 AS initsendnum,0 as initsendtotalbox, 0 AS initsendamount, 0 AS initsendnotaxamount,
		0 AS sendnum,0 as sendtotalbox, 0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
		t1.unitnum AS returnnum,t1.totalbox as returntotalbox, t1.taxamount AS returnamount, t1.notaxamount AS returnnotaxamount,
		0 AS directreturnnum,0 as directreturntotalbox, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
		t1.unitnum AS checkreturnnum,t1.totalbox as checkreturntotalbox, t1.taxamount AS checkreturnamount, t1.notaxamount AS checkreturnnotaxamount,
		-t1.unitnum*t1.costprice as costamount,0 as pushbalanceamount,0 as pushbalancenotaxamount,
		IFNULL(g.barcode,'') as barcode
		FROM t_storage_salereject_enter t
		left join t_sales_rejectbill t2 on t2.id = t.sourceid
		RIGHT JOIN t_storage_salereject_enter_detail t1 ON t1.salerejectid = t.id
		left JOIN t_base_goods_info g on g.id=t1.goodsid
		<choose>
			<when test="condition.goodstype == null">
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '1'
					AND t.STATUS IN ('3', '4')
					<if test="condition.billtype!=null and condition.billtype.indexOf('2')==-1" >
						AND 1!=1
					</if>
				</trim>
			</when>
			<otherwise>
				<!--INNER JOIN t_base_goods_info g ON t1.goodsid = g.id-->
				<trim prefix="where" prefixOverrides="and|or">
					${condition.query_sql}
					and ischeck='1'
					AND t.sourcetype = '1'
					AND t.STATUS IN ('3', '4')
					<if test="condition.billtype!=null and condition.billtype.indexOf('2')==-1" >
						AND 1!=1
					</if>
				</trim>
			</otherwise>
		</choose>
		<if test="condition.goodssort == null   and condition.goodstype == null and condition.goodsid==null" >
			UNION ALL
			SELECT
			IFNULL(t.customerid,'') as customerid,IFNULL(t.pcustomerid,'') as pcustomerid,IFNULL(t.customersort,'') as customersort,IFNULL(t.salesarea,'') as salesarea,IFNULL(t.salesdept,'') as salesdept,IFNULL(t.salesuser,'') as salesuser,
			'' as goodssort,IFNULL(t.supplierid,'') as supplierid,IFNULL(t.adduserid,'') as adduserid,IFNULL(t.addusername,'') as addusername,'' as storageid,
			IFNULL(t.brandid,'') as goodsid,IFNULL(t.brandid,'') as brandid,IFNULL(t.branduser,'') as branduser,IFNULL(t.supplieruser,'') as supplieruser,IFNULL(t.branddept,'') as branddept,
			'' AS unitid, '' AS unitname,'' as auxunitid,'' as auxunitname,0 as taxprice, 0 AS costprice,
			0 AS ordernum,0 as ordertotalbox, 0 AS orderamount, 0 AS ordernotaxamount,
			0 AS initsendnum,0 as initsendtotalbox, 0 AS initsendamount, 0 AS initsendnotaxamount,
			0 AS sendnum,0 as sendtotalbox, 0 AS sendamount, 0 AS sendnotaxamount, 0 as sendcostamount,
			0 AS returnnum,0 as returntotalbox, 0 AS returnamount, 0 AS returnnotaxamount,
			0 AS directreturnnum,0 as directreturntotalbox, 0 AS directreturnamount, 0 AS directreturnnotaxamount,
			0 AS checkreturnnum,0 as checkreturntotalbox, 0 AS checkreturnamount, 0 AS checkreturnnotaxamount,
			0 as costamount,t.amount as pushbalanceamount,t.notaxamount as pushbalancenotaxamount,
			'' as barcode
			FROM t_account_customer_push_balance t
			<trim prefix="where" prefixOverrides="and|or">
				${condition.query_sql_push}
				AND t.STATUS IN ('3', '4')
				<if test="condition.billtype!=null and condition.billtype.indexOf('3')==-1" >
					AND 1!=1
				</if>
			</trim>
		</if>
		)z
		<if test="dataSql  != '' " >
			<trim prefix="where" prefixOverrides="and|or">
				<include refid="common.Page_querySql"/>
				<include refid="common.Page_dataSql"/>
			</trim>
		</if>
		<if test="condition.groupcols  != 'all' " >
			group by
			<choose>
				<when test="condition.groupcols == ''">
					customerid,goodsid
				</when>
				<otherwise>
					${condition.groupcols}
				</otherwise>
			</choose>
		</if>
		<if test="condition.orderstr  != '' " >
			order by
			${condition.orderstr}
		</if>
		)
	</sql>
	<select id="showDyBaseSalesReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.BaseSalesReport">
		SELECT z.* from <include refid="dyBaseSalesReportData_sql"/> z
		<if test="condition.isflag == null and condition.groupcols  != 'all' " >
			LIMIT ${startNum},${rows}
		</if>
	</select>
	<select id="showDyBaseSalesReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		SELECT count(1) from <include refid="dyBaseSalesReportData_sql"/> z
	</select>
	<sql id="jmSalesTargetData_sql">
		select t.branduser,t.deptid,sum(t.dayorderamount) as dayorderamount,sum(t.daysaleoutamount) as daysaleoutamount,
		sum(t.monthsaleoutamount) as monthsaleoutamount
		FROM(
		select p.id as branduser,p.belongdeptid as deptid,t1.taxamount as dayorderamount,
		0 as daysaleoutamount,0 as monthsaleoutamount
		from t_base_personnel p
		left join t_sales_order_detail t1 on p.id=t1.branduser
		left join t_sales_order t on t.id=t1.orderid
		<trim prefix="where" prefixOverrides="and|or">
			t.status in ('3','4') and find_in_set('3',p.employetype)
			<if test="condition.businessdate!=null">
				and t.businessdate=#{condition.businessdate}
			</if>
			<if test="condition.branduser!=null">
				and find_in_set(p.id,#{condition.branduser})
			</if>
			<if test="condition.dept!=null">
				and find_in_set(p.belongdeptid,#{condition.dept})
			</if>
		</trim>

		union all

		select p.id as branduser,p.belongdeptid as deptid,0 as dayorderamount,
		t1.taxamount as daysaleoutamount,0 as monthsaleoutamount
		from t_base_personnel p
		left join t_sales_dispatchbill_detail t1 on p.id=t1.branduser
		left join t_sales_dispatchbill t on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or">
			t.status in ('3','4') and find_in_set('3',p.employetype)
			<if test="condition.businessdate!=null">
				and t.businessdate=#{condition.businessdate}
			</if>
			<if test="condition.branduser!=null">
				and find_in_set(p.id,#{condition.branduser})
			</if>
			<if test="condition.dept!=null">
				and find_in_set(p.belongdeptid,#{condition.dept})
			</if>
		</trim>

		union all

		select p.id as branduser,p.belongdeptid as deptid,0 as dayorderamount,
		0 as daysaleoutamount,t1.taxamount as monthsaleoutamount
		from t_base_personnel p
		left join t_storage_saleout_detail t1 on p.id=t1.branduser
		left join t_storage_saleout t on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or">
			t.status in ('3','4') and find_in_set('3',p.employetype)
			<if test="condition.businessdate!=null">
				and date_format(t.businessdate,'%Y-%m')=date_format(#{condition.businessdate},'%Y-%m')
			</if>
			<if test="condition.branduser!=null">
				and find_in_set(p.id,#{condition.branduser})
			</if>
			<if test="condition.dept!=null">
				and find_in_set(p.belongdeptid,#{condition.dept})
			</if>
		</trim>

		union all

		select p.id as branduser,p.belongdeptid as deptid,0 as dayorderamount,0 as daysaleoutamount,
		-t1.taxamount as monthsaleoutamount
		from t_base_personnel p
		left join t_storage_salereject_enter_detail t1 on p.id=t1.branduser
		left join t_storage_salereject_enter t on t.id=t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or">
			t.status in ('3','4') and find_in_set('3',p.employetype) and t.ischeck='1'
			<if test="condition.businessdate!=null">
				and date_format(t.businessdate,'%Y-%m')=date_format(#{condition.businessdate},'%Y-%m')
			</if>
			<if test="condition.branduser!=null">
				and find_in_set(p.id,#{condition.branduser})
			</if>
			<if test="condition.dept!=null">
				and find_in_set(p.belongdeptid,#{condition.dept})
			</if>
		</trim>

		UNION ALL

		select p.id as branduser,p.belongdeptid as deptid,0 as dayorderamount,0 as daysaleoutamount,
		t.amount as monthsaleoutamount
		from t_base_personnel p
		left join t_account_customer_push_balance t on p.id=t.branduser
		<trim prefix="where" prefixOverrides="and|or">
			t.status in ('3','4') and find_in_set('3',p.employetype)
			<if test="condition.businessdate!=null">
				and date_format(t.businessdate,'%Y-%m')=date_format(#{condition.businessdate},'%Y-%m')
			</if>
			<if test="condition.branduser!=null">
				and find_in_set(p.id,#{condition.branduser})
			</if>
			<if test="condition.dept!=null">
				and find_in_set(p.belongdeptid,#{condition.dept})
			</if>
		</trim>

		)t 		GROUP BY t.branduser



	</sql>
	<sql id="showJmSalesTargetDayReport_Sql">
		SELECT p.id as branduser,p.name as brandusername,p.belongdeptid as deptid,sum(ifnull(t.dayorderamount,0)) as dayorderamount,sum(ifnull(t.daysaleoutamount,0)) as daysaleoutamount,
		sum(ifnull(t.monthsaleoutamount,0)) as monthsaleoutamount,ifnull(t1.targetamount,0) as targetamount,t1.workday,
		if(t1.targetamount is null OR t1.workday is null ,0,t1.targetamount/t1.workday) as daytarget,
		if(if(t1.targetamount is null OR t1.workday is null ,0,t1.targetamount/t1.workday)=0,0,
		sum(ifnull(t.daysaleoutamount,0))/(if(t1.targetamount is null OR t1.workday is null ,0,t1.targetamount/t1.workday)*10000)*100
		) as daycompletepercent,
		sum(ifnull(t.daysaleoutamount,0))-if(t1.targetamount is null OR t1.workday is null ,0,t1.targetamount/t1.workday)*10000 as daydifference,
		if(ifnull(t1.targetamount,0)=0,0,sum(ifnull(t.monthsaleoutamount,0))/(t1.targetamount*10000))*100 as monthcompletepercent,
		(sum(ifnull(t.monthsaleoutamount,0))- ifnull(t1.targetamount,0)*10000)/10000 as monthdifference
		from t_base_personnel p
		LEFT JOIN  (<include refid="jmSalesTargetData_sql"/>)t ON p.id=t.branduser
		LEFT JOIN t_sales_target_dayreport t1 ON p.id=t1.personnelid AND t1.targetdate=date_format(#{condition.businessdate},'%Y-%m')
		WHERE find_in_set('3',p.employetype) AND p.state='1'
        <if test="condition.branduser!=null">
            and find_in_set(p.id,#{condition.branduser})
        </if>
        <if test="condition.dept!=null">
            and find_in_set(p.belongdeptid,#{condition.dept})
        </if>

		GROUP BY p.id

		UNION ALL

		SELECT '小计' as branduser,'' as brandusername,p.belongdeptid as deptid,sum(ifnull(t.dayorderamount,0)) as dayorderamount,sum(ifnull(t.daysaleoutamount,0)) as daysaleoutamount,
		sum(ifnull(t.monthsaleoutamount,0)) as monthsaleoutamount,sum(ifnull(t1.targetamount,0)) as targetamount,t1.workday,
        sum(if(ifnull(t1.targetamount,0)=0 or ifnull(t1.workday,0)=0,0,t1.targetamount/t1.workday)) as daytarget,

        if(sum(if(ifnull(t1.targetamount,0)=0 or ifnull(t1.workday,0)=0,0,t1.targetamount/t1.workday))=0,0,
        sum(ifnull(t.daysaleoutamount,0))/sum(if(ifnull(t1.targetamount,0)=0 or ifnull(t1.workday,0)=0,0,t1.targetamount/t1.workday))/10000)*100 as daycompletepercent,

        sum(ifnull(t.daysaleoutamount,0))-sum(if(ifnull(t1.targetamount,0)=0 or ifnull(t1.workday,0)=0,0,t1.targetamount/t1.workday))*10000 as daydifference,

        if(sum(ifnull(t1.targetamount,0))=0,0,sum(ifnull(t.monthsaleoutamount,0))/sum(ifnull(t1.targetamount,0))/10000)*100 as monthcompletepercent,

		(sum(ifnull(t.monthsaleoutamount,0))- sum(ifnull(t1.targetamount,0))*10000)/10000 as monthdifference
		from t_base_personnel p
		LEFT JOIN  (<include refid="jmSalesTargetData_sql"/>)t ON p.id=t.branduser
		LEFT JOIN t_sales_target_dayreport t1 ON p.id=t1.personnelid AND t1.targetdate=date_format(#{condition.businessdate},'%Y-%m')
		WHERE find_in_set('3',p.employetype) AND p.state='1'
        <if test="condition.branduser!=null">
            and find_in_set(p.id,#{condition.branduser})
        </if>
        <if test="condition.dept!=null">
            and find_in_set(p.belongdeptid,#{condition.dept})
        </if>
		GROUP BY p.belongdeptid

	</sql>
	<select id="showJmSalesTargetDayReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		select z.branduser,z.brandusername,z.deptid,z.dayorderamount,z.daysaleoutamount,z.monthsaleoutamount,
		z.targetamount,z.daytarget,z.workday,z.daycompletepercent,z.daydifference,z.monthcompletepercent,z.monthdifference
		from (<include refid="showJmSalesTargetDayReport_Sql"/>) z ORDER BY z.deptid,z.branduser
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="showJmSalesTargetDayReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1)
		from (<include refid="showJmSalesTargetDayReport_Sql"/>) z ORDER BY z.deptid
	</select>
	<select id="showJmSalesTargetDayReportSum" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		select '合计' as deptname,sum(z.dayorderamount) as dayorderamount,sum(z.daysaleoutamount) as daysaleoutamount,
		sum(z.monthsaleoutamount) as monthsaleoutamount,sum(z.targetamount) as targetamount,sum(z.daytarget) as daytarget,
		if(sum(z.daytarget)=0,0,sum(z.daysaleoutamount)/sum(z.daytarget))/100 as daycompletepercent,sum(z.daydifference) as daydifference,
		if(sum(z.targetamount)=0,0,sum(z.monthsaleoutamount)/sum(z.targetamount))/100 as monthcompletepercent,
		sum(z.monthdifference) as monthdifference
		from (<include refid="showJmSalesTargetDayReport_Sql"/>) z
		WHERE z.branduser='小计'
	</select>
	<insert id="insertJmSalesTarget" parameterType="com.hd.agent.report.model.JmSalesTarget">
		insert into t_sales_target_dayreport
		<trim prefix="(" suffix=")" suffixOverrides="," >
			<if test="personnelid != null" >
                personnelid,
			</if>
			<if test="targetdate != null" >
				targetdate,
			</if>
			<if test="targetamount != null" >
				targetamount,
			</if>
			<if test="workday != null" >
				workday,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides="," >
			<if test="personnelid != null" >
				#{personnelid},
			</if>
			<if test="targetdate != null" >
				#{targetdate},
			</if>
			<if test="targetamount != null" >
				#{targetamount},
			</if>
			<if test="workday != null" >
				#{workday},
			</if>
		</trim>
	</insert>
	<select id="getJmSalesTarget" parameterType="java.lang.String" resultType="com.hd.agent.report.model.JmSalesTarget">
		SELECT id, personnelid, targetdate, targetamount, workday FROM t_sales_target_dayreport
		where personnelid=#{personnelid} AND targetdate=#{targetdate}
	</select>
	<update id="updateJmSalesTarget" parameterType="com.hd.agent.report.model.JmSalesTarget">
		UPDATE t_sales_target_dayreport
		<set>
			<if test="targetamount != null" >
				targetamount=#{targetamount},
			</if>
			<if test="workday != null" >
				workday=#{workday},
			</if>
		</set>
		where personnelid=#{personnelid} AND targetdate=#{targetdate}
	</update>
</mapper>
