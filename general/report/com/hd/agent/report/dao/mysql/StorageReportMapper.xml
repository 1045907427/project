<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hd.agent.report.dao.StorageReportMapper">
  	<select id="showInOutReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageInOutReport">
  		select z.storageid,z.goodsid,sum(z.enternum) as enternum,sum(z.enteramount) as enteramount,sum(z.outnum) as outnum,sum(z.outamount) as outamount
		from (
		select t1.storageid,t1.goodsid,t1.unitnum as enternum,t1.taxamount as enteramount,
		0 as outnum,0 as outamount
		from t_storage_purchase_enter t
		RIGHT JOIN t_storage_purchase_enter_detail t1 on t.id=t1.purchaseenterid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.audittime >= #{condition.businessdate1}
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
		  	<if test="condition.goodsid != null" >
	         	and t1.goodsid = #{condition.goodsid}
	      	</if>
	      	<if test="condition.storageid != null" >
	         	and t1.storageid = #{condition.storageid}
	      	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		UNION ALL
		select t1.storageid,t1.goodsid,t1.unitnum as enternum,t1.taxamount as enteramount,
		0 as outnum,0 as outamount
		from t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.audittime >= #{condition.businessdate1}
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
		  	<if test="condition.goodsid != null" >
	         	and t1.goodsid = #{condition.goodsid}
	      	</if>
	      	<if test="condition.storageid != null" >
	         	and t1.storageid = #{condition.storageid}
	      	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		UNION ALL
		select t1.storageid,t1.goodsid,t1.unitnum as enternum,t1.taxamount as enteramount,
		0 as outnum,0 as outamount
		from t_storage_other_enter t
		RIGHT JOIN t_storage_other_enter_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.audittime >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
		  	<if test="condition.goodsid != null" >
	         	and t1.goodsid = #{condition.goodsid}
	      	</if>
	      	<if test="condition.storageid != null" >
	         	and t1.storageid = #{condition.storageid}
	      	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		UNION ALL
		select t.enterstorageid,t1.goodsid,t1.unitnum as enternum,t1.taxamount as enteramount,
		0 as outnum,0 as outamount
		from t_storage_allocate_out t
		right JOIN t_storage_allocate_out_detail t1 on t.id=t1.billno
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.audittime >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
		  	<if test="condition.goodsid != null" >
	         	and t1.goodsid = #{condition.goodsid}
	      	</if>
	      	<if test="condition.storageid != null" >
	         	and t.enterstorageid = #{condition.storageid}
	      	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		UNION ALL
		select t.storageid,t1.goodsid,t1.adjustnum as enternum,t1.adjustnum*t1.price as enteramount,
		0 as outnum,0 as outamount
		from t_storage_adjustments t
		RIGHT JOIN t_storage_adjustments_detail t1 on t.id=t1.adjustmentsid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.audittime >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
		  	<if test="condition.goodsid != null" >
	         	and t1.goodsid = #{condition.goodsid}
	      	</if>
	      	<if test="condition.storageid != null" >
	         	and t.storageid = #{condition.storageid}
	      	</if>
	      	<if test="1==1" >
	        <![CDATA[and t1.adjustnum<0 and (t.status='3' or t.status='4')]]>
	      	</if>
	    </trim>
		UNION ALL
		select t.storageid,t1.goodsid,0 as enternum,0 as enteramount,
		t1.unitnum as outnum,t1.taxamount as outamount
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.audittime >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
		  	<if test="condition.goodsid != null" >
	         	and t1.goodsid = #{condition.goodsid}
	      	</if>
	      	<if test="condition.storageid != null" >
	         	and t.storageid = #{condition.storageid}
	      	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		UNION ALL
		select t1.storageid,t1.goodsid,0 as enternum,0 as enteramount,
		t1.unitnum as outnum,t1.taxamount as outamount
		from t_storage_purchasereject_out t
		RIGHT JOIN t_storage_purchasereject_out_detail t1 on t.id=t1.orderid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.audittime >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
		  	<if test="condition.goodsid != null" >
	         	and t1.goodsid = #{condition.goodsid}
	      	</if>
	      	<if test="condition.storageid != null" >
	         	and t1.storageid = #{condition.storageid}
	      	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')  <!-- 因为销售退货入库不判断验收情况 ，此处雷同-->
	      	</if>
	    </trim>
		union ALL
		select t1.storageid,t1.goodsid,0 as enternum,0 as enteramount,
		t1.unitnum as outnum,t1.taxamount as outamount
		from t_storage_other_out t
		RIGHT JOIN t_storage_other_out_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.audittime >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
		  	<if test="condition.goodsid != null" >
	         	and t1.goodsid = #{condition.goodsid}
	      	</if>
	      	<if test="condition.storageid != null" >
	         	and t1.storageid = #{condition.storageid}
	      	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
	    UNION ALL
		select t.outstorageid,t1.goodsid,0 as enternum,0 as enteramount,t1.unitnum as outnum,t1.taxamount as outamount
		from t_storage_allocate_out t
		right JOIN t_storage_allocate_out_detail t1 on t.id=t1.billno
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.audittime >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
		  	<if test="condition.goodsid != null" >
	         	and t1.goodsid = #{condition.goodsid}
	      	</if>
	      	<if test="condition.storageid != null" >
	         	and t.outstorageid = #{condition.storageid}
	      	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		UNION ALL
		select t.storageid,t1.goodsid,0 as enternum,0 as enteramount,
		t1.adjustnum as outnum,t1.adjustnum*t1.price as outamount
		from t_storage_adjustments t
		RIGHT JOIN t_storage_adjustments_detail t1 on t.id=t1.adjustmentsid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.audittime >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
		  	<if test="condition.goodsid != null" >
	         	and t1.goodsid = #{condition.goodsid}
	      	</if>
	      	<if test="condition.storageid != null" >
	         	and t.storageid = #{condition.storageid}
	      	</if>
	      	<if test="1==1" >
	          	and t1.adjustnum>0	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		) z
		GROUP BY z.storageid,z.goodsid
  	</select>
  	
  	<select id="showInOutReportDataByDate" parameterType="java.lang.String" resultType="com.hd.agent.report.model.StorageInOutReport">
  		select z.storageid,z.goodsid,sum(z.enternum) as enternum,sum(z.enteramount) as enteramount,sum(z.outnum) as outnum,sum(z.outamount) as outamount
		from (
		select t1.storageid,t1.goodsid,t1.unitnum as enternum,t1.taxamount as enteramount,
		0 as outnum,0 as outamount
		from t_storage_purchase_enter t
		RIGHT JOIN t_storage_purchase_enter_detail t1 on t.id=t1.purchaseenterid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="date != null">
			 	and t.audittime >= STR_TO_DATE(#{date},'%Y-%m-%d')
		  	</if>
		  	<if test="date != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{date}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		UNION ALL
		select t1.storageid,t1.goodsid,t1.unitnum as enternum,t1.taxamount as enteramount,
		0 as outnum,0 as outamount
		from t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="date != null">
			 	and t.audittime >= STR_TO_DATE(#{date},'%Y-%m-%d')
		  	</if>
		  	<if test="date != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{date}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		UNION ALL
		select t1.storageid,t1.goodsid,t1.unitnum as enternum,t1.taxamount as enteramount,
		0 as outnum,0 as outamount
		from t_storage_other_enter t
		RIGHT JOIN t_storage_other_enter_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="date != null">
			 	and t.audittime >= STR_TO_DATE(#{date},'%Y-%m-%d')
		  	</if>
		  	<if test="date != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{date}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		UNION ALL
		select t.enterstorageid,t1.goodsid,t1.unitnum as enternum,t1.taxamount as enteramount,
		0 as outnum,0 as outamount
		from t_storage_allocate_out t
		right JOIN t_storage_allocate_out_detail t1 on t.id=t1.billno
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="date != null">
			 	and t.audittime >= STR_TO_DATE(#{date},'%Y-%m-%d')
		  	</if>
		  	<if test="date != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{date}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		UNION ALL
		select t.storageid,t1.goodsid,t1.adjustnum as enternum,t1.adjustnum*t1.price as enteramount,
		0 as outnum,0 as outamount
		from t_storage_adjustments t
		RIGHT JOIN t_storage_adjustments_detail t1 on t.id=t1.adjustmentsid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="date != null">
			 	and t.audittime >= STR_TO_DATE(#{date},'%Y-%m-%d')
		  	</if>
		  	<if test="date != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{date}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
	      	<if test="1==1" >
	        <![CDATA[and t.billtype='1' and (t.status='3' or t.status='4')]]>
	      	</if>
	    </trim>
		UNION ALL
		select t.storageid,t1.goodsid,0 as enternum,0 as enteramount,
		t1.unitnum as outnum,t1.taxamount as outamount
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		<trim prefix="where" prefixOverrides="and|or">
		  	<if test="date != null">
			 	and t.audittime >= STR_TO_DATE(#{date},'%Y-%m-%d')
		  	</if>
		  	<if test="date != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{date}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		UNION ALL
		select t1.storageid,t1.goodsid,0 as enternum,0 as enteramount,
		t1.unitnum as outnum,t1.taxamount as outamount
		from t_storage_purchasereject_out t
		RIGHT JOIN t_storage_purchasereject_out_detail t1 on t.id=t1.orderid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="date != null">
			 	and t.audittime >= STR_TO_DATE(#{date},'%Y-%m-%d')
		  	</if>
		  	<if test="date != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{date}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4') <!-- 因为销售退货入库不判断验收情况 ，此处雷同-->
	      	</if>
	    </trim>
		union ALL
		select t1.storageid,t1.goodsid,0 as enternum,0 as enteramount,
		t1.unitnum as outnum,t1.taxamount as outamount
		from t_storage_other_out t
		RIGHT JOIN t_storage_other_out_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="date != null">
			 	and t.audittime >= STR_TO_DATE(#{date},'%Y-%m-%d')
		  	</if>
		  	<if test="date != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{date}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
	    UNION ALL
		select t.outstorageid,t1.goodsid,0 as enternum,0 as enteramount,t1.unitnum as outnum,t1.taxamount as outamount
		from t_storage_allocate_out t
		right JOIN t_storage_allocate_out_detail t1 on t.id=t1.billno
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="date != null">
			 	and t.audittime >= STR_TO_DATE(#{date},'%Y-%m-%d')
		  	</if>
		  	<if test="date != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{date}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
	      	<if test="1==1" >
	         	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		UNION ALL
		select t.storageid,t1.goodsid,0 as enternum,0 as enteramount,
		t1.adjustnum as outnum,t1.adjustnum*t1.price as outamount
		from t_storage_adjustments t
		RIGHT JOIN t_storage_adjustments_detail t1 on t.id=t1.adjustmentsid
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="date != null">
			 	and t.audittime >= STR_TO_DATE(#{date},'%Y-%m-%d')
		  	</if>
		  	<if test="date != null">
			 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{date}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
		  	</if>
	      	<if test="1==1" >
	          	and t.billtype='2'	and (t.status='3' or t.status='4')
	      	</if>
	    </trim>
		) z
		GROUP BY z.storageid,z.goodsid
  	</select>
  	<select id="getInOutReportDataByDateAndGoodsid" parameterType="java.lang.String" resultType="com.hd.agent.report.model.StorageInOutReport">
  		select id, businessdate, storageid, goodsid, brandid, unitid, unitname, auxunitid, auxunitname, 
    	initnum, initamount, enternum, enteramount, outnum, outamount, endnum, endamount
    	from t_report_storage_inout where businessdate=#{date} and goodsid=#{goodsid}
  	</select>
  	<select id="getInOutReportDataInLastByDateAndGoodsid" parameterType="java.lang.String" resultType="com.hd.agent.report.model.StorageInOutReport">
  		select id, businessdate, storageid, goodsid, brandid, unitid, unitname, auxunitid, auxunitname, 
    	initnum, initamount, enternum, enteramount, outnum, outamount, endnum, endamount
    	from t_report_storage_inout 
    	where <![CDATA[businessdate <= #{date}]]>
    	and goodsid=#{goodsid} and storageid=#{storageid}
    	order by businessdate desc
    	limit 1
  	</select>
  	<select id="getInOutReportDataInNearByDateAndGoodsidStorageid" parameterType="java.lang.String" resultType="com.hd.agent.report.model.StorageInOutReport">
  		select id, businessdate, storageid, goodsid, brandid, unitid, unitname, auxunitid, auxunitname, 
    	initnum, initamount, enternum, enteramount, outnum, outamount, endnum, endamount
    	from t_report_storage_inout 
    	where <![CDATA[businessdate >= #{date}]]>
    	and goodsid=#{goodsid} and storageid=#{storageid}
    	order by businessdate asc
    	limit 1
  	</select>
  	<select id="getInOutReportDataInNearByDateAndGoodsid"  parameterType="java.lang.String" resultType="com.hd.agent.report.model.StorageInOutReport">
  		select z.goodsid, z.brandid, z.unitid, z.unitname, z.auxunitid, z.auxunitname, 
    	sum(z.initnum) as initnum, sum(z.initamount) as initamount
		FROM (
			select id, businessdate, storageid, goodsid, brandid, unitid, unitname, auxunitid, auxunitname, 
	    	initnum, initamount, enternum, enteramount, outnum, outamount, endnum, endamount
	    	from t_report_storage_inout 
	    	where <![CDATA[businessdate >= #{date}]]>
	    	and goodsid=#{goodsid}	
	    	GROUP BY storageid
			order by businessdate asc) z
  	</select>
  	<insert id="addStorageInOutReportBatch">
  		insert into t_report_storage_inout ( businessdate, storageid, goodsid, brandid, unitid, 
      	unitname, auxunitid, auxunitname, initnum, initamount, enternum, 
      	enteramount, outnum, outamount, endnum, endamount, addtime)
    	values 
	    <foreach collection="list" item="item" separator="," >
      	(#{item.businessdate}, #{item.storageid}, #{item.goodsid}, #{item.brandid}, #{item.unitid}, 
      	#{item.unitname}, #{item.auxunitid}, #{item.auxunitname}, #{item.initnum}, #{item.initamount}, #{item.enternum}, 
      	#{item.enteramount}, #{item.outnum}, #{item.outamount}, #{item.endnum}, #{item.endamount}, now())
		</foreach>
	</insert>
	<delete id="deleteStorageInOutReportByDate" parameterType="java.lang.String">
		delete from t_report_storage_inout where businessdate=#{date}
	</delete>

	<sql id="getStorageInOutReportSumDataList_sql">
		(
		select z.storageid,z.goodsid,g.brand as brandid,z.unitid,z.unitname, z.auxunitid,z.auxunitname,g.defaultsort as goodssort,
		sum(z.initnum) as initnum,sum(z.initnum)/y.rate as initauxnum,sum(z.initamount) as initamount,
		CONCAT(floor(sum(z.initnum)/y.rate),z.auxunitname,MOD(sum(z.initnum),y.rate),z.unitname) as initauxnumdetail,
		sum(z.enternum) as enternum,sum(z.enternum)/y.rate as enterauxnum,
		CONCAT(floor(sum(z.enternum)/y.rate),z.auxunitname,MOD(sum(z.enternum),y.rate),z.unitname) as enterauxnumdetail,
		sum(z.outnum) as outnum,sum(z.outnum)/y.rate as outauxnum,
		CONCAT(floor(sum(z.outnum)/y.rate),z.auxunitname,MOD(sum(z.outnum),y.rate),z.unitname) as outauxnumdetail,
		sum(z.initnum+z.enternum-z.outnum) as endnum,sum(z.initnum+z.enternum-z.outnum)/y.rate as endauxnum,
		CONCAT(floor(sum(z.initnum+z.enternum-z.outnum)/y.rate),z.auxunitname,MOD(sum(z.initnum+z.enternum-z.outnum),y.rate),z.unitname) as endauxnumdetail
		from (
		select rb.storageid,rb.goodsid,rb.unitid, rb.unitname, rb.auxunitid,rb.auxunitname,
		if(rb.existingnum is null,0,rb.existingnum) as initnum,0 as initauxnum,if(rb.taxamount is null,0,rb.taxamount)as initamount,
		0 as enternum,0 as enterauxnum, 0 as enteramount,
		0 as outnum, 0 as outauxnum,0 as outamount,
		0 as endnum,0 as endauxnum,0 as endamount
		from t_report_storage_bak rb
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1==1">
				and rb.businessdate=#{condition.beforedate}
			</if>
			<if test="condition.goodsid != null" >
				and FIND_IN_SET(rb.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.storageid != null" >
				and rb.storageid = #{condition.storageid}
			</if>
		</trim>
		UNION ALL
		select t.storageid, t.goodsid, t.unitid, t.unitname, t.auxunitid, t.auxunitname,
		0 as initnum,0 as initauxnum,0 as initamount,
		t.receivenum as enternum, 0 as enterauxnum,0 as enteramount,
		t.sendnum as outnum,0 as outauxnum, 0 as outamount,
		0 as endnum,0 as endauxnum,0 as endamount
		from t_storage_summary_log t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null">
				and t.addtime >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.addtime <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.goodsid != null" >
				and FIND_IN_SET(t.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.storageid != null" >
				and t.storageid = #{condition.storageid}
			</if>
		</trim>
		) z
		LEFT JOIN t_base_goods_info_meteringunit y on z.goodsid=y.goodsid and y.isdefault = '1'
		LEFT JOIN t_base_goods_info g on z.goodsid=g.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.goodsid != null" >
				and FIND_IN_SET(z.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.brandid != null" >
				and FIND_IN_SET(g.brand,#{condition.brandid})
			</if>
			<if test="condition.goodssort != null" >
				and g.defaultsort like '${condition.goodssort}%'
			</if>
			<if test="condition.supplierid != null" >
				and g.defaultsupplier = #{condition.supplierid}
			</if>
		</trim>
		GROUP BY z.storageid,z.goodsid
		<if test="condition.isenterorout == 1" >
			HAVING sum(z.enternum)>0 or sum(z.outnum)>0
		</if>
		<if test="condition.isenterorout == 2" >
			HAVING sum(z.enternum)=0 or sum(z.outnum)=0
		</if>
		)
	</sql>
	<select id="getStorageInOutReportSumDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageInOutReport">
		SELECT x.* from <include refid="getStorageInOutReportSumDataList_sql"/> x
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="getStorageInOutReportSumDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from <include refid="getStorageInOutReportSumDataList_sql"/> x
	</select>
	<select id="getStorageInOutReportSumData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageInOutReport">
		select sum(x.initnum) as initnum,sum(x.initauxnum) as initauxnum,
   		sum(x.enternum) as enternum, sum(x.enterauxnum) as enterauxnum,
   		sum(x.outnum) as outnum, sum(x.outauxnum) as outauxnum, 
   		sum(x.endnum) as endnum, sum(x.endauxnum) as endauxnum
   		from <include refid="getStorageInOutReportSumDataList_sql"/> x
	</select>
	<select id="getStorageInOutReportInitSumData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageInOutReport">
		select sum(z.initnum) as initnum,sum(z.initamount) as initamount from (
		select t.businessdate,t.storageid,t.goodsid,t.initnum,t.initamount
		from t_report_storage_inout t
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and businessdate >= #{condition.businessdate1}
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and businessdate <= #{condition.businessdate2}]]>
		  	</if>
		  	<if test="condition.goodsid != null" >
		  		and FIND_IN_SET(goodsid,#{condition.goodsid})
	      	</if>
	      	<if test="condition.storageid != null" >
	         	and storageid = #{condition.storageid}
	      	</if>
	    </trim>
		GROUP BY t.storageid ,t.goodsid
		order by t.businessdate asc
		) z
	</select>
	<select id="getStorageInOutReportEndSumData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageInOutReport">
		select sum(z.endnum) as endnum,sum(z.endamount) as endamount from (
		select t.businessdate,t.storageid,t.goodsid,t.endnum,t.endamount
		from t_report_storage_inout t
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and businessdate >= #{condition.businessdate1}
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and businessdate <= #{condition.businessdate2}]]>
		  	</if>
		  	<if test="condition.goodsid != null" >
	         	and FIND_IN_SET(goodsid,#{condition.goodsid})
	      	</if>
	      	<if test="condition.storageid != null" >
	         	and storageid = #{condition.storageid}
	      	</if>
	    </trim>
		GROUP BY t.storageid ,t.goodsid
		order by t.businessdate desc
		) z
	</select>

    <sql id="buySaleReportDayData_sql">
        (
        select d.businessdate,d.goodsid,d.brandid,d.deptid,d.barcode,d.supplierid,d.storageid,d.unitid,d.price,d.isdiscount,
        IF(d.businessdate = '${condition.businessdate1}',d.initnum,0) as initnum,IF(d.businessdate = '${condition.businessdate1}',d.inittotalbox,0) as inittotalbox,IF(d.businessdate = '${condition.businessdate1}',d.initamount,0) as initamount,IF(d.businessdate = '${condition.businessdate1}',d.initnotaxamount,0) as initnotaxamount,
        d.buyinnum,d.buyintotalbox,d.buyinamount,d.buyinnotaxamount,
        d.buyoutnum,d.buyouttotalbox,d.buyoutamount,d.buyoutnotaxamount,
        d.enternum,d.entertotalbox,d.enteramount,d.enternotaxamount,
        d.saleoutnum,d.saleouttotalbox,d.saleoutamount,d.saleoutnotaxamount,
        d.saleinnum,d.saleintotalbox,d.saleinamount,d.saleinnotaxamount,
        d.outnum,d.outtotalbox,d.outamount,d.outnotaxamount,d.costoutamount,d.costnotaxoutamount,
        d.allocateinnum,d.allocateintotalbox,d.allocateinamount,d.allocateinnotaxamount,
        d.allocateoutnum,d.allocateouttotalbox,d.allocateoutamount,d.allocateoutnotaxamount,
        d.lossnum,d.losstotalbox,d.lossamount,d.lossnotaxamount,d.costlossamount,d.costnotaxlossamount,
        IF(d.businessdate = '${condition.businessdate2}',d.endnum,0) as endnum,IF(d.businessdate = '${condition.businessdate2}',d.endtotalbox,0) as endtotalbox,IF(d.businessdate = '${condition.businessdate2}',d.endamount,0) as endamount,IF(d.businessdate = '${condition.businessdate2}',d.endnotaxamount,0) as endnotaxamount
        from t_report_storage_day d
        LEFT JOIN t_base_goods_info g ON d.goodsid = g.id
        <trim prefix="where" prefixOverrides="and|or">
            <include refid="common.Page_dataSql"/>
            <if test="condition.businessdate1 != null">
                and d.businessdate >= #{condition.businessdate1}
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and d.businessdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(d.brandid,#{condition.brandid})
            </if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(d.goodsid,#{condition.goodsid})
            </if>
            <if test="condition.storageid != null">
                and FIND_IN_SET(d.storageid,#{condition.storageid})
            </if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(d.supplierid,#{condition.supplierid})
			</if>
            <if test="condition.branddeptsql != null">
                ${condition.branddeptsql}
            </if>
        </trim>
        )
    </sql>
	<select id="showBuySaleReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageBuySaleReport">
        select z.* from (
        select z.goodsid,z.brandid,z.deptid,z.barcode,z.supplierid,z.storageid,z.unitid,z.price,z.isdiscount,
        sum(z.initnum) as initnum,sum(z.inittotalbox) as inittotalbox,sum(z.initamount) as initamount,sum(z.initnotaxamount) as initnotaxamount,
        sum(z.buyinnum) as buyinnum,sum(z.buyintotalbox) as buyintotalbox,sum(z.buyinamount) as buyinamount,sum(z.buyinnotaxamount) as buyinnotaxamount,
        sum(z.buyoutnum) as buyoutnum,sum(z.buyouttotalbox) as buyouttotalbox,sum(z.buyoutamount) as buyoutamount,sum(z.buyoutnotaxamount) as buyoutnotaxamount,
        sum(z.enternum) as enternum,sum(z.entertotalbox) as entertotalbox,sum(z.enteramount) as enteramount,sum(z.enternotaxamount) as enternotaxamount,
        sum(z.saleoutnum) as saleoutnum,sum(z.saleouttotalbox) as saleouttotalbox,sum(z.saleoutamount) as saleoutamount,sum(z.saleoutnotaxamount) as saleoutnotaxamount,
        sum(z.saleinnum) as saleinnum,sum(z.saleintotalbox) as saleintotalbox,sum(z.saleinamount) as saleinamount,sum(z.saleinnotaxamount) as saleinnotaxamount,
        sum(z.outnum) as outnum,sum(z.outtotalbox) as outtotalbox,sum(z.outamount) as outamount,sum(z.outnotaxamount) as outnotaxamount,sum(z.costoutamount) as costoutamount,sum(z.costnotaxoutamount) as costnotaxoutamount,
        sum(z.allocateinnum) as allocateinnum,sum(z.allocateintotalbox) as allocateintotalbox,sum(z.allocateinamount) as allocateinamount,sum(z.allocateinnotaxamount) as allocateinnotaxamount,
        sum(z.allocateoutnum) as allocateoutnum,sum(z.allocateouttotalbox) as allocateouttotalbox,sum(z.allocateoutamount) as allocateoutamount,sum(z.allocateoutnotaxamount) as allocateoutnotaxamount,
        sum(z.lossnum) as lossnum,sum(z.losstotalbox) as losstotalbox,sum(z.lossamount) as lossamount,sum(z.lossnotaxamount) as lossnotaxamount,sum(z.costlossamount) as costlossamount,sum(z.costnotaxlossamount) as costnotaxlossamount,
        sum(z.endnum) as endnum,sum(z.endtotalbox) as endtotalbox,sum(z.endamount) as endamount,sum(z.endnotaxamount) as endnotaxamount
        from <include refid="buySaleReportDayData_sql"/> z
        <if test="condition.groupcols != null">
            group by ${condition.groupcols}
        </if>
        ORDER BY z.brandid,z.isdiscount
        )z
        <if test="condition.isflag == null">
            <include refid="common.Page_limit"/>
        </if>
	</select>
	<select id="showBuySaleReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
        select count(1) from (
            select z.goodsid,z.brandid,z.deptid,z.barcode,z.supplierid,z.storageid,z.unitid,z.price,z.isdiscount,
            sum(z.initnum) as initnum,sum(z.inittotalbox) as inittotalbox,sum(z.initamount) as initamount,sum(z.initnotaxamount) as initnotaxamount,
            sum(z.buyinnum) as buyinnum,sum(z.buyintotalbox) as buyintotalbox,sum(z.buyinamount) as buyinamount,sum(z.buyinnotaxamount) as buyinnotaxamount,
            sum(z.buyoutnum) as buyoutnum,sum(z.buyouttotalbox) as buyouttotalbox,sum(z.buyoutamount) as buyoutamount,sum(z.buyoutnotaxamount) as buyoutnotaxamount,
            sum(z.enternum) as enternum,sum(z.entertotalbox) as entertotalbox,sum(z.enteramount) as enteramount,sum(z.enternotaxamount) as enternotaxamount,
            sum(z.saleoutnum) as saleoutnum,sum(z.saleouttotalbox) as saleouttotalbox,sum(z.saleoutamount) as saleoutamount,sum(z.saleoutnotaxamount) as saleoutnotaxamount,
            sum(z.saleinnum) as saleinnum,sum(z.saleintotalbox) as saleintotalbox,sum(z.saleinamount) as saleinamount,sum(z.saleinnotaxamount) as saleinnotaxamount,
            sum(z.outnum) as outnum,sum(z.outtotalbox) as outtotalbox,sum(z.outamount) as outamount,sum(z.outnotaxamount) as outnotaxamount,sum(z.costoutamount) as costoutamount,sum(z.costnotaxoutamount) as costnotaxoutamount,
            sum(z.allocateinnum) as allocateinnum,sum(z.allocateintotalbox) as allocateintotalbox,sum(z.allocateinamount) as allocateinamount,sum(z.allocateinnotaxamount) as allocateinnotaxamount,
            sum(z.allocateoutnum) as allocateoutnum,sum(z.allocateouttotalbox) as allocateouttotalbox,sum(z.allocateoutamount) as allocateoutamount,sum(z.allocateoutnotaxamount) as allocateoutnotaxamount,
            sum(z.lossnum) as lossnum,sum(z.losstotalbox) as losstotalbox,sum(z.lossamount) as lossamount,sum(z.lossnotaxamount) as lossnotaxamount,sum(z.costlossamount) as costlossamount,sum(z.costnotaxlossamount) as costnotaxlossamount,
            sum(z.endnum) as endnum,sum(z.endtotalbox) as endtotalbox,sum(z.endamount) as endamount,sum(z.endnotaxamount) as endnotaxamount
            from <include refid="buySaleReportDayData_sql"/> z
            <if test="condition.groupcols != null">
                group by ${condition.groupcols}
            </if>
        )z
	</select>
    <select id="showBuySaleReportDataSum" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageBuySaleReport">
        select sum(z.initnum) as initnum,sum(z.inittotalbox) as inittotalbox,sum(z.initamount) as initamount,sum(z.initnotaxamount) as initnotaxamount,
            sum(z.buyinnum) as buyinnum,sum(z.buyintotalbox) as buyintotalbox,sum(z.buyinamount) as buyinamount,sum(z.buyinnotaxamount) as buyinnotaxamount,
            sum(z.buyoutnum) as buyoutnum,sum(z.buyouttotalbox) as buyouttotalbox,sum(z.buyoutamount) as buyoutamount,sum(z.buyoutnotaxamount) as buyoutnotaxamount,
            sum(z.enternum) as enternum,sum(z.entertotalbox) as entertotalbox,sum(z.enteramount) as enteramount,sum(z.enternotaxamount) as enternotaxamount,
            sum(z.saleoutnum) as saleoutnum,sum(z.saleouttotalbox) as saleouttotalbox,sum(z.saleoutamount) as saleoutamount,sum(z.saleoutnotaxamount) as saleoutnotaxamount,
            sum(z.saleinnum) as saleinnum,sum(z.saleintotalbox) as saleintotalbox,sum(z.saleinamount) as saleinamount,sum(z.saleinnotaxamount) as saleinnotaxamount,
            sum(z.outnum) as outnum,sum(z.outtotalbox) as outtotalbox,sum(z.outamount) as outamount,sum(z.outnotaxamount) as outnotaxamount,sum(z.costoutamount) as costoutamount,sum(z.costnotaxoutamount) as costnotaxoutamount,
            sum(z.allocateinnum) as allocateinnum,sum(z.allocateintotalbox) as allocateintotalbox,sum(z.allocateinamount) as allocateinamount,sum(z.allocateinnotaxamount) as allocateinnotaxamount,
            sum(z.allocateoutnum) as allocateoutnum,sum(z.allocateouttotalbox) as allocateouttotalbox,sum(z.allocateoutamount) as allocateoutamount,sum(z.allocateoutnotaxamount) as allocateoutnotaxamount,
            sum(z.lossnum) as lossnum,sum(z.losstotalbox) as losstotalbox,sum(z.lossamount) as lossamount,sum(z.lossnotaxamount) as lossnotaxamount,sum(z.costlossamount) as costlossamount,sum(z.costnotaxlossamount) as costnotaxlossamount,
            sum(z.endnum) as endnum,sum(z.endtotalbox) as endtotalbox,sum(z.endamount) as endamount,sum(z.endnotaxamount) as endnotaxamount
        from <include refid="buySaleReportDayData_sql"/> z
    </select>

	<sql id="buySaleReportMonth_sql">
		(
			select m.businessdate,m.goodsid,m.brandid,m.deptid,m.barcode,m.supplierid,m.storageid,m.unitid,m.price,m.isdiscount,
                IF(m.businessdate = '${condition.businessdate1}',m.initnum,0) as initnum,IF(m.businessdate = '${condition.businessdate1}',m.inittotalbox,0) as inittotalbox,IF(m.businessdate = '${condition.businessdate1}',m.initamount,0) as initamount,IF(m.businessdate = '${condition.businessdate1}',m.initnotaxamount,0) as initnotaxamount,
                m.buyinnum,m.buyintotalbox,m.buyinamount,m.buyinnotaxamount,
                m.buyoutnum,m.buyouttotalbox,m.buyoutamount,m.buyoutnotaxamount,
                m.enternum,m.entertotalbox,m.enteramount,m.enternotaxamount,
                m.saleoutnum,m.saleouttotalbox,m.saleoutamount,m.saleoutnotaxamount,
                m.saleinnum,m.saleintotalbox,m.saleinamount,m.saleinnotaxamount,
                m.outnum,m.outtotalbox,m.outamount,m.outnotaxamount,m.costoutamount,m.costnotaxoutamount,
                m.allocateinnum,m.allocateintotalbox,m.allocateinamount,m.allocateinnotaxamount,
                m.allocateoutnum,m.allocateouttotalbox,m.allocateoutamount,m.allocateoutnotaxamount,
                m.lossnum,m.losstotalbox,m.lossamount,m.lossnotaxamount,m.costlossamount,m.costnotaxlossamount,
                IF(m.businessdate = '${condition.businessdate2}',m.endnum,0) as endnum,IF(m.businessdate = '${condition.businessdate2}',m.endtotalbox,0) as endtotalbox,IF(m.businessdate = '${condition.businessdate2}',m.endamount,0) as endamount,IF(m.businessdate = '${condition.businessdate2}',m.endnotaxamount,0) as endnotaxamount
			from t_report_storage_month m
            LEFT JOIN t_base_goods_info g ON m.goodsid = g.id
			<trim prefix="where" prefixOverrides="and|or">
				<include refid="common.Page_dataSql"/>
				<if test="condition.businessdate1 != null">
				 	and m.businessdate >= #{condition.businessdate1}
			  	</if>
			  	<if test="condition.businessdate2 != null">
				 	<![CDATA[and m.businessdate <= #{condition.businessdate2}]]>
			  	</if>
			  	<if test="condition.brandid != null">
				 	and FIND_IN_SET(m.brandid,#{condition.brandid})
			  	</if>
			  	<if test="condition.goodsid != null">
				 	and FIND_IN_SET(m.goodsid,#{condition.goodsid})
			  	</if>
			  	<if test="condition.storageid != null">
				 	and FIND_IN_SET(m.storageid,#{condition.storageid})
			  	</if>
                <if test="condition.branddeptsql != null">
                    ${condition.branddeptsql}
                </if>
				<if test="condition.supplierid != null">
					and FIND_IN_SET(m.supplierid,#{condition.supplierid})
				</if>
			</trim>
		)
	</sql>
	<select id="showBuySaleReportMonthData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageBuySaleReport">
		select z.* from (
          select z.goodsid,z.brandid,z.deptid,z.barcode,z.supplierid,z.storageid,z.unitid,z.price,z.isdiscount,
            sum(z.initnum) as initnum,sum(z.inittotalbox) as inittotalbox,sum(z.initamount) as initamount,sum(z.initnotaxamount) as initnotaxamount,
            sum(z.buyinnum) as buyinnum,sum(z.buyintotalbox) as buyintotalbox,sum(z.buyinamount) as buyinamount,sum(z.buyinnotaxamount) as buyinnotaxamount,
            sum(z.buyoutnum) as buyoutnum,sum(z.buyouttotalbox) as buyouttotalbox,sum(z.buyoutamount) as buyoutamount,sum(z.buyoutnotaxamount) as buyoutnotaxamount,
            sum(z.enternum) as enternum,sum(z.entertotalbox) as entertotalbox,sum(z.enteramount) as enteramount,sum(z.enternotaxamount) as enternotaxamount,
            sum(z.saleoutnum) as saleoutnum,sum(z.saleouttotalbox) as saleouttotalbox,sum(z.saleoutamount) as saleoutamount,sum(z.saleoutnotaxamount) as saleoutnotaxamount,
            sum(z.saleinnum) as saleinnum,sum(z.saleintotalbox) as saleintotalbox,sum(z.saleinamount) as saleinamount,sum(z.saleinnotaxamount) as saleinnotaxamount,
            sum(z.outnum) as outnum,sum(z.outtotalbox) as outtotalbox,sum(z.outamount) as outamount,sum(z.outnotaxamount) as outnotaxamount,sum(z.costoutamount) as costoutamount,sum(z.costnotaxoutamount) as costnotaxoutamount,
            sum(z.allocateinnum) as allocateinnum,sum(z.allocateintotalbox) as allocateintotalbox,sum(z.allocateinamount) as allocateinamount,sum(z.allocateinnotaxamount) as allocateinnotaxamount,
            sum(z.allocateoutnum) as allocateoutnum,sum(z.allocateouttotalbox) as allocateouttotalbox,sum(z.allocateoutamount) as allocateoutamount,sum(z.allocateoutnotaxamount) as allocateoutnotaxamount,
            sum(z.lossnum) as lossnum,sum(z.losstotalbox) as losstotalbox,sum(z.lossamount) as lossamount,sum(z.lossnotaxamount) as lossnotaxamount,sum(z.costlossamount) as costlossamount,sum(z.costnotaxlossamount) as costnotaxlossamount,
            sum(z.endnum) as endnum,sum(z.endtotalbox) as endtotalbox,sum(z.endamount) as endamount,sum(z.endnotaxamount) as endnotaxamount
		  from <include refid="buySaleReportMonth_sql"/> z
        <if test="condition.groupcols != null">
        group by ${condition.groupcols}
        </if>
        ORDER BY z.brandid,z.isdiscount
        )z
		<if test="condition.isflag == null">
			<include refid="common.Page_limit"/>
		</if>
	</select>
	<select id="showBuySaleReportDataMonthCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
            select z.goodsid,z.brandid,z.deptid,z.barcode,z.supplierid,z.storageid,z.unitid,z.price,z.isdiscount,
                sum(z.initnum) as initnum,sum(z.inittotalbox) as inittotalbox,sum(z.initamount) as initamount,sum(z.initnotaxamount) as initnotaxamount,
                sum(z.buyinnum) as buyinnum,sum(z.buyintotalbox) as buyintotalbox,sum(z.buyinamount) as buyinamount,sum(z.buyinnotaxamount) as buyinnotaxamount,
                sum(z.buyoutnum) as buyoutnum,sum(z.buyouttotalbox) as buyouttotalbox,sum(z.buyoutamount) as buyoutamount,sum(z.buyoutnotaxamount) as buyoutnotaxamount,
                sum(z.enternum) as enternum,sum(z.entertotalbox) as entertotalbox,sum(z.enteramount) as enteramount,sum(z.enternotaxamount) as enternotaxamount,
                sum(z.saleoutnum) as saleoutnum,sum(z.saleouttotalbox) as saleouttotalbox,sum(z.saleoutamount) as saleoutamount,sum(z.saleoutnotaxamount) as saleoutnotaxamount,
                sum(z.saleinnum) as saleinnum,sum(z.saleintotalbox) as saleintotalbox,sum(z.saleinamount) as saleinamount,sum(z.saleinnotaxamount) as saleinnotaxamount,
                sum(z.outnum) as outnum,sum(z.outtotalbox) as outtotalbox,sum(z.outamount) as outamount,sum(z.outnotaxamount) as outnotaxamount,sum(z.costoutamount) as costoutamount,sum(z.costnotaxoutamount) as costnotaxoutamount,
                sum(z.allocateinnum) as allocateinnum,sum(z.allocateintotalbox) as allocateintotalbox,sum(z.allocateinamount) as allocateinamount,sum(z.allocateinnotaxamount) as allocateinnotaxamount,
                sum(z.allocateoutnum) as allocateoutnum,sum(z.allocateouttotalbox) as allocateouttotalbox,sum(z.allocateoutamount) as allocateoutamount,sum(z.allocateoutnotaxamount) as allocateoutnotaxamount,
                sum(z.lossnum) as lossnum,sum(z.losstotalbox) as losstotalbox,sum(z.lossamount) as lossamount,sum(z.lossnotaxamount) as lossnotaxamount,sum(z.costlossamount) as costlossamount,sum(z.costnotaxlossamount) as costnotaxlossamount,
                sum(z.endnum) as endnum,sum(z.endtotalbox) as endtotalbox,sum(z.endamount) as endamount,sum(z.endnotaxamount) as endnotaxamount
            from <include refid="buySaleReportMonth_sql"/> z
            <if test="condition.groupcols != null">
                group by ${condition.groupcols}
            </if>
		)z
	</select>
	<select id="showBuySaleReportDataMonthSum" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageBuySaleReport">
		select sum(z.initnum) as initnum,sum(z.inittotalbox) as inittotalbox,sum(z.initamount) as initamount,sum(z.initnotaxamount) as initnotaxamount,
        sum(z.buyinnum) as buyinnum,sum(z.buyintotalbox) as buyintotalbox,sum(z.buyinamount) as buyinamount,sum(z.buyinnotaxamount) as buyinnotaxamount,
        sum(z.buyoutnum) as buyoutnum,sum(z.buyouttotalbox) as buyouttotalbox,sum(z.buyoutamount) as buyoutamount,sum(z.buyoutnotaxamount) as buyoutnotaxamount,
        sum(z.enternum) as enternum,sum(z.entertotalbox) as entertotalbox,sum(z.enteramount) as enteramount,sum(z.enternotaxamount) as enternotaxamount,
        sum(z.saleoutnum) as saleoutnum,sum(z.saleouttotalbox) as saleouttotalbox,sum(z.saleoutamount) as saleoutamount,sum(z.saleoutnotaxamount) as saleoutnotaxamount,
        sum(z.saleinnum) as saleinnum,sum(z.saleintotalbox) as saleintotalbox,sum(z.saleinamount) as saleinamount,sum(z.saleinnotaxamount) as saleinnotaxamount,
        sum(z.outnum) as outnum,sum(z.outtotalbox) as outtotalbox,sum(z.outamount) as outamount,sum(z.outnotaxamount) as outnotaxamount,sum(z.costoutamount) as costoutamount,sum(z.costnotaxoutamount) as costnotaxoutamount,
        sum(z.allocateinnum) as allocateinnum,sum(z.allocateintotalbox) as allocateintotalbox,sum(z.allocateinamount) as allocateinamount,sum(z.allocateinnotaxamount) as allocateinnotaxamount,
        sum(z.allocateoutnum) as allocateoutnum,sum(z.allocateouttotalbox) as allocateouttotalbox,sum(z.allocateoutamount) as allocateoutamount,sum(z.allocateoutnotaxamount) as allocateoutnotaxamount,
        sum(z.lossnum) as lossnum,sum(z.losstotalbox) as losstotalbox,sum(z.lossamount) as lossamount,sum(z.lossnotaxamount) as lossnotaxamount,sum(z.costlossamount) as costlossamount,sum(z.costnotaxlossamount) as costnotaxlossamount,
        sum(z.endnum) as endnum,sum(z.endtotalbox) as endtotalbox,sum(z.endamount) as endamount,sum(z.endnotaxamount) as endnotaxamount
		from <include refid="buySaleReportMonth_sql"/> z
	</select>

    <sql id="realBuySaleReportDayData_sql">
        (
        select d.businessdate,d.goodsid,d.brandid,d.deptid,d.barcode,d.supplierid,d.storageid,d.unitid,d.price,d.isdiscount,
        IF(d.businessdate = '${condition.businessdate1}',d.initnum,0) as initnum,IF(d.businessdate = '${condition.businessdate1}',d.inittotalbox,0) as inittotalbox,IF(d.businessdate = '${condition.businessdate1}',d.initamount,0) as initamount,IF(d.businessdate = '${condition.businessdate1}',d.initnotaxamount,0) as initnotaxamount,
        d.buyinnum,d.buyintotalbox,d.buyinamount,d.buyinnotaxamount,
        d.buyoutnum,d.buyouttotalbox,d.buyoutamount,d.buyoutnotaxamount,
        d.enternum,d.entertotalbox,d.enteramount,d.enternotaxamount,
        d.saleoutnum,d.saleouttotalbox,d.saleoutamount,d.saleoutnotaxamount,
        d.saleinnum,d.saleintotalbox,d.saleinamount,d.saleinnotaxamount,
        d.outnum,d.outtotalbox,d.outamount,d.outnotaxamount,d.costoutamount,d.costnotaxoutamount,
        d.allocateinnum,d.allocateintotalbox,d.allocateinamount,d.allocateinnotaxamount,
        d.allocateoutnum,d.allocateouttotalbox,d.allocateoutamount,d.allocateoutnotaxamount,
        d.lossnum,d.losstotalbox,d.lossamount,d.lossnotaxamount,d.costlossamount,d.costnotaxlossamount,
        IF(d.businessdate = '${condition.businessdate2}',d.endnum,0) as endnum,IF(d.businessdate = '${condition.businessdate2}',d.endtotalbox,0) as endtotalbox,IF(d.businessdate = '${condition.businessdate2}',d.endamount,0) as endamount,IF(d.businessdate = '${condition.businessdate2}',d.endnotaxamount,0) as endnotaxamount
        from t_report_storage_day_real d
        <trim prefix="where" prefixOverrides="and|or">
            <include refid="common.Page_dataSql"/>
            <if test="condition.businessdate1 != null">
                and d.businessdate >= #{condition.businessdate1}
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and d.businessdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(d.brandid,#{condition.brandid})
            </if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(d.goodsid,#{condition.goodsid})
            </if>
            <if test="condition.storageid != null">
                and FIND_IN_SET(d.storageid,#{condition.storageid})
            </if>
            <if test="condition.branddeptsql != null">
                ${condition.branddeptsql}
            </if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(d.supplierid,#{condition.supplierid})
			</if>
        </trim>
        )
    </sql>
    <sql id="realBuySaleReportDaySumCol_sql">
        sum(z.initnum) as initnum,sum(z.inittotalbox) as inittotalbox,sum(z.initamount) as initamount,sum(z.initnotaxamount) as initnotaxamount,
        sum(z.buyinnum) as buyinnum,sum(z.buyintotalbox) as buyintotalbox,sum(z.buyinamount) as buyinamount,sum(z.buyinnotaxamount) as buyinnotaxamount,
        sum(z.buyoutnum) as buyoutnum,sum(z.buyouttotalbox) as buyouttotalbox,sum(z.buyoutamount) as buyoutamount,sum(z.buyoutnotaxamount) as buyoutnotaxamount,
        sum(z.enternum) as enternum,sum(z.entertotalbox) as entertotalbox,sum(z.enteramount) as enteramount,sum(z.enternotaxamount) as enternotaxamount,
        sum(z.saleoutnum) as saleoutnum,sum(z.saleouttotalbox) as saleouttotalbox,sum(z.saleoutamount) as saleoutamount,sum(z.saleoutnotaxamount) as saleoutnotaxamount,
        sum(z.saleinnum) as saleinnum,sum(z.saleintotalbox) as saleintotalbox,sum(z.saleinamount) as saleinamount,sum(z.saleinnotaxamount) as saleinnotaxamount,
        sum(z.outnum) as outnum,sum(z.outtotalbox) as outtotalbox,sum(z.outamount) as outamount,sum(z.outnotaxamount) as outnotaxamount,sum(z.costoutamount) as costoutamount,sum(z.costnotaxoutamount) as costnotaxoutamount,
        sum(z.allocateinnum) as allocateinnum,sum(z.allocateintotalbox) as allocateintotalbox,sum(z.allocateinamount) as allocateinamount,sum(z.allocateinnotaxamount) as allocateinnotaxamount,
        sum(z.allocateoutnum) as allocateoutnum,sum(z.allocateouttotalbox) as allocateouttotalbox,sum(z.allocateoutamount) as allocateoutamount,sum(z.allocateoutnotaxamount) as allocateoutnotaxamount,
        sum(z.lossnum) as lossnum,sum(z.losstotalbox) as losstotalbox,sum(z.lossamount) as lossamount,sum(z.lossnotaxamount) as lossnotaxamount,sum(z.costlossamount) as costlossamount,sum(z.costnotaxlossamount) as costnotaxlossamount,
        sum(z.endnum) as endnum,sum(z.endtotalbox) as endtotalbox,sum(z.endamount) as endamount,sum(z.endnotaxamount) as endnotaxamount
    </sql>
    <select id="getRealBuySaleReportDayData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageBuySaleReport">
        select z.* from (
            select z.goodsid,z.brandid,z.deptid,z.barcode,z.supplierid,z.storageid,z.unitid,z.price,z.isdiscount,
            <include refid="realBuySaleReportDaySumCol_sql"/>
            from <include refid="realBuySaleReportDayData_sql"/> z
            <if test="condition.groupcols != null">
                group by ${condition.groupcols}
            </if>
            ORDER BY z.brandid,z.isdiscount
        )z
        <if test="condition.isflag == null">
            <include refid="common.Page_limit"/>
        </if>
    </select>
    <select id="getRealBuySaleReportDayDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
        select count(1) from (
        select z.goodsid,z.brandid,z.deptid,z.barcode,z.supplierid,z.storageid,z.unitid,z.price,z.isdiscount,
        <include refid="realBuySaleReportDaySumCol_sql"/>
        from <include refid="realBuySaleReportDayData_sql"/> z
        <if test="condition.groupcols != null">
            group by ${condition.groupcols}
        </if>
        )z
    </select>
    <select id="getRealBuySaleReportDayDataSum" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageBuySaleReport">
        select <include refid="realBuySaleReportDaySumCol_sql"/>
        from <include refid="realBuySaleReportDayData_sql"/> z
    </select>

    <sql id="realBuySaleReportMonth_sql">
        (
        select m.businessdate,m.goodsid,m.brandid,m.deptid,m.barcode,m.supplierid,m.storageid,m.unitid,m.price,m.isdiscount,
        IF(m.businessdate = '${condition.businessdate1}',m.initnum,0) as initnum,IF(m.businessdate = '${condition.businessdate1}',m.inittotalbox,0) as inittotalbox,IF(m.businessdate = '${condition.businessdate1}',m.initamount,0) as initamount,IF(m.businessdate = '${condition.businessdate1}',m.initnotaxamount,0) as initnotaxamount,
        m.buyinnum,m.buyintotalbox,m.buyinamount,m.buyinnotaxamount,
        m.buyoutnum,m.buyouttotalbox,m.buyoutamount,m.buyoutnotaxamount,
        m.enternum,m.entertotalbox,m.enteramount,m.enternotaxamount,
        m.saleoutnum,m.saleouttotalbox,m.saleoutamount,m.saleoutnotaxamount,
        m.saleinnum,m.saleintotalbox,m.saleinamount,m.saleinnotaxamount,
        m.outnum,m.outtotalbox,m.outamount,m.outnotaxamount,m.costoutamount,m.costnotaxoutamount,
        m.allocateinnum,m.allocateintotalbox,m.allocateinamount,m.allocateinnotaxamount,
        m.allocateoutnum,m.allocateouttotalbox,m.allocateoutamount,m.allocateoutnotaxamount,
        m.lossnum,m.losstotalbox,m.lossamount,m.lossnotaxamount,m.costlossamount,m.costnotaxlossamount,
        IF(m.businessdate = '${condition.businessdate2}',m.endnum,0) as endnum,IF(m.businessdate = '${condition.businessdate2}',m.endtotalbox,0) as endtotalbox,IF(m.businessdate = '${condition.businessdate2}',m.endamount,0) as endamount,IF(m.businessdate = '${condition.businessdate2}',m.endnotaxamount,0) as endnotaxamount
        from t_report_storage_month_real m
        <trim prefix="where" prefixOverrides="and|or">
            <include refid="common.Page_dataSql"/>
            <if test="condition.businessdate1 != null">
                and m.businessdate >= #{condition.businessdate1}
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and m.businessdate <= #{condition.businessdate2}]]>
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(m.brandid,#{condition.brandid})
            </if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(m.goodsid,#{condition.goodsid})
            </if>
            <if test="condition.storageid != null">
                and FIND_IN_SET(m.storageid,#{condition.storageid})
            </if>
            <if test="condition.branddeptsql != null">
                ${condition.branddeptsql}
            </if>
			<if test="condition.supplierid != null">
				and FIND_IN_SET(m.supplierid,#{condition.supplierid})
			</if>
        </trim>
        )
    </sql>
    <sql id="realBuySaleReportMonthSumCol_sql">
        sum(z.initnum) as initnum,sum(z.inittotalbox) as inittotalbox,sum(z.initamount) as initamount,sum(z.initnotaxamount) as initnotaxamount,
        sum(z.buyinnum) as buyinnum,sum(z.buyintotalbox) as buyintotalbox,sum(z.buyinamount) as buyinamount,sum(z.buyinnotaxamount) as buyinnotaxamount,
        sum(z.buyoutnum) as buyoutnum,sum(z.buyouttotalbox) as buyouttotalbox,sum(z.buyoutamount) as buyoutamount,sum(z.buyoutnotaxamount) as buyoutnotaxamount,
        sum(z.enternum) as enternum,sum(z.entertotalbox) as entertotalbox,sum(z.enteramount) as enteramount,sum(z.enternotaxamount) as enternotaxamount,
        sum(z.saleoutnum) as saleoutnum,sum(z.saleouttotalbox) as saleouttotalbox,sum(z.saleoutamount) as saleoutamount,sum(z.saleoutnotaxamount) as saleoutnotaxamount,
        sum(z.saleinnum) as saleinnum,sum(z.saleintotalbox) as saleintotalbox,sum(z.saleinamount) as saleinamount,sum(z.saleinnotaxamount) as saleinnotaxamount,
        sum(z.outnum) as outnum,sum(z.outtotalbox) as outtotalbox,sum(z.outamount) as outamount,sum(z.outnotaxamount) as outnotaxamount,sum(z.costoutamount) as costoutamount,sum(z.costnotaxoutamount) as costnotaxoutamount,
        sum(z.allocateinnum) as allocateinnum,sum(z.allocateintotalbox) as allocateintotalbox,sum(z.allocateinamount) as allocateinamount,sum(z.allocateinnotaxamount) as allocateinnotaxamount,
        sum(z.allocateoutnum) as allocateoutnum,sum(z.allocateouttotalbox) as allocateouttotalbox,sum(z.allocateoutamount) as allocateoutamount,sum(z.allocateoutnotaxamount) as allocateoutnotaxamount,
        sum(z.lossnum) as lossnum,sum(z.losstotalbox) as losstotalbox,sum(z.lossamount) as lossamount,sum(z.lossnotaxamount) as lossnotaxamount,sum(z.costlossamount) as costlossamount,sum(z.costnotaxlossamount) as costnotaxlossamount,
        sum(z.endnum) as endnum,sum(z.endtotalbox) as endtotalbox,sum(z.endamount) as endamount,sum(z.endnotaxamount) as endnotaxamount
    </sql>
    <select id="getRealBuySaleReportMonthData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageBuySaleReport">
        select z.* from (
            select z.goodsid,z.brandid,z.deptid,z.barcode,z.supplierid,z.storageid,z.unitid,z.price,z.isdiscount,
            <include refid="realBuySaleReportMonthSumCol_sql"/>
            from <include refid="realBuySaleReportMonth_sql"/> z
            <if test="condition.groupcols != null">
                group by ${condition.groupcols}
            </if>
            ORDER BY z.brandid,z.isdiscount
        )z
        <if test="condition.isflag == null">
            <include refid="common.Page_limit"/>
        </if>
    </select>
    <select id="getRealBuySaleReportMonthDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
        select count(1) from (
            select z.goodsid,z.brandid,z.deptid,z.barcode,z.supplierid,z.storageid,z.unitid,z.price,z.isdiscount,
            <include refid="realBuySaleReportMonthSumCol_sql"/>
            from <include refid="realBuySaleReportMonth_sql"/> z
            <if test="condition.groupcols != null">
                group by ${condition.groupcols}
            </if>
        )z
    </select>
    <select id="getRealBuySaleReportMonthDataSum" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageBuySaleReport">
        select <include refid="realBuySaleReportMonthSumCol_sql"/>
        from <include refid="realBuySaleReportMonth_sql"/> z
    </select>
	
	<!-- 出入库流水账 -->	
	<sql id="InOutFlowList_sql">
		(
			<if test="condition.customerid == null and condition.customersort == null" >
			select '0' as billtype,t.id,'' as customerid,'' as customersort, t1.storageid,t.businessdate,t1.goodsid,t1.brandid,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.unitnum as enternum,t1.taxamount as enteramount,t1.auxnum as auxenternum,t1.auxremainder as auxenterremainder,t1.auxnumdetail as auxenternumdetail,
			0 as outnum,0 as outamount,0 as auxoutnum,0 as auxoutremainder,'' as auxoutnumdetail,t1.taxamount as amount,t1.taxprice as price,t1.remark as remark,t.supplierid
			from t_storage_purchase_enter t
			RIGHT JOIN t_storage_purchase_enter_detail t1 on t.id=t1.purchaseenterid
			<trim prefix="where" prefixOverrides="and|or">
		    	<if test="condition.businessdate1 != null">
				 	and t.businessdate >= #{condition.businessdate1}
			  	</if>
			  	<if test="condition.businessdate2 != null">
				 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  	</if>
			  	<if test="condition.id != null" >
		         	and t.id like concat('%',#{condition.id},'%')
		      	</if>
			  	<if test="condition.goodsid != null" >
			  		and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
		      	</if>
		      	<if test="condition.storageid != null" >
		         	and t.storageid = #{condition.storageid}
		      	</if>
		      	<if test="condition.brandid != null" >
		      		and FIND_IN_SET(t1.brandid,#{condition.brandid})
		      	</if>
                <if test="condition.supplierid != null" >
                    and t.supplierid = #{condition.supplierid }
                </if>
		      	<if test="1==1" >
		         	and t.status in('3','4')
		      	</if>
		    </trim>
			UNION ALL
			</if>
			select '1' as billtype,t.id,t.customerid,t.customersort,t.storageid,DATE_FORMAT(t.audittime,'%Y-%m-%d') as businessdate,t1.goodsid,t1.brandid,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.unitnum as enternum,t1.taxamount as enteramount,t1.auxnum as auxenternum,t1.auxremainder as auxenterremainder,t1.auxnumdetail as auxenternumdetail,
			0 as outnum,0 as outamount,0 as auxoutnum,0 as auxoutremainder,'' as auxoutnumdetail,t1.taxamount as amount,t1.taxprice as price,t1.remark as remark, null supplierid
			from t_storage_salereject_enter t
			RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
			<trim prefix="where" prefixOverrides="and|or">
		    	<if test="condition.businessdate1 != null">
				 	and t.audittime >= #{condition.businessdate1}
			  	</if>
			  	<if test="condition.businessdate2 != null">
				 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
			  	</if>
			  	<if test="condition.id != null" >
		         	and t.id like concat('%',#{condition.id},'%')
		      	</if>
			  	<if test="condition.goodsid != null" >
		         	and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
		      	</if>
		      	<if test="condition.storageid != null" >
		         	and t.storageid = #{condition.storageid}
		      	</if>
		      	<if test="condition.customerid != null" >
		         	and t.customerid = #{condition.customerid}
		      	</if>
		      	<if test="condition.brandid != null" >
		      		and FIND_IN_SET(t1.brandid,#{condition.brandid})
		      	</if>
				<if test="condition.customersort != null" >
					and FIND_IN_SET(t.customersort,#{condition.customersort})
				</if>
                <if test="condition.supplierid != null" >
                    and 1 = 2
                </if>
		      	<if test="1==1" >
		         	and t.status in('3','4')
		      	</if>
		    </trim>
		    <if test="condition.customerid == null and condition.customersort == null" >
			    UNION ALL
				select '2' as billtype,t.id,'' as customerid,'' as customersort,t1.storageid,t.businessdate,t1.goodsid,t1.brandid,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.unitnum as enternum,t1.taxamount as enteramount,t1.auxnum as auxenternum,t1.auxremainder as auxenterremainder,t1.auxnumdetail as auxenternumdetail,
				0 as outnum,0 as outamount,0 as auxoutnum,0 as auxoutremainder,'' as auxoutnumdetail,t1.taxamount as amount,t1.taxprice as price,t1.remark as remark, null supplierid
				from t_storage_other_enter t
				RIGHT JOIN t_storage_other_enter_detail t1 on t.id=t1.billid
				<trim prefix="where" prefixOverrides="and|or">
			    	<if test="condition.businessdate1 != null">
					 	and t.businessdate >= #{condition.businessdate1}
				  	</if>
				  	<if test="condition.businessdate2 != null">
					 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  	</if>
				  	<if test="condition.id != null" >
			         	and t.id like concat('%',#{condition.id},'%')
			      	</if>
				  	<if test="condition.goodsid != null" >
			         	and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			      	</if>
			      	<if test="condition.storageid != null" >
			         	and t.storageid = #{condition.storageid}
			      	</if>
			      	<if test="condition.brandid != null" >
			      		and FIND_IN_SET(t1.brandid,#{condition.brandid})
			      	</if>
                    <if test="condition.supplierid != null" >
                        and 1 = 2
                    </if>
			      	<if test="1==1" >
			         	and t.status in('3','4')
			      	</if>
			    </trim>
				UNION ALL
				select '3' as billtype,t.id,'' as customerid,'' as customersort,t.enterstorageid as storageid,t.businessdate,t1.goodsid,g.brand as brandid, t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,t1.unitnum as enternum,t1.taxamount as enteramount,t1.auxnum as auxenternum,t1.auxremainder as auxenterremainder,t1.auxnumdetail as auxenternumdetail,
				0 as outnum,0 as outamount,0 as auxoutnum,0 as auxoutremainder,'' as auxoutnumdetail,t1.taxamount as amount,t1.taxprice as price,t1.remark as remark, null supplierid
				from t_storage_allocate_out t
				right JOIN t_storage_allocate_out_detail t1 on t.id=t1.billno
				left join t_base_goods_info g on g.id = t1.goodsid
				<trim prefix="where" prefixOverrides="and|or">
			    	<if test="condition.businessdate1 != null">
					 	and t.businessdate >= #{condition.businessdate1}
				  	</if>
				  	<if test="condition.businessdate2 != null">
					 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  	</if>
				  	<if test="condition.id != null" >
			         	and t.id like concat('%',#{condition.id},'%')
			      	</if>
				  	<if test="condition.goodsid != null" >
			         	and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			      	</if>
			      	<if test="condition.storageid != null" >
			         	and t.enterstorageid = #{condition.storageid}
			      	</if>
			      	<if test="condition.brandid != null" >
			      		and FIND_IN_SET(g.brand,#{condition.brandid})
			      	</if>
                    <if test="condition.supplierid != null" >
                        and 1 = 2
                    </if>
			      	<if test="1==1" >
			         	and t.status in('3','4')
			      	</if>
			    </trim>
				UNION ALL
				select '3' as billtype,t.id,'' as customerid,'' as customersort,t.outstorageid as storageid,t.businessdate,t1.goodsid,g.brand as brandid,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,0 as enternum,0 as enteramount,0 as auxenternum,0 as auxenterremainder,'' as auxenternumdetail,
				t1.unitnum as outnum,t1.taxamount as outamount,t1.auxnum as auxoutnum,t1.auxremainder as auxoutremainder,t1.auxnumdetail as auxoutnumdetail,t1.costprice*t1.unitnum as amount,t1.costprice as price,t1.remark as remark, null supplierid
				from t_storage_allocate_out t
				right JOIN t_storage_allocate_out_detail t1 on t.id=t1.billno
				left join t_base_goods_info g on g.id = t1.goodsid
				<trim prefix="where" prefixOverrides="and|or">
			    	<if test="condition.businessdate1 != null">
					 	and t.businessdate >= #{condition.businessdate1}
				  	</if>
				  	<if test="condition.businessdate2 != null">
					 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  	</if>
				  	<if test="condition.id != null" >
			         	and t.id like concat('%',#{condition.id},'%')
			      	</if>
				  	<if test="condition.goodsid != null" >
			         	and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			      	</if>
			      	<if test="condition.storageid != null" >
			         	and t.outstorageid = #{condition.storageid}
			      	</if>
			      	<if test="condition.brandid != null" >
			      		and FIND_IN_SET(g.brand,#{condition.brandid})
			      	</if>
                    <if test="condition.supplierid != null" >
                        and 1 = 2
                    </if>
			      	<if test="1==1" >
			         	and t.status in('3','4')
			      	</if>
			    </trim>
				UNION ALL
				select if(t.billtype='1','4','41') as billtype,t.id,'' as customerid,'' as customersort, t.storageid,t.businessdate,t1.goodsid,g.brand as brandid,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,
				if(t.billtype='1',t1.adjustnum,0) as enternum,if(t.billtype='1',t1.amount,0) as enteramount,if(t.billtype='1',t1.auxadjustnum,0) as auxenternum,if(t.billtype='1',t1.auxadjustremainder,0) as auxenterremainder,if(t.billtype='1',t1.auxadjustnumdetail,'') as auxenternumdetail,
				if(t.billtype='2',t1.adjustnum,0) as outnum,if(t.billtype='2',t1.amount,0) as outamount,if(t.billtype='2',t1.auxadjustnum,0) as auxoutnum,if(t.billtype='2',t1.auxadjustremainder,0) as auxoutremainder,if(t.billtype='2',t1.auxadjustnumdetail,'') as auxoutnumdetail,t1.amount as amount,t1.price as price,t1.remark as remark, null supplierid
				from t_storage_adjustments t
				RIGHT JOIN t_storage_adjustments_detail t1 on t.id=t1.adjustmentsid
				left join t_base_goods_info g on g.id = t1.goodsid
				<trim prefix="where" prefixOverrides="and|or">
			    	<if test="condition.businessdate1 != null">
					 	and t.businessdate >= #{condition.businessdate1}
				  	</if>
				  	<if test="condition.businessdate2 != null">
					 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  	</if>
				  	<if test="condition.id != null" >
			         	and t.id like concat('%',#{condition.id},'%')
			      	</if>
				  	<if test="condition.goodsid != null" >
			         	and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			      	</if>
			      	<if test="condition.storageid != null" >
			         	and t.storageid = #{condition.storageid}
			      	</if>
			      	<if test="condition.brandid != null" >
			      		and FIND_IN_SET(g.brand,#{condition.brandid})
			      	</if>
                    <if test="condition.supplierid != null" >
                        and 1 = 2
                    </if>
			      	<if test="1==1" >
			         	<![CDATA[and t1.adjustnum>0 and t.status in('3','4')]]>
			      	</if>
			    </trim>
			</if>
			UNION ALL
			select '5' as billtype,t.id,t.customerid,t.customersort,t.storageid,t.businessdate,t1.goodsid,t1.brandid,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,0 as enternum,0 as enteramount,0 as auxenternum,0 as auxenterremainder,'' as auxenternumdetail,
			t1.unitnum as outnum,t1.taxamount as outamount,t1.auxnum as auxoutnum,t1.auxremainder as auxoutremainder,t1.auxnumdetail as auxoutnumdetail,t1.taxamount as amount,t1.taxprice as price,t1.remark as remark, null supplierid
			from t_storage_saleout t
			RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
			<trim prefix="where" prefixOverrides="and|or">
		    	<if test="condition.businessdate1 != null">
				 	and t.businessdate >= #{condition.businessdate1}
			  	</if>
			  	<if test="condition.businessdate2 != null">
				 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  	</if>
			  	<if test="condition.id != null" >
		         	and t.id like concat('%',#{condition.id},'%')
		      	</if>
			  	<if test="condition.goodsid != null" >
		         	and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
		      	</if>
		      	<if test="condition.storageid != null" >
		         	and t.storageid = #{condition.storageid}
		      	</if>
		      	<if test="condition.customerid != null" >
		         	and t.customerid = #{condition.customerid}
		      	</if>
		      	<if test="condition.brandid != null" >
		      		and FIND_IN_SET(t1.brandid,#{condition.brandid})
		      	</if>
				<if test="condition.customersort != null" >
					and FIND_IN_SET(t.customersort,#{condition.customersort})
				</if>
                <if test="condition.supplierid != null" >
                    and 1 = 2
                </if>
		      	<if test="1==1" >
		         	and t.status in('3','4')
		      	</if>
		    </trim>
		    <if test="condition.customerid == null and condition.customersort == null" >
		    	UNION ALL
				select '6' as billtype,t.id,'' as customerid,'' as customersort,t1.storageid,DATE_FORMAT(t.audittime,'%Y-%m-%d') as businessdate,t1.goodsid,t1.brandid,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,0 as enternum,0 as enteramount,0 as auxenternum,0 as auxenterremainder,'' as auxenternumdetail,
				t1.unitnum as outnum,t1.taxamount as outamount,t1.auxnum as auxoutnum,t1.auxremainder as auxoutremainder,t1.auxnumdetail as auxoutnumdetail,t1.taxamount as amount,t1.taxprice as price,t1.remark as remark,t.supplierid
				from t_storage_purchasereject_out t
				RIGHT JOIN t_storage_purchasereject_out_detail t1 on t.id=t1.orderid
				<trim prefix="where" prefixOverrides="and|or">
			    	<if test="condition.businessdate1 != null">
					 	and t.audittime >= #{condition.businessdate1}
				  	</if>
				  	<if test="condition.businessdate2 != null">
					 	<![CDATA[and t.audittime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
				  	</if>
				  	<if test="condition.id != null" >
			         	and t.id like concat('%',#{condition.id},'%')
			      	</if>
				  	<if test="condition.goodsid != null" >
			         	and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			      	</if>
			      	<if test="condition.storageid != null" >
			         	and t.storageid = #{condition.storageid}
			      	</if>
			      	<if test="condition.brandid != null" >
			      		and FIND_IN_SET(t1.brandid,#{condition.brandid})
			      	</if>
                    <if test="condition.supplierid != null" >
                        and t.supplierid = #{condition.supplierid }
                    </if>
			      	<if test="1==1" >
			         	and t.status in('3','4') <!-- 因为销售退货入库不判断验收情况 ，此处雷同-->
			      	</if>
			    </trim>
				union ALL
				select '7' as billtype,t.id,'' as customerid,'' as customersort,t1.storageid,t.businessdate,t1.goodsid,t1.brandid,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,0 as enternum,0 as enteramount,0 as auxenternum,0 as auxenterremainder,'' as auxenternumdetail,
				t1.unitnum as outnum,t1.taxamount as outamount,t1.auxnum as auxoutnum,t1.auxremainder as auxoutremainder,t1.auxnumdetail as auxoutnumdetail,t1.taxamount as amount,t1.taxprice as price,t1.remark as remark, null supplierid
				from t_storage_other_out t
				RIGHT JOIN t_storage_other_out_detail t1 on t.id=t1.billid
				<trim prefix="where" prefixOverrides="and|or">
			    	<if test="condition.businessdate1 != null">
					 	and t.businessdate >= #{condition.businessdate1}
				  	</if>
				  	<if test="condition.businessdate2 != null">
					 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				  	</if>
				  	<if test="condition.id != null" >
			         	and t.id like concat('%',#{condition.id},'%')
			      	</if>
				  	<if test="condition.goodsid != null" >
			         	and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			      	</if>
			      	<if test="condition.storageid != null" >
			         	and t.storageid = #{condition.storageid}
			      	</if>
			      	<if test="condition.brandid != null" >
			      		and FIND_IN_SET(t1.brandid,#{condition.brandid})
			      	</if>
                    <if test="condition.supplierid != null" >
                        and 1 = 2
                    </if>
			      	<if test="1==1" >
			         	and t.status in('3','4')
			      	</if>
			    </trim>
		    </if>
		)
	</sql>
	<select id="showInOutFlowListData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageInOutFlow">
		select z.*, s.name suppliername from <include refid="InOutFlowList_sql"/> z
        left join t_base_buy_supplier s on z.supplierid = s.id
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
	      	<if test="condition.billtype != null" >
	      		and FIND_IN_SET(z.billtype,#{condition.billtype})
	      	</if>
	    </trim>
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
	</select>
	
	<select id="showInOutFlowListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from <include refid="InOutFlowList_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
	      	<if test="condition.billtype != null" >
	         	and FIND_IN_SET(z.billtype,#{condition.billtype})
	      	</if>
	    </trim>
	</select>
	
	<select id="showInOutFlowListSum" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageInOutFlow">
		select sum(z.enternum) as enternum,sum(z.enteramount) as enteramount,sum(z.auxenternum) as auxenternum,sum(z.auxenterremainder) as auxenterremainder,
		sum(z.outnum) as outnum, sum(z.outamount) as outamount,sum(z.auxoutnum) as auxoutnum,sum(z.auxoutremainder) as auxoutremainder,sum(amount)as amount
		from <include refid="InOutFlowList_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
	      	<if test="condition.billtype != null" >
	         	and FIND_IN_SET(z.billtype,#{condition.billtype})
	      	</if>
	    </trim>
	</select>
	
	<!-- 代配送出入库流水账 -->
	<sql id="DeliveryInOutFlowList_sql">
		(
		<if test="condition.customerid == null" >
			select '1' as billtype,t.id,'' as customerid, t.storageid,t.businessdate,t1.goodsid,t1.brandid,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,
			t1.unitnum as enternum,t1.taxamount as enteramount,t1.auxnum as auxenternum,t1.overnum as auxenterremainder,t1.auxnumdetail as auxenternumdetail,
			0 as outnum,0 as outamount,0 as auxoutnum,0 as auxoutremainder,'' as auxoutnumdetail,
			t1.taxamount as amount,t1.price as price,t1.remark as remark,t.supplierid
			from t_storage_delivery_enter t
			RIGHT JOIN t_storage_delivery_enter_detail t1 on t.id=t1.billid
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate1 != null">
					and t.businessdate >= #{condition.businessdate1}
				</if>
				<if test="condition.businessdate2 != null">
					<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				</if>
				<if test="condition.id != null" >
					and t.id like concat('%',#{condition.id},'%')
				</if>
				<if test="condition.goodsid != null" >
					and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
				</if>
				<if test="condition.storageid != null" >
					and t.storageid = #{condition.storageid}
				</if>
				<if test="condition.brandid != null" >
					and FIND_IN_SET(t1.brandid,#{condition.brandid})
				</if>
				<if test="condition.supplierid != null" >
					and t.supplierid = #{condition.supplierid }
				</if>
				<if test="1==1" >
					and t.status in('3','4') and t.billtype='1'
				</if>
			</trim>
			UNION ALL
		</if>
		<if test="condition.customerid == null" >
			select '2' as billtype,t.id,'' as customerid, t.storageid,t.businessdate,t1.goodsid,t1.brandid,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,
			0 as enternum,0 as enteramount,0 as auxenternum,0 as auxenterremainder,'' as auxenternumdetail,
			t1.unitnum as outnum,t1.taxamount as outamount,t1.auxnum as auxoutnum,t1.overnum as auxoutremainder,t1.auxnumdetail as auxoutnumdetail,
			t1.taxamount as amount,t1.price as price,t1.remark as remark,t.supplierid
			from t_storage_delivery_out t
			RIGHT JOIN t_storage_delivery_out_detail t1 on t.id=t1.billid
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate1 != null">
					and t.businessdate >= #{condition.businessdate1}
				</if>
				<if test="condition.businessdate2 != null">
					<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
				</if>
				<if test="condition.id != null" >
					and t.id like concat('%',#{condition.id},'%')
				</if>
				<if test="condition.goodsid != null" >
					and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
				</if>
				<if test="condition.storageid != null" >
					and t.storageid = #{condition.storageid}
				</if>
				<if test="condition.brandid != null" >
					and FIND_IN_SET(t1.brandid,#{condition.brandid})
				</if>
				<if test="condition.supplierid != null" >
					and t.supplierid = #{condition.supplierid }
				</if>
				<if test="1==1" >
					and t.status in('3','4') and t.billtype='1'
				</if>
			</trim>
			UNION ALL
		</if>
		select '3' as billtype,t.id,t.customerid as customerid, t.storageid,t.businessdate,t1.goodsid,t1.brandid,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,
		0 as enternum,0 as enteramount,0 as auxenternum,0 as auxenterremainder,'' as auxenternumdetail,
		t1.unitnum as outnum,t1.taxamount as outamount,t1.auxnum as auxoutnum,t1.overnum as auxoutremainder,t1.auxnumdetail as auxoutnumdetail,
		t1.taxamount as amount,t1.price as price,t1.remark as remark,t.supplierid
		from t_storage_delivery_out t
		RIGHT JOIN t_storage_delivery_out_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.id != null" >
				and t.id like concat('%',#{condition.id},'%')
			</if>
			<if test="condition.goodsid != null" >
				and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.storageid != null" >
				and t.storageid = #{condition.storageid}
			</if>
			<if test="condition.brandid != null" >
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.supplierid != null" >
				and t.supplierid = #{condition.supplierid }
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = #{condition.customerid}
			</if>
			<if test="1==1" >
				and t.status in('3','4') and t.billtype='2'
			</if>
		</trim>
		UNION ALL
		select '4' as billtype,t.id,t.customerid as customerid, t.storageid,t.businessdate,t1.goodsid,t1.brandid,t1.unitid,t1.unitname,t1.auxunitid,t1.auxunitname,
		t1.unitnum as enternum,t1.taxamount as enteramount,t1.auxnum as auxenternum,t1.overnum as auxenterremainder,t1.auxnumdetail as auxenternumdetail,
		0 as outnum,0 as outamount,0 as auxoutnum,0 as auxoutremainder,'' as auxoutnumdetail,
		t1.taxamount as amount,t1.price as price,t1.remark as remark,t.supplierid
		from t_storage_delivery_enter t
		RIGHT JOIN t_storage_delivery_enter_detail t1 on t.id=t1.billid
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.businessdate1 != null">
				and t.businessdate >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			</if>
			<if test="condition.id != null" >
				and t.id like concat('%',#{condition.id},'%')
			</if>
			<if test="condition.goodsid != null" >
				and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.storageid != null" >
				and t.storageid = #{condition.storageid}
			</if>
			<if test="condition.brandid != null" >
				and FIND_IN_SET(t1.brandid,#{condition.brandid})
			</if>
			<if test="condition.supplierid != null" >
				and t.supplierid = #{condition.supplierid }
			</if>
			<if test="condition.customerid != null" >
				and t.customerid = #{condition.customerid}
			</if>
			<if test="1==1" >
				and t.status in('3','4') and t.billtype='2'
			</if>
		</trim>
		)
	</sql>
	<select id="showDeliveryInOutFlowListData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageInOutFlow">
		select z.*, s.name suppliername from <include refid="DeliveryInOutFlowList_sql"/> z
        left join t_base_buy_supplier s on z.supplierid = s.id
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
	      	<if test="condition.billtype != null" >
	      		and FIND_IN_SET(z.billtype,#{condition.billtype})
	      	</if>
	    </trim>
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
	</select>
	
	<select id="showDeliveryInOutFlowListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from <include refid="DeliveryInOutFlowList_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
	      	<if test="condition.billtype != null" >
	         	and FIND_IN_SET(z.billtype,#{condition.billtype})
	      	</if>
	    </trim>
	</select>
	
	<select id="showDeliveryInOutFlowListSum" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.StorageInOutFlow">
		select sum(z.enternum) as enternum,sum(z.enteramount) as enteramount,sum(z.auxenternum) as auxenternum,
		sum(z.outnum) as outnum, sum(z.outamount) as outamount,sum(z.auxoutnum) as auxoutnum,sum(amount)as amount
		from <include refid="DeliveryInOutFlowList_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
	      	<if test="condition.billtype != null" >
	         	and FIND_IN_SET(z.billtype,#{condition.billtype})
	      	</if>
	    </trim>
	</select>
	
	
	
	<select id="showCheckReportDataList" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select z.storageid,z.checkuserid,sum(z.checknum) as checknum,sum(z.truenum1) as truenum1,sum(z.truenum2) as truenum2,sum(z.truenum3) as truenum3
		from (
		select t.storageid,t.checkuserid, t.checknum as checknum,t.truenum as truenum1,0 as truenum2 ,0 as truenum3
		from t_report_storage_checklist t
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.businessdate >= #{condition.businessdate1}
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  	</if>
		  	<if test="condition.storageid != null">
			 	and t.storageid = #{condition.storageid}
		  	</if>
		  	<if test="condition.checkuserid != null">
			 	and t.checkuserid = #{condition.checkuserid}
		  	</if>
	      	<if test="1==1" >
	         	and checkno='1'
	      	</if>
	    </trim>
		UNION ALL
		select t.storageid,t.checkuserid, 0 as checknum,0 as truenum1,t.truenum as truenum2 ,0 as truenum3
		from t_report_storage_checklist t
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.businessdate >= #{condition.businessdate1}
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  	</if>
		  	<if test="condition.storageid != null">
			 	and t.storageid = #{condition.storageid}
		  	</if>
		  	<if test="condition.checkuserid != null">
			 	and t.checkuserid = #{condition.checkuserid}
		  	</if>
	      	<if test="1==1" >
	         	and checkno='2'
	      	</if>
	    </trim>
		UNION ALL
		select t.storageid,t.checkuserid,0 as checknum,0 as truenum1,0 as truenum2 ,t.truenum as truenum3
		from t_report_storage_checklist t
		<trim prefix="where" prefixOverrides="and|or">
	    	<if test="condition.businessdate1 != null">
			 	and t.businessdate >= #{condition.businessdate1}
		  	</if>
		  	<if test="condition.businessdate2 != null">
			 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
		  	</if>
		  	<if test="condition.storageid != null">
			 	and t.storageid = #{condition.storageid}
		  	</if>
		  	<if test="condition.checkuserid != null">
				 	and t.checkuserid = #{condition.checkuserid}
			  	</if>
	      	<if test="1==1" >
	         	and checkno='3'
	      	</if>
	    </trim>
	    ) z
		GROUP BY z.storageid,z.checkuserid
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
	</select>
	<select id="showCheckReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from(
			select z.storageid,z.checkuserid,sum(z.checknum) as checknum,sum(z.truenum1) as truenum1,sum(z.truenum2) as truenum2,sum(z.truenum3) as truenum3
			from (
			select t.storageid,t.checkuserid, t.checknum as checknum,t.truenum as truenum1,0 as truenum2 ,0 as truenum3
			from t_report_storage_checklist t
			<trim prefix="where" prefixOverrides="and|or">
		    	<if test="condition.businessdate1 != null">
				 	and t.businessdate >= #{condition.businessdate1}
			  	</if>
			  	<if test="condition.businessdate2 != null">
				 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  	</if>
			  	<if test="condition.storageid != null">
				 	and t.storageid = #{condition.storageid}
			  	</if>
			  	<if test="condition.checkuserid != null">
				 	and t.checkuserid = #{condition.checkuserid}
			  	</if>
		      	<if test="1==1" >
		         	and checkno='1'
		      	</if>
		    </trim>
			UNION ALL
			select t.storageid,t.checkuserid, 0 as checknum,0 as truenum1,t.truenum as truenum2 ,0 as truenum3
			from t_report_storage_checklist t
			<trim prefix="where" prefixOverrides="and|or">
		    	<if test="condition.businessdate1 != null">
				 	and t.businessdate >= #{condition.businessdate1}
			  	</if>
			  	<if test="condition.businessdate2 != null">
				 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  	</if>
			  	<if test="condition.storageid != null">
				 	and t.storageid = #{condition.storageid}
			  	</if>
			  	<if test="condition.checkuserid != null">
				 	and t.checkuserid = #{condition.checkuserid}
			  	</if>
		      	<if test="1==1" >
		         	and checkno='2'
		      	</if>
		    </trim>
			UNION ALL
			select t.storageid,t.checkuserid,0 as checknum,0 as truenum1,0 as truenum2 ,t.truenum as truenum3
			from t_report_storage_checklist t
			<trim prefix="where" prefixOverrides="and|or">
		    	<if test="condition.businessdate1 != null">
				 	and t.businessdate >= #{condition.businessdate1}
			  	</if>
			  	<if test="condition.businessdate2 != null">
				 	<![CDATA[and t.businessdate <= #{condition.businessdate2}]]>
			  	</if>
			  	<if test="condition.storageid != null">
				 	and t.storageid = #{condition.storageid}
			  	</if>
			  	<if test="condition.checkuserid != null">
					 	and t.checkuserid = #{condition.checkuserid}
				  	</if>
		      	<if test="1==1" >
		         	and checkno='3'
		      	</if>
		    </trim>
		    ) z
			GROUP BY z.checkuserid
		)t
	</select>
	
	<insert id="addStorageNumEveryMonth" parameterType="java.lang.String">
		call p_storage_insert_buysale_report_month('${date}');
	</insert>
    <insert id="addRealStorageNumEveryMonth" parameterType="java.lang.String">
        call p_storage_insert_buysale_report_month_real('${date}');
    </insert>

	<insert id="addStorageBakEverday">
        <choose>
            <when test="isStorageAccount==1">
                insert into t_report_storage_bak (businessdate,storageid,goodsid,unitid,unitname,auxunitid,auxunitname,brandid,barcode,supplier,existingnum,costprice,amount,taxamount,notaxamount,addtime)
                select '${date}',t.storageid,t.goodsid,t.unitid,t.unitname,t.auxunitid,t.auxunitname,g.brand,g.barcode, g.defaultsupplier,sum(t.existingnum),t.costprice,sum(t.existingnum)*t.costprice,
                sum(t.existingnum)*t.costprice,sum(t.existingnum)*t.costprice/(1+IF(ty.rate IS NOT NULL,ty.rate,17)/100),now()
                from t_storage_summary t
                LEFT JOIN t_base_goods_info g on t.goodsid=g.id
                LEFT JOIN t_base_finance_taxtype ty ON g.defaulttaxtype = ty.id
                GROUP BY t.storageid,t.goodsid
            </when>
            <otherwise>
                insert into t_report_storage_bak (businessdate,storageid,goodsid,unitid,unitname,auxunitid,auxunitname,brandid,barcode,supplier,existingnum,costprice,amount,taxamount,notaxamount,addtime)
                select '${date}',t.storageid,t.goodsid,t.unitid,t.unitname,t.auxunitid,t.auxunitname,g.brand,g.barcode, g.defaultsupplier,sum(t.existingnum),g.newbuyprice,sum(t.existingnum)*g.newbuyprice,
                sum(t.existingnum)*g.newbuyprice,sum(t.existingnum)*g.newbuyprice/(1+IF(ty.rate IS NOT NULL,ty.rate,17)/100),now()
                from t_storage_summary t
                LEFT JOIN t_base_goods_info g on t.goodsid=g.id
                LEFT JOIN t_base_finance_taxtype ty ON g.defaulttaxtype = ty.id
                GROUP BY t.storageid,t.goodsid
            </otherwise>
        </choose>

	</insert>
	<insert id="addStorageRevolutionDaysReport">
		insert into t_report_storage_revolution(year,mon,goodsid,brandid,storageunitnum,storageamount,salesamount,days,addtime)
		select ${year},${mon},z.goodsid,z.brandid,sum(z.storageunitnum) as storageunitnum,sum(z.storageamount) as storageamount,sum(z.salesamount) as salesamount,IF(sum(z.salesamount)>0,sum(z.storageamount)/sum(z.salesamount),0)*${mondays} as revolutiondays,now()
		from (
		select z.goodsid,z.brandid,avg(z.storageunitnum) as storageunitnum,avg(z.storageamount) as storageamount,0 as salesamount
		from (
            select t.businessdate,t.goodsid,t.brandid,sum(t.existingnum) as storageunitnum,sum(t.amount) as storageamount,0 as salesamount
            from t_report_storage_bak t
            where t.businessdate >= #{begindate} and <![CDATA[ t.businessdate <= #{enddate}]]>
            GROUP BY t.goodsid,t.businessdate
		) z
		GROUP BY z.goodsid
		UNION ALL
		select t1.goodsid,t1.brandid,0 as storageunitnum, 0 as storageamount,t1.taxamount as salesamount
		from t_storage_saleout t
		RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
		where t.businessdate >= #{begindate}
		and <![CDATA[ t.businessdate <= #{enddate}]]>
		and t.status in('3','4')
		UNION ALL
		select t1.goodsid,t1.brandid,0 as storageunitnum, 0 as storageamount,-t1.taxamount as salesamount
		from t_storage_salereject_enter t
		RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
		where t.businessdate >= #{begindate} and <![CDATA[ t.businessdate <= #{enddate}]]>
		and t.ischeck='1' and t.status in('3','4')
		UNION ALL
		select t.brandid as goodsid,t.brandid,0 as storageunitnum,0 as storageamount,t.amount as salesamount
		from t_account_customer_push_balance t
		where t.businessdate >= #{begindate} and <![CDATA[ t.businessdate <= #{enddate}]]>
		and t.status in('3','4')
		) z
		GROUP BY z.goodsid
	</insert>
	<delete id="deleteStorageRevolutionDaysReport">
		delete from t_report_storage_revolution
		where year=#{year} and mon=#{mon}
	</delete>
	<select id="showStorageRevolutionDaysData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        select z.id,z.year,z.mon,z.goodsid,z.brandid,z.brandname,z.brandept,z.supplierid,sum(z.storageunitnum) AS storageunitnum,
        sum(z.storageamount) AS storageamount,sum(z.salesamount) AS salesamount,IF(sum(z.salesamount) > 0,sum(z.storageamount) / sum(z.salesamount),0) AS days
        from (
            select t.id,t.year,t.mon,t.goodsid,t.brandid,t1.name as brandname,t1.deptid as brandept,t1.supplierid,t.storageunitnum,t.storageamount,t.salesamount
            from t_report_storage_revolution t
            LEFT JOIN t_base_goods_brand t1 on t.brandid=t1.id
            <trim prefix="where" prefixOverrides="and|or">
                <if test="condition.days1 != null">
                    and days >= #{condition.days1}
                </if>
                <if test="condition.days2 != null">
                    <![CDATA[and days <= #{condition.days2}]]>
                </if>
                <if test="condition.year != null">
                    and t.year = #{condition.year}
                </if>
                <if test="condition.mon != null">
                    and t.mon = #{condition.mon}
                </if>
                <if test="condition.goodsid != null">
                    and t.goodsid = #{condition.goodsid}
                </if>
                <if test="condition.brandid != null">
                    and t.brandid = #{condition.brandid}
                </if>
                <if test="condition.brandept != null">
                    and t1.deptid like concat(#{condition.brandept},'%')
                </if>
                <if test="condition.supplierid != null">
                    and t1.supplierid = #{condition.supplierid}
                </if>
            </trim>
        ) z
        <trim prefix="where" prefixOverrides="and|or">
            <include refid="common.Page_dataSql"/>
        </trim>
        group by ${condition.groupcols}
        <if test="condition.isflag == null and condition.groupcolsAll == null">
            <include refid="common.Page_limit"/>
        </if>
	</select>
    <select id="showStorageRevolutionSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        select sum(z.storageunitnum) AS storageunitnum,
        sum(z.storageamount) AS storageamount,sum(z.salesamount) AS salesamount,IF(sum(z.salesamount) > 0,sum(z.storageamount) / sum(z.salesamount),0) AS days
        from (
        select z.id,z.year,z.mon,z.goodsid,z.brandid,z.brandname,z.brandept,z.supplierid,sum(z.storageunitnum) AS storageunitnum,
        sum(z.storageamount) AS storageamount,sum(z.salesamount) AS salesamount,IF(sum(z.salesamount) > 0,sum(z.storageamount) / sum(z.salesamount),0) AS days
        from (
        select t.id,t.year,t.mon,t.goodsid,t.brandid,t1.name as brandname,t1.deptid as brandept,t1.supplierid,t.storageunitnum,t.storageamount,t.salesamount
        from t_report_storage_revolution t
        LEFT JOIN t_base_goods_brand t1 on t.brandid=t1.id
        <trim prefix="where" prefixOverrides="and|or">
            <if test="condition.days1 != null">
                and days >= #{condition.days1}
            </if>
            <if test="condition.days2 != null">
                <![CDATA[and days <= #{condition.days2}]]>
            </if>
            <if test="condition.year != null">
                and t.year = #{condition.year}
            </if>
            <if test="condition.mon != null">
                and t.mon = #{condition.mon}
            </if>
            <if test="condition.goodsid != null">
                and t.goodsid = #{condition.goodsid}
            </if>
            <if test="condition.brandid != null">
                and t.brandid = #{condition.brandid}
            </if>
            <if test="condition.brandept != null">
                and t1.deptid like concat(#{condition.brandept},'%')
            </if>
            <if test="condition.supplierid != null">
                and t1.supplierid = #{condition.supplierid}
            </if>
        </trim>
        ) z
        <trim prefix="where" prefixOverrides="and|or">
            <include refid="common.Page_dataSql"/>
        </trim>
        group by ${condition.groupcols}
        <if test="condition.isflag == null and condition.groupcolsAll == null">
            <include refid="common.Page_limit"/>
        </if>
        ) z

    </select>
    <select id="showStorageRevolutionDaysCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
        select count(1) from (
		select z.id,z.year,z.mon,z.goodsid,z.brandid,z.brandname,z.brandept,z.supplierid,sum(z.storageunitnum) AS storageunitnum,
		sum(z.storageamount) AS storageamount,sum(z.salesamount) AS salesamount,IF(sum(z.salesamount) > 0,sum(z.storageamount) / sum(z.salesamount),0) AS days
		from (
		select t.id,t.year,t.mon,t.goodsid,t.brandid,t1.name as brandname,t1.deptid as brandept,t1.supplierid,t.storageunitnum,t.storageamount,t.salesamount
		from t_report_storage_revolution t
		LEFT JOIN t_base_goods_brand t1 on t.brandid=t1.id
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.days1 != null">
				and days >= #{condition.days1}
			</if>
			<if test="condition.days2 != null">
				<![CDATA[and days <= #{condition.days2}]]>
			</if>
			<if test="condition.year != null">
				and t.year = #{condition.year}
			</if>
			<if test="condition.mon != null">
				and t.mon = #{condition.mon}
			</if>
			<if test="condition.goodsid != null">
				and t.goodsid = #{condition.goodsid}
			</if>
			<if test="condition.brandid != null">
				and t.brandid = #{condition.brandid}
			</if>
			<if test="condition.brandept != null">
				and t1.deptid like concat(#{condition.brandept},'%')
			</if>
			<if test="condition.supplierid != null">
				and t1.supplierid = #{condition.supplierid}
			</if>
		</trim>
		) z
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
		group by ${condition.groupcols}
        ) z
    </select>
    <select id="showStorageRevolutionDaysBySection" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        select z.businessdate,z.goodsid,z.brandname,z.supplierid,z.brandept,sum(z.storageunitnum) as storageunitnum,sum(z.storageamount) as storageamount,sum(z.salesamount) as salesamount,
        IF(sum(z.salesamount)>0,sum(z.storageamount)/sum(z.salesamount),0)* #{condition.mondays} as days,z.brandid
        from (
        select z.businessdate,z.goodsid,z.brandname,z.supplier as supplierid ,z.brandept,avg(z.storageunitnum) as storageunitnum,avg(z.storageamount) as storageamount,0 as salesamount,z.brandid
        from (
        select t.businessdate,t.goodsid,t.supplier,t1.name as brandname,t1.deptid as brandept,sum(t.existingnum) as storageunitnum,sum(t.amount) as storageamount,0 as salesamount, t.brandid
        from t_report_storage_bak t
        LEFT JOIN t_base_goods_brand t1 on t.brandid=t1.id
        where t.businessdate >= #{condition.begindate} and <![CDATA[ t.businessdate <= #{condition.enddate}]]>
        GROUP BY t.goodsid,t.businessdate
        ) z
        GROUP BY z.goodsid
        UNION ALL
        select t.businessdate,t1.goodsid,t2.name as brandname,t1.supplierid,t2.deptid as brandept,0 as storageunitnum, 0 as storageamount,t1.taxamount as salesamount,t1.brandid
        from t_storage_saleout t
        RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
        LEFT JOIN t_base_goods_brand t2 on t1.brandid=t2.id
        where t.businessdate >= #{condition.begindate}
        and <![CDATA[ t.businessdate <= #{condition.enddate}]]>
        and t.status in('3','4')
        UNION ALL
        select t.businessdate,t1.goodsid,t2.name as brandname,t1.supplierid,t2.deptid as brandept,0 as storageunitnum, 0 as storageamount,-t1.taxamount as salesamount,t1.brandid
        from t_storage_salereject_enter t
        RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
        LEFT JOIN t_base_goods_brand t2 on t1.brandid=t2.id
        where t.businessdate >= #{condition.begindate} and <![CDATA[ t.businessdate <= #{condition.enddate}]]>
        and t.ischeck='1' and t.status in('3','4')
        UNION ALL
        select t.businessdate,t.brandid as goodsid,t1.name as brandname,t.supplierid,t1.deptid as brandept,0 as storageunitnum,0 as storageamount,t.amount as salesamount,t.brandid
        from t_account_customer_push_balance t
        LEFT JOIN t_base_goods_brand t1 on t.brandid=t1.id
        where t.businessdate >= #{condition.begindate} and <![CDATA[ t.businessdate <= #{condition.enddate}]]>
        and t.status in('3','4')
        ) z
        <trim prefix="where" prefixOverrides="and|or">
            <include refid="common.Page_dataSql"/>
            <if test="condition.days1 != null">
                and z.revolutiondays >= #{condition.days1}
            </if>
            <if test="condition.days2 != null">
                <![CDATA[and z.revolutiondays <= #{condition.days2}]]>
            </if>
            <if test="condition.goodsid != null">
                and z.goodsid = #{condition.goodsid}
            </if>
            <if test="condition.brandid != null">
                and z.brandid = #{condition.brandid}
            </if>
            <if test="condition.brandept != null">
                and z.deptid like concat(#{condition.brandept},'%')
            </if>
            <if test="condition.supplierid != null">
                and z.supplierid = #{condition.supplierid}
            </if>
        </trim>
        <if test="condition.groupcolsAll == null">
            group by ${condition.groupcols}
        </if>
        <if test="condition.isflag == null and condition.groupcolsAll == null">
            <include refid="common.Page_limit"/>
        </if>
    </select>
    <select id="showStorageRevolutionDaysBySectionCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
       select count(1) from (
        select z.goodsid,z.brandname,z.supplierid,z.brandept,sum(z.storageunitnum) as storageunitnum,sum(z.storageamount) as storageamount,sum(z.salesamount) as salesamount,
        IF(sum(z.salesamount)>0,sum(z.storageamount)/sum(z.salesamount),0)* #{condition.mondays} as days,z.brandid
        from (
        select z.goodsid,z.brandname,z.supplier as supplierid ,z.brandept,avg(z.storageunitnum) as storageunitnum,avg(z.storageamount) as storageamount,0 as salesamount,z.brandid
        from (
        select t.businessdate,t.goodsid,t.supplier,t1.name as brandname,t1.deptid as brandept,sum(t.existingnum) as storageunitnum,sum(t.amount) as storageamount,0 as salesamount,t.brandid
        from t_report_storage_bak t
        LEFT JOIN t_base_goods_brand t1 on t.brandid=t1.id
        where t.businessdate >= #{condition.begindate} and <![CDATA[ t.businessdate <= #{condition.enddate}]]>
        GROUP BY t.goodsid,t.businessdate
        ) z
        GROUP BY z.goodsid
        UNION ALL
        select t1.goodsid,t1.supplierid,t2.name as brandname,t2.deptid as brandept,0 as storageunitnum, 0 as storageamount,t1.taxamount as salesamount,t1.brandid
        from t_storage_saleout t
        RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
        LEFT JOIN t_base_goods_brand t2 on t1.brandid=t2.id
        where t.businessdate >= #{condition.begindate}
        and <![CDATA[ t.businessdate <= #{condition.enddate}]]>
        and t.status in('3','4')
        UNION ALL
        select t1.goodsid,t1.supplierid,t2.name as brandname,t2.deptid as brandept,0 as storageunitnum, 0 as storageamount,-t1.taxamount as salesamount,t1.brandid
        from t_storage_salereject_enter t
        RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
        LEFT JOIN t_base_goods_brand t2 on t1.brandid=t2.id
        where t.businessdate >= #{condition.begindate} and <![CDATA[ t.businessdate <= #{condition.enddate}]]>
        and t.ischeck='1' and t.status in('3','4')
        UNION ALL
        select t.brandid as goodsid,t.supplierid,t1.name as brandname,t1.deptid as brandept,0 as storageunitnum,0 as storageamount,t.amount as salesamount,t.brandid
        from t_account_customer_push_balance t
        LEFT JOIN t_base_goods_brand t1 on t.brandid=t1.id
        where t.businessdate >= #{condition.begindate} and <![CDATA[ t.businessdate <= #{condition.enddate}]]>
        and t.status in('3','4')
        ) z
        <trim prefix="where" prefixOverrides="and|or">
            <include refid="common.Page_dataSql"/>
            <if test="condition.days1 != null">
                and z.revolutiondays >= #{condition.days1}
            </if>
            <if test="condition.days2 != null">
                <![CDATA[and z.revolutiondays <= #{condition.days2}]]>
            </if>
            <if test="condition.goodsid != null">
                and z.goodsid = #{condition.goodsid}
            </if>
            <if test="condition.brandid != null">
                and z.brandid = #{condition.brandid}
            </if>
            <if test="condition.branddept != null">
                and z.deptid like concat(#{condition.branddept},'%')
            </if>
            <if test="condition.supplierid != null">
                and z.supplierid = #{condition.supplierid}
            </if>
        </trim>
        group by ${condition.groupcols}
       )z
    </select>
    <sql id="StorageRevolutionDetails_sql">
        (
            select t.id,t.businessdate,t.customerid,t.salesuser,t.storageid,t1.goodsid,t1.supplierid,t2.name as brandname,t2.deptid as branddept,t1.taxamount as salesamount,
            '0' as billtype,t1.unitnum,t1.taxprice as price,t1.brandid
            from t_storage_saleout t
            RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
            LEFT JOIN t_base_goods_brand t2 on t1.brandid=t2.id
            where t.businessdate >= #{condition.begindate}
            and <![CDATA[ t.businessdate <= #{condition.enddate}]]>
            and t.status in('3','4')
            UNION ALL
            select t.id,t.businessdate,t.customerid,t.salesuser,t.storageid,t1.goodsid,t1.supplierid,t2.name as brandname,t2.deptid as branddept,-t1.taxamount as salesamount,
            '1' as billtype,-t1.unitnum,t1.taxprice as price,t1.brandid
            from t_storage_salereject_enter t
            RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
            LEFT JOIN t_base_goods_brand t2 on t1.brandid=t2.id
            where t.businessdate >= #{condition.begindate} and <![CDATA[ t.businessdate <= #{condition.enddate}]]>
            and t.ischeck='1' and t.status in('3','4')
            UNION ALL
            select t.id,t.businessdate,t.customerid,t.salesuser,'' as storageid,t.brandid as goodsid,t.supplierid,t1.name as brandname,t1.deptid as branddept,t.amount as salesamount,
            '2' as billtype,'' as unitnum, 0 as price,t.brandid
            from t_account_customer_push_balance t
            LEFT JOIN t_base_goods_brand t1 on t.brandid=t1.id
            where t.businessdate >= #{condition.begindate} and <![CDATA[ t.businessdate <= #{condition.enddate}]]>
            and t.status in('3','4')
		)
    </sql>
    <select id="showStorageRevolutionDetails" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        select z.* from <include refid="StorageRevolutionDetails_sql"/> z
        <trim prefix="where" prefixOverrides="and|or">
            <if test="condition.col == 'goodsid'">
                and z.goodsid = #{condition.value}
            </if>
            <if test="condition.col == 'brandid'">
                and z.brandid = #{condition.value}
            </if>
            <if test="condition.col == 'brandept'">
                and z.branddept = #{condition.value}
            </if>
            <if test="condition.col == 'supplierid'">
                and z.supplierid = #{condition.value}
            </if>
        </trim>
        <include refid="common.Page_limit"/>
    </select>

    <select id="showStorageRevolutionDetailsCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
    select count(1) from (
        select z.* from <include refid="StorageRevolutionDetails_sql"/> z
        <trim prefix="where" prefixOverrides="and|or">
            <if test="condition.col == 'goodsid'">
                and z.goodsid = #{condition.value}
            </if>
            <if test="condition.col == 'brandid'">
                and z.brandid = #{condition.value}
            </if>
            <if test="condition.col == 'brandept'">
                and z.branddept = #{condition.value}
            </if>
            <if test="condition.col == 'supplierid'">
                and z.supplierid = #{condition.value}
            </if>
        </trim>
        ) z
    </select>

    <sql id="StorageAvgAmountData_sql">
        (
        SELECT z.businessdate,z.goodsid, z.brandid, z.branddept, z.supplierid,
        sum(z.existingnum) as existingnum,SUM(z.storageamount) AS storageamount, SUM(z.checkstorageamount) AS checkstorageamount
        FROM
        (
        select t.businessdate,t.goodsid,t.brandid,t1.deptid as branddept,t.supplier as supplierid,
        sum(t.existingnum) as existingnum,sum(t.amount) as storageamount,0 as checkstorageamount
        from t_report_storage_bak t
        inner JOIN t_base_goods_info t1 on t.goodsid=t1.id
        <trim prefix="where" prefixOverrides="and|or">
            <if test="condition.businessyearmonth != null">
                <![CDATA[ and t.businessdate like concat(#{condition.businessyearmonth},'%') ]]>
            </if>
            <if test="condition.goodsid != null">
                and t.goodsid = #{condition.goodsid}
            </if>
            <if test="condition.brandid != null">
                and t.brandid = #{condition.brandid}
            </if>
			<if test="condition.branddept != null">
				and t1.deptid like concat(#{condition.branddept},'%')
			</if>
			<if test="condition.salesdeptid != null">
				and t1.deptid like concat(#{condition.salesdeptid},'%')
			</if>
            <if test="condition.supplierid != null">
                and t1.defaultsupplier = #{condition.supplierid}
            </if>
            <if test="condition.businessdate1 != null">
                and t.businessdate >= #{condition.businessdate1}
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t.businessdate <=#{condition.businessdate2}]]>
            </if>
        </trim>
        <if test="condition.groupcolsAll == null">
            group by ${condition.groupcols},businessdate
        </if>
        <if test="condition.groupcolsAll != null">
            group by businessdate
        </if>
        UNION ALL
        SELECT t.businessdate,t.goodsid,t.brandid, t.deptid as branddept,t.supplierid,
        0 as existingnum,0 as storageamount,SUM(t.endamount) as checkstorageamount
        from t_report_storage_day t
        <trim prefix="where" prefixOverrides="and|or">
            <if test="condition.businessyearmonth != null">
				<![CDATA[ and t.businessdate like concat(#{condition.businessyearmonth},'%') ]]>
            </if>
            <if test="condition.goodsid != null">
                and t.goodsid = #{condition.goodsid}
            </if>
            <if test="condition.brandid != null">
                and t.brandid = #{condition.brandid}
            </if>
            <if test="condition.branddept != null">
				and t.deptid like concat(#{condition.branddept},'%')
            </if>
			<if test="condition.salesdeptid != null">
				and t.deptid like concat(#{condition.salesdeptid},'%')
			</if>
            <if test="condition.supplierid != null">
                and t.supplierid = #{condition.supplierid}
            </if>
            <if test="condition.businessdate1 != null">
                and t.businessdate >= #{condition.businessdate1}
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t.businessdate <=#{condition.businessdate2}]]>
            </if>
            <if test="1 == 1">
                and t.isdiscount = '0'
            </if>
        </trim>
        <if test="condition.groupcolsAll == null">
            group by ${condition.groupcols},businessdate
        </if>
        <if test="condition.groupcolsAll != null">
            group by businessdate
        </if>
        )z
        <if test="condition.groupcolsAll == null">
            group by ${condition.groupcols},businessdate
        </if>
        <if test="condition.groupcolsAll != null">
            group by businessdate
        </if>
        )
    </sql>
    <select id="showStorageAvgAmountData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        select z.goodsid,z.existingnum,z.brandid,z.branddept,z.supplierid,avg(z.storageamount) as storageamount,avg(z.checkstorageamount) as checkstorageamount
        from <include refid="StorageAvgAmountData_sql"/> z
        <if test="condition.groupcolsAll == null">
            group by ${condition.groupcols}
        </if>
        <if test="condition.isflag == null and condition.groupcolsAll == null">
            <include refid="common.Page_limit"/>
        </if>
    </select>
    <select id="showStorageAvgAmountCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
        select count(1) from (
            select z.goodsid,z.existingnum,z.brandid,z.branddept,z.supplierid,avg(z.storageamount) as storageamount,avg(z.checkstorageamount) as checkstorageamount
            from <include refid="StorageAvgAmountData_sql"/> z
            group by ${condition.groupcols}
        )y
    </select>
	<insert id="addCapitalOccupyReport" parameterType="java.lang.String">
		insert into t_report_capital_occupy(businessdate,supplierid,prepayamount,storageamount,receivableamount,advanceamount,payableamount,totalamount,addtime)
        select '${date}', z.supplierid,sum(z.prepayamount) as prepayamount,sum(z.storageamount) as storageamount,sum(z.receivableamount) as receivableamount,
        sum(z.advanceamount) as advanceamount,sum(z.payableamount) as payableamount,sum(z.totalamount) as totalamount,now()
        from (
            select t.id as supplierid,t.amount as  prepayamount,0 as storageamount,0 as receivableamount,0 as advanceamount, 0 as payableamount,t.amount as  totalamount
            from t_account_supplier_capital t
            UNION ALL
            select IF(t1.defaultsupplier is null,'',t1.defaultsupplier) as supplierid,0 as prepayamount,t.existingnum*IF(t1.costaccountprice>0,t1.costaccountprice,t1.newbuyprice) as storageamount,0 as receivableamount, 0 as advanceamount,0 as payableamount,t.existingnum*IF(t1.costaccountprice>0,t1.costaccountprice,t1.newbuyprice) as totalamount
            from t_storage_summary t
            LEFT JOIN t_base_goods_info t1 on t.goodsid=t1.id
            UNION ALL
            select t.supplierid,0 as prepayamount,0 as storageamount,0 as receivableamount, t.actingmatamount as advanceamount,0 as payableamount,t.actingmatamount as totalamount
            from t_js_matcostsinput t where t.iswriteoff='0' and t.billtype='1'
            UNION ALL
            select t.supplierid,0 as prepayamount,0 as storageamount,0 as receivableamount, -t.remainderamount as advanceamount,0 as payableamount,-t.remainderamount as totalamount
            from t_js_matcostsinput t where t.iswriteoff!='1' and t.billtype='2'
            UNION ALL
            select IF(t1.supplierid is null,'',t1.supplierid) as supplierid,t2.prepayamount,t2.storageamount,t2.receivableamount,t2.advanceamount,t2.payableamount,t2.totalamount
            from (
                select t1.brandid,0 as prepayamount,0 as storageamount,t1.taxamount as receivableamount,0 as advanceamount,0 as payableamount,t1.taxamount as totalamount
                from t_storage_saleout t
                RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
                where t1.iswriteoff='0' and (t.status='3' or t.status='4')
                UNION ALL
                select t1.brandid, 0 as prepayamount,0 as storageamount,-t1.taxamount as receivableamount,0 as advanceamount,0 as payableamount,-t1.taxamount as totalamount
                from t_storage_salereject_enter t
                RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
                where t1.iswriteoff='0' and t.ischeck='1' and (t.status='3' or t.status='4')
                UNION ALL
                SELECT t.brandid, 0 as prepayamount,0 as storageamount,t.amount as receivableamount,0 as advanceamount,0 as payableamount,t.amount as totalamount
                from t_account_customer_push_balance t
                where t.iswriteoff='0'  and (t.status='3' or t.status='4')
            ) t2
            LEFT JOIN t_base_goods_brand t1 on t2.brandid=t1.id
            UNION ALL
            select t.supplierid,0 as prepayamount,0 as storageamount,0 as receivableamount,0 as advanceamount,t1.taxamount as payableamount,-t1.taxamount as totalamount
            from t_purchase_arrivalorder t
            RIGHT JOIN t_purchase_arrivalorder_detail t1 on t.id=t1.orderid
            where  t.status in('3','4')
            UNION ALL
            select t.supplierid, 0 as prepayamount,0 as storageamount,0 as receivableamount,0 as advanceamount,-t1.taxamount as payableamount,t1.taxamount as totalamount
            from t_storage_purchasereject_out t
            RIGHT JOIN t_storage_purchasereject_out_detail t1 on t.id=t1.orderid
            where t.status ='4'
            UNION ALL
            select t.supplierid, 0 as prepayamount,0 as storageamount,0 as receivableamount,0 as advanceamount,t.amount as payableamount,-t.amount as totalamount
            FROM t_account_begin_due t
            where (t.status ='4' or t.status ='3')
            UNION ALL
            select t.supplierid, 0 as prepayamount,0 as storageamount,0 as receivableamount,0 as advanceamount,-t.invoiceamount as payableamount,t.invoiceamount as totalamount
            FROM t_account_purchase_invoice t
            where t.iswriteoff='1' and (t. STATUS = '3' OR t. STATUS = '4')
            UNION ALL
            select t.supplierid, 0 as prepayamount,0 as storageamount,0 as receivableamount,0 as advanceamount,t.amount as payableamount,-t.amount as totalamount
            from t_account_purchase_invoice_push t
            where t.status='3' or t.status='4'
        ) z
        GROUP BY z.supplierid
	</insert>

	<sql id="showCapitalOccupyListData_sql">
		(
		select x.* from (
			select z.supplierid,IF(y.buydeptid is null,'',y.buydeptid) as branddept,sum(z.prepayamount) as prepayamount,sum(z.storageamount) as storageamount,sum(z.receivableamount) as receivableamount,
			sum(z.advanceamount) as advanceamount,sum(z.payableamount) as payableamount,sum(z.totalamount) as totalamount
			from (
				select t.id as supplierid,t.amount as  prepayamount,0 as storageamount,0 as receivableamount,0 as advanceamount, 0 as payableamount,t.amount as  totalamount
				from t_account_supplier_capital t
				UNION ALL
				select IF(t1.defaultsupplier is null,'',t1.defaultsupplier) as supplierid,0 as prepayamount,t.existingnum*IF(t1.costaccountprice>0,t1.costaccountprice,t1.newbuyprice) as storageamount,0 as receivableamount, 0 as advanceamount,0 as payableamount,t.existingnum*IF(t1.costaccountprice>0,t1.costaccountprice,t1.newbuyprice) as totalamount
				from t_storage_summary t
				LEFT JOIN t_base_goods_info t1 on t.goodsid=t1.id
                UNION ALL
                select t.supplierid,0 as prepayamount,0 as storageamount,0 as receivableamount, t.actingmatamount as advanceamount,0 as payableamount,t.actingmatamount as totalamount
                from t_js_matcostsinput t where t.iswriteoff='0' and t.billtype='1'
                UNION ALL
                select t.supplierid,0 as prepayamount,0 as storageamount,0 as receivableamount, -t.remainderamount as advanceamount,0 as payableamount,-t.remainderamount as totalamount
                from t_js_matcostsinput t where t.iswriteoff!='1' and t.billtype='2'
				UNION ALL
				select IF(t1.supplierid is null,'',t1.supplierid) as supplierid,t2.prepayamount,t2.storageamount,t2.receivableamount,t2.advanceamount,t2.payableamount,t2.totalamount
				from (
					select t1.brandid,0 as prepayamount,0 as storageamount,t1.taxamount as receivableamount,0 as advanceamount,0 as payableamount,t1.taxamount as totalamount
					from t_storage_saleout t
					RIGHT JOIN t_storage_saleout_detail t1 on t.id=t1.saleoutid
					where t1.iswriteoff='0' and (t.status='3' or t.status='4')
					UNION ALL
					select t1.brandid, 0 as prepayamount,0 as storageamount,-t1.taxamount as receivableamount,0 as advanceamount,0 as payableamount,-t1.taxamount as totalamount
					from t_storage_salereject_enter t
					RIGHT JOIN t_storage_salereject_enter_detail t1 on t.id=t1.salerejectid
					where t1.iswriteoff='0' and t.ischeck='1' and (t.status='3' or t.status='4')
					UNION ALL
					SELECT t.brandid, 0 as prepayamount,0 as storageamount,t.amount as receivableamount,0 as advanceamount,0 as payableamount,t.amount as totalamount
					from t_account_customer_push_balance t
					where t.iswriteoff='0'  and (t.status='3' or t.status='4')
				) t2
				LEFT JOIN t_base_goods_brand t1 on t2.brandid=t1.id
				UNION ALL
				select t.supplierid,0 as prepayamount,0 as storageamount,0 as receivableamount,0 as advanceamount,t1.taxamount as payableamount,-t1.taxamount as totalamount
				from t_purchase_arrivalorder t
				RIGHT JOIN t_purchase_arrivalorder_detail t1 on t.id=t1.orderid
				where  t.status in('2','3','4')
				UNION ALL
				select t.supplierid, 0 as prepayamount,0 as storageamount,0 as receivableamount,0 as advanceamount,-t1.taxamount as payableamount,t1.taxamount as totalamount
				from t_storage_purchasereject_out t
				RIGHT JOIN t_storage_purchasereject_out_detail t1 on t.id=t1.orderid
				where (t.status ='4' or t.status ='3')
                UNION ALL
                select t.supplierid, 0 as prepayamount,0 as storageamount,0 as receivableamount,0 as advanceamount,t.amount as payableamount,-t.amount as totalamount
                FROM t_account_begin_due t
                where (t.status ='4' or t.status ='3')
                UNION ALL
                select t.supplierid, 0 as prepayamount,0 as storageamount,0 as receivableamount,0 as advanceamount,-t.invoiceamount as payableamount,t.invoiceamount as totalamount
                FROM t_account_purchase_invoice t
                where t.iswriteoff='1' and (t. STATUS = '3' OR t. STATUS = '4')
                UNION ALL
                select t.supplierid, 0 as prepayamount,0 as storageamount,0 as receivableamount,0 as advanceamount,t.amount as payableamount,-t.amount as totalamount
                from t_account_purchase_invoice_push t
                where t.status='3' or t.status='4'
			) z
			LEFT JOIN t_base_buy_supplier y on z.supplierid=y.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.branddept != null">
					and y.buydeptid like CONCAT(#{condition.branddept},'%')
				</if>
				<if test="condition.supplierid != null">
					and z.supplierid = #{condition.supplierid}
				</if>
			</trim>
			<if test="condition.groupcolsAll == null">
				group by ${condition.groupcols}
			</if>
		) x
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
		</trim>
		)
	</sql>
	<select id="showCapitalOccupyListData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.CapitalOccupyReport">
		SELECT z.* from <include refid="showCapitalOccupyListData_sql"/> z
	</select>
	<select id="showCapitalOccupyListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from <include refid="showCapitalOccupyListData_sql"/> z
	</select>
	<select id="showCapitalOccupyAvgListData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.CapitalOccupyReport">
		select * 
		from (
			select t.supplierid,IF(y.buydeptid is null,'',y.buydeptid) as branddept,
			AVG(t.prepayamount) as prepayamount,AVG(t.storageamount) as storageamount,AVG(t.receivableamount) as receivableamount,
			AVG(t.advanceamount) AS advanceamount,AVG(t.payableamount) AS payableamount,AVG(t.totalamount) as totalamount
			from t_report_capital_occupy t
			LEFT JOIN t_base_buy_supplier y on t.supplierid=y.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate1 != null">
				 	and t.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
			  	</if>
			  	<if test="condition.businessdate2 != null">
				 	<![CDATA[and t.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
			  	</if>
			  	<if test="condition.branddept != null">
				 	and y.buydeptid like CONCAT(#{condition.branddept},'%')
			  	</if>
			  	<if test="condition.supplierid != null">
				 	and t.supplierid = #{condition.supplierid}
			  	</if>
		    </trim>
			group by t.supplierid
		) x
		<trim prefix="where" prefixOverrides="and|or">
		<include refid="common.Page_dataSql"/>
		</trim>
		<if test="condition.isflag == null">
	 		<include refid="common.Page_limit"/>
	 	</if>
	</select>
	<select id="showCapitalOccupyAvgListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1)  
		from (
			select t.supplierid,IF(y.buydeptid is null,'',y.buydeptid) as branddept,
			AVG(t.prepayamount) as prepayamount,AVG(t.storageamount) as storageamount,AVG(t.receivableamount) as receivableamount,
			AVG(t.advanceamount) AS advanceamount,AVG(t.payableamount) AS payableamount,AVG(t.totalamount) as totalamount
			from t_report_capital_occupy t
			LEFT JOIN t_base_buy_supplier y on t.supplierid=y.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate1 != null">
				 	and t.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
			  	</if>
			  	<if test="condition.businessdate2 != null">
				 	<![CDATA[and t.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
			  	</if>
			  	<if test="condition.branddept != null">
				 	and y.buydeptid like CONCAT(#{condition.branddept},'%')
			  	</if>
			  	<if test="condition.supplierid != null">
				 	and t.supplierid = #{condition.supplierid}
			  	</if>
		    </trim>
			group by t.supplierid
		) x
		<trim prefix="where" prefixOverrides="and|or">
		<include refid="common.Page_dataSql"/>
		</trim>
	</select>
	<select id="showCapitalOccupyAvgSumData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.CapitalOccupyReport">
		select sum(x.prepayamount) as prepayamount,sum(x.storageamount) as storageamount,sum(x.receivableamount) as receivableamount,
			sum(x.advanceamount) AS advanceamount,sum(x.payableamount) AS payableamount,sum(x.totalamount) as totalamount
		from (
			select t.supplierid,IF(y.buydeptid is null,'',y.buydeptid) as branddept,
			AVG(t.prepayamount) as prepayamount,AVG(t.storageamount) as storageamount,AVG(t.receivableamount) as receivableamount,
			AVG(t.advanceamount) AS advanceamount,AVG(t.payableamount) AS payableamount,AVG(t.totalamount) as totalamount
			from t_report_capital_occupy t
			LEFT JOIN t_base_buy_supplier y on t.supplierid=y.id
			<trim prefix="where" prefixOverrides="and|or">
				<if test="condition.businessdate1 != null">
				 	and t.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
			  	</if>
			  	<if test="condition.businessdate2 != null">
				 	<![CDATA[and t.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
			  	</if>
			  	<if test="condition.businessyearmonth != null">
				 	<![CDATA[and t.businessdate like '${condition.businessyearmonth}%']]>
			  	</if>
				<if test="condition.branddept != null">
					and y.buydeptid like CONCAT(#{condition.branddept},'%')
				</if>
				<if test="condition.salesdeptid != null">
					and y.buydeptid like CONCAT(#{condition.salesdeptid},'%')
				</if>
			  	<if test="condition.supplierid != null">
				 	and t.supplierid = #{condition.supplierid}
			  	</if>
		    </trim>
			group by t.supplierid
		) x
		<trim prefix="where" prefixOverrides="and|or">
		<include refid="common.Page_dataSql"/>
		</trim>
	</select>
	<select id="showStorageAmountReportListData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">	
        <![CDATA[
		select z.storageid,z.goodsid,z.goodsname,z.brandid,z.supplierid,z.branddept,z.price,
		sum(z.existingnum) as existingnum,sum(z.existingamount) as existingamount,CONCAT(sum(z.existingauxint),z.auxunitname,sum(z.existingauxnum),z.unitname) as auxexistingdetail,
		sum(z.usablenum) as usablenum,sum(z.usableamount) as usableamount,CONCAT(if(sum(z.usablenum)<0,'-',''),ABS(sum(z.usableauxint)),z.auxunitname,ABS(sum(z.usableauxnum)),z.unitname) as auxusabledetail,
		z.auxunitname,z.unitname,sum(z.existingnum)+sum(z.transitnum) as totalstoragenum,sum(z.existingamount) + sum(z.transitamount) as totalstorageamount,
		sum(z.existingauxint) + sum(z.transitauxint) as totalstorageauxint,sum(z.existingauxnum)+sum(z.transitauxnum) as totalstorageauxnum
		from (
		select t.storageid,t.goodsid,g.name as goodsname,t.brandid,g.defaultsupplier as supplierid,b.deptid as branddept,IF(g.costaccountprice>0,g.costaccountprice,g.newbuyprice) as price,
		t.existingnum,t.existingnum*IF(g.costaccountprice>0,g.costaccountprice,g.newbuyprice) as existingamount,floor(t.existingnum/m.rate) as existingauxint,floor(mod(t.existingnum,m.rate)) as existingauxnum,
		t.usablenum,t.usablenum*IF(g.costaccountprice>0,g.costaccountprice,g.newbuyprice) as usableamount,if(t.usablenum<0,ceil(t.usablenum/m.rate),floor(t.usablenum/m.rate)) as usableauxint,if(t.usablenum<0,ceil(mod(t.usablenum,m.rate)),floor(mod(t.usablenum,m.rate))) as usableauxnum,t.unitid,t.unitname,t.auxunitid,t.auxunitname,
		t.transitnum,t.transitnum*IF(g.costaccountprice>0,g.costaccountprice,g.newbuyprice) as transitamount,floor(t.transitnum/m.rate) as transitauxint,floor(mod(t.transitnum,m.rate)) as transitauxnum
		from t_storage_summary t
		LEFT JOIN t_base_goods_info g on t.goodsid=g.id
		LEFT JOIN t_base_goods_info_meteringunit m on t.goodsid=m.goodsid and m.isdefault='1'
		LEFT JOIN t_base_goods_brand b on t.brandid=b.id
        ]]>
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_querySql"/>
	      	<include refid="common.Page_dataSql"/>
			<if test="condition.branddept != null">
			 	and b.deptid like CONCAT(#{condition.branddept},'%')
		  	</if>
		  	<if test="condition.supplierid != null">
			 	and b.supplierid = #{condition.supplierid}
		  	</if>
		  	<if test="condition.goodsid != null">
		  		and FIND_IN_SET(t.goodsid,#{condition.goodsid})
		  	</if>
		  	<if test="condition.goodssort != null">
		  		and FIND_IN_SET(g.defaultsort,#{condition.goodssort})
		  	</if>
		  	<if test="condition.storageid != null">
			 	and t.storageid =#{condition.storageid}
		  	</if>
		  	<if test="condition.brandid != null">
		  		and FIND_IN_SET(t.brandid,#{condition.brandid})
		  	</if>				
			<if test="condition.isSendsStorage == 1">
				and t.issendstorage='1'
			</if>
	    </trim>
		) z
		<if test="condition.groupcolsAll == null">
			group by ${condition.groupcols}
		 	<choose>
		 		<when test="condition.isflag==null">
		 			<include refid="common.Page_limit"/>
		 		</when>
		 		<when test="condition.isflag=='showPageOrder'">
		 			<include refid="common.Page_OrderOnly"/>		 			
		 		</when>
		 	</choose>
		</if>
	</select>
	<select id="showStorageAmountReportListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from (
		select z.storageid,z.goodsid,z.goodsname,z.brandid,z.supplierid,z.branddept,z.price,
		sum(z.existingnum) as existingnum,sum(z.existingamount) as existingamount,CONCAT(sum(z.existingauxint),z.auxunitname,sum(z.existingauxnum),z.unitname) as auxexistingdetail,
		sum(z.usablenum) as usablenum,sum(z.usableamount) as usableamount,CONCAT(sum(z.usableauxint),z.auxunitname,sum(z.usableauxnum),z.unitname) as auxusabledetail
		from (
		select t.storageid,t.goodsid,g.name as goodsname,t.brandid,g.defaultsupplier as supplierid,b.deptid as branddept,IF(g.costaccountprice>0,g.costaccountprice,g.newbuyprice) as price,
		t.existingnum,t.existingnum*IF(g.costaccountprice>0,g.costaccountprice,g.newbuyprice) as existingamount,floor(t.existingnum/m.rate) as existingauxint,floor(mod(t.existingnum,m.rate)) as existingauxnum,
		t.usablenum,t.usablenum*IF(g.costaccountprice>0,g.costaccountprice,g.newbuyprice) as usableamount,floor(t.usablenum/m.rate) as usableauxint,floor(mod(t.usablenum,m.rate)) as usableauxnum,t.unitid,t.unitname,t.auxunitid,t.auxunitname
		from t_storage_summary t
		LEFT JOIN t_base_goods_info g on t.goodsid=g.id
		LEFT JOIN t_base_goods_info_meteringunit m on t.goodsid=m.goodsid and m.isdefault='1'
		LEFT JOIN t_base_goods_brand b on t.brandid=b.id
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_querySql"/>
	      	<include refid="common.Page_dataSql"/>
			<if test="condition.branddept != null">
			 	and b.deptid like CONCAT(#{condition.branddept},'%')
		  	</if>
		  	<if test="condition.supplierid != null">
			 	and b.supplierid = #{condition.supplierid}
		  	</if>
		  	<if test="condition.goodsid != null">
			 	and FIND_IN_SET(t.goodsid,#{condition.goodsid})
		  	</if>
		  	<if test="condition.goodssort != null">
		  		and FIND_IN_SET(g.defaultsort,#{condition.goodssort})
		  	</if>
		  	<if test="condition.storageid != null">
			 	and t.storageid =#{condition.storageid}
		  	</if>
		  	<if test="condition.brandid != null">
		  		and FIND_IN_SET(t.brandid,#{condition.brandid})
		  	</if>					
			<if test="condition.notContainCCStorage == 1 and condition.CCStorageid != null">
				and not FIND_IN_SET(t.storageid,#{condition.CCStorageid})
			</if>
	    </trim>
		) z
		<if test="condition.groupcolsAll == null">
			group by ${condition.groupcols}
		</if>
		) x
	</select>
	<sql id="adjustmentReport_sql">
		(
			select * from (
				select t.billtype, t.storageid,t1.goodsid,g.brand as brandid,g.barcode,g.spell,
				t1.price,if(t.billtype='1',t1.adjustnum,-t1.adjustnum) as adjustnum,
				if(t.billtype='1',t1.auxadjustnum,-t1.auxadjustnum) as auxadjustnum,
				if(t.billtype='1',t1.auxadjustremainder,-t1.auxadjustremainder) as auxadjustremainder,
				if(t.billtype='1',t1.amount,-t1.amount) as amount,
				if(t.billtype='1',t1.amount,-t1.amount) as costamount
		  		from t_storage_adjustments t
				RIGHT JOIN t_storage_adjustments_detail t1 on t.id=t1.adjustmentsid
				left JOIN t_base_goods_info g on t1.goodsid=g.id
				<trim prefix="where" prefixOverrides="and|or" >
			      <include refid="common.Page_dataSql"/>
		  		  <if test="condition.businessdate1 != null">
					 and t.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
				  </if>
				  <if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= STR_TO_DATE(#{condition.businessdate2},'%Y-%m-%d')]]>
				  </if>
			      <if test="condition.storageid != null" >
			         and t.storageid = #{condition.storageid}
			      </if>
			      <if test="condition.brandid != null" >
			          and FIND_IN_SET(g.brand,#{condition.brandid})
			      </if>
			      <if test="condition.goodsid != null" >
			         and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			      </if>
			      <if test="1==1" >
			         and (t.status ='3' or t.status='4')
			      </if>
			    </trim>
			    UNION ALL
			    select '3' as billtype,t.storageid,t1.goodsid,t1.brandid,g.barcode,g.spell,
			    t1.taxprice as price, -t1.unitnum as adjustnum,-t1.auxnum as auxadjustnum,-t1.auxremainder as auxadjustremainder,-t1.taxamount as amount,-t1.costprice*t1.unitnum as costamount
			    from t_storage_other_out t
			    RIGHT JOIN t_storage_other_out_detail t1 on t.id = t1.billid
			    left join t_base_goods_info g on t1.goodsid = g.id
			    <trim prefix="where" prefixOverrides="and|or" >
			      <include refid="common.Page_dataSql"/>
		  		  <if test="condition.businessdate1 != null">
					 and t.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
				  </if>
				  <if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= STR_TO_DATE(#{condition.businessdate2},'%Y-%m-%d')]]>
				  </if>
			      <if test="condition.storageid != null" >
			         and t.storageid = #{condition.storageid}
			      </if>
			      <if test="condition.brandid != null" >
			          and FIND_IN_SET(g.brand,#{condition.brandid})
			      </if>
			      <if test="condition.goodsid != null" >
			         and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			      </if>
			      <if test="1==1" >
			         and (t.status ='3' or t.status='4')
			      </if>
			    </trim>
			    UNION ALL
			    select '4' as billtype,t.storageid,t1.goodsid,t1.brandid,g.barcode,g.spell,
			    t1.taxprice as price, t1.unitnum as adjustnum,t1.auxnum as auxadjustnum,t1.auxremainder as auxadjustremainder,t1.taxamount as amount,t1.costprice*t1.unitnum as costamount
			    from t_storage_other_enter t
			    RIGHT JOIN t_storage_other_enter_detail t1 on t.id = t1.billid
			    left join t_base_goods_info g on t1.goodsid = g.id
			    <trim prefix="where" prefixOverrides="and|or" >
			      <include refid="common.Page_dataSql"/>
		  		  <if test="condition.businessdate1 != null">
					 and t.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
				  </if>
				  <if test="condition.businessdate2 != null">
					 <![CDATA[and t.businessdate <= STR_TO_DATE(#{condition.businessdate2},'%Y-%m-%d')]]>
				  </if>
			      <if test="condition.storageid != null" >
			         and t.storageid = #{condition.storageid}
			      </if>
			      <if test="condition.brandid != null" >
			          and FIND_IN_SET(g.brand,#{condition.brandid})
			      </if>
			      <if test="condition.goodsid != null" >
			         and FIND_IN_SET(t1.goodsid,#{condition.goodsid})
			      </if>
			      <if test="1==1" >
			         and (t.status ='3' or t.status='4')
			      </if>
			    </trim>
			) z
			<trim prefix="where" prefixOverrides="and|or" >
	  		  <if test="condition.billtype != null" >
				  and FIND_IN_SET(z.billtype,#{condition.billtype})
		      </if>
	  		</trim>
		)
	</sql>
	<select id="getAdjustmentReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
  		select z.storageid,z.goodsid,z.brandid,z.barcode,z.spell,z.price,sum(z.adjustnum) adjustnum,sum(z.auxadjustnum) auxadjustnum,sum(z.auxadjustremainder) auxadjustremainder,sum(z.amount) as amount,sum(z.costamount) as costamount 
  		from <include refid="adjustmentReport_sql"/> z
	    <if test="condition.groupcolsAll == null">
			group by ${condition.groupcols}
			<if test="condition.isflag == null">
		 		<include refid="common.Page_limit"/>
		 	</if>
		</if>
  	</select>
  	<select id="getAdjustmentReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  		select count(1) from (
  		select z.storageid,z.goodsid,z.brandid,z.barcode,z.spell,z.price,sum(z.adjustnum) adjustnum,sum(z.auxadjustnum) auxadjustnum,sum(z.auxadjustremainder) auxadjustremainder,sum(z.amount) as amount ,sum(z.costamount) as costamount 
  		from <include refid="adjustmentReport_sql"/> z
  		<trim prefix="where" prefixOverrides="and|or" >
  		  <if test="condition.billtype != null" >
			  and FIND_IN_SET(z.billtype,#{condition.billtype})
	      </if>
  		</trim>
	    <if test="condition.groupcolsAll == null">
			group by ${condition.groupcols}
	    </if>) y
	</select>
    <select id="getCustomerCarNumReportList" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
        SELECT lineid,customerid,COUNT(t.customerid) as carnum from t_storage_logistics_delivery_customer t
        LEFT JOIN t_storage_logistics_delivery t1 on t.deliveryid = t1.id
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1 == 1">
                and t1.status = '4'
            </if>
            <if test="condition.lineid != null" >
                and t1.lineid = #{condition.lineid}
            </if>
            <if test="condition.customerid != null" >
                and t.customerid = #{condition.customerid}
            </if>
        </trim>
        GROUP BY t1.lineid,t.customerid
        <if test="condition.isflag == null">
            <include refid="common.Page_limit"/>
        </if>
    </select>
    <select id="getCustomerCarNumReportCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
        SELECT count(1) from (
            SELECT lineid,customerid,COUNT(t.customerid) as carnum from t_storage_logistics_delivery_customer t
            LEFT JOIN t_storage_logistics_delivery t1 on t.deliveryid = t1.id
            <trim prefix="where" prefixOverrides="and|or">
                <if test="1 == 1">
                    and t1.status = '4'
                </if>
                <if test="condition.lineid != null" >
                    and t1.lineid = #{condition.lineid}
                </if>
                <if test="condition.customerid != null" >
                    and t.customerid = #{condition.customerid}
                </if>
            </trim>
            GROUP BY t1.lineid,t.customerid
        )z
    </select>
    <select id="getStorageInitDate" resultType="java.lang.String">
    	select DATE_FORMAT(min(t.addtime), '%Y-%m-%d') as initdate
		from t_storage_summary_log t
		where t.billmodel='stockinit' 
    </select>

	<sql id="showStorageRecSendList_sql">
		(
		select z.storageid,z.goodsid,y.rate as boxnum,g.brand as brandid,g.defaultsort as goodssort,z.unitname,z.auxunitname,
		sum(z.beginnum) as beginnum,sum(z.beginnum)/y.rate as auxbeginnum,
		CONCAT(floor(sum(z.beginnum)/y.rate),z.auxunitname,MOD(sum(z.beginnum),y.rate),z.unitname) as beginnumdetail,
		sum(z.receivenum) as receivenum,sum(z.receivenum)/y.rate as auxreceivenum,
		CONCAT(floor(sum(z.receivenum)/y.rate),z.auxunitname,MOD(sum(z.receivenum),y.rate),z.unitname) as receivenumdetail,
		sum(z.sendnum) as sendnum,sum(z.sendnum)/y.rate as auxsendnum,
		CONCAT(floor(sum(z.sendnum)/y.rate),z.auxunitname,MOD(sum(z.sendnum),y.rate),z.unitname) as sendnumdetail,
		sum(z.beginnum+z.receivenum-z.sendnum) as endnum,sum(z.beginnum+z.receivenum-z.sendnum)/y.rate as auxendnum,
		CONCAT(floor(sum(z.beginnum+z.receivenum-z.sendnum)/y.rate),z.auxunitname,MOD(sum(z.beginnum+z.receivenum-z.sendnum),y.rate),z.unitname) as endnumdetail,
		sum(z.beginnum)*g.newstorageprice as beginamount,
		sum(z.receivenum)*g.newstorageprice as receiveamount,
		sum(z.sendnum)*g.newstorageprice as sendamount,
		sum(z.beginnum+z.receivenum-z.sendnum)*g.newstorageprice as endamount
		from (
		<choose>
			<when test="condition.initdate !=null">
				select t.storageid,t.goodsid,t.unitid,t.unitname,t.auxunitid,t.auxunitname,(IFNULL(t.receivenum,0)-IFNULL(t.sendnum,0)) as beginnum,0 as receivenum,0 as sendnum
				from t_storage_summary_log t
				<trim prefix="where" prefixOverrides="and|or">
					<if test="1 == 1">
						<![CDATA[and t.billmodel='stockinit' and t.addtime>#{condition.initdate} and t.addtime<DATE_ADD(STR_TO_DATE(#{condition.initdate}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
					</if>
					<if test="condition.storageid != null" >
						and t.storageid = #{condition.storageid}
					</if>
					<if test="condition.goodsid != null" >
						and FIND_IN_SET(t.goodsid,#{condition.goodsid})
					</if>
				</trim>
			</when>
			<otherwise>
				select t.storageid,t.goodsid,t.unitid,t.unitname,t.auxunitid,t.auxunitname,IFNULL(t.existingnum,0) as beginnum,0 as receivenum,0 as sendnum
				from t_report_storage_bak t
				<trim prefix="where" prefixOverrides="and|or">
					<if test="1 == 1">
						<![CDATA[and t.businessdate<STR_TO_DATE(#{condition.queryinitdate2}, '%Y-%m-%d') and t.businessdate>STR_TO_DATE(#{condition.queryinitdate1},'%Y-%m-%d')]]>
					</if>
					<if test="condition.storageid != null" >
						and t.storageid = #{condition.storageid}
					</if>
					<if test="condition.goodsid != null" >
						and FIND_IN_SET(t.goodsid,#{condition.goodsid})
					</if>
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		select t.storageid,t.goodsid,t.unitid,t.unitname,t.auxunitid,t.auxunitname,0 as beginnum,IFNULL(t.receivenum,0) as receivenum,IFNULL(t.sendnum,0) as sendnum
		from t_storage_summary_log t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.initdate !=null">
				<![CDATA[and ((t.billmodel='stockinit' and  t.addtime>DATE_ADD(STR_TO_DATE(#{condition.initdate}, '%Y-%m-%d'),INTERVAL 1 DAY)) or t.billmodel<>'stockinit' )]]>
			</if>
			<if test="condition.businessdate1 != null">
				and t.addtime >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.addtime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
			</if>
			<if test="condition.storageid != null" >
				and t.storageid = #{condition.storageid}
			</if>
			<if test="condition.goodsid != null" >
				and FIND_IN_SET(t.goodsid,#{condition.goodsid})
			</if>
		</trim>
		) z
		LEFT JOIN t_base_goods_info_meteringunit y on z.goodsid=y.goodsid and y.isdefault = '1'
		LEFT JOIN t_base_goods_info g on z.goodsid=g.id
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_dataSql"/>
			<if test="condition.brandid != null" >
				and FIND_IN_SET(g.brand,#{condition.brandid})
			</if>
			<if test="condition.goodssort != null" >
				and g.defaultsort like '${condition.goodssort}%'
			</if>
			<if test="condition.supplierid != null" >
				and FIND_IN_SET(g.defaultsupplier,#{condition.supplierid})
			</if>
		</trim>
		GROUP BY z.storageid,z.goodsid
		<choose>
			<when test="condition.isenterorout == 1">
				having sum(z.receivenum)>0 or sum(z.sendnum)>0
			</when>
			<when test="condition.isenterorout == 0">
				having sum(z.receivenum)=0 and sum(z.sendnum)=0
			</when>
		</choose>
		)
	</sql>
    <select id="showStorageRecSendList" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
		SELECT x.* from <include refid="showStorageRecSendList_sql"/> x
		<if test="condition.isflag == null">
            <include refid="common.Page_limit"/>
        </if>
    </select>
    <select id="showStorageRecSendCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
    	select count(1) from <include refid="showStorageRecSendList_sql"/> x
    </select>
    <select id="showStorageRecSendSum" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
    	select sum(x.beginnum) as beginnum,sum(x.auxbeginnum) as auxbeginnum,
    	sum(x.receivenum) as receivenum,sum(x.auxreceivenum) as auxreceivenum,
    	sum(x.sendnum) as sendnum,sum(x.auxsendnum) as auxsendnum,
    	sum(x.endnum) as endnum,sum(x.auxendnum) as auxendnum,
    	sum(x.beginamount) as beginamount,
    	sum(x.receiveamount) as receiveamount,
    	sum(x.sendamount) as sendamount,
    	sum(x.endamount) as endamount
    	from <include refid="showStorageRecSendList_sql"/> x
    </select>

	<sql id="showStorageRecSendDetailList_sql">
		(
		select z.storageid,z.goodsid,y.rate as boxnum,g.brand as brandid,g.defaultsort as goodssort,z.unitname,z.auxunitname,
		(z.beginnum) as beginnum,(z.beginnum)/y.rate as auxbeginnum,
		CONCAT(floor((z.beginnum)/y.rate),z.auxunitname,MOD((z.beginnum),y.rate),z.unitname) as beginnumdetail,
		(z.receivenum) as receivenum,(z.receivenum)/y.rate as auxreceivenum,
		CONCAT(floor((z.receivenum)/y.rate),z.auxunitname,MOD((z.receivenum),y.rate),z.unitname) as receivenumdetail,
		(z.sendnum) as sendnum,(z.sendnum)/y.rate as auxsendnum,
		CONCAT(floor((z.sendnum)/y.rate),z.auxunitname,MOD((z.sendnum),y.rate),z.unitname) as sendnumdetail,
		(z.beginnum+z.receivenum-z.sendnum) as endnum,(z.beginnum+z.receivenum-z.sendnum)/y.rate as auxendnum,
		CONCAT(floor((z.beginnum+z.receivenum-z.sendnum)/y.rate),z.auxunitname,MOD((z.beginnum+z.receivenum-z.sendnum),y.rate),z.unitname) as endnumdetail,z.addtime,z.billmodel
		from (
		<choose>
			<when test="condition.initdate !=null">
				select t.storageid,t.goodsid,t.unitid,t.unitname,t.auxunitid,t.auxunitname,(IFNULL(t.receivenum,0)-IFNULL(t.sendnum,0)) as beginnum,0 as receivenum,0 as sendnum,t.addtime,t.billmodel
				from t_storage_summary_log t
				<trim prefix="where" prefixOverrides="and|or">
					<if test="1 == 1">
						<![CDATA[and t.billmodel='stockinit' and t.addtime>#{condition.initdate} and t.addtime<DATE_ADD(STR_TO_DATE(#{condition.initdate}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
					</if>
					<if test="condition.storageid != null" >
						and t.storageid = #{condition.storageid}
					</if>
					<if test="condition.goodsid != null" >
						and FIND_IN_SET(t.goodsid,#{condition.goodsid})
					</if>
				</trim>
			</when>
			<otherwise>
				select t.storageid,t.goodsid,t.unitid,t.unitname,t.auxunitid,t.auxunitname,IFNULL(t.existingnum,0) as beginnum,0 as receivenum,0 as sendnum,#{condition.queryinitdate1} as addtime,0 as billmodel
				from t_report_storage_bak t
				<trim prefix="where" prefixOverrides="and|or">
					<if test="1 == 1">
						<![CDATA[and t.businessdate<STR_TO_DATE(#{condition.queryinitdate2}, '%Y-%m-%d') and t.businessdate>STR_TO_DATE(#{condition.queryinitdate1},'%Y-%m-%d')]]>
					</if>
					<if test="condition.storageid != null" >
						and t.storageid = #{condition.storageid}
					</if>
					<if test="condition.goodsid != null" >
						and FIND_IN_SET(t.goodsid,#{condition.goodsid})
					</if>
				</trim>
			</otherwise>
		</choose>
		UNION ALL
		select t.storageid,t.goodsid,t.unitid,t.unitname,t.auxunitid,t.auxunitname,0 as beginnum,IFNULL(t.receivenum,0) as receivenum,IFNULL(t.sendnum,0) as sendnum,t.addtime,t.billmodel
		from t_storage_summary_log t
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.initdate !=null">
				<![CDATA[and( (t.billmodel='stockinit' and  t.addtime>DATE_ADD(STR_TO_DATE(#{condition.initdate}, '%Y-%m-%d'),INTERVAL 1 DAY)) or t.billmodel<>'stockinit' )]]>
			</if>
			<if test="condition.businessdate1 != null">
				and t.addtime >= #{condition.businessdate1}
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t.addtime <= DATE_ADD(STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
			</if>
			<if test="condition.storageid != null" >
				and t.storageid = #{condition.storageid}
			</if>
			<if test="condition.goodsid != null" >
				and FIND_IN_SET(t.goodsid,#{condition.goodsid})
			</if>
		</trim>
		) z
		LEFT JOIN t_base_goods_info_meteringunit y on z.goodsid=y.goodsid and y.isdefault = '1'
		LEFT JOIN t_base_goods_info g on z.goodsid=g.id
		order by z.addtime
		)
	</sql>
    <select id="showStorageRecSendDetailList" parameterType="com.hd.agent.common.util.PageMap" resultType="map">
    	SELECT x.* from <include refid="showStorageRecSendDetailList_sql"/> x
    </select>
     <select id="showStorageRecSendDetailCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
    	select count(1) from <include refid="showStorageRecSendDetailList_sql"/> x
    </select>

   <select id="showReceivenumDetailList" parameterType="java.lang.String" resultType="java.util.Map">
      select z.billid,z.storageid,z.goodsid,y.rate as boxnum,g.brand as brandid,g.defaultsort as goodssort,z.unitname,z.auxunitname,
		(z.beginnum) as beginnum,(z.beginnum)/y.rate as auxbeginnum,
		CONCAT(floor((z.beginnum)/y.rate),z.auxunitname,MOD((z.beginnum),y.rate),z.unitname) as beginnumdetail,
		(z.receivenum) as receivenum,(z.receivenum)/y.rate as auxreceivenum,
		CONCAT(floor((z.receivenum)/y.rate),z.auxunitname,MOD((z.receivenum),y.rate),z.unitname) as receivenumdetail,
		(z.sendnum) as sendnum,(z.sendnum)/y.rate as auxsendnum,
		CONCAT(floor((z.sendnum)/y.rate),z.auxunitname,MOD((z.sendnum),y.rate),z.unitname) as sendnumdetail,
		(z.beginnum+z.receivenum-z.sendnum) as endnum,(z.beginnum+z.receivenum-z.sendnum)/y.rate as auxendnum,
		CONCAT(floor((z.beginnum+z.receivenum-z.sendnum)/y.rate),z.auxunitname,MOD((z.beginnum+z.receivenum-z.sendnum),y.rate),z.unitname) as endnumdetail,z.addtime,z.billmodel
		from (
            select t.billid,t.storageid,t.goodsid,t.unitid,t.unitname,t.auxunitid,t.auxunitname,0 as beginnum,IFNULL(t.receivenum,0) as receivenum,IFNULL(t.sendnum,0) as sendnum,t.addtime,t.billmodel
		        from t_storage_summary_log t
		        <trim prefix="where" prefixOverrides="and|or">

				  <if test="businessdate1 != null">
				 	and t.addtime >= #{businessdate1}
				  </if>
				  <if test="businessdate2 != null">
					 <![CDATA[and t.addtime <= DATE_ADD(STR_TO_DATE(#{businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
				  </if>

		   		  <if test="storageid != null" >
		 	         and t.storageid = #{storageid}
		          </if>
		          <if test="goodsid != null" >
		        	  and t.goodsid = #{goodsid}
		          </if>
		          <if test="1 == 1" >
		             and t.receivenum != '0'
		          </if>
                </trim>
          )z
          LEFT JOIN t_base_goods_info_meteringunit y on z.goodsid=y.goodsid and y.isdefault = '1'
		  LEFT JOIN t_base_goods_info g on z.goodsid=g.id
		  order by z.addtime
   </select>

    <select id="showSendnumDetailPageList" parameterType="java.lang.String" resultType="java.util.Map">
		select z.billid,z.storageid,z.goodsid,y.rate as boxnum,g.brand as brandid,g.defaultsort as goodssort,z.unitname,z.auxunitname,
		(z.beginnum) as beginnum,(z.beginnum)/y.rate as auxbeginnum,
		CONCAT(floor((z.beginnum)/y.rate),z.auxunitname,MOD((z.beginnum),y.rate),z.unitname) as beginnumdetail,
		(z.receivenum) as receivenum,(z.receivenum)/y.rate as auxreceivenum,
		CONCAT(floor((z.receivenum)/y.rate),z.auxunitname,MOD((z.receivenum),y.rate),z.unitname) as receivenumdetail,
		(z.sendnum) as sendnum,(z.sendnum)/y.rate as auxsendnum,
		CONCAT(floor((z.sendnum)/y.rate),z.auxunitname,MOD((z.sendnum),y.rate),z.unitname) as sendnumdetail,
		(z.beginnum+z.receivenum-z.sendnum) as endnum,(z.beginnum+z.receivenum-z.sendnum)/y.rate as auxendnum,
		CONCAT(floor((z.beginnum+z.receivenum-z.sendnum)/y.rate),z.auxunitname,MOD((z.beginnum+z.receivenum-z.sendnum),y.rate),z.unitname) as endnumdetail,z.addtime,z.billmodel
		from (
            select t.billid,t.storageid,t.goodsid,t.unitid,t.unitname,t.auxunitid,t.auxunitname,0 as beginnum,IFNULL(t.receivenum,0) as receivenum,IFNULL(t.sendnum,0) as sendnum,t.addtime,t.billmodel
		        from t_storage_summary_log t
		        <trim prefix="where" prefixOverrides="and|or">
                   <if test="businessdate1 != null">
				 	and t.addtime >= #{businessdate1}
				  </if>
				  <if test="businessdate2 != null">
					 <![CDATA[and t.addtime <= DATE_ADD(STR_TO_DATE(#{businessdate2}, '%Y-%m-%d'),INTERVAL 1 DAY)]]>
				  </if>
		   		  <if test="storageid != null" >
		 	         and t.storageid = #{storageid}
		          </if>
		          <if test="goodsid != null" >
		        	 and t.goodsid = #{goodsid}
		          </if>
		          <if test="1 == 1" >
		             and t.sendnum != '0'
		          </if>
                </trim>
          )z
          LEFT JOIN t_base_goods_info_meteringunit y on z.goodsid=y.goodsid and y.isdefault = '1'
		  LEFT JOIN t_base_goods_info g on z.goodsid=g.id
		  order by z.addtime
	</select>
	
	
	<sql id="getPrintnum_sql">
		(
		    select saleoutid,sum(p.printnum) as printnum,ceiling(sum(p.printnum)/#{condition.pn}) as papernum from(
				SELECT
						 t1.saleoutid,count(t1.id) as printnum
					FROM
						t_storage_saleout t
						LEFT JOIN t_storage_saleout_detail t1 on t.id = t1.saleoutid
					<trim prefix="where" prefixOverrides="and|or">
							<if test="condition.businessdate1 != null">
							 	and t.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
						  	</if>
						  	<if test="condition.businessdate2 != null">
							 	<![CDATA[and t.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
						  	</if>
						  	<if test="1==1">
							and t1.isbranddiscount = '0' and (t.status='4' or t.status='3' )
					  	</if>
					</trim>
						
					GROUP BY t1.saleoutid
					UNION ALL
			    select x.saleoutid,count(x.id) as printnum from(
						SELECT
						   t1.saleoutid,t1.id
						FROM
							t_storage_saleout t
						LEFT JOIN t_storage_saleout_detail t1 on t.id = t1.saleoutid
						<trim prefix="where" prefixOverrides="and|or">
							<if test="condition.businessdate1 != null">
							 	and t.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
						  	</if>
						  	<if test="condition.businessdate2 != null">
							 	<![CDATA[and t.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
						  	</if>
						  	<if test="1==1">
							and t1.isbranddiscount = '1' and (t.status='4' or t.status='3' )
					  	</if>
						</trim>
						GROUP BY
						t1.saleoutid,t1.brandid
					)x
					GROUP BY x.saleoutid
			) p 
			GROUP BY p.saleoutid
		)
	</sql>
	<sql id="getDispatchUserMainData_sql">
		(
		    SELECT
				t.id,
				t.storager AS storagerid,
				t.storageid,
				sum(t1.unitnum) as unitnum,
				sum(t1.unitnum * g.singlevolume) AS totalvolume,
				sum(t1.unitnum * g.grossweight) AS totalweight,
				sum(t1.unitnum / m.rate) AS totalbox,
				sum(t1.taxamount) AS totalamount
			
			FROM
				t_storage_saleout t
			LEFT JOIN t_storage_saleout_detail t1 on t.id = t1.saleoutid
			LEFT JOIN t_base_goods_info g ON t1.goodsid = g.id
			LEFT JOIN t_base_goods_info_meteringunit m ON t1.goodsid = m.goodsid AND m.isdefault = '1'
		 	
			<trim prefix="where" prefixOverrides="and|or">
				<include refid="common.Page_querySql"/>
		      	<include refid="common.Page_dataSql"/>
		      	<if test="condition.businessdate1 != null">
				 	and t.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
			  	</if>
			  	<if test="condition.businessdate2 != null">
				 	<![CDATA[and t.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
			  	</if>
				<if test="condition.storager != null">
				 	and t.storager = #{condition.storager}
			  	</if>
			  	<if test="1==1">
				 and (t.status='4' or t.status='3' )
			  	</if>
		    </trim>
			group by t.storager,t.storageid,t.id
		)
	</sql>
	<select id="showDispatchUserListData" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.report.model.DispatchUserReport">
		select
			t.storagerid,
			t.storageid,
			sum(t.unitnum) AS unitnum,
			sum(t.totalvolume) AS totalvolume,
			sum(t.totalweight) AS totalweight,
			sum(t.totalbox) AS totalbox,
			sum(t.totalamount) AS totalamount,
			sum(t1.printnum) AS printnum,
			sum(t1.papernum) As papernum
		from <include refid="getDispatchUserMainData_sql"/> t
		   LEFT JOIN <include refid="getPrintnum_sql"/> t1 	ON t.id = t1.saleoutid
		GROUP BY
			t.storagerid,
			t.storageid
		<if test="condition.isAll == null">
			<include refid="common.Page_limit" />
	  	</if>
	</select>
	
	  <select id="showDispatchUserListDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
          SELECT count(1) FROM (
	          select
				t.storagerid,
				t.storageid,
				sum(t.unitnum) AS unitnum,
				sum(t.totalvolume) AS totalvolume,
				sum(t.totalweight) AS totalweight,
				sum(t.totalbox) AS totalbox,
				sum(t.totalamount) AS totalamount,
				sum(t1.printnum) AS printnum,
				sum(t1.papernum) As papernum
			from <include refid="getDispatchUserMainData_sql"/> t
			   LEFT JOIN <include refid="getPrintnum_sql"/> t1 	ON t.id = t1.saleoutid
			GROUP BY
				t.storagerid,
				t.storageid
          ) z
	  </select>
	  <select id="showDispatchUserListDataSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select
			z.storagerid,
			z.storageid,
			sum(z.unitnum) AS unitnum,
			sum(z.totalvolume) AS totalvolume,
			sum(z.totalweight) AS totalweight,
			sum(z.totalbox) AS totalbox,
			sum(z.totalamount) AS totalamount,
			sum(z.printnum) AS printnum,
			sum(z.papernum) As papernum
			from(	
				select
					t.storagerid,
					t.storageid,
					sum(t.unitnum) AS unitnum,
					sum(t.totalvolume) AS totalvolume,
					sum(t.totalweight) AS totalweight,
					sum(t.totalbox) AS totalbox,
					sum(t.totalamount) AS totalamount,
					sum(t1.printnum) AS printnum,
					sum(t1.papernum) As papernum
				from <include refid="getDispatchUserMainData_sql"/> t
				   LEFT JOIN <include refid="getPrintnum_sql"/> t1 	ON t.id = t1.saleoutid
				GROUP BY
					t.storagerid,
					t.storageid	
			)z
	  </select>
    <sql id="getDriverDeliveryReportData_sql">
        (
        select s.customerid,if(y.isdiscount = '0',y.taxamount,0) as taxamount,if(y.isdiscount = '1',y.taxamount,0) as discountamount,
        s.salesuser,d.businessdate,d.checkdate,d.driverid,y.totalbox ,y.goodsid,y.unitnum,y.brandid,o.salesdept,
        g.grossweight * y.unitnum as weight,g.singlevolume * y.unitnum as volume,y.isdiscount,y.isbranddiscount,d.status,s.saleoutid
        FROM t_storage_logistics_delivery_saleout s
        left JOIN t_storage_logistics_delivery d ON s.deliveryid = d.id
        LEFT JOIN t_storage_saleout o ON o.id = s.saleoutid and s.deliverytype = '0'
        RIGHT JOIN t_storage_saleout_detail y ON s.saleoutid = y.saleoutid
        INNER JOIN t_base_goods_info g ON g.id = y.goodsid
        <trim prefix="where" prefixOverrides="and|or">
            <if test="condition.businessdate1 != null">
                and d.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and d.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
            </if>
            <if test="condition.checkdate1 != null">
                and d.checkdate >= STR_TO_DATE(#{condition.checkdate1},'%Y-%m-%d')
            </if>
            <if test="condition.checkdate2 != null">
                <![CDATA[and d.checkdate <= STR_TO_DATE(#{condition.checkdate2},'%Y-%m-%d')]]>
            </if>
            <if test="condition.driverid != null">
                and FIND_IN_SET(d.driverid,#{condition.driverid})
            </if>

            <if test="condition.customerid != null">
                and FIND_IN_SET(s.customerid,#{condition.customerid})
            </if>
            <if test="condition.salesuser != null">
                and FIND_IN_SET(s.salesuser,#{condition.salesuser})
            </if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(y.goodsid,#{condition.goodsid})
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(y.brandid,#{condition.brandid})
            </if>
            <if test="condition.salesdept != null">
                and FIND_IN_SET(o.salesdept,#{condition.salesdept})
            </if>
            <if test="1 == 1">
                and (d.status = '3' || d.status = '4')
            </if>
        </trim>
        )
    </sql>
    <select id="getDriverDeliveryReportData"  parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        select z.businessdate,z.customerid,sum(z.taxamount) AS taxamount,sum(-z.discountamount) as discountamount,sum(z.taxamount + z.discountamount) as salesamount,
        z.salesuser,z.driverid,sum(z.totalbox) AS totalbox,sum(z.unitnum) AS unitnum,
        z.goodsid,z.salesdept,z.checkdate,sum(z.weight) AS weight,sum(z.volume) AS volume
        from <include refid="getDriverDeliveryReportData_sql"/> z
        <trim prefix="where" prefixOverrides="and|or">
            <include refid="common.Page_dataSql"/>
            <if test="condition.groupcols != null">
                group by ${condition.groupcols}
            </if>
            <if test="condition.isflag == null">
                <include refid="common.Page_limit"/>
            </if>
        </trim>
    </select>
    <select id="getDriverDeliveryReportDataCount"  parameterType="com.hd.agent.common.util.PageMap" resultType="int">
        select count(1) from (
        select z.businessdate,z.customerid,sum(z.taxamount) AS taxamount,sum(-z.discountamount) as discountamount,sum(z.taxamount + z.discountamount) as salesamount,
        z.salesuser,z.driverid,sum(z.totalbox) AS totalbox,sum(z.unitnum) AS unitnum,
        z.goodsid,z.salesdept,z.checkdate,sum(z.weight) AS weight,sum(z.volume) AS volume
        from <include refid="getDriverDeliveryReportData_sql"/> z
        <trim prefix="where" prefixOverrides="and|or">
            <include refid="common.Page_dataSql"/>
            <if test="condition.groupcols != null">
                group by ${condition.groupcols}
            </if>
        </trim>
        )z
    </select>
    <select id="getDriverDeliveryReportDataSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        select sum(z.taxamount) AS taxamount,sum(-z.discountamount) as discountamount,sum(z.taxamount + z.discountamount) as salesamount,
        sum(z.totalbox) AS totalbox,sum(z.unitnum) AS unitnum,sum(z.weight) AS weight,sum(z.volume) AS volume
        from <include refid="getDriverDeliveryReportData_sql"/> z
        <trim prefix="where" prefixOverrides="and|or">
            <include refid="common.Page_dataSql"/>
        </trim>
    </select>
    <select id="getSaleoutDiscountInfo" parameterType="java.util.Map" resultType="java.util.Map">
        select -sum(t.taxamount) as disamountSum,sum(totalbox) as totalboxSum,sum(unitnum) as unitnumSum from
        (
        select t.goodsid,
        if(t.isdiscount = '1',t.taxamount,0) as taxamount ,if(t.isdiscount = '0',t.totalbox,0) as totalbox ,if(t.isdiscount = '0',t.unitnum,0) as unitnum
        from t_storage_saleout_detail t
        left join t_storage_saleout t1 on t.saleoutid = t1.id
        <trim prefix="where" prefixOverrides="and|or">
            <if test="sourceid != null">
                and t.saleoutid = #{sourceid}
            </if>
            <if test="orderid != null">
                and t1.saleorderid = #{orderid}
            </if>
            <if test="goodsid != null">
                and t.goodsid = #{goodsid}
            </if>
        </trim>
        ) t
    </select>
    <select id="getSaleoutDiscountSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        select sum(z.taxamount) as taxamount, -sum(z.discountamount) as discountamount from (
        select if(t.isdiscount = '0 ',t.taxamount,0) as taxamount ,if(t.isdiscount = '1 ',t.taxamount,0) as discountamount
        from t_storage_saleout_detail t
        left join t_storage_saleout t1 on t.saleoutid = t1.id
        left join t_base_personnel_brandandcustomer b on b.customerid = t1.customerid and b.brandid = t.brandid
        left join t_base_personnel p on b.personid = p.id
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1 == 1">
                and ( t1.status = '4' or t1.status = '3')
            </if>
            <if test="condition.businessdate1 != null">
                and t1.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t1.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
            </if>
            <if test="condition.customerid != null">
                and FIND_IN_SET(t1.customerid,#{condition.customerid})
            </if>
            <if test="condition.branduser != null">
                and FIND_IN_SET(b.personid,#{condition.branduser})
            </if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(t.goodsid,#{condition.goodsid})
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(t.brandid,#{condition.brandid})
            </if>
            <if test="condition.persondept != null">
                and FIND_IN_SET(p.belongdeptid,#{condition.persondept})
            </if>
        </trim>
        UNION ALL
        select -t.taxamount as taxamount, 0 as discountamount from t_storage_salereject_enter_detail t
        left join t_storage_salereject_enter t1 on t.salerejectid = t1.id
		left join t_base_personnel_brandandcustomer b on b.customerid = t1.customerid and b.brandid = t.brandid
		left join t_base_personnel p on b.personid = p.id
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1 == 1">
                and t1.status = '4'
            </if>
            <if test="condition.businessdate1 != null">
                and t1.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t1.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
            </if>
            <if test="condition.customerid != null">
                and FIND_IN_SET(t1.customerid,#{condition.customerid})
            </if>
            <if test="condition.branduser != null">
                and FIND_IN_SET(b.personid,#{condition.branduser})
            </if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(t.goodsid,#{condition.goodsid})
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(t.brandid,#{condition.brandid})
            </if>
            <if test="condition.persondept != null">
                and FIND_IN_SET(p.belongdeptid,#{condition.persondept})
            </if>
        </trim>
        ) z
    </select>
    <sql id="getSalesmanDeliveryReportData_sql">
        (
        select t.goodsid,t.totalbox,t.unitnum,taxamount,t.brandid,t1.customerid,b.personid as branduser, p.belongdeptid as persondept,
        t1.id as sourceid,t.id as detailid,t1.saleorderid as orderid
        from t_storage_saleout_detail t
        left join t_storage_saleout t1 on t.saleoutid = t1.id
        left join t_base_personnel_brandandcustomer b on b.customerid = t1.customerid and b.brandid = t.brandid
        left join t_base_personnel p on b.personid = p.id
        <trim prefix="where" prefixOverrides="and|or">
            t.isdiscount = '0'
            <if test="1 == 1">
                and ( t1.status = '4' or t1.status = '3')
            </if>
            <if test="condition.businessdate1 != null">
                and t1.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t1.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
            </if>
            <if test="condition.customerid != null">
                and FIND_IN_SET(t1.customerid,#{condition.customerid})
            </if>
            <if test="condition.branduser != null">
                and FIND_IN_SET(b.personid,#{condition.branduser})
            </if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(t.goodsid,#{condition.goodsid})
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(t.brandid,#{condition.brandid})
            </if>
            <if test="condition.persondept != null">
                and FIND_IN_SET(p.belongdeptid,#{condition.persondept})
            </if>
        </trim>
        UNION ALL
        select t.goodsid,-t.totalbox,-t.unitnum,-t.taxamount,t.brandid,t1.customerid,b.personid as branduser,
        p.belongdeptid as persondept,t1.id as sourceid,t.id as detailid,t1.orderid as orderid
        from t_storage_salereject_enter_detail t
        left join t_storage_salereject_enter t1 on t.salerejectid = t1.id
        left join t_base_personnel_brandandcustomer b on b.customerid = t1.customerid and b.brandid = t.brandid
        left join t_base_personnel p on b.personid = p.id
        <trim prefix="where" prefixOverrides="and|or">
            <if test="1 == 1">
                and t1.status = '4'
            </if>
            <if test="condition.businessdate1 != null">
                and t1.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t1.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
            </if>
            <if test="condition.customerid != null">
                and FIND_IN_SET(t1.customerid,#{condition.customerid})
            </if>
            <if test="condition.branduser != null">
                and FIND_IN_SET(b.personid,#{condition.branduser})
            </if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(t.goodsid,#{condition.goodsid})
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(t.brandid,#{condition.brandid})
            </if>
            <if test="condition.persondept != null">
                and FIND_IN_SET(p.belongdeptid,#{condition.persondept})
            </if>
        </trim>
        )
    </sql>
	<select id="getSaleoutDiscountWithoutGoods" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		select t.goodsid,t.totalbox,t.unitnum,taxamount,t.brandid,t1.customerid,b.personid as branduser, p.belongdeptid as persondept,
		t1.id as sourceid,t.id as detailid,t1.saleorderid as orderid
		from t_storage_saleout_detail t
		left join t_storage_saleout t1 on t.saleoutid = t1.id
		left join t_base_personnel_brandandcustomer b on b.customerid = t1.customerid and b.brandid = t.brandid
		left join t_base_personnel p on b.personid = p.id
		<trim prefix="where" prefixOverrides="and|or">
			t.isdiscount = '1'
			<if test="1 == 1">
				and ( t1.status = '4' or t1.status = '3')
			</if>
			<if test="condition.businessdate1 != null">
				and t1.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
			</if>
			<if test="condition.businessdate2 != null">
				<![CDATA[and t1.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
			</if>
			<if test="condition.customerid != null">
				and FIND_IN_SET(t1.customerid,#{condition.customerid})
			</if>
			<if test="condition.branduser != null">
				and FIND_IN_SET(b.personid,#{condition.branduser})
			</if>
			<if test="condition.goodsid != null">
				and FIND_IN_SET(t.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.brandid != null">
				and FIND_IN_SET(t.brandid,#{condition.brandid})
			</if>
			<if test="condition.persondept != null">
				and FIND_IN_SET(p.belongdeptid,#{condition.persondept})
			</if>
			<if test="condition.sourceid != null">
				and FIND_IN_SET(t1.id,#{condition.sourceid})
			</if>
		</trim>
	</select>
    <select id="getSalesmanDeliveryReportData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        SELECT  x.goodsid,x.totalbox,x.unitnum,x.taxamount,x.brandid,x.customerid,x.branduser,x.persondept,x.sourceid,x.detailid,x.orderid
        from <include refid="getSalesmanDeliveryReportData_sql"/> x
        <if test="condition.isflag == null">
            <include refid="common.Page_limit"/>
        </if>
    </select>
    <select id="getSalesmanDeliveryReportDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="java.lang.Integer">
        SELECT count(1) from (
        SELECT  x.goodsid,x.totalbox,x.unitnum,x.taxamount,x.brandid,x.customerid,x.branduser,x.persondept,x.sourceid,x.detailid
        from <include refid="getSalesmanDeliveryReportData_sql"/> x
        )z
    </select>
    <select id="getSalesmanDeliveryReportDataSum" resultType="java.util.Map">
        select sum(x.totalbox) as totalbox,sum(x.unitnum) as unitnum,sum(taxamount) as taxamount
        from <include refid="getSalesmanDeliveryReportData_sql"/> x
    </select>
    <sql id="DriverRejectEnterReportData_sql">
        (
        select t.goodsid,t.unitnum,t.unitnum * g.grossweight as weight,t.unitnum * g.singlevolume as volume,t.totalbox,t.taxamount,
        g.brand as brandid,t1.salesuser,t1.customerid,t1.salesdept,t1.id as sourceid,t1.driverid,t.id
        from t_storage_salereject_enter_detail t
        left join t_storage_salereject_enter t1 on t.salerejectid = t1.id
        left join t_base_personnel p on t1.driverid = p.id
        left join t_base_goods_info g on g.id = t.goodsid
        <trim prefix="where" prefixOverrides="and|or">
            <include refid="common.Page_dataSql"/>
            <if test="1 == 1">
                and ( t1.status = '4')
            </if>
            <if test="condition.businessdate1 != null">
                and t1.businessdate >= STR_TO_DATE(#{condition.businessdate1},'%Y-%m-%d')
            </if>
            <if test="condition.businessdate2 != null">
                <![CDATA[and t1.businessdate <= STR_TO_DATE(#{condition.businessdate2}, '%Y-%m-%d')]]>
            </if>
            <if test="condition.customerid != null">
                and FIND_IN_SET(t1.customerid,#{condition.customerid})
            </if>
            <if test="condition.driverid != null">
                and FIND_IN_SET(t1.driverid,#{condition.driverid})
            </if>
            <if test="condition.goodsid != null">
                and FIND_IN_SET(t.goodsid,#{condition.goodsid})
            </if>
            <if test="condition.brandid != null">
                and FIND_IN_SET(t.brandid,#{condition.brandid})
            </if>
            <if test="condition.salesdept != null">
                and FIND_IN_SET(t1.salesdept,#{condition.salesdept})
            </if>
            <if test="condition.salesuser != null">
                and FIND_IN_SET(t1.salesuser,#{condition.salesuser})
            </if>
        </trim>
        )
    </sql>
    <select id="getDriverRejectEnterReportData"  parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
      select z.goodsid,sum(z.unitnum ) as unitnum,sum(z.weight) as weight,sum(z.volume) as volume,sum(z.totalbox) as totalbox,sum(z.taxamount) as taxamount,
        z.brandid,z.salesuser,z.customerid,z.salesdept,z.sourceid,z.driverid,z.id
        from <include refid="DriverRejectEnterReportData_sql"/> z group by ${condition.groupcols}
        <if test="condition.isflag == null">
            <include refid="common.Page_limit"/>
        </if>
    </select>
    <select id="getDriverRejectEnterReportDataCount"  parameterType="com.hd.agent.common.util.PageMap" resultType="int">
        select count(*) from (
        select z.goodsid,sum(z.unitnum ) as unitnum,sum(z.weight) as weight,sum(z.volume) as volume,sum(z.totalbox) as totalbox,sum(z.taxamount) as taxamount,
        z.brandid,z.salesuser,z.customerid,z.salesdept,z.sourceid,z.driverid,z.id
        from <include refid="DriverRejectEnterReportData_sql"/> z group by ${condition.groupcols}
        ) t
    </select>
    <select id="getDriverRejectEnterReportDataSum" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
        select sum(volume) as volume ,sum(weight) as weight,sum(unitnum) as unitnum ,sum(totalbox) as totalbox ,sum(taxamount) as taxamount  from
        <include refid="DriverRejectEnterReportData_sql"/> z
    </select>
    <select id="getSaleoutGoodsByClosedOrder"  resultType="java.util.Map">
        select t.goodsid,t.totalbox,t.unitnum,taxamount,t.brandid,t1.customerid,b.personid as branduser,p.belongdeptid as persondept,t1.id as sourceid,t.id as detailid,
        t.isdiscount as isdiscount,t.isbranddiscount as isdiscount ,t1.saleorderid as saleorderid
        from t_storage_saleout_detail t
        left join t_storage_saleout t1 on t.saleoutid = t1.id
        left join t_base_personnel_brandandcustomer b on b.customerid = t1.customerid and b.brandid = t.brandid
        left join t_base_personnel p on b.personid = p.id
		where
			t1.saleorderid in ( select id from t_sales_order where status = '4')
            and (t1.status = '3' || t1.status = '4' )
            and t.isdiscount = '0'
        UNION ALL
        select t.goodsid,-t.totalbox,-t.unitnum,-t.taxamount,t.brandid,t1.customerid,b.personid as branduser,p.belongdeptid as persondept,t1.id as sourceid,t.id as detailid,
        '' as isdiscount,'' as isbranddiscount,t1.orderid as saleorderid
        from t_storage_salereject_enter_detail t
        left join t_storage_salereject_enter t1 on t.salerejectid = t1.id
        left join t_base_personnel_brandandcustomer b on b.customerid = t1.customerid and b.brandid = t.brandid
        left join t_base_personnel p on b.personid = p.id
        where t1.status = '4'
    </select>
    <insert id="addSaleoutAndRejectEnterForJM" parameterType="com.hd.agent.report.model.SaleoutDetailAndDiscount">
       insert into t_storage_saleout_report
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="persondept != null" >
                persondept,
            </if>
            <if test="sourceid != null" >
                sourceid,
            </if>
            <if test="customerid != null" >
                customerid,
            </if>
            <if test="customername != null" >
                customername,
            </if>
            <if test="branduser != null" >
                branduser,
            </if>
            <if test="goodsid != null" >
                goodsid,
            </if>
            <if test="goodsname != null" >
                goodsname,
            </if>
            <if test="barcode != null" >
                barcode,
            </if>
            <if test="brandid != null" >
                brandid,
            </if>
            <if test="model != null" >
                model,
            </if>
            <if test="unitnum != null">
                unitnum,
            </if>
            <if test="totalbox != null">
                totalbox,
            </if>
            <if test="discountamount != null">
                discountamount,
            </if>
            <if test="taxamount != null">
                taxamount,
            </if>
            <if test="brandusername != null">
                brandusername ,
            </if>
            <if test="brandname != null">
                brandname,
            </if>
            <if test="persondeptname != null">
                persondeptname,
            </if>
            <if test="saleorderid != null">
                saleorderid,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="persondept != null" >
                #{persondept},
            </if>
            <if test="sourceid != null" >
                #{sourceid},
            </if>
            <if test="customerid != null" >
                #{customerid},
            </if>
            <if test="customername != null" >
                #{customername},
            </if>
            <if test="branduser != null" >
                #{branduser},
            </if>
            <if test="goodsid != null" >
                #{goodsid},
            </if>
            <if test="goodsname != null" >
                #{goodsname},
            </if>
            <if test="barcode != null" >
                #{barcode},
            </if>
            <if test="brandid != null" >
                #{brandid},
            </if>
            <if test="model != null" >
                #{model},
            </if>
            <if test="unitnum != null">
                #{unitnum},
            </if>
            <if test="totalbox != null">
                #{totalbox},
            </if>
            <if test="discountamount != null">
                #{discountamount},
            </if>
            <if test="taxamount != null">
                #{taxamount},
            </if>
            <if test="brandusername != null">
                #{brandusername},
            </if>
            <if test="brandname != null">
                #{brandname},
            </if>
            <if test="persondeptname != null">
                #{persondeptname},
            </if>
            <if test="saleorderid != null">
                #{saleorderid},
            </if>
        </trim>
    </insert>

	<sql id="getStorageTreeReportListDataColumn_sql">
		<![CDATA[
		"" as goodsid,"" as brandid,"" as storageid,"" as goodsname,"" as barcode,"" as price,"" as costprice,"" as storageprice,sum(z.storageamount) as storageamount,"" as boxnum,"" as spell,"" as supplierid,"" as state,"" as unitid,"" as unitname,"" as auxunitid,"" as auxunitname,"" as waresclassname,
		sum(z.existingnum) as existingnum,sum(z.auxexistingnum) as auxexistingnum,sum(basesaleamount) as basesaleamount ,sum(z.existingauxint) as existingauxint,sum(z.existingauxnum) as existingauxnum,CONCAT(sum(z.existingauxint),z.auxunitname,sum(z.existingauxnum),z.unitname) as auxexistingdetail,sum(z.existingamount) as existingamount,sum(z.costamount) as costamount,
		sum(z.usablenum) as usablenum,if(sum(z.usablenum)<0,-ABS(sum(z.usableauxint)),ABS(sum(z.usableauxint))) as usableauxint,if(sum(z.usablenum)<0,-ABS(sum(z.usableauxnum)),ABS(sum(z.usableauxnum))) as usableauxnum,CONCAT(if(sum(z.usablenum)<0,'-',''),ABS(sum(z.usableauxint)),z.auxunitname,ABS(sum(z.usableauxnum)),z.unitname) as auxusabledetail,sum(z.usableamount) as usableamount,
		sum(z.waitnum) as waitnum,if(sum(z.waitnum)<0,-ABS(sum(z.waitauxint)),ABS(sum(z.waitauxint))) as waitauxint,if(sum(z.waitnum)<0,-ABS(sum(z.waitauxnum)),ABS(sum(z.waitauxnum))) as waitauxnum,CONCAT(if(sum(z.waitnum)<0,'-',''),ABS(sum(z.waitauxint)),z.auxunitname,ABS(sum(z.waitauxnum)),z.unitname) as auxwaitdetail,sum(z.waitamount) as waitamount,
		sum(z.transitnum) as transitnum,if(sum(z.transitnum)<0,-ABS(sum(z.transitauxint)),ABS(sum(z.transitauxint))) as transitauxint,if(sum(z.transitnum)<0,-ABS(sum(z.transitauxnum)),ABS(sum(z.transitauxnum))) as transitauxnum,CONCAT(if(sum(z.transitnum)<0,'-',''),ABS(sum(z.transitauxint)),z.auxunitname,ABS(sum(z.transitauxnum)),z.unitname) as auxtransitdetail,sum(z.transitamount) as transitamount,
		sum(z.allotwaitnum) as allotwaitnum,if(sum(z.allotwaitnum)<0,-ABS(sum(z.allotwaitauxint)),ABS(sum(z.allotwaitauxint))) as allotwaitauxint,if(sum(z.allotwaitnum)<0,-ABS(sum(z.allotwaitauxnum)),ABS(sum(z.allotwaitauxnum))) as allotwaitauxnum,CONCAT(if(sum(z.allotwaitnum)<0,'-',''),ABS(sum(z.allotwaitauxint)),z.auxunitname,ABS(sum(z.allotwaitauxnum)),z.unitname) as auxallotwaitdetail,sum(z.allotwaitamount) as allotwaitamount,
		sum(z.allotenternum) as allotenternum,if(sum(z.allotenternum)<0,-ABS(sum(z.allotenterauxint)),ABS(sum(z.allotenterauxint))) as allotenterauxint,if(sum(z.allotenternum)<0,-ABS(sum(z.allotenterauxnum)),ABS(sum(z.allotenterauxnum))) as allotenterauxnum,CONCAT(if(sum(z.allotenternum)<0,'-',''),ABS(sum(z.allotenterauxint)),z.auxunitname,ABS(sum(z.allotenterauxnum)),z.unitname) as auxallotenterdetail,sum(z.allotenteramount) as allotenteramount,
		sum(z.projectedusablenum) as projectedusablenum,if(sum(z.projectedusablenum)<0,-ABS(sum(z.projectedusableauxint)),ABS(sum(z.projectedusableauxint))) as projectedusableauxint,if(sum(z.projectedusablenum)<0,-ABS(sum(z.projectedusableauxnum)),ABS(sum(z.projectedusableauxnum))) as projectedusableauxnum,CONCAT(if(sum(z.projectedusablenum)<0,'-',''),ABS(sum(z.projectedusableauxint)),z.auxunitname,ABS(sum(z.projectedusableauxnum)),z.unitname) as auxprojectedusabledetail,sum(z.projectedusableamount) as projectedusableamount,
		sum(z.safenum) as safenum,if(sum(z.safenum)<0,-ABS(sum(z.safeauxint)),ABS(sum(z.safeauxint))) as safeauxint,if(sum(z.safenum)<0,-ABS(sum(z.safeauxnum)),ABS(sum(z.safeauxnum))) as safeauxnum,CONCAT(if(sum(z.safenum)<0,'-',''),ABS(sum(z.safeauxint)),z.auxunitname,ABS(sum(z.safeauxnum)),z.unitname) as auxsafedetail,sum(z.safeamount) as safeamount
		]]>
	</sql>
	<sql id="getStorageTreeReportListData_sql">
		(
			<![CDATA[
				  select t.goodsid,t.brandid,t.storageid,t.barcode,g.name as goodsname,g.spell,t.existingnum * g.basesaleprice as basesaleamount ,g.state,g.newbuyprice as price,if(${condition.isStorageAccount}='1' and s.isaloneaccount='1',t.costprice,g.newstorageprice) as costprice,t.costprice as storageprice,if(${condition.isStorageAccount}='1' and s.isaloneaccount='1',t.storageamount,0) as storageamount,m.rate as boxnum,t.istotalcontrol,t.issendstorage,if(g.defaultsupplier = "","empty",g.defaultsupplier)  as supplierid,
					t.existingnum,(t.existingnum / m.rate) AS auxexistingnum,floor(t.existingnum / m.rate) AS existingauxint,MOD (t.existingnum, m.rate) AS existingauxnum,g.newbuyprice * t.existingnum AS existingamount,if(${condition.isStorageAccount}='1' and s.isaloneaccount='1',t.costprice,g.newstorageprice) * t.existingnum AS costamount,
					t.usablenum,IF (t.usablenum < 0,ceil(t.usablenum / m.rate),floor(t.usablenum / m.rate)) AS usableauxint,MOD (t.usablenum, m.rate) AS usableauxnum,g.newbuyprice * t.usablenum AS usableamount,
					t.waitnum,IF (t.waitnum > 0,floor(ABS(t.waitnum) / m.rate) ,- floor(ABS(t.waitnum) / m.rate)) AS waitauxint,IF (t.waitnum > 0,ABS(t.waitnum) % m.rate ,- (ABS(t.waitnum) % m.rate)) AS waitauxnum,g.newbuyprice * t.waitnum AS waitamount,
					t.transitnum,IF (t.transitnum > 0,floor(ABS(t.transitnum) / m.rate) ,- floor(ABS(t.transitnum) / m.rate)) AS transitauxint,IF (t.transitnum > 0,ABS(t.transitnum) % m.rate ,- (ABS(t.transitnum) % m.rate)) AS transitauxnum,g.newbuyprice * t.transitnum AS transitamount,
					t.allotwaitnum,IF (t.allotwaitnum > 0,floor(ABS(t.allotwaitnum) / m.rate) ,- floor(ABS(t.allotwaitnum) / m.rate)) AS allotwaitauxint,IF (t.allotwaitnum > 0,ABS(t.allotwaitnum) % m.rate ,- (ABS(t.allotwaitnum) % m.rate)) AS allotwaitauxnum,g.newbuyprice * t.allotwaitnum AS allotwaitamount,
					t.allotenternum,IF (t.allotenternum > 0,floor(ABS(t.allotenternum) / m.rate) ,-floor(ABS(t.allotenternum) / m.rate)) AS allotenterauxint,IF (t.allotenternum > 0,ABS(t.allotenternum) % m.rate ,-(ABS(t.allotenternum) % m.rate)) AS allotenterauxnum,g.newbuyprice * t.allotenternum AS allotenteramount,
					t.projectedusablenum,IF (t.projectedusablenum < 0,ceil(t.projectedusablenum / m.rate),floor(t.projectedusablenum / m.rate)) AS projectedusableauxint, MOD(t.projectedusablenum, m.rate) AS projectedusableauxnum, g.newbuyprice * t.projectedusablenum AS projectedusableamount,
					t.safenum, floor(t.safenum / m.rate) AS safeauxint, MOD (t.safenum, m.rate) AS safeauxnum, g.newbuyprice * t.safenum AS safeamount, t.unitid, t.unitname, t.auxunitid, t.auxunitname, c.thisname waresclassname
				   from t_storage_summary t
				   LEFT JOIN t_base_storage_info s on t.storageid=s.id
				   LEFT JOIN t_base_goods_info g on t.goodsid=g.id
				   LEFT JOIN t_base_goods_info_meteringunit m on t.goodsid=m.goodsid and m.isdefault='1'
				   left join t_base_goods_waresclass c on g.defaultsort = c.id
				]]>
			<trim prefix="where" prefixOverrides="and|or">
				<include refid="common.Page_querySql"/>
				<include refid="common.Page_dataSql"/>
				<if test="condition.brandid != null and condition.brandid != ''">
					and FIND_IN_SET(t.brandid,#{condition.brandid})
				</if>
				<if test="condition.goodsid != null and condition.goodsid != ''">
					and FIND_IN_SET(t.goodsid,#{condition.goodsid})
				</if>
				<if test="condition.goodssort != null and condition.goodssort != '' ">
					and FIND_IN_SET(g.defaultsort,#{condition.goodssort})
				</if>
				<if test="condition.storageid != null and condition.storageid != '' ">
					and FIND_IN_SET(t.storageid,#{condition.storageid})
				</if>
				<if test="condition.istotalcontrol != null and ondition.istotalcontrol != '' ">
					and t.istotalcontrol = #{condition.istotalcontrol}
				</if>
				<if test="condition.supplierid != null and condition.supplierid != '' ">
					and FIND_IN_SET(g.defaultsupplier,#{condition.supplierid})
				</if>
				<if test="condition.bstype != null and condition.bstype != '' ">
					and g.bstype=#{condition.bstype}
				</if>
			</trim>
		)
	</sql>
	<sql id="getStorageTreeReportListDataGoods_sql">
		(
		<![CDATA[
		  select t.goodsid,t.brandid,t.storageid,t.barcode,g.name as goodsname,g.spell,t.existingnum * g.basesaleprice as basesaleamount ,g.state,g.newbuyprice as price,if(${condition.isStorageAccount}='1' and s.isaloneaccount='1',t.costprice,g.newstorageprice) as costprice,t.costprice as storageprice,if(${condition.isStorageAccount}='1' and s.isaloneaccount='1',t.storageamount,0) as storageamount,m.rate as boxnum,t.istotalcontrol,t.issendstorage,if(g.defaultsupplier = "","empty",g.defaultsupplier)  as supplierid,
			t.existingnum,(t.existingnum / m.rate) AS auxexistingnum, floor(t.existingnum / m.rate) AS existingauxint,MOD (t.existingnum, m.rate) AS existingauxnum,g.newbuyprice * t.existingnum AS existingamount,if(${condition.isStorageAccount}='1' and s.isaloneaccount='1',t.costprice,g.newstorageprice) * t.existingnum AS costamount,
			t.usablenum,IF (t.usablenum < 0,ceil(t.usablenum / m.rate),floor(t.usablenum / m.rate)) AS usableauxint,MOD (t.usablenum, m.rate) AS usableauxnum,g.newbuyprice * t.usablenum AS usableamount,
			t.waitnum,IF (t.waitnum > 0,floor(ABS(t.waitnum) / m.rate) ,- floor(ABS(t.waitnum) / m.rate)) AS waitauxint,IF (t.waitnum > 0,ABS(t.waitnum) % m.rate ,- (ABS(t.waitnum) % m.rate)) AS waitauxnum,g.newbuyprice * t.waitnum AS waitamount,
			t.transitnum,IF (t.transitnum > 0,floor(ABS(t.transitnum) / m.rate) ,- floor(ABS(t.transitnum) / m.rate)) AS transitauxint,IF (t.transitnum > 0,ABS(t.transitnum) % m.rate ,- (ABS(t.transitnum) % m.rate)) AS transitauxnum,g.newbuyprice * t.transitnum AS transitamount,
			t.allotwaitnum,IF (t.allotwaitnum > 0,floor(ABS(t.allotwaitnum) / m.rate) ,- floor(ABS(t.allotwaitnum) / m.rate)) AS allotwaitauxint,IF (t.allotwaitnum > 0,ABS(t.allotwaitnum) % m.rate ,- (ABS(t.allotwaitnum) % m.rate)) AS allotwaitauxnum,g.newbuyprice * t.allotwaitnum AS allotwaitamount,
			t.allotenternum,IF (t.allotenternum > 0,floor(ABS(t.allotenternum) / m.rate) ,-floor(ABS(t.allotenternum) / m.rate)) AS allotenterauxint,IF (t.allotenternum > 0,ABS(t.allotenternum) % m.rate ,-(ABS(t.allotenternum) % m.rate)) AS allotenterauxnum,g.newbuyprice * t.allotenternum AS allotenteramount,
			t.projectedusablenum,IF (t.projectedusablenum < 0,ceil(t.projectedusablenum / m.rate),floor(t.projectedusablenum / m.rate)) AS projectedusableauxint, MOD(t.projectedusablenum, m.rate) AS projectedusableauxnum, g.newbuyprice * t.projectedusablenum AS projectedusableamount,
			t.safenum, floor(t.safenum / m.rate) AS safeauxint, MOD (t.safenum, m.rate) AS safeauxnum, g.newbuyprice * t.safenum AS safeamount, t.unitid, t.unitname, t.auxunitid, t.auxunitname, c.thisname as waresclassname
		   from t_storage_summary t
		   LEFT JOIN t_base_storage_info s on t.storageid=s.id
		   LEFT JOIN t_base_goods_info g on t.goodsid=g.id
		   LEFT JOIN t_base_goods_info_meteringunit m on t.goodsid=m.goodsid and m.isdefault='1'
		   left join t_base_goods_waresclass c on g.defaultsort = c.id
		]]>
		<trim prefix="where" prefixOverrides="and|or">
			<include refid="common.Page_querySql"/>
			<include refid="common.Page_dataSql"/>
			<if test="condition.brandid != null and condition.brandid != ''">
				and FIND_IN_SET(t.brandid,#{condition.brandid})
			</if>
			<if test="condition.goodsid != null and condition.goodsid != ''">
				and FIND_IN_SET(t.goodsid,#{condition.goodsid})
			</if>
			<if test="condition.goodssort != null and condition.goodssort != '' ">
				and FIND_IN_SET(g.defaultsort,#{condition.goodssort})
			</if>
			<if test="condition.storageid != null and condition.storageid != '' ">
				and FIND_IN_SET(t.storageid,#{condition.storageid})
			</if>
			<if test="condition.istotalcontrol != null and ondition.istotalcontrol != '' ">
				and t.istotalcontrol = #{condition.istotalcontrol}
			</if>
			<if test="condition.supplierid != null and condition.supplierid != '' ">
				and FIND_IN_SET(g.defaultsupplier,#{condition.supplierid})
			</if>
			<if test="condition.bstype != null and condition.bstype != '' ">
				and g.bstype=#{condition.bstype}
			</if>
			<if test="condition.expandid != null and condition.expandid != '' ">
				and t.brandid=#{condition.expandid}
			</if>
			<if test="condition.expandpid != null and condition.expandpid != '' and  condition.treetype == 'supplier' ">
				and g.defaultsupplier=#{condition.expandpid}
			</if>
			<if test="condition.expandpid != null and condition.expandpid != '' and  condition.treetype != 'supplier' ">
				and t.storageid=#{condition.expandpid}
			</if>
		</trim>
		)
	</sql>


	<sql id="getStorageTreeReportListDataGroupByStorageidAndBrandid_sql">
	(
		SELECT
		CONCAT(z.storageid,z.brandid) as id,z.storageid as pid,z.brandid as data,"brandid" as datatype,
		<include refid="getStorageTreeReportListDataColumn_sql"/>
		from
		<include refid="getStorageTreeReportListData_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.state != null and condition.state != '' ">
				and z.state =#{condition.state}
			</if>
			<if test="condition.existingnum == 'true'">
				and existingnum != 0 or storageamount!=0
			</if>
		</trim>
		GROUP BY z.storageid,z.brandid
	)
	</sql>

	<sql id="getStorageTreeReportListDataGroupBySupplieridAndBrandid_sql">
		(
		SELECT
		CONCAT(z.supplierid,z.brandid)  as id , z.supplierid as pid,z.brandid as data,"brandid" as datatype,
		<include refid="getStorageTreeReportListDataColumn_sql"/>
		from
		<include refid="getStorageTreeReportListData_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.state != null and condition.state != '' ">
				and z.state =#{condition.state}
			</if>
			<if test="condition.existingnum == 'true'">
				and existingnum != 0 or storageamount!=0
			</if>
		</trim>
		GROUP BY z.supplierid,z.brandid
		)
	</sql>

	<sql id="getStorageTreeReportListDataGroupBySupplierid_sql">
		(
		SELECT
		z.supplierid as id,"" as pid,z.supplierid as data,"supplierid" as datatype,

		<include refid="getStorageTreeReportListDataColumn_sql"/>
		from
		<include refid="getStorageTreeReportListData_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.state != null and condition.state != '' ">
				and z.state =#{condition.state}
			</if>
			<if test="condition.existingnum == 'true' ">
				and existingnum != 0 or storageamount!=0
			</if>
		</trim>
		GROUP BY z.supplierid
		)
	</sql>

	<sql id="getStorageTreeReportListDataGroupByStorageid_sql">
		(
		SELECT
		z.storageid as id,
		<if test="condition.treetype == 'storage' ">
			"" as pid,
		</if>
		<if test="condition.treetype == 'allstorage' ">
			"allstorage" as pid,
		</if>
		z.storageid as data,"storageid" as datatype,
		<include refid="getStorageTreeReportListDataColumn_sql"/>
		from
		<include refid="getStorageTreeReportListData_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.state != null and condition.state != '' ">
				and z.state =#{condition.state}
			</if>
			<if test="condition.existingnum == 'true' ">
				and existingnum != 0 or storageamount!=0
			</if>
		</trim>
		GROUP BY z.storageid
		)
	</sql>

	<sql id="getStorageTreeReportListDataAllstorage_sql">
		(
		SELECT
		"allstorage" as id,"" as pid,"allstorage" as data,"storageid" as datatype,
		<include refid="getStorageTreeReportListDataColumn_sql"/>
		from
		<include refid="getStorageTreeReportListData_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.state != null and condition.state != '' ">
				and z.state =#{condition.state}
			</if>
			<if test="condition.existingnum == 'true' ">
				and existingnum != 0 or storageamount!=0
			</if>
		</trim>
		)
	</sql>

	<sql id="getStorageTreeReportListDataExpand_sql">
		(
		SELECT
		z.goodsid as id,
		<if test=" condition.treetype == 'supplier' ">
			CONCAT(z.supplierid,z.brandid)  as pid ,
		</if>
		<if test="condition.treetype != 'supplier' ">
			CONCAT(z.storageid,z.brandid)  as pid ,
		</if>
		z.goodsid as data,"goodsid" as datatype,
		<![CDATA[
		z.goodsid,z.brandid,z.storageid,z.goodsname,z.barcode,z.price,z.costprice,z.storageprice,sum(z.storageamount) as storageamount,z.boxnum,z.spell,z.supplierid,z.state,z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.waresclassname,
		sum(z.existingnum) as existingnum,sum(z.auxexistingnum) as auxexistingnum,sum(basesaleamount) as basesaleamount ,sum(z.existingauxint) as existingauxint,sum(z.existingauxnum) as existingauxnum,CONCAT(sum(z.existingauxint),z.auxunitname,sum(z.existingauxnum),z.unitname) as auxexistingdetail,sum(z.existingamount) as existingamount,sum(z.costamount) as costamount,
		sum(z.usablenum) as usablenum,if(sum(z.usablenum)<0,-ABS(sum(z.usableauxint)),ABS(sum(z.usableauxint))) as usableauxint,if(sum(z.usablenum)<0,-ABS(sum(z.usableauxnum)),ABS(sum(z.usableauxnum))) as usableauxnum,CONCAT(if(sum(z.usablenum)<0,'-',''),ABS(sum(z.usableauxint)),z.auxunitname,ABS(sum(z.usableauxnum)),z.unitname) as auxusabledetail,sum(z.usableamount) as usableamount,
		sum(z.waitnum) as waitnum,if(sum(z.waitnum)<0,-ABS(sum(z.waitauxint)),ABS(sum(z.waitauxint))) as waitauxint,if(sum(z.waitnum)<0,-ABS(sum(z.waitauxnum)),ABS(sum(z.waitauxnum))) as waitauxnum,CONCAT(if(sum(z.waitnum)<0,'-',''),ABS(sum(z.waitauxint)),z.auxunitname,ABS(sum(z.waitauxnum)),z.unitname) as auxwaitdetail,sum(z.waitamount) as waitamount,
		sum(z.transitnum) as transitnum,if(sum(z.transitnum)<0,-ABS(sum(z.transitauxint)),ABS(sum(z.transitauxint))) as transitauxint,if(sum(z.transitnum)<0,-ABS(sum(z.transitauxnum)),ABS(sum(z.transitauxnum))) as transitauxnum,CONCAT(if(sum(z.transitnum)<0,'-',''),ABS(sum(z.transitauxint)),z.auxunitname,ABS(sum(z.transitauxnum)),z.unitname) as auxtransitdetail,sum(z.transitamount) as transitamount,
		sum(z.allotwaitnum) as allotwaitnum,if(sum(z.allotwaitnum)<0,-ABS(sum(z.allotwaitauxint)),ABS(sum(z.allotwaitauxint))) as allotwaitauxint,if(sum(z.allotwaitnum)<0,-ABS(sum(z.allotwaitauxnum)),ABS(sum(z.allotwaitauxnum))) as allotwaitauxnum,CONCAT(if(sum(z.allotwaitnum)<0,'-',''),ABS(sum(z.allotwaitauxint)),z.auxunitname,ABS(sum(z.allotwaitauxnum)),z.unitname) as auxallotwaitdetail,sum(z.allotwaitamount) as allotwaitamount,
		sum(z.allotenternum) as allotenternum,if(sum(z.allotenternum)<0,-ABS(sum(z.allotenterauxint)),ABS(sum(z.allotenterauxint))) as allotenterauxint,if(sum(z.allotenternum)<0,-ABS(sum(z.allotenterauxnum)),ABS(sum(z.allotenterauxnum))) as allotenterauxnum,CONCAT(if(sum(z.allotenternum)<0,'-',''),ABS(sum(z.allotenterauxint)),z.auxunitname,ABS(sum(z.allotenterauxnum)),z.unitname) as auxallotenterdetail,sum(z.allotenteramount) as allotenteramount,
		sum(z.projectedusablenum) as projectedusablenum,if(sum(z.projectedusablenum)<0,-ABS(sum(z.projectedusableauxint)),ABS(sum(z.projectedusableauxint))) as projectedusableauxint,if(sum(z.projectedusablenum)<0,-ABS(sum(z.projectedusableauxnum)),ABS(sum(z.projectedusableauxnum))) as projectedusableauxnum,CONCAT(if(sum(z.projectedusablenum)<0,'-',''),ABS(sum(z.projectedusableauxint)),z.auxunitname,ABS(sum(z.projectedusableauxnum)),z.unitname) as auxprojectedusabledetail,sum(z.projectedusableamount) as projectedusableamount,
		sum(z.safenum) as safenum,if(sum(z.safenum)<0,-ABS(sum(z.safeauxint)),ABS(sum(z.safeauxint))) as safeauxint,if(sum(z.safenum)<0,-ABS(sum(z.safeauxnum)),ABS(sum(z.safeauxnum))) as safeauxnum,CONCAT(if(sum(z.safenum)<0,'-',''),ABS(sum(z.safeauxint)),z.auxunitname,ABS(sum(z.safeauxnum)),z.unitname) as auxsafedetail,sum(z.safeamount) as safeamount
		]]>
		from
		<include refid="getStorageTreeReportListDataGoods_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.state != null and condition.state != '' ">
				and z.state =#{condition.state}
			</if>
			<if test="condition.existingnum == 'true' ">
				and existingnum != 0 or storageamount!=0
			</if>
		</trim>
		GROUP BY z.goodsid
		)
	</sql>
	<sql id="getStorageTreeReportListDataExport_sql">
		(
		SELECT
		z.goodsid as id,
		<if test=" condition.treetype == 'supplier' ">
			CONCAT(z.supplierid,z.brandid)  as pid ,
		</if>
		<if test="condition.treetype != 'supplier' ">
			CONCAT(z.storageid,z.brandid)  as pid ,
		</if>
		z.goodsid as data,"goodsid" as datatype,
		<![CDATA[
		z.goodsid,z.brandid,z.storageid,z.goodsname,z.barcode,z.price,z.costprice,z.storageprice,sum(z.storageamount) as storageamount,z.boxnum,z.spell,z.supplierid,z.state,z.unitid,z.unitname,z.auxunitid,z.auxunitname,z.waresclassname,
		sum(z.existingnum) as existingnum,sum(z.auxexistingnum) as auxexistingnum,sum(basesaleamount) as basesaleamount ,sum(z.existingauxint) as existingauxint,sum(z.existingauxnum) as existingauxnum,CONCAT(sum(z.existingauxint),z.auxunitname,sum(z.existingauxnum),z.unitname) as auxexistingdetail,sum(z.existingamount) as existingamount,sum(z.costamount) as costamount,
		sum(z.usablenum) as usablenum,if(sum(z.usablenum)<0,-ABS(sum(z.usableauxint)),ABS(sum(z.usableauxint))) as usableauxint,if(sum(z.usablenum)<0,-ABS(sum(z.usableauxnum)),ABS(sum(z.usableauxnum))) as usableauxnum,CONCAT(if(sum(z.usablenum)<0,'-',''),ABS(sum(z.usableauxint)),z.auxunitname,ABS(sum(z.usableauxnum)),z.unitname) as auxusabledetail,sum(z.usableamount) as usableamount,
		sum(z.waitnum) as waitnum,if(sum(z.waitnum)<0,-ABS(sum(z.waitauxint)),ABS(sum(z.waitauxint))) as waitauxint,if(sum(z.waitnum)<0,-ABS(sum(z.waitauxnum)),ABS(sum(z.waitauxnum))) as waitauxnum,CONCAT(if(sum(z.waitnum)<0,'-',''),ABS(sum(z.waitauxint)),z.auxunitname,ABS(sum(z.waitauxnum)),z.unitname) as auxwaitdetail,sum(z.waitamount) as waitamount,
		sum(z.transitnum) as transitnum,if(sum(z.transitnum)<0,-ABS(sum(z.transitauxint)),ABS(sum(z.transitauxint))) as transitauxint,if(sum(z.transitnum)<0,-ABS(sum(z.transitauxnum)),ABS(sum(z.transitauxnum))) as transitauxnum,CONCAT(if(sum(z.transitnum)<0,'-',''),ABS(sum(z.transitauxint)),z.auxunitname,ABS(sum(z.transitauxnum)),z.unitname) as auxtransitdetail,sum(z.transitamount) as transitamount,
		sum(z.allotwaitnum) as allotwaitnum,if(sum(z.allotwaitnum)<0,-ABS(sum(z.allotwaitauxint)),ABS(sum(z.allotwaitauxint))) as allotwaitauxint,if(sum(z.allotwaitnum)<0,-ABS(sum(z.allotwaitauxnum)),ABS(sum(z.allotwaitauxnum))) as allotwaitauxnum,CONCAT(if(sum(z.allotwaitnum)<0,'-',''),ABS(sum(z.allotwaitauxint)),z.auxunitname,ABS(sum(z.allotwaitauxnum)),z.unitname) as auxallotwaitdetail,sum(z.allotwaitamount) as allotwaitamount,
		sum(z.allotenternum) as allotenternum,if(sum(z.allotenternum)<0,-ABS(sum(z.allotenterauxint)),ABS(sum(z.allotenterauxint))) as allotenterauxint,if(sum(z.allotenternum)<0,-ABS(sum(z.allotenterauxnum)),ABS(sum(z.allotenterauxnum))) as allotenterauxnum,CONCAT(if(sum(z.allotenternum)<0,'-',''),ABS(sum(z.allotenterauxint)),z.auxunitname,ABS(sum(z.allotenterauxnum)),z.unitname) as auxallotenterdetail,sum(z.allotenteramount) as allotenteramount,
		sum(z.projectedusablenum) as projectedusablenum,if(sum(z.projectedusablenum)<0,-ABS(sum(z.projectedusableauxint)),ABS(sum(z.projectedusableauxint))) as projectedusableauxint,if(sum(z.projectedusablenum)<0,-ABS(sum(z.projectedusableauxnum)),ABS(sum(z.projectedusableauxnum))) as projectedusableauxnum,CONCAT(if(sum(z.projectedusablenum)<0,'-',''),ABS(sum(z.projectedusableauxint)),z.auxunitname,ABS(sum(z.projectedusableauxnum)),z.unitname) as auxprojectedusabledetail,sum(z.projectedusableamount) as projectedusableamount,
		sum(z.safenum) as safenum,if(sum(z.safenum)<0,-ABS(sum(z.safeauxint)),ABS(sum(z.safeauxint))) as safeauxint,if(sum(z.safenum)<0,-ABS(sum(z.safeauxnum)),ABS(sum(z.safeauxnum))) as safeauxnum,CONCAT(if(sum(z.safenum)<0,'-',''),ABS(sum(z.safeauxint)),z.auxunitname,ABS(sum(z.safeauxnum)),z.unitname) as auxsafedetail,sum(z.safeamount) as safeamount
		]]>
		from
		<include refid="getStorageTreeReportListDataGoods_sql"/> z
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.state != null and condition.state != '' ">
				and z.state =#{condition.state}
			</if>
			<if test="condition.existingnum == 'true' ">
				and existingnum != 0 or storageamount!=0
			</if>
		</trim>
		<if test=" condition.treetype == 'supplier' ">
			GROUP BY z.goodsid,z.supplierid,z.brandid
		</if>
		<if test="condition.treetype != 'supplier' ">
			GROUP BY z.goodsid,z.storageid,z.brandid
		</if>

		)
	</sql>

	<select id="getStorageTreeReportListData" parameterType="com.hd.agent.common.util.PageMap" resultType="java.util.Map">
		<if test="condition.isexpand != 'isexpand' ">
			<if test="condition.treetype == 'allstorage' or condition.treetype == 'storage'">
				SELECT
				z.*
				from
				<include refid="getStorageTreeReportListDataGroupByStorageid_sql"/> z
				UNION ALL
				SELECT
				z.*
				from
				<include refid="getStorageTreeReportListDataGroupByStorageidAndBrandid_sql"/> z
				<if test="condition.treetype == 'allstorage' ">
					UNION ALL
					SELECT
					z.*
					from
					<include refid="getStorageTreeReportListDataAllstorage_sql"/> z
				</if>
			</if>
			<if test="condition.treetype == 'supplier' ">
				SELECT
				z.*
				from
				<include refid="getStorageTreeReportListDataGroupBySupplierid_sql"/> z
				UNION ALL
				SELECT
				z.*
				from
				<include refid="getStorageTreeReportListDataGroupBySupplieridAndBrandid_sql"/> z
			</if>
			<if test="condition.exportgoods == 'true' ">
				UNION ALL
				SELECT
				z.*
				from
				<include refid="getStorageTreeReportListDataExport_sql"/> z
			</if>
		</if>
		<if test="condition.isexpand == 'isexpand' ">
			SELECT
			z.*
			from
			<include refid="getStorageTreeReportListDataExpand_sql"/> z
		</if>
	</select>
</mapper>
