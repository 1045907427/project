<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hd.agent.basefiles.dao.PersonnelMapper" >
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
	<sql id="Personnel_Column_Info">
		id, name, state, remark, adduserid, adddeptid, addtime, modifyuserid, modifytime,
	    openuserid, opentime, closeuserid, closetime, photograph, namepinyin, personnelstyle,
	    highestdegree, datesemployed, belongdeptid, belongpost, sex, maritalstatus, birthday,
	    age, idcard, nation, nativeplace, polstatus, tel, fax, email, telphone, compcornet,adjunctid,
	    salaryscheme, address, addrpostcode, householdaddr, householdcode, employetype,leadid,
	    field01, field02, field03, field04, field05, field06, field07, field08, field09, field10, field11, field12
	</sql>
	<sql id="Personnel_Column_List">
		<choose>
			<when test="cols!=null">
				<include refid="common.Page_Column"/>
			</when>
			<when test="cols==null">
				id, name, state, remark, adduserid, adddeptid, addtime, modifyuserid, modifytime,
			    openuserid, opentime, closeuserid, closetime, photograph, namepinyin, personnelstyle,
			    highestdegree, datesemployed, belongdeptid, belongpost, sex, maritalstatus, birthday,
			    age, idcard, nation, nativeplace, polstatus, tel, fax, email, telphone, compcornet,adjunctid,
			    salaryscheme, address, addrpostcode, householdaddr, householdcode, employetype,leadid,
			    field01, field02, field03, field04, field05, field06, field07, field08, field09, field10, field11, field12
			</when>
		</choose>
	</sql>
	<select id="returnPersnnelIdByName" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Personnel">
		select * from t_base_personnel where name = #{name}
	</select>
    <select id="returnPersnnelById" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Personnel">
        select * from t_base_personnel where id = #{id}
    </select>
	<!-- 根据部门编号获取人员档案列表 -->
	<select id="getPersonnelList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.Personnel">
		select 
		<include refid="Personnel_Column_List"/>
		from t_base_personnel
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.belongdeptid != null and condition.belongdeptid != ''">
				and belongdeptid like CONCAT(#{condition.belongdeptid},'%')
			</if>
			<if test="condition.name != null" >
	         	and name like CONCAT('%',#{condition.name},'%')
	      	</if>
	      	<if test="condition.id != null" >
	         	and id like CONCAT('%',#{condition.id},'%')
	      	</if>
	      	<if test="condition.datesemployed1 != null" >
	         	<![CDATA[and datesemployed > STR_TO_DATE(#{condition.datesemployed1},'%Y-%m-%d')]]>
	      	</if>
	      	<if test="condition.datesemployed2 != null">
			    <![CDATA[and datesemployed <= STR_TO_DATE(#{condition.datesemployed2},'%Y-%m-%d')]]>
		    </if>
			<include refid="common.Page_querySql"/>
	      	<include refid="common.Page_dataSql"/>
		</trim>
        <if test="condition.isflag == null" >
		<include refid="common.Page_limit"/>
        </if>
	</select>
	<!-- 根据部门编号获取到的人员档案数量 -->
	<select id="getPersonnelCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
		select count(1) from t_base_personnel
		<trim prefix="where" prefixOverrides="and|or">
			<if test="condition.belongdeptid != null and condition.belongdeptid != ''">
				and belongdeptid like CONCAT(#{condition.belongdeptid},'%')
			</if>
			<if test="condition.name != null" >
	         	and name like CONCAT('%',#{condition.name},'%')
	      	</if>
	      	<if test="condition.id != null" >
	         	and id like CONCAT('%',#{condition.id},'%')
	      	</if>
	      	<if test="condition.datesemployed1 != null" >
	         	<![CDATA[and datesemployed > STR_TO_DATE(#{condition.datesemployed1},'%Y-%m-%d')]]>
	      	</if>
	      	<if test="condition.datesemployed2 != null">
			    <![CDATA[and datesemployed <= STR_TO_DATE(#{condition.datesemployed2},'%Y-%m-%d')]]>
		    </if>
			<include refid="common.Page_querySql"/>
	      	<include refid="common.Page_dataSql"/>
		</trim>
	</select>
	<!-- 人员编号是否已存在 -->
	<select id="isExistPersonnelId" parameterType="java.lang.String" resultType="int">
		select count(1) from t_base_personnel where id=#{id}
	</select>
	<!-- 新增人员信息 -->
	<insert id="addPersonnelInfo" parameterType="com.hd.agent.basefiles.model.Personnel">
		insert into t_base_personnel
	    <trim prefix="(" suffix=")" suffixOverrides="," >
	      <if test="id != null" >
	        id,
	      </if>
	      <if test="name != null" >
	        name,
	      </if>
	      <if test="state != null" >
	        state,
	      </if>
	      <if test="remark != null" >
	        remark,
	      </if>
	      <if test="adduserid != null" >
	        adduserid,
	      </if>
	      <if test="adddeptid != null" >
	        adddeptid,
	      </if>
	      <if test="1 == 1 " >
	        addtime,
	      </if>
	      <if test="photograph != null" >
	        photograph,
	      </if>
	      <if test="namepinyin != null" >
	        namepinyin,
	      </if>
	      <if test="personnelstyle != null" >
	        personnelstyle,
	      </if>
	      <if test="highestdegree != null" >
	        highestdegree,
	      </if>
	      <if test="datesemployed != null" >
	        datesemployed,
	      </if>
	      <if test="belongdeptid != null" >
	        belongdeptid,
	      </if>
	      <if test="belongpost != null" >
	        belongpost,
	      </if>
	      <if test="sex != null" >
	        sex,
	      </if>
	      <if test="maritalstatus != null" >
	        maritalstatus,
	      </if>
	      <if test="birthday != null" >
	        birthday,
	      </if>
	      <if test="age != null" >
	        age,
	      </if>
	      <if test="idcard != null" >
	        idcard,
	      </if>
	      <if test="nation != null" >
	        nation,
	      </if>
	      <if test="nativeplace != null" >
	        nativeplace,
	      </if>
	      <if test="polstatus != null" >
	        polstatus,
	      </if>
	      <if test="tel != null" >
	        tel,
	      </if>
	      <if test="fax != null" >
	        fax,
	      </if>
	      <if test="email != null" >
	        email,
	      </if>
	      <if test="telphone != null" >
	        telphone,
	      </if>
	      <if test="compcornet != null" >
	        compcornet,
	      </if>
	      <if test="salaryscheme != null" >
	        salaryscheme,
	      </if>
	      <if test="employetype != null" >
	        employetype,
	      </if>
	      <if test="address != null" >
	        address,
	      </if>
	      <if test="addrpostcode != null" >
	        addrpostcode,
	      </if>
	      <if test="householdaddr != null" >
	        householdaddr,
	      </if>
	      <if test="householdcode != null" >
	        householdcode,
	      </if>
	      <if test="field01 != null" >
	        field01,
	      </if>
	      <if test="field02 != null" >
	        field02,
	      </if>
	      <if test="field03 != null" >
	        field03,
	      </if>
	      <if test="field04 != null" >
	        field04,
	      </if>
	      <if test="field05 != null" >
	        field05,
	      </if>
	      <if test="field06 != null" >
	        field06,
	      </if>
	      <if test="field07 != null" >
	        field07,
	      </if>
	      <if test="field08 != null" >
	        field08,
	      </if>
	      <if test="field09 != null" >
	        field09,
	      </if>
	      <if test="field10 != null" >
	        field10,
	      </if>
	      <if test="field11 != null" >
	        field11,
	      </if>
	      <if test="field12 != null" >
	        field12,
	      </if>
	      <if test="adjunctid != null" >
	        adjunctid,
	      </if>
	      <if test="leadid != null">
	      	leadid,
	      </if>
	    </trim>
	    <trim prefix="values (" suffix=")" suffixOverrides="," >
	      <if test="id != null" >
	        #{id},
	      </if>
	      <if test="name != null" >
	        #{name},
	      </if>
	      <if test="state != null" >
	        #{state},
	      </if>
	      <if test="remark != null" >
	        #{remark},
	      </if>
	      <if test="adduserid != null" >
	        #{adduserid},
	      </if>
	      <if test="adddeptid != null" >
	        #{adddeptid},
	      </if>
	      <if test="1 == 1" >
	        now(),
	      </if>
	      <if test="photograph != null" >
	        #{photograph},
	      </if>
	      <if test="namepinyin != null" >
	        #{namepinyin},
	      </if>
	      <if test="personnelstyle != null" >
	        #{personnelstyle},
	      </if>
	      <if test="highestdegree != null" >
	        #{highestdegree},
	      </if>
	      <if test="datesemployed != null" >
	        #{datesemployed},
	      </if>
	      <if test="belongdeptid != null" >
	        #{belongdeptid},
	      </if>
	      <if test="belongpost != null" >
	        #{belongpost},
	      </if>
	      <if test="sex != null" >
	        #{sex},
	      </if>
	      <if test="maritalstatus != null" >
	        #{maritalstatus},
	      </if>
	      <if test="birthday != null" >
	        #{birthday},
	      </if>
	      <if test="age != null" >
	        #{age},
	      </if>
	      <if test="idcard != null" >
	        #{idcard},
	      </if>
	      <if test="nation != null" >
	        #{nation},
	      </if>
	      <if test="nativeplace != null" >
	        #{nativeplace},
	      </if>
	      <if test="polstatus != null" >
	        #{polstatus},
	      </if>
	      <if test="tel != null" >
	        #{tel},
	      </if>
	      <if test="fax != null" >
	        #{fax},
	      </if>
	      <if test="email != null" >
	        #{email},
	      </if>
	      <if test="telphone != null" >
	        #{telphone},
	      </if>
	      <if test="compcornet != null" >
	        #{compcornet},
	      </if>
	      <if test="salaryscheme != null" >
	        #{salaryscheme},
	      </if>
	      <if test="employetype != null" >
	        #{employetype},
	      </if>
	      <if test="address != null" >
	        #{address},
	      </if>
	      <if test="addrpostcode != null" >
	        #{addrpostcode},
	      </if>
	      <if test="householdaddr != null" >
	        #{householdaddr},
	      </if>
	      <if test="householdcode != null" >
	        #{householdcode},
	      </if>
	      <if test="field01 != null" >
	        #{field01},
	      </if>
	      <if test="field02 != null" >
	        #{field02},
	      </if>
	      <if test="field03 != null" >
	        #{field03},
	      </if>
	      <if test="field04 != null" >
	        #{field04},
	      </if>
	      <if test="field05 != null" >
	        #{field05},
	      </if>
	      <if test="field06 != null" >
	        #{field06},
	      </if>
	      <if test="field07 != null" >
	        #{field07},
	      </if>
	      <if test="field08 != null" >
	        #{field08},
	      </if>
	      <if test="field09 != null" >
	        #{field09},
	      </if>
	      <if test="field10 != null" >
	        #{field10},
	      </if>
	      <if test="field11 != null" >
	        #{field11},
	      </if>
	      <if test="field12 != null" >
	        #{field12},
	      </if>
	      <if test="adjunctid != null" >
	        #{adjunctid},
	      </if>
	      <if test="leadid != null">
	      	#{leadid},
	      </if>
	    </trim>
	</insert>
	<!-- 获取人员详情 -->
	<select id="getPersonnelInfo" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Personnel">
		select
		<include refid="Personnel_Column_Info"/>
		from t_base_personnel
		where id=#{id}
	</select>
	<select id="getPersonnelByName" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Personnel">
		select
		<include refid="Personnel_Column_Info"/>
		from t_base_personnel
		where name=#{name}
	</select>
	<select id="getPersonnelByDeptidAndName" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Personnel">
		select
		<include refid="Personnel_Column_Info"/>
		from t_base_personnel
		where name like '${name}%' and belongdeptid like '${deptid}%'
		limit 1
	</select>
	<!-- 修改人员信息 -->
	<update id="editPersonnelInfo" parameterType="com.hd.agent.basefiles.model.Personnel">
		update t_base_personnel
	    <set >
	      <if test="id != null" >
	        id = #{id},
	      </if>
	      <if test="name != null" >
	        name = #{name},
	      </if>
	      <if test="state != null" >
	        state = #{state},
	      </if>
	      <if test="remark != null" >
	        remark = #{remark},
	      </if>
	      <if test="modifyuserid != null" >
	        modifyuserid = #{modifyuserid},
	      </if>
	      <if test="1 == 1" >
	        modifytime = now(),
	      </if>
	      <if test="photograph != null" >
	        photograph = #{photograph},
	      </if>
	      <if test="namepinyin != null" >
	        namepinyin = #{namepinyin},
	      </if>
	      <if test="personnelstyle != null" >
	        personnelstyle = #{personnelstyle},
	      </if>
	      <if test="highestdegree != null" >
	        highestdegree = #{highestdegree},
	      </if>
	      <if test="datesemployed != null" >
	        datesemployed = #{datesemployed},
	      </if>
	      <if test="belongdeptid != null" >
	        belongdeptid = #{belongdeptid},
	      </if>
	      <if test="belongpost != null" >
	        belongpost = #{belongpost},
	      </if>
	      <if test="sex != null" >
	        sex = #{sex},
	      </if>
	      <if test="maritalstatus != null" >
	        maritalstatus = #{maritalstatus},
	      </if>
	      <if test="birthday != null" >
	        birthday = #{birthday},
	      </if>
	      <if test="age != null" >
	        age = #{age},
	      </if>
	      <if test="idcard != null" >
	        idcard = #{idcard},
	      </if>
	      <if test="nation != null" >
	        nation = #{nation},
	      </if>
	      <if test="nativeplace != null" >
	        nativeplace = #{nativeplace},
	      </if>
	      <if test="polstatus != null" >
	        polstatus = #{polstatus},
	      </if>
	      <if test="tel != null" >
	        tel = #{tel},
	      </if>
	      <if test="fax != null" >
	        fax = #{fax},
	      </if>
	      <if test="email != null" >
	        email = #{email},
	      </if>
	      <if test="telphone != null" >
	        telphone = #{telphone},
	      </if>
	      <if test="compcornet != null" >
	        compcornet = #{compcornet},
	      </if>
	      <if test="salaryscheme != null" >
	        salaryscheme = #{salaryscheme},
	      </if>
	      <if test="employetype != null" >
	        employetype = #{employetype},
	      </if>
	      <if test="address != null" >
	        address = #{address},
	      </if>
	      <if test="addrpostcode != null" >
	        addrpostcode = #{addrpostcode},
	      </if>
	      <if test="householdaddr != null" >
	        householdaddr = #{householdaddr},
	      </if>
	      <if test="householdcode != null" >
	        householdcode = #{householdcode},
	      </if>
	      <if test="field01 != null" >
	        field01 = #{field01},
	      </if>
	      <if test="field02 != null" >
	        field02 = #{field02},
	      </if>
	      <if test="field03 != null" >
	        field03 = #{field03},
	      </if>
	      <if test="field04 != null" >
	        field04 = #{field04},
	      </if>
	      <if test="field05 != null" >
	        field05 = #{field05},
	      </if>
	      <if test="field06 != null" >
	        field06 = #{field06},
	      </if>
	      <if test="field07 != null" >
	        field07 = #{field07},
	      </if>
	      <if test="field08 != null" >
	        field08 = #{field08},
	      </if>
	      <if test="field09 != null" >
	        field09 = #{field09},
	      </if>
	      <if test="field10 != null" >
	        field10 = #{field10},
	      </if>
	      <if test="field11 != null" >
	        field11 = #{field11},
	      </if>
	      <if test="field12 != null" >
	        field12 = #{field12},
	      </if>
	      <if test="adjunctid != null" >
	        adjunctid = #{adjunctid},
	      </if>
	      <if test="leadid != null">
	      	leadid = #{leadid},
	      </if>
	    </set>
	    where id = #{oldId}
	</update>
	<!-- 删除人员信息(批量) -->
	<delete id="deletePersonnelInfos">
		delete from t_base_personnel
	  	where id in
		<foreach collection="perIdsArr" item="item" open="("  separator="," close=")">  
			#{item}  
		</foreach>
	</delete>
	<!-- 启用人员(批量) -->
	<update id="enablePersonnels" parameterType="java.util.Map">
		update t_base_personnel set state='1',opentime = now(),openuserid = #{openuserid}
		where id in
		<foreach collection="enableList" item="item" open="("  separator="," close=")">  
			#{item}  
		</foreach>
	</update>
	<!-- 禁用人员(批量) -->
	<update id="disablePersonnels" parameterType="java.util.Map">
		update t_base_personnel set state='0',closeuserid = #{closeuserid},closetime = now()
		where id in
		<foreach collection="disableList" item="item" open="("  separator="," close=")">  
			#{item}  
		</foreach>
	</update>
	<!-- 启用人员 -->
	<update id="enablePersonnel" parameterType="java.util.Map">
		update t_base_personnel set state='1',opentime = now(),openuserid = #{openuserid}
		where id = #{id}
	</update>
	<!-- 禁用人员 -->
	<update id="disablePersonnel" parameterType="java.util.Map">
		update t_base_personnel set state='0',closeuserid = #{closeuserid},closetime = now()
		where id = #{id}
	</update>
	<!-- 根据人员id数组字符串获取人员档案列表 -->
	<select id="getPersonnelListByIds" resultType="com.hd.agent.basefiles.model.Personnel">
		select 
		<include refid="Personnel_Column_Info"/>
		from t_base_personnel where id in
		<foreach collection="idsArr" item="item" open="("  separator="," close=")">
			#{item}
		</foreach>
	</select>
	<!-- 根据业务属性employetype，获取人员列表 -->
	<select id="getPersListByOperType" resultType="com.hd.agent.basefiles.model.Personnel">
		select * from t_base_personnel
		where employetype like CONCAT('%',#{employetype},'%')
		and state='1' order by belongdeptid
	</select>
	<select id="getDeptListByOpertype" resultType="java.util.Map">
		SELECT DISTINCT p.belongdeptid as deptid from t_base_personnel p
		where p.employetype like CONCAT('%',#{employetype},'%') and p.state='1' order by p.belongdeptid
	</select>
	<select id="getPersListByOperTypeAndDeptid" resultType="com.hd.agent.basefiles.model.Personnel" useCache="false">
		select * from t_base_personnel
		where employetype like CONCAT('%',#{employetype},'%')
		<if test="deptid != null and deptid != ''" >
			and belongdeptid=#{deptid}
		</if>
		and state='1'
	</select>
    <select id="getPersonListByEmploytypeAndDeptid" resultType="com.hd.agent.basefiles.model.Personnel" useCache="false">
        select * from t_base_personnel
        where employetype like CONCAT('%','1','%') and belongdeptid=#{deptid}  and state='1'
    </select>

	<select id="getSaleUser" resultType="java.util.Map">
	SELECT p.id,p.name,p.belongdeptid deptid
	FROM t_base_personnel p
	WHERE p.state = '1' AND p.employetype LIKE CONCAT('%',CONCAT((SELECT c.code FROM t_sys_code c WHERE c.codename ='客户业务员' and c.type= 'employetype')),'%')
	</select>
	<!-- 获取所有人员列表 -->
	<select id="getAllPersonList" resultType="com.hd.agent.basefiles.model.Personnel">
		select * from t_base_personnel
	</select>
	
	<!-- 教育经历 -->
	
	<sql id="Personneledu_Column_List" >
    id, personid, startdate, enddate, educname, type, certificate, remark
  </sql>
  <!-- 根据人员编号获取教育经历列表 -->
  <select id="getEducationList" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Personneledu">
  	select
  	<include refid="Personneledu_Column_List"/>
  	from t_base_perssonnel_edu
  	<trim prefix="where" prefixOverrides="and|or" >
      <if test="personid != null" >
         and personid = #{personid}
      </if>
     </trim>
  </select>
  <!-- 根据编号删除教育经历 -->
  <delete id="deleteEdus" parameterType="java.util.List">
  	delete from t_base_perssonnel_edu
  	where id in
	<foreach collection="list" item="item" open="("  separator="," close=")">  
		#{item}  
	</foreach>
  </delete>
  <!-- 批量添加教育经历 -->
  <insert id="addEdus" parameterType="java.util.Map">
 	<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE" >
      select last_insert_id() as id 
    </selectKey>	
	insert into t_base_perssonnel_edu (personid, startdate, enddate, educname, type, certificate, remark)
	values
	<foreach collection="eduListMap" item="item" index="index" separator=",">
		(#{item.personid},#{item.startdate}, #{item.enddate},#{item.educname},#{item.type},#{item.certificate},#{item.remark})
	</foreach>
  </insert>
  <!-- 修改教育经历 -->
  <update id="editEdus" parameterType="com.hd.agent.basefiles.model.Personneledu">
  	update t_base_perssonnel_edu
    <set >
      <if test="personid != null" >
        personid = #{personid},
      </if>
      <if test="startdate != null" >
        startdate = #{startdate},
      </if>
      <if test="enddate != null" >
        enddate = #{enddate},
      </if>
      <if test="educname != null" >
        educname = #{educname},
      </if>
      <if test="type != null" >
        type = #{type},
      </if>
      <if test="certificate != null" >
        certificate = #{certificate},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
    </set>
    where id = #{id}
  </update>
	<!-- 根据人员编号personid删除教育经历 -->
	<delete id="deleteEduByPerid" parameterType="java.lang.String" >
		delete from t_base_perssonnel_edu
		<where>
			<if test="personid != null">
				personid = #{personid}
			</if>
		</where>
	</delete>
	<!-- 判断教育经历是否存在 -->
	<select id="isExistPersonnelEdu" parameterType="java.lang.Integer" resultType="java.lang.Integer">
	   select count(1) from t_base_perssonnel_edu where id = #{id}
	</select>
	
	<!-- 工作经历 -->
	
	<sql id="Personnelworks_Column_List" >
	  id, personid, startdate, enddate, workname, post, mainachievement, remark
	</sql>
	<!-- 根据人员编号获取工作经历列表 -->
  <select id="getWorksList" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Personnelworks">
  	select
  	<include refid="Personnelworks_Column_List"/>
  	from t_base_personnel_work
  	<trim prefix="where" prefixOverrides="and|or" >
      <if test="personid != null" >
         and personid = #{personid}
      </if>
     </trim>
  </select>
  <!-- 根据编号删除工作经历 -->
  <delete id="deleteWorks" parameterType="java.util.List">
  	delete from t_base_personnel_work
  	where id in
	<foreach collection="list" item="item" open="("  separator="," close=")">  
			#{item}  
	</foreach>
  </delete>
  <!-- 批量添加工作经历 -->
  <insert id="addWorks" parameterType="java.util.Map">
 	<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE" >
      select last_insert_id() as id 
    </selectKey>	
	insert into t_base_personnel_work (personid, startdate, enddate, workname, post, mainachievement, remark)
	values
	<foreach collection="workListMap" item="item" index="index" separator=",">
		(#{item.personid},#{item.startdate}, #{item.enddate},#{item.workname},#{item.post},#{item.mainachievement},#{item.remark})
	</foreach>
  </insert>
  <!-- 修改工作经历-->
  <update id="editWork" parameterType="com.hd.agent.basefiles.model.Personnelworks">
  	update t_base_personnel_work
    <set >
      <if test="personid != null" >
        personid = #{personid},
      </if>
      <if test="startdate != null" >
        startdate = #{startdate},
      </if>
      <if test="enddate != null" >
        enddate = #{enddate},
      </if>
      <if test="workname != null" >
        workname = #{workname},
      </if>
      <if test="post != null" >
        post = #{post},
      </if>
      <if test="mainachievement != null" >
        mainachievement = #{mainachievement},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
    </set>
    where id = #{id}
  </update>
	<!-- 根据人员编号personid删除工作经历 -->
	<delete id="deleteWorkByPerid" parameterType="java.lang.String">
		delete from t_base_personnel_work
		where personid = #{personid}
	</delete>
	<!-- 判断工作经历是否存在 -->
	<select id="isExistPersonnelWork" parameterType="java.lang.Integer" resultType="java.lang.Integer">
	   select count(1) from t_base_personnel_work where id = #{id}
	</select>
	
	<!-- 岗位变动记录 -->
	
	<sql id="Personnelpost_Column_List" >
    id, personid, startdate, enddate, belongdeptid, belongpostid, salaryscheme, remark
  </sql>
  <!-- 根据人员编号获取岗位变动记录 -->
  <select id="getPostList" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Personnelpost">
  	select
  	<include refid="Personnelpost_Column_List"/>
  	from t_base_personnel_post
  	<trim prefix="where" prefixOverrides="and|or" >
      <if test="personid != null" >
         and personid = #{personid}
      </if>
     </trim>
  </select>
  <!-- 根据编号删除岗位变动记录 -->
  <delete id="deletePosts" parameterType="java.util.List">
  	delete from t_base_personnel_post
  	where id in
	<foreach collection="list" item="item" open="("  separator="," close=")">  
			#{item}  
	</foreach>
  </delete>
  <!-- 批量添加岗位变动记录 -->
  <insert id="addPosts" parameterType="java.util.Map">
 	<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE" >
      select last_insert_id() as id 
    </selectKey>	
	insert into t_base_personnel_post (personid, startdate, enddate, belongdeptid, belongpostid, salaryscheme, remark)
	values
	<foreach collection="postListMap" item="item" index="index" separator=",">
		(#{item.personid},#{item.startdate}, #{item.enddate},#{item.belongdeptid},#{item.belongpostid},#{item.salaryscheme},#{item.remark})
	</foreach>
  </insert>
  <!-- 修改岗位变动记录 -->
  <update id="editPost" parameterType="com.hd.agent.basefiles.model.Personnelpost">
  	update t_base_personnel_post
    <set >
      <if test="personid != null" >
        personid = #{personid},
      </if>
      <if test="startdate != null" >
        startdate = #{startdate},
      </if>
      <if test="enddate != null" >
        enddate = #{enddate},
      </if>
      <if test="belongdeptid != null" >
        belongdeptid = #{belongdeptid},
      </if>
      <if test="belongpostid != null" >
        belongpostid = #{belongpostid},
      </if>
      <if test="salaryscheme != null" >
        salaryscheme = #{salaryscheme},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
    </set>
    where id = #{id}
  </update>
	<!-- 根据人员编号personid删除岗位变动记录 -->
	<delete id="deletePostByPerid" parameterType="java.lang.String">
		delete from t_base_personnel_post
		where personid = #{personid}
	</delete>
	<!-- 判断工作岗位是否存在 -->
	<select id="isExistPersonnelPost" parameterType="java.lang.Integer" resultType="java.lang.Integer">
	   select count(1) from t_base_personnel_post where id = #{id}
	</select>
	
	<!-- 对应客户 -->
	<sql id="PersonnelCustomer_Column_List" >
     id, personid, customerid
    </sql>
    <!-- 根据人员编号获取对应客户列表数据 -->
	<select id="getCustomerList" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelCustomer">
	  	select * from t_base_personnel_customer
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	     </trim>
	  </select>
	<!-- 根据人员编号获取对应客户列表数据 -->
	<select id="getCustomerList2" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.PersonnelCustomer">
	  	select
	  	<include refid="PersonnelCustomer_Column_List"/>
	  	from t_base_personnel_customer
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="condition.personid != null" >
	         and personid = #{condition.personid}
	      </if>
	     </trim>
	     order by customerid
	     <include refid="common.Page_limit"/>
	  </select>
	  <!-- 根据人员编号获取对应客户列表数据数量 -->
	  <select id="getCustomerListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
	  	select count(1) from (
	  		select
		  	<include refid="PersonnelCustomer_Column_List"/>
		  	from t_base_personnel_customer
		  	<trim prefix="where" prefixOverrides="and|or" >
		      <if test="condition.personid != null" >
		         and personid = #{condition.personid}
		      </if>
		     </trim>
	  	)t
	  </select>
	  <!-- 根据客户编码获取对应客户列表数据 -->
	  <select id="getCustomerByCustomerid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelCustomer">
	  	select * from t_base_personnel_customer where customerid = #{customerid}
	  </select>
	  <select id="getPsnCustomerListByMap" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelCustomer">
	  	SELECT t.* from t_base_personnel_customer t
		LEFT JOIN t_base_personnel t1 ON t1.id = t.personid
		WHERE t.customerid = #{customerid} and FIND_IN_SET(t1.belongdeptid,#{companys})
	  </select>
	  <update id="editPersonCustomer" parameterType="java.lang.String">
	  	update t_base_personnel_customer set
	  		customerid = #{customerid}
	  	where customerid = #{oldcustomerid}
	  </update>
	<!-- 根据编号删除对应客户 -->
	  <delete id="deleteCustomer" parameterType="java.util.List">
	  	delete from t_base_personnel_customer
	  	where id in
		<foreach collection="list" item="item" open="("  separator="," close=")">  
			#{item}  
		</foreach>
	  </delete>
	<!-- 批量添加对应客户 -->
	  <insert id="addCustomer" parameterType="java.util.Map">
		insert into t_base_personnel_customer (personid, customerid)
		values
		<foreach collection="customerListMap" item="item" index="index" separator=",">
			(#{item.personid},#{item.customerid})
		</foreach>
	  </insert>
	<insert id="addPersonnelCustomer">
		insert into t_base_personnel_customer (personid, customerid)
		values (#{personid},#{customerid})
	  </insert>
	<!-- 修改对应客户 -->
  <update id="editCustomer" parameterType="com.hd.agent.basefiles.model.PersonnelCustomer">
  	update t_base_personnel_customer
    <set >
      <if test="personid != null" >
        personid = #{personid},
      </if>
      <if test="customerid != null" >
        customerid = #{customerid},
      </if>
    </set>
    where id = #{id}
  </update>
  <select id="getPersonCustomerInfo" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelCustomer">
  	select * from t_base_personnel_customer
  	<trim prefix="where" prefixOverrides="and|or" >
      <if test="id != null" >
         and id = #{id}
      </if>
      <if test="personid != null" >
         and personid = #{personid}
      </if>
      <if test="customerid != null" >
         and customerid = #{customerid}
      </if>
    </trim>
  </select>
  <select id="getPersonBrandInfo" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
  	select * from t_base_personnel_brand
  	<trim prefix="where" prefixOverrides="and|or" >
      <if test="id != null" >
         and id = #{id}
      </if>
      <if test="personid != null" >
         and personid = #{personid}
      </if>
      <if test="brandid != null" >
         and brandid = #{brandid}
      </if>
    </trim>
  </select>
	<!-- 根据人员编号personid删除对应客户-->
	<delete id="deleteCustomerByPerid" parameterType="java.lang.String">
		delete from t_base_personnel_customer
		where personid = #{personid}
	</delete>
	<!-- 判断对应客户是否存在 -->
	<select id="isExistPersonnelCustomer" parameterType="java.lang.Integer" resultType="java.lang.Integer">
	   select count(1) from t_base_personnel_customer where id = #{id}
	</select>
	<delete id="deletePersonCustomerByParam" parameterType="java.util.Map">
		delete from t_base_personnel_customer 
		<trim prefix="where" prefixOverrides="and|or" >
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	      <if test="customerid != null" >
	         and customerid = #{customerid}
	      </if>
	    </trim>
	</delete>
	<delete id="deletePersonBrandByParam" parameterType="java.util.Map">
		delete from t_base_personnel_brand
		<trim prefix="where" prefixOverrides="and|or" >
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	      <if test="brandid != null" >
	         and brandid = #{brandid}
	      </if>
	    </trim>
	</delete>
	<!-- 对应品牌 -->
	<sql id="PersonnelBrand_Column_List" >
     id, personid, brandid
    </sql>
	<!-- 根据人员编号获取对应品牌列表数据 -->
	<select id="getBrandList" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
	  	select
	  	<include refid="PersonnelBrand_Column_List"/>
	  	from t_base_personnel_brand
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	     </trim>
	  </select>
	  <select id="getBrandList2" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
	  	select
	  	<include refid="PersonnelBrand_Column_List"/>
	  	from t_base_personnel_brand
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="condition.personid != null" >
	         and personid = #{condition.personid}
	      </if>
	     </trim>
	     <include refid="common.Page_limit"/>
	  </select>
	  <select id="getBrandListCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
	  	select count(1) from t_base_personnel_brand
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="condition.personid != null" >
	         and personid = #{condition.personid}
	      </if>
	     </trim>
	  </select>
	<!-- 根据编号删除对应品牌 -->
	  <delete id="deleteBrand" parameterType="java.util.List">
	  	delete from t_base_personnel_brand
	  	where id in
		<foreach collection="list" item="item" open="("  separator="," close=")">  
			#{item}  
		</foreach>
	  </delete>
	<!-- 批量添加对应品牌 -->
	  <insert id="addBrand" parameterType="java.util.Map">
	 	<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE" >
	      select last_insert_id() as id 
	    </selectKey>	
		insert into t_base_personnel_brand (personid, brandid)
		values
		<foreach collection="brandListMap" item="item" index="index" separator=",">
			(#{item.personid},#{item.brandid})
		</foreach>
	  </insert>
      <insert id="addPersonBrand">
		insert into t_base_personnel_brand (personid, brandid)
		values (#{personid},#{brandid})
	  </insert>

	  <insert id="addBrandAlone" parameterType="com.hd.agent.basefiles.model.PersonnelBrand">
	  	<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE" >
	      select last_insert_id() as id 
	    </selectKey>
	  	insert into t_base_personnel_brand
	  	<trim prefix="(" suffix=")" suffixOverrides="," >
	      <if test="personid != null" >
	        personid,
	      </if>
	      <if test="brandid != null" >
	        brandid,
	      </if>
	    </trim>
	    <trim prefix="values (" suffix=")" suffixOverrides="," >
	      <if test="personid != null" >
	      	#{personid},
	      </if>
	      <if test="brandid != null" >
	      	#{brandid},
	      </if>
	    </trim>
	  </insert>
	<!-- 修改对应品牌 -->
  <update id="editBrand" parameterType="com.hd.agent.basefiles.model.PersonnelBrand">
  	update t_base_personnel_brand
    <set >
      <if test="personid != null" >
        personid = #{personid},
      </if>
      <if test="brandid != null" >
        brandid = #{brandid},
      </if>
    </set>
    where id = #{id}
  </update>
	<!-- 根据人员编号personid删除对应品牌-->
	<delete id="deleteBrandByPerid" parameterType="java.lang.String">
		delete from t_base_personnel_brand
		where personid = #{personid}
	</delete>
	<!-- 判断对应品牌是否存在 -->
	<select id="isExistPersonnelBrand" parameterType="java.lang.Integer" resultType="java.lang.Integer">
	   select count(1) from t_base_personnel_brand where id = #{id}
	</select>
	<select id="isExistPersonBrandList" parameterType="java.lang.String" resultType="int">
		select count(1) from t_base_personnel_brand where personid = #{personid}
	</select>
	<!-- 根据品牌编码获取所有对应品牌列表数据 -->
	<select id="getPersonBrandListByBrandid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
		select * from t_base_personnel_brand where brandid = #{brandid}
	</select>
	<select id="getPersonBrandListByBrandids" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
		select * from t_base_personnel_brand where FIND_IN_SET(brandid,#{brandids}) ORDER BY brandid
	</select>
	
	<!-- 籍贯 -->
	<select id="getNPname" parameterType="java.lang.String" resultType="java.lang.String">
		select name from t_base_personnel_nplace
		where id=#{id}
	</select>
	
	<!-- 根据商品编码、客户编码、品牌编码获取人员信息 -->
	<select id="getPersonnelByGCB" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.Personnel" useCache="false">
		select p.id, p.name, p.state, p.remark, p.photograph, p.personnelstyle,p.highestdegree, p.datesemployed, 
		p.belongdeptid, p.belongpost, p.sex, p.maritalstatus, p.birthday,p.age, p.idcard, p.nation, p.nativeplace, 
		p.polstatus, p.tel, p.fax, p.email, p.telphone, p.compcornet,p.adjunctid,p.salaryscheme, p.address, p.addrpostcode, 
		p.householdaddr, p.householdcode, p.employetype
		from t_base_personnel p, t_base_personnel_brand b, t_base_personnel_customer c
		<trim prefix="where" prefixOverrides="and|or">
			<if test="brandid != null and brandid != ''">
				and b.brandid = #{brandid}
			</if>
			<if test="customerid != null and customerid != ''">
				and c.customerid = #{customerid}
			</if>
			<if test="1 == 1">
				AND b.personid = p.id 
			</if>
			<if test="1 == 1">
				AND c.personid = p.id
			</if>
		</trim>
		limit 1
	</select>
	<select id="getBrandUserIdByCustomerAndBrand" parameterType="java.lang.String" resultType="java.lang.String" useCache="false">
		select c.personid
		from t_base_personnel_customer c,t_base_personnel_brand b
		where c.personid=b.personid and c.customerid = #{customerid} and b.brandid = #{brandid}
		limit 1
	</select>
	<!-- 获取对应品牌详情 -->
	<select id="getBrandInfo" parameterType="java.lang.Integer" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
		select <include refid="PersonnelBrand_Column_List"/>
		from t_base_personnel_brand
		where id = #{id}
	</select>
	<!-- 根据部门编码获取人员所有列表数据 -->
	<select id="getPersonnelListByDeptid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Personnel">
		select * from t_base_personnel where belongdeptid like CONCAT(#{belongdeptid},'%')
	</select>
	<!-- 根据部门编码获取上级部门编码获取所有所属该上级部门的人员 -->
	<select id="getPersonListByWithoutDeptid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Personnel">
		SELECT t.* from t_base_personnel t
		WHERE t.belongdeptid like CONCAT(IF(<![CDATA[(SELECT t1.pid from t_base_department t1 where t1.id = #{belongdeptid}) <> '' ]]>,(SELECT t1.pid from t_base_department t1 where t1.id = #{belongdeptid}),#{belongdeptid}),'%')
	</select>
	
	<!-- 对应品牌和客户(客户) -->
    <select id="getCustomerListFromPsnBrandAndCustomer" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.PersonnelCustomer">
    	select distinct customerid, personid,id  from t_base_personnel_brandandcustomer
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="condition.personid != null" >
	      	<![CDATA[and personid = #{condition.personid} AND customerid <> '']]>
	      </if>
	     </trim>
	     <include refid="common.Page_limit"/>
    </select>
    <select id="getCustomerCountFromPsnBrandAndCustomer" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
    	select count(1) from (
    		select distinct  customerid, personid,id  from t_base_personnel_brandandcustomer
		  	<trim prefix="where" prefixOverrides="and|or" >
		      <if test="condition.personid != null" >
		         and personid = #{condition.personid}
		      </if>
		     </trim>
    	)z
    </select>
    <!-- 对应品牌和客户(品牌) -->
    <select id="getBrandListFromPsnBrandAndCustomer" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
    	select distinct brandid, personid from t_base_personnel_brandandcustomer
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="condition.personid != null" >
	        <![CDATA[and personid = #{condition.personid} and brandid <> '']]>
	      </if>
	     </trim>
	     <include refid="common.Page_limit"/>
    </select>
    <select id="getBrandCountFromPsnBrandAndCustomer" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
    	select count(1) from (
    		select distinct brandid, personid  from t_base_personnel_brandandcustomer
		  	<trim prefix="where" prefixOverrides="and|or" >
		      <if test="condition.personid != null" >
		         and personid = #{condition.personid}
		      </if>
		     </trim>
    	)z
    </select>
    <select id="getBrandCustomerListByCustomerid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer">
    	select * from t_base_personnel_brandandcustomer
    	where customerid = #{customerid}
    </select>
    <update id="editPersonBrandAndCustomerByCustomerid" parameterType="java.lang.String">
    	update t_base_personnel_brandandcustomer set
    		customerid = #{customerid}
    	where customerid = #{oldcustomerid}
    </update>
    <!-- 批量添加品牌和客户 -->
  	<insert id="addBrandAndCustomer" parameterType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer">
		insert into t_base_personnel_brandandcustomer
		 <trim prefix="(" suffix=")" suffixOverrides="," >
		 	<if test="personid != null and personid != ''" >
	         personid,
	        </if>
	        <if test="brandid != null and brandid != ''" >
		      brandid,
		    </if>
		    <if test="customerid != null and customerid != ''" >
		      customerid,
		    </if>
		    <if test="sign != null and sign != ''" >
		      sign,
		    </if>
		    <if test="1 == 1" >
		      addtime,
		    </if>
		 </trim>
		<trim prefix="values (" suffix=")" suffixOverrides="," >
	      <if test="personid != null and personid != ''" >
	         #{personid},
	        </if>
	        <if test="brandid != null and brandid != ''" >
		      #{brandid},
		    </if>
		    <if test="customerid != null and customerid != ''" >
		      #{customerid},
		    </if>
		    <if test="sign != null and sign != ''" >
		      #{sign},
		    </if>
		    <if test="1 == 1" >
		      now(),
		    </if>
	    </trim>
  	</insert>
  	<update id="editBrandAndCutomer" parameterType="com.hd.agent.basefiles.model.PersonnelBrand">
	  	update t_base_personnel_brandandcustomer
	    <set >
	      <if test="personid != null" >
	        personid = #{personid},
	      </if>
	      <if test="brandid != null" >
	        brandid = #{brandid},
	      </if>
	      <if test="customerid != null" >
	        customerid = #{customerid},
	      </if>
	      <if test="sign != null and sign != ''" >
		    sign = #{sign},
		  </if>
		  <if test="1 == 1" >
		    modifytime = now(),
		  </if>
	    </set>
	    where id = #{id}
  	</update>
	<select id="getBrandAndCustomerCount" parameterType="java.lang.String" resultType="int">
		select count(1) from t_base_personnel_brandandcustomer where personid = #{personid}
	</select>
	<delete id="deleteBrandAndCustomerByPersonid" parameterType="java.lang.String">
		delete from t_base_personnel_brandandcustomer where personid = #{personid}
	</delete>
	<select id="getBrandListByPersonnel" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
		select distinct brandid from t_base_personnel_brandandcustomer where personid = #{personid}
	</select>
	<delete id="deleteBrandAndCustomerByCustomerid" parameterType="java.util.Map">
		delete from t_base_personnel_brandandcustomer 
		<trim prefix="where" prefixOverrides="and|or" >
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	      <if test="customerid != null" >
	         and customerid = #{customerid}
	      </if>
	      <if test="brandid != null" >
	         and brandid = #{brandid}
	      </if>
	    </trim>
	</delete>
	<delete id="deleteBrandAndCustomerByBrandid" parameterType="java.util.Map">
		delete from t_base_personnel_brandandcustomer
		where personid = #{personid}
		and brandid = #{brandid}
	</delete>
	<select id="getBrandListByMap" parameterType="java.util.Map" resultType="int">
		SELECT count(1) FROM t_base_personnel_brandandcustomer WHERE personid = #{personid} AND brandid = #{brandid}
	</select>
	<select id="checkBrandAndCustomerRepeat" parameterType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer" resultType="int">
		SELECT COUNT(1) FROM t_base_personnel_brandandcustomer 
		WHERE personid = #{personid} AND customerid = #{customerid} AND brandid = #{brandid}
	</select>
    <select id="getCustListByMap" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer">
        SELECT * FROM t_base_personnel_brandandcustomer WHERE personid = #{personid} AND brandid = #{brandid}
    </select>
	<!-- 根据人员编号获取对应品牌和客户列表数据 -->
	<select id="getBrandAndCustomerList" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer">
	  	select * from t_base_personnel_brandandcustomer
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	     </trim>
	  </select>
	<select id="getBrandAndCustomerListMap" parameterType="java.util.Map" resultType="java.util.Map">
		select * from t_base_personnel_brandandcustomer t
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="personid != null" >
				and t.personid = #{personid}
			</if>
			<if test="addtime != null" >
				and DATE_FORMAT(t.addtime,'%Y-%m-%d') = STR_TO_DATE(#{addtime},'%Y-%m-%d')
			</if>
			<if test="startdate != null">
				and DATE_FORMAT(t.addtime,'%Y-%m-%d') >= STR_TO_DATE(#{startdate},'%Y-%m-%d')
			</if>
			<if test="enddate != null">
				<![CDATA[and DATE_FORMAT(t.addtime,'%Y-%m-%d') <= STR_TO_DATE(#{enddate},'%Y-%m-%d')]]>
			</if>
			<if test="customerid != null" >
				and t.customerid = #{customerid}
			</if>
		</trim>
	</select>
	<select id="getBrandListByCustomerid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer">
		SELECT brandid FROM t_base_personnel_brandandcustomer WHERE customerid = #{customerid}
	</select>
	<select id="getCustomerListByBrandid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer">
		SELECT customerid FROM t_base_personnel_brandandcustomer WHERE brandid = #{brandid}
	</select>
	<select id="checkExistBrandAndCusotmerPerson" parameterType="java.lang.String" resultType="int" useCache="false">
		select count(1) from t_base_personnel_brandandcustomer
		where brandid = #{brandid} and customerid = #{customerid}
	</select>

	<insert id="addPsnBrandAndCustomerFromTbrandAndTcustomerBypsnWithcst" parameterType="java.lang.String">
		INSERT INTO t_base_personnel_brandandcustomer (personid, brandid, customerid,sign, addtime)
		(SELECT b.personid, b.brandid,c.customerid,'1' as sign, NOW() AS addtime
		FROM t_base_personnel_brand b
		INNER JOIN t_base_personnel_customer c ON b.personid = c.personid
		WHERE b.personid = #{personid} and c.customerid = #{customerid})
	</insert>
	<insert id="addPsnBrandAndCustomerFromTbrandAndTcustomer" parameterType="java.lang.String">
		INSERT INTO t_base_personnel_brandandcustomer (personid, brandid, customerid,sign, addtime)
		(SELECT b.personid, b.brandid,c.customerid,'1' as sign, NOW() AS addtime
		FROM t_base_personnel_brand b
		INNER JOIN t_base_personnel_customer c ON b.personid = c.personid
		WHERE b.personid = #{personid})
	</insert>
	<delete id="deletePsnCustomerByPsnidAndCustomerid" parameterType="java.util.Map">
		delete from t_base_personnel_customer
		<trim prefix="where" prefixOverrides="and|or" >
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	      <if test="customerid != null" >
	         and customerid = #{customerid}
	      </if>
			<if test="customeridArr != null">
				AND customerid in
				<foreach collection="customeridArr" item="item" open="("  separator="," close=")">
					#{item}
				</foreach>
			</if>
	     </trim>
	</delete>
	<select id="getPersonnelByUserId" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Personnel">
		select a.* from t_base_personnel a inner join t_sys_user b on a.id = b.personnelid where b.userid = #{0} 
	</select>
	<select id="getBrandCustomerListByBrandid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer">
		select * from t_base_personnel_brandandcustomer where brandid = #{brandid}
	</select>
	<select id="getDistinctBrandGroupPersonid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
		SELECT a.personid,a.brandid,b.deptid
		FROM t_base_personnel_brand a
		LEFT JOIN t_base_goods_brand b ON a.brandid = b.id
		WHERE b.deptid = #{deptid}
		GROUP BY a.personid
	</select>
    <select id="getCustomeridUnionBrandid" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer">
       select bc.customerid from t_base_personnel_brand b
            inner join t_base_personnel_brandandcustomer bc on b.brandid = bc.brandid
            WHERE b.personid = #{personid} AND b.brandid = #{brandid}
    </select>
	<delete id="deleteBrandListByBrandid" parameterType="java.lang.String">
		delete from t_base_personnel_brand
		where brandid = #{brandid}
	</delete>
	<delete id="deleteBrandAndCustomerByBrand" parameterType="java.lang.String">
		delete from t_base_personnel_brandandcustomer
		where brandid = #{brandid}
	</delete>
	<delete id="deleteBrandAndCustomerByCustomer" parameterType="java.lang.String">
		delete from t_base_personnel_brandandcustomer
		where customerid = #{customerid}
	</delete>
	<delete id="deleteCustomerListByCustomerid" parameterType="java.lang.String">
		delete from t_base_personnel_customer
		where customerid = #{customerid}
	</delete>
	<delete id="deleteBrandAndCustomerByCustomerWithBrandids" parameterType="java.util.Map">
		delete from t_base_personnel_brandandcustomer
		<trim prefix="where" prefixOverrides="and|or" >
	      <if test="customerid != null" >
	         and customerid = #{customerid}
	      </if>
	      <if test="brandids != null" >
	         and FIND_IN_SET(brandid,#{brandids})
	      </if>
	     </trim>
	</delete>
	<delete id="deleteBrandAndCustomerListByParam" parameterType="java.util.Map">
		delete from t_base_personnel_brandandcustomer
		<trim prefix="where" prefixOverrides="and|or" >
	      <if test="customerid != null" >
	         and customerid = #{customerid}
	      </if>
	      <if test="brandids != null" >
	         and FIND_IN_SET(brandid,#{brandids})
	      </if>
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	     </trim>
	</delete>
	<select id="getPersonListByCustoemrids" parameterType="java.lang.String" resultType="java.util.Map">
		SELECT DISTINCT t.personid ,t1.belongdeptid
		from t_base_personnel_customer t
		LEFT JOIN t_base_personnel t1 ON t1.id = t.personid
		WHERE FIND_IN_SET(customerid,#{customerids})
	</select>
	<select id="getPersonListByCustomerWithCustomer" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer">
	  	SELECT DISTINCT personid from t_base_personnel_brandandcustomer
		WHERE FIND_IN_SET(brandid,#{brandids}) AND customerid = #{customerid}
	</select>
	<select id="getBrandCustomerListByMap" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer">
		select DISTINCT t.personid from t_base_personnel_brand t,t_base_personnel_customer t1
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="brandArr != null" >
				and t.brandid in
				<foreach collection="brandArr" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="customerid != null" >
		        and t1.customerid = #{customerid}
		    </if>
		    <if test="1==1" >
		        and t.personid=t1.personid
		     </if>
		</trim>
	</select>
	
	<!-- 厂家业务员 -->
	<select id="checkExistBrandAndCusotmerSupplierPerson" parameterType="java.util.Map" resultType="int" useCache="false">
		select count(1) from t_base_personnel_supplier_brandcustomer
		where brandid = #{brandid} and customerid = #{customerid}
	</select>
	<select id="getSupplieruserBrandAndCustomerList" parameterType="java.lang.String" resultType="map">
		select * from t_base_personnel_supplier_brandcustomer where personid = #{personid}
	</select>
	<select id="getSupplieruserBrandAndCustomerListMap" parameterType="java.util.Map" resultType="map">
		select * from t_base_personnel_supplier_brandcustomer t
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="personid != null" >
				and t.personid = #{personid}
			</if>
			<if test="addtime != null" >
				and DATE_FORMAT(t.addtime,'%Y-%m-%d') = STR_TO_DATE(#{addtime},'%Y-%m-%d')
			</if>
			<if test="startdate != null">
				and DATE_FORMAT(t.addtime,'%Y-%m-%d') >= STR_TO_DATE(#{startdate},'%Y-%m-%d')
			</if>
			<if test="enddate != null">
				<![CDATA[and DATE_FORMAT(t.addtime,'%Y-%m-%d') <= STR_TO_DATE(#{enddate},'%Y-%m-%d')]]>
			</if>
		</trim>
	</select>
	<select id="getSupplieruserBrandAndCustomerCount" parameterType="java.lang.String" resultType="int">
		select count(1) from t_base_personnel_supplier_brandcustomer where personid = #{personid}
	</select>
	<select id="getSupplierCustomerListCount" parameterType="java.lang.String" resultType="int">
		select count(1) from t_base_personnel_supplier_customer
		where personid = #{personid}
	</select>
	<select id="getSupplierBrandListCount" parameterType="java.lang.String" resultType="int">
		select count(1) from t_base_personnel_supplier_brand
		where personid = #{personid}
	</select>
	<delete id="deleteSupplierCustomerListByParam" parameterType="java.util.Map">
		delete from t_base_personnel_supplier_customer
		<trim prefix="where" prefixOverrides="and|or" >
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	      <if test="customerid != null" >
	         and customerid = #{customerid}
	      </if>
			<if test="customeridArr != null">
				AND customerid in
				<foreach collection="customeridArr" item="item" open="("  separator="," close=")">
					#{item}
				</foreach>
			</if>
	     </trim>
	</delete>
	<delete id="deleteSupplierBrandListByParam" parameterType="java.util.Map">
		delete from t_base_personnel_supplier_brand
		<trim prefix="where" prefixOverrides="and|or" >
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	      <if test="brandid != null" >
	         and brandid = #{brandid}
	      </if>
	     </trim>
	</delete>
	<delete id="deleteSupplierBrandAndCustomerByMap" parameterType="java.util.Map">
		delete from t_base_personnel_supplier_brandcustomer
		<trim prefix="where" prefixOverrides="and|or" >
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	      <if test="brandid != null" >
	         and brandid = #{brandid}
	      </if>
	      <if test="customerid != null" >
	         and customerid = #{customerid}
	      </if>
	    </trim>
	</delete>
	<!-- 批量添加厂家对应客户 -->
  	<insert id="addSupplierCustomer" parameterType="java.util.Map">
		insert into t_base_personnel_supplier_customer (personid, customerid)
		values
		<foreach collection="supplierCustomerListMap" item="item" index="index" separator=",">
			(#{item.personid},#{item.customerid})
		</foreach>
  	</insert>
	<insert id="addSupplierCustomerDetail">
		insert into t_base_personnel_supplier_customer (personid, customerid)
		values (#{personid},#{customerid})
  	</insert>

  	<!-- 批量添加厂家对应品牌 -->
  	<insert id="addSupplierBrand" parameterType="java.util.Map">
  		insert into t_base_personnel_supplier_brand (personid, brandid)
		values
		<foreach collection="supplierBrandListMap" item="item" index="index" separator=",">
			(#{item.personid},#{item.brandid})
		</foreach>
  	</insert>
    <insert id="addSupplierBrandDetail" >
  		insert into t_base_personnel_supplier_brand (personid, brandid)
		values (#{personid},#{brandid})
  	</insert>

  	<delete id="deleteSupplierBrandAndCustomerByPersonid" parameterType="java.lang.String">
		delete from t_base_personnel_supplier_brandcustomer where personid = #{personid}
	</delete>
	<!-- 组合厂家对应品牌对应客户 -->
	<insert id="addOfSupplierBrandAndCustomer" parameterType="java.lang.String">
		INSERT INTO t_base_personnel_supplier_brandcustomer (personid, brandid, customerid,sign, addtime)
		(SELECT b.personid, b.brandid,c.customerid,'1' as sign, NOW() AS addtime
		FROM t_base_personnel_supplier_brand b
		INNER JOIN t_base_personnel_supplier_customer c ON b.personid = c.personid
		WHERE b.personid = #{personid})
	</insert>
	<insert id="addOfSupplierBrandAndCustomerBypsnWithcst" parameterType="java.lang.String">
		INSERT INTO t_base_personnel_supplier_brandcustomer (personid, brandid, customerid,sign, addtime)
		(SELECT b.personid, b.brandid,c.customerid,'1' as sign, NOW() AS addtime
		FROM t_base_personnel_supplier_brand b
		INNER JOIN t_base_personnel_supplier_customer c ON b.personid = c.personid
		WHERE b.personid = #{personid} and c.customerid = #{customerid})
	</insert>
	<select id="getSupplierCustomerListByMap" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelCustomer">
	  	select * from t_base_personnel_supplier_customer
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	      <if test="customerid != null" >
	         and customerid = #{customerid}
	      </if>
	     </trim>
	</select>
	<select id="getSupplierCustomerListByMapLeft" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelCustomer">
	  	SELECT t.* from t_base_personnel_supplier_customer t
		LEFT JOIN t_base_personnel t1 ON t1.id = t.personid
		WHERE t.customerid = #{customerid} and FIND_IN_SET(t1.belongdeptid,#{companys})
	</select>
	<!-- 修改对应客户 -->
  	<update id="editSupplierCustomer" parameterType="com.hd.agent.basefiles.model.PersonnelCustomer">
  		update t_base_personnel_supplier_customer
   		<set >
	      <if test="personid != null" >
	        personid = #{personid},
	      </if>
	      <if test="customerid != null" >
	        customerid = #{customerid},
	      </if>
	    </set>
   		where id = #{id}
  	</update>
  	<update id="editSupplierBrand" parameterType="com.hd.agent.basefiles.model.PersonnelBrand">
  		update t_base_personnel_supplier_brand
   		<set >
	      <if test="personid != null" >
	        personid = #{personid},
	      </if>
	      <if test="brandid != null" >
	        brandid = #{brandid},
	      </if>
	    </set>
   		where id = #{id}
  	</update>
	<select id="getSupplierCustomerList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.PersonnelCustomer">
	  	select
	  	<include refid="PersonnelCustomer_Column_List"/>
	  	from t_base_personnel_supplier_customer
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="condition.personid != null" >
	         and personid = #{condition.personid}
	      </if>
	     </trim>
	     order by customerid
	     <include refid="common.Page_limit"/>
	  </select>
	  <select id="getSupplierCustomerCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
	  	select count(1) from (
	  		select
		  	<include refid="PersonnelCustomer_Column_List"/>
		  	from t_base_personnel_supplier_customer
		  	<trim prefix="where" prefixOverrides="and|or" >
		      <if test="condition.personid != null" >
		         and personid = #{condition.personid}
		      </if>
		     </trim>
	  	)t
	  </select>
	  <select id="getSupplierBrandList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
	  	select <include refid="PersonnelBrand_Column_List"/>
	  	from t_base_personnel_supplier_brand
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="condition.personid != null" >
	         and personid = #{condition.personid}
	      </if>
	     </trim>
	     <include refid="common.Page_limit"/>
	  </select>
	  <select id="getSupplierBrandCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
	  	select count(1) from t_base_personnel_supplier_brand
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="condition.personid != null" >
	         and personid = #{condition.personid}
	      </if>
	     </trim>
	  </select>
	  <select id="getSupplierBrandListNoPage" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
	  	select * from t_base_personnel_supplier_brand where personid = #{personid}
	  </select>
	  <select id="getSupplierCustomerListNoPage" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelCustomer">
	  	select * from t_base_personnel_supplier_customer where personid = #{personid}
	  </select>
	  <select id="getPersonSupplierCustomerInfo" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelCustomer">
	  	select * from t_base_personnel_supplier_customer
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="id != null" >
	         and id = #{id}
	      </if>
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	      <if test="customerid != null" >
	         and customerid = #{customerid}
	      </if>
	    </trim>
	  </select>
	  <select id="getPersonSupplierBrandInfo" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
	  	select * from t_base_personnel_supplier_brand
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="id != null" >
	         and id = #{id}
	      </if>
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	      <if test="brandid != null" >
	         and brandid = #{brandid}
	      </if>
	    </trim>
	  </select>
	  <select id="getSupplierBrandCustomerList" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer">
	  	select * from t_base_personnel_supplier_brandcustomer
	  	<trim prefix="where" prefixOverrides="and|or" >
	      <if test="personid != null" >
	         and personid = #{personid}
	      </if>
	      <if test="brandid != null" >
	         and brandid = #{brandid}
	      </if>
	      <if test="customerid != null" >
	         and customerid = #{customerid}
	      </if>
	    </trim>
	  </select>
	  <select id="getSupplierBrandCustomerListByMap" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.PersonnelBrandAndCustomer">
		select DISTINCT personid,customerid,brandid from t_base_personnel_supplier_brandcustomer
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="brandArr != null" >
				and brandid in
				<foreach collection="brandArr" index="index" item="item" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="customerid != null" >
		        and customerid = #{customerid}
		    </if>
		    <if test="personid != null" >
		        and personid = #{personid}
		     </if>
		</trim>
	</select>
	<select id="getSupplierPersonListByCustoemrids" parameterType="java.lang.String" resultType="java.util.Map">
		SELECT DISTINCT t.personid ,t1.belongdeptid
		from t_base_personnel_supplier_customer t
		LEFT JOIN t_base_personnel t1 ON t1.id = t.personid
		WHERE FIND_IN_SET(customerid,#{customerids})
	</select>
	<select id="getSupplierUserIdByCustomerAndBrand" parameterType="java.lang.String" resultType="java.lang.String" useCache="false">
		select c.personid from t_base_personnel_supplier_customer c,t_base_personnel_supplier_brand b
		where c.personid=b.personid and c.customerid = #{customerid} and b.brandid = #{brandid} 
		limit 1
	</select>
	<select id="getSupplierBrandListByBrandid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.PersonnelBrand">
		select * from t_base_personnel_supplier_brand
		where brandid = #{brandid}
	</select>
	<insert id="addNoPersonBrandAndCustomer" parameterType="java.util.List">
		insert into t_base_personnel_no_brandandcustomer (delpersonid,personid,brandid,customerid,employetype,addtime)
  		values
  		<foreach collection="list" item="item" index="index" separator=",">
			(#{item.delpersonid},'',#{item.brandid},#{item.customerid}, #{item.employetype},now())
		</foreach>
	</insert>
	<select id="getNoPersonBrandAndCustomerList" parameterType="java.lang.String" resultType="java.util.Map">
		select customerid,personid,brandid from t_base_personnel_no_brandandcustomer
		where delpersonid = #{delpersonid}
	</select>
	<delete id="deleteNoPersonBrandAndCustomerByDelpersonid" parameterType="java.lang.String">
		delete from t_base_personnel_no_brandandcustomer
		where delpersonid = #{delpersonid}
	</delete>
	<delete id="deleteNoPersonBrandAndCustomerByMap" parameterType="java.util.Map">
		delete from t_base_personnel_no_brandandcustomer
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="personid != null">
				and delpersonid = #{personid}
			</if>
			<if test="employetype != null">
	        	AND employetype = #{employetype}
	        </if>
		</trim>
	</delete>
	<select id="getNoPersonBrandAndCustomerCount" parameterType="java.util.Map" resultType="int">
		select count(1) from t_base_personnel_no_brandandcustomer
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="personid != null">
				and delpersonid = #{personid}
			</if>
			<if test="employetype != null">
	        	AND employetype = #{employetype}
	        </if>
		</trim>
	</select>
	<select id="getNoPersonBrandAndCustomerListByEM" parameterType="java.util.Map" resultType="map">
		select * from t_base_personnel_no_brandandcustomer
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="personid != null">
				and delpersonid = #{personid}
			</if>
			<if test="employetype != null">
				AND employetype = #{employetype}
			</if>
		</trim>
	</select>
    <select id="checkPersonsIsRepeatBrandids" parameterType="java.lang.String" resultType="java.util.Map" useCache="false">
        SELECT DISTINCT t.personid from ( ${sql} ) t where t.brandid in (
            SELECT DISTINCT z.brandid FROM (
               ${sql}
            ) z GROUP BY z.brandid HAVING count(z.brandid) > 1
        )
    </select>
	<update id="updateCustomerSalesusername" parameterType="java.lang.String">
		UPDATE t_base_sales_customer t,t_base_personnel t1
		SET t.salesusername = t1.name
		where t.salesuserid = t1.id and t1.id = #{salesuserid}
	</update>

	<delete id="deleteNoPersonBrandAndCustomerDelCustomer" parameterType="map">
		DELETE from t_base_personnel_no_brandandcustomer
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="employetype != null">
				and employetype = #{employetype}
			</if>
			<if test="customeridArr != null">
				AND customerid in
				<foreach collection="customeridArr" item="item" open="("  separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="brandList != null">
				AND brandid in
				<foreach collection="brandList" item="item" open="("  separator="," close=")">
					#{item.brandid}
				</foreach>
			</if>
		</trim>
	</delete>
	<delete id="deleteNoPersonBrandAndCustomerDelBrand" parameterType="map">
		DELETE from t_base_personnel_no_brandandcustomer
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="employetype != null">
				and employetype = #{employetype}
			</if>
			<if test="customerList != null">
				AND customerid in
				<foreach collection="customerList" item="item" open="("  separator="," close=")">
					#{item.customerid}
				</foreach>
			</if>
			<if test="brandidArr != null">
				AND brandid in
				<foreach collection="brandidArr" item="item" open="("  separator="," close=")">
					#{item}
				</foreach>
			</if>
		</trim>
	</delete>
	<select id="getPersonidByPSNCustomerAndBrand" parameterType="map" resultType="java.lang.String">
		SELECT DISTINCT t.personid from t_base_personnel_brandandcustomer t
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="customeridArr != null">
				AND t.customerid in
				<foreach collection="customeridArr" item="item" open="("  separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="personidArr != null">
				and t.brandid in (
				SELECT DISTINCT t.brandid from t_base_personnel_brand t
				where t.personid in
				<foreach collection="personidArr" item="item" open="("  separator="," close=")">
					#{item}
				</foreach>
				)
			</if>
		</trim>
	</select>
	<select id="getPersonidBySupplierPSNCustomerAndBrand" parameterType="map" resultType="java.lang.String">
		SELECT DISTINCT t.personid from t_base_personnel_supplier_brandcustomer t
		<trim prefix="where" prefixOverrides="and|or" >
			<if test="customeridArr != null">
				AND t.customerid in
				<foreach collection="customeridArr" item="item" open="("  separator="," close=")">
					#{item}
				</foreach>
			</if>
			<if test="personidArr != null">
				and t.brandid in (
				SELECT DISTINCT t.brandid from t_base_personnel_supplier_brand t
				where t.personid in
				<foreach collection="personidArr" item="item" open="("  separator="," close=")">
					#{item}
				</foreach>
				)
			</if>
		</trim>
	</select>
	<update id="updateTotalBillsBranduser">
		UPDATE t_sales_dispatchbill_detail t1
		SET t1.branduser = '';

		UPDATE t_sales_order_car_detail t1
		SET t1.branduser = '';

		UPDATE t_sales_order_detail t1
		SET t1.branduser = '';

		UPDATE t_sales_receipt_detail t1
		SET t1.branduser = '';

		UPDATE t_sales_rejectbill_detail t1
		SET t1.branduser = '';

		UPDATE t_storage_saleout_detail t1
		SET t1.branduser = '';

		UPDATE t_storage_salereject_enter_detail t1
		SET t1.branduser = '';

		UPDATE t_account_sales_invoice_detail t
		SET t.branduser = '';

		UPDATE t_account_customer_push_balance t
		SET t.branduser = '';

		TRUNCATE TABLE t_base_personnel_brandandcustomer;

		INSERT INTO t_base_personnel_brandandcustomer (personid, brandid, customerid,sign, addtime)
		(SELECT b.personid, b.brandid,c.customerid,'1' as sign, NOW() AS addtime
		FROM t_base_personnel_brand b
		INNER JOIN t_base_personnel_customer c ON b.personid = c.personid);

		UPDATE t_sales_dispatchbill_detail t1,t_sales_dispatchbill t,t_base_personnel_brandandcustomer t2
		SET t1.branduser = t2.personid
		WHERE t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid;

		UPDATE t_sales_order_car_detail t1,t_sales_order_car t,t_base_personnel_brandandcustomer t2
		SET t1.branduser = t2.personid
		WHERE t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid;

		UPDATE t_sales_order_detail t1,t_sales_order t,t_base_personnel_brandandcustomer t2
		SET t1.branduser = t2.personid
		WHERE t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid;

		UPDATE t_sales_receipt_detail t1,t_sales_receipt t,t_base_personnel_brandandcustomer t2
		SET t1.branduser = t2.personid
		WHERE t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid;

		UPDATE t_sales_rejectbill_detail t1,t_sales_rejectbill t,t_base_personnel_brandandcustomer t2
		SET t1.branduser = t2.personid
		WHERE t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid;

		UPDATE t_storage_saleout_detail t1,t_storage_saleout t,t_base_personnel_brandandcustomer t2
		SET t1.branduser = t2.personid
		WHERE t1.saleoutid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid;

		UPDATE t_storage_salereject_enter_detail t1,t_storage_salereject_enter t,t_base_personnel_brandandcustomer t2
		SET t1.branduser = t2.personid
		WHERE t1.salerejectid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid;

		UPDATE t_account_sales_invoice_detail t,t_base_personnel_brandandcustomer t2
		SET t.branduser = t2.personid
		WHERE t.brandid = t2.brandid AND t.customerid = t2.customerid;

		UPDATE t_account_customer_push_balance t,t_base_personnel_brandandcustomer t2
		SET t.branduser = t2.personid
		WHERE t.brandid = t2.brandid AND t.customerid = t2.customerid;
	</update>
</mapper>
