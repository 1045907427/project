<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hd.agent.basefiles.dao.CustomerMapper" >
<cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
  <resultMap id="BaseResultMap" type="com.hd.agent.basefiles.model.Customer" >
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="pinyin" jdbcType="VARCHAR" property="pinyin" />
    <result column="thisid" jdbcType="VARCHAR" property="thisid" />
    <result column="pid" jdbcType="VARCHAR" property="pid" />
    <result column="shopno" jdbcType="VARCHAR" property="shopno" />
    <result column="state" jdbcType="VARCHAR" property="state" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="adduserid" jdbcType="VARCHAR" property="adduserid" />
    <result column="addusername" jdbcType="VARCHAR" property="addusername" />
    <result column="adddeptid" jdbcType="VARCHAR" property="adddeptid" />
    <result column="adddeptname" jdbcType="VARCHAR" property="adddeptname" />
    <result column="addtime" jdbcType="TIMESTAMP" property="addtime" />
    <result column="modifyuserid" jdbcType="VARCHAR" property="modifyuserid" />
    <result column="modifyusername" jdbcType="VARCHAR" property="modifyusername" />
    <result column="modifytime" jdbcType="TIMESTAMP" property="modifytime" />
    <result column="openuserid" jdbcType="VARCHAR" property="openuserid" />
    <result column="openusername" jdbcType="VARCHAR" property="openusername" />
    <result column="opentime" jdbcType="TIMESTAMP" property="opentime" />
    <result column="closeuserid" jdbcType="VARCHAR" property="closeuserid" />
    <result column="closeusername" jdbcType="VARCHAR" property="closeusername" />
    <result column="closetime" jdbcType="TIMESTAMP" property="closetime" />
    <result column="shortname" jdbcType="VARCHAR" property="shortname" />
    <result column="shortcode" jdbcType="VARCHAR" property="shortcode" />
    <result column="abclevel" jdbcType="VARCHAR" property="abclevel" />
    <result column="telphone" jdbcType="VARCHAR" property="telphone" />
    <result column="faxno" jdbcType="VARCHAR" property="faxno" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="website" jdbcType="VARCHAR" property="website" />
    <result column="person" jdbcType="VARCHAR" property="person" />
    <result column="personmobile" jdbcType="VARCHAR" property="personmobile" />
    <result column="personcard" jdbcType="VARCHAR" property="personcard" />
    <result column="nature" jdbcType="VARCHAR" property="nature" />
    <result column="fund" jdbcType="DECIMAL" property="fund" />
    <result column="setupdate" jdbcType="VARCHAR" property="setupdate" />
    <result column="staffnum" jdbcType="VARCHAR" property="staffnum" />
    <result column="turnoveryear" jdbcType="DECIMAL" property="turnoveryear" />
    <result column="firstbusinessdate" jdbcType="VARCHAR" property="firstbusinessdate" />
    <result column="salesarea" jdbcType="VARCHAR" property="salesarea" />
    <result column="customersort" jdbcType="VARCHAR" property="customersort" />
    <result column="contact" jdbcType="VARCHAR" property="contact" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="promotionsort" jdbcType="CHAR" property="promotionsort" />
    <result column="zip" jdbcType="VARCHAR" property="zip" />
    <result column="taxno" jdbcType="VARCHAR" property="taxno" />
    <result column="bank" jdbcType="VARCHAR" property="bank" />
    <result column="cardno" jdbcType="VARCHAR" property="cardno" />
    <result column="caraccount" jdbcType="VARCHAR" property="caraccount" />
    <result column="storearea" jdbcType="DECIMAL" property="storearea" />
    <result column="ischain" jdbcType="CHAR" property="ischain" />
    <result column="countylevel" jdbcType="VARCHAR" property="countylevel" />
    <result column="villagetown" jdbcType="VARCHAR" property="villagetown" />
    <result column="credit" jdbcType="DECIMAL" property="credit" />
    <result column="creditrating" jdbcType="CHAR" property="creditrating" />
    <result column="reconciliationdate" jdbcType="VARCHAR" property="reconciliationdate" />
    <result column="billingdate" jdbcType="VARCHAR" property="billingdate" />
    <result column="arrivalamountdate" jdbcType="VARCHAR" property="arrivalamountdate" />
    <result column="tickettype" jdbcType="CHAR" property="tickettype" />
    <result column="creditdate" jdbcType="VARCHAR" property="creditdate" />
    <result column="salesmonth" jdbcType="DECIMAL" property="salesmonth" />
    <result column="targetsales" jdbcType="DECIMAL" property="targetsales" />
    <result column="yearback" jdbcType="DECIMAL" property="yearback" />
    <result column="monthback" jdbcType="DECIMAL" property="monthback" />
    <result column="dispatchingamount" jdbcType="DECIMAL" property="dispatchingamount" />
    <result column="sixone" jdbcType="DECIMAL" property="sixone" />
    <result column="settlement" jdbcType="VARCHAR" property="settlement" />
    <result column="settletype" jdbcType="VARCHAR" property="settletype" />
    <result column="settleday" jdbcType="VARCHAR" property="settleday" />
    <result column="paytype" jdbcType="VARCHAR" property="paytype" />
    <result column="iscash" jdbcType="CHAR" property="iscash" />
    <result column="islongterm" jdbcType="CHAR" property="islongterm" />
    <result column="billing" jdbcType="VARCHAR" property="billing" />
    <result column="billtype" jdbcType="VARCHAR" property="billtype" />
    <result column="overcontrol" jdbcType="VARCHAR" property="overcontrol" />
    <result column="overgracedate" jdbcType="INTEGER" property="overgracedate" />
    <result column="canceltype" jdbcType="VARCHAR" property="canceltype" />
    <result column="salesdeptid" jdbcType="VARCHAR" property="salesdeptid" />
    <result column="salesdeptname" jdbcType="VARCHAR" property="salesdeptname" />
    <result column="salesuserid" jdbcType="VARCHAR" property="salesuserid" />
    <result column="salesusername" jdbcType="VARCHAR" property="salesusername" />
    <result column="pricesort" jdbcType="VARCHAR" property="pricesort" />
    <result column="tallyuserid" jdbcType="VARCHAR" property="tallyuserid" />
    <result column="tallyusername" jdbcType="VARCHAR" property="tallyusername" />
    <result column="indoorstaff" jdbcType="VARCHAR" property="indoorstaff" />
    <result column="payeeid" jdbcType="VARCHAR" property="payeeid" />
    <result column="checker" jdbcType="VARCHAR" property="checker" />
    <result column="checkmobile" jdbcType="VARCHAR" property="checkmobile" />
    <result column="checkemail" jdbcType="VARCHAR" property="checkemail" />
    <result column="payer" jdbcType="VARCHAR" property="payer" />
    <result column="payermobile" jdbcType="VARCHAR" property="payermobile" />
    <result column="payeremail" jdbcType="VARCHAR" property="payeremail" />
    <result column="shopmanager" jdbcType="VARCHAR" property="shopmanager" />
    <result column="shopmanagermobile" jdbcType="VARCHAR" property="shopmanagermobile" />
    <result column="gsreceipter" jdbcType="VARCHAR" property="gsreceipter" />
    <result column="gsreceiptermobile" jdbcType="VARCHAR" property="gsreceiptermobile" />
    <result column="supplier" jdbcType="VARCHAR" property="supplier" />
    <result column="margin" jdbcType="DECIMAL" property="margin" />
    <result column="allsalessum" jdbcType="DECIMAL" property="allsalessum" />
    <result column="allcollectionsum" jdbcType="DECIMAL" property="allcollectionsum" />
    <result column="duefromsum" jdbcType="DECIMAL" property="duefromsum" />
    <result column="otherpayablesum" jdbcType="DECIMAL" property="otherpayablesum" />
    <result column="allsalessumyear" jdbcType="DECIMAL" property="allsalessumyear" />
    <result column="allcollectionsumyear" jdbcType="DECIMAL" property="allcollectionsumyear" />
    <result column="newsalesdate" jdbcType="VARCHAR" property="newsalesdate" />
    <result column="newsalessum" jdbcType="DECIMAL" property="newsalessum" />
    <result column="newcollectdate" jdbcType="VARCHAR" property="newcollectdate" />
    <result column="newcollectsum" jdbcType="DECIMAL" property="newcollectsum" />
    <result column="salessummonth" jdbcType="DECIMAL" property="salessummonth" />
    <result column="field01" jdbcType="VARCHAR" property="field01" />
    <result column="field02" jdbcType="VARCHAR" property="field02" />
    <result column="field03" jdbcType="VARCHAR" property="field03" />
    <result column="field04" jdbcType="VARCHAR" property="field04" />
    <result column="field05" jdbcType="VARCHAR" property="field05" />
    <result column="field06" jdbcType="VARCHAR" property="field06" />
    <result column="field07" jdbcType="VARCHAR" property="field07" />
    <result column="field08" jdbcType="VARCHAR" property="field08" />
    <result column="field09" jdbcType="VARCHAR" property="field09" />
    <result column="islast" jdbcType="VARCHAR" property="islast" />
    <result column="field10" property="field10" jdbcType="LONGVARCHAR" />
    <result column="field11" property="field11" jdbcType="LONGVARCHAR" />
    <result column="field12" property="field12" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
  	<choose>
		<when test="cols!=null">
			<include refid="common.Page_Column"/>
		</when>
		<when test="cols==null">
		    id, name,pinyin, thisid, pid,shopno, state, remark, adduserid, addusername, adddeptid, adddeptname, 
		    addtime, modifyuserid, modifyusername, modifytime, openuserid, openusername, opentime, 
		    closeuserid, closeusername, closetime, shortname, shortcode, abclevel, telphone, 
		    faxno, email, mobile, website, person, nature, fund, setupdate, staffnum, turnoveryear, 
		    firstbusinessdate, salesarea, customersort, contact, address,promotionsort, zip, taxno, bank, cardno, 
		    credit, creditdate, salesmonth, settlement, settletype, settleday, paytype, billing, 
		    billtype, overcontrol, overgracedate, canceltype, salesdeptid, salesdeptname, salesuserid, 
		    salesusername, indoorstaff,payeeid, pricesort, tallyuserid, tallyusername, supplier, margin, allsalessum, 
		    allcollectionsum, duefromsum, otherpayablesum, allsalessumyear, allcollectionsumyear, 
		    newsalesdate, newsalessum, newcollectdate, newcollectsum, salessummonth, field01, islast,
		    field02, field03, field04, field05, field06, field07, field08, field09, field10, field11, field12,
		    caraccount,storearea,reconciliationdate,billingdate,iscash,islongterm,countylevel,villagetown,ischain,tickettype,
			checker,checkmobile,checkemail,payer,payermobile,payeremail,shopmanager,shopmanagermobile,gsreceipter,gsreceiptermobile,
			arrivalamountdate,personmobile,personcard,creditrating,targetsales,yearback,monthback,dispatchingamount,sixone,issendminimum
   		</when>
	</choose>
  </sql>
  <sql id="Base_Column_List2" >
        t.id, t.name,t.pinyin, t.thisid, t.pid,t.shopno, t.state, t.remark, t.adduserid, t.addusername, t.adddeptid, t.adddeptname,
        t.addtime, t.modifyuserid, t.modifyusername, t.modifytime, t.openuserid, t.openusername, t.opentime,
        t.closeuserid, t.closeusername, t.closetime, t.shortname, t.shortcode, t.abclevel, t.telphone,
        t.faxno, t.email, t.mobile, t.website, t.person, t.nature, t.fund, t.setupdate, t.staffnum, t.turnoveryear,
        t.firstbusinessdate, t.salesarea, t.customersort, t.contact, t.address,t.promotionsort, t.zip, t.taxno, t.bank, t.cardno,
        t.credit, t.creditdate, t.salesmonth, t.settlement, t.settletype, t.settleday, t.paytype, t.billing,
        t.billtype, t.overcontrol, t.overgracedate, t.canceltype, t.salesdeptid, t.salesdeptname, t.salesuserid,
        t.salesusername, t.indoorstaff,t.payeeid, t.pricesort, t.tallyuserid, t.tallyusername, t.supplier, t.margin, t.allsalessum,
        t.allcollectionsum, t.duefromsum, t.otherpayablesum, t.allsalessumyear, t.allcollectionsumyear,
        t.newsalesdate, t.newsalessum, t.newcollectdate, t.newcollectsum, t.salessummonth, t.field01, t.islast,
        t.field02, t.field03, t.field04, t.field05, t.field06, t.field07, t.field08, t.field09, t.field10, t.field11, t.field12,
        t.caraccount,t.storearea,t.reconciliationdate,t.billingdate,t.iscash,t.islongterm,t.countylevel,t.villagetown,t.ischain,t.tickettype,
        t.checker,t.checkmobile,t.checkemail,t.payer,t.payermobile,t.payeremail,t.shopmanager,t.shopmanagermobile,t.gsreceipter,t.gsreceiptermobile,
        t.arrivalamountdate,t.personmobile,t.personcard,t.creditrating,t.targetsales,t.yearback,t.monthback,t.dispatchingamount,t.sixone,t.issendminimum
  </sql>
  <select id="getAllCustomerList" resultType="java.lang.String">
      select t.id from t_base_sales_customer t where t.state='1'
  </select>
    <select id="getAllCustomerInfoList" resultType="java.lang.String" resultMap="BaseResultMap">
        select <include refid="Base_Column_List2" /> from t_base_sales_customer t where (state='1' or state='0' )
    </select>
  <select id="getCustomerList" resultMap="BaseResultMap" parameterType="com.hd.agent.common.util.PageMap">
  	select <include refid="Base_Column_List2" /> from t_base_sales_customer t
  	<if test="condition.salesman != null">
  		LEFT JOIN t_base_personnel_customer t1 on t.id = t1.customerid and t1.personid = #{condition.salesman}
		LEFT JOIN t_base_personnel_supplier_customer t2 on t.id = t2.customerid and t2.personid = #{condition.salesman}
  	</if>
  	<trim prefix="where" prefixOverrides="and|or" >
  		<include refid="common.Page_querySql"/>
		<include refid="common.Page_dataSql"/>
		<if test="condition.id != null" >
         and t.id like CONCAT('%',#{condition.id}, '%')
      	</if>
      	<if test="condition.name != null" >
         and t.name like CONCAT('%',#{condition.name}, '%')
      	</if>
      	<if test="condition.shortcode != null" >
         and t.shortcode like CONCAT('%',#{condition.shortcode}, '%')
      	</if>
      	<if test="condition.salesarea != null" >
         and t.salesarea = #{condition.salesarea}
      	</if>
        <if test="condition.salesarea1 != null" >
         and FIND_IN_SET(t.salesarea,#{condition.salesarea1})
        </if>
        <if test="condition.customersort != null" >
            and FIND_IN_SET(t.customersort,#{condition.customersort})
        </if>
      	<if test="condition.type == 1" >
      		and t.salesarea like CONCAT(#{condition.sortarea}, '%')
      	</if>
      	<if test="condition.type == 2" >
      		and t.customersort like CONCAT(#{condition.sortarea}, '%')
      	</if>
        <if test="condition.salesuserid != null" >
            and t.salesuserid = #{condition.salesuserid}
        </if>
      	<if test="condition.salesman != null">
      		and (t1.personid = #{condition.salesman} or t2.personid = #{condition.salesman} or t.salesuserid = #{condition.salesman})
      	</if>
        <choose>
            <when test="condition.location == 1" >
                and exists(select 1 from t_base_sales_customer_location l where l.customerid = t.id and l.accuracy = '1')
            </when>
            <when test="condition.location == 2" >
                and exists(select 1 from t_base_sales_customer_location l where l.customerid = t.id and l.accuracy = '2')
            </when>
            <when test="condition.location == 3" >
                and not exists(select 1 from t_base_sales_customer_location l where l.customerid = t.id)
            </when>
            <otherwise>

            </otherwise>
        </choose>
	</trim>
	<include refid="common.Page_limit"/>
  </select>
    <select id="getCustomerByConditon" resultMap="BaseResultMap" parameterType="java.util.Map">
    select <include refid="Base_Column_List2" /> from t_base_sales_customer t
        <trim prefix="where" prefixOverrides="and|or" >
            <if test="id != null" >
                and t.id = #{id}
            </if>
            <if test="name != null" >
                and t.name=#{name}
            </if>
            <if test="shortcode != null" >
                and t.shortcode like CONCAT(#{shortcode}, '%')
            </if>
            <if test="pid != null" >
                and t.pid = #{pid}
            </if>
            <if test="shopno != null" >
                and t.shopno = #{shopno}
            </if>
            <if test="address != null" >
                and t.address = #{address}
            </if>
            <if test="shortname != null" >
                and t.shortname =#{shortname}
            </if>
        </trim>
    </select>
    <!--获取客户业务员对应客户-->
    <select id="getCustomerListBySalesman" resultMap="BaseResultMap" parameterType="com.hd.agent.common.util.PageMap">
        select <include refid="Base_Column_List2" /> from t_base_sales_customer t
        <trim prefix="where" prefixOverrides="and|or" >
            <include refid="common.Page_dataSql"/>
            <if test="condition.personid != null" >
                and t.salesuserid = #{condition.personid}
            </if>
            <if test="condition.customerid != null" >
                and t.id = #{condition.customerid}
            </if>
            <if test="condition.customersort != null" >
                and FIND_IN_SET(t.customersort,#{condition.customersort})
            </if>
            <if test="condition.salesarea1 != null" >
                and FIND_IN_SET(t.salesarea,#{condition.salesarea1})
            </if>
            <if test="condition.cidarr != null" >
                and t.id not in
                <foreach collection="condition.cidarr" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </trim>
        <include refid="common.Page_limit"/>
    </select>
    <select id="getCustomerListBySalesmanCount" resultType="java.lang.Integer" parameterType="com.hd.agent.common.util.PageMap">
        select count(1) from (
        select <include refid="Base_Column_List2" /> from t_base_sales_customer t
        <trim prefix="where" prefixOverrides="and|or" >
            <include refid="common.Page_dataSql"/>
            <if test="condition.personid != null" >
                and t.salesuserid = #{condition.personid}
            </if>
            <if test="condition.customerid != null" >
                and t.id = #{condition.customerid}
            </if>
            <if test="condition.customersort != null" >
                and FIND_IN_SET(t.customersort,#{condition.customersort})
            </if>
            <if test="condition.salesarea1 != null" >
                and FIND_IN_SET(t.salesarea,#{condition.salesarea1})
            </if>
            <if test="condition.cidarr != null" >
                and t.id not in
                <foreach collection="condition.cidarr" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </trim>
        ) t
    </select>
    <!--获取品牌业务员对应客户-->
    <select id="getCustomerByBrandman" resultMap="BaseResultMap" parameterType="com.hd.agent.common.util.PageMap" useCache="false">
        select <include refid="Base_Column_List2" /> from t_base_sales_customer t
        LEFT JOIN t_base_personnel_customer  t1 on t1.customerid = t.id
        <trim prefix="where" prefixOverrides="and|or" >
            <include refid="common.Page_dataSql"/>
            <if test="condition.personid != null" >
                and t1.personid  = #{condition.personid}
            </if>
            <if test="condition.customerid != null" >
                and t1.customerid = #{condition.customerid}
            </if>
            <if test="condition.customersort != null" >
                and FIND_IN_SET(t.customersort,#{condition.customersort})
            </if>
            <if test="condition.salesarea1 != null" >
                and FIND_IN_SET(t.salesarea,#{condition.salesarea1})
            </if>
            <if test="condition.cidarr != null" >
                and t.id not in
                <foreach collection="condition.cidarr" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </trim>
        <include refid="common.Page_limit"/>
    </select>
    <select id="getCustomerByBrandmanCount" resultType="java.lang.Integer" parameterType="com.hd.agent.common.util.PageMap" useCache="false">
        select count(1) from t_base_sales_customer t
        LEFT JOIN t_base_personnel_customer  t1 on t1.customerid = t.id
        <trim prefix="where" prefixOverrides="and|or" >
            <include refid="common.Page_dataSql"/>
            <if test="condition.personid != null" >
                and t1.personid  = #{condition.personid}
            </if>
            <if test="condition.customerid != null" >
                and t1.customerid = #{condition.customerid}
            </if>
            <if test="condition.customersort != null" >
                and FIND_IN_SET(t.customersort,#{condition.customersort})
            </if>
            <if test="condition.salesarea1 != null" >
                and FIND_IN_SET(t.salesarea,#{condition.salesarea1})
            </if>
            <if test="condition.cidarr != null" >
                and t.id not in
                <foreach collection="condition.cidarr" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </trim>
    </select>
    <!--获取厂家业务员对应客户-->
    <select id="getCustomerByManufactedMan" resultMap="BaseResultMap" parameterType="com.hd.agent.common.util.PageMap">
        select <include refid="Base_Column_List2" /> from t_base_sales_customer t
        LEFT JOIN t_base_personnel_supplier_customer t1 on t1.customerid=t.id
        <trim prefix="where" prefixOverrides="and|or" >
            <include refid="common.Page_querySql"/>
            <include refid="common.Page_dataSql"/>
            <if test="condition.personid != null" >
                and t1.personid  = #{condition.personid}
            </if>
            <if test="condition.customerid != null" >
                and t1.customerid = #{condition.customerid}
            </if>
            <if test="condition.customersort != null" >
                and FIND_IN_SET(t.customersort,#{condition.customersort})
            </if>
            <if test="condition.salesarea1 != null" >
                and FIND_IN_SET(t.salesarea,#{condition.salesarea1})
            </if>
            <if test="condition.cidarr != null" >
                and t.id not in
                <foreach collection="condition.cidarr" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </trim>
        <include refid="common.Page_limit"/>
    </select>
    <select id="getCustomerByManufactedManCount" resultType="java.lang.Integer" parameterType="com.hd.agent.common.util.PageMap">
        select count(1) from t_base_sales_customer t
        LEFT JOIN t_base_personnel_supplier_customer t1 on t1.customerid=t.id
        <trim prefix="where" prefixOverrides="and|or" >
            <include refid="common.Page_querySql"/>
            <include refid="common.Page_dataSql"/>
            <if test="condition.personid != null" >
                and t1.personid  = #{condition.personid}
            </if>
            <if test="condition.customerid != null" >
                and t1.customerid = #{condition.customerid}
            </if>
            <if test="condition.customersort != null" >
                and FIND_IN_SET(t.customersort,#{condition.customersort})
            </if>
            <if test="condition.salesarea1 != null" >
                and FIND_IN_SET(t.salesarea,#{condition.salesarea1})
            </if>
            <if test="condition.cidarr != null" >
                and t.id not in
                <foreach collection="condition.cidarr" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </trim>
    </select>
    <select id="getCustomerCount" resultType="java.lang.Integer" parameterType="com.hd.agent.common.util.PageMap">
  	select count(1) from (
  		select <include refid="Base_Column_List2" /> from t_base_sales_customer t
	  	<if test="condition.salesman != null">
            LEFT JOIN t_base_personnel_customer t1 on t.id = t1.customerid and t1.personid = #{condition.salesman}
            LEFT JOIN t_base_personnel_supplier_customer t2 on t.id = t2.customerid and t2.personid = #{condition.salesman}
	  	</if>
	  	<trim prefix="where" prefixOverrides="and|or" >
	  		<include refid="common.Page_querySql"/>
			<include refid="common.Page_dataSql"/>
			<if test="condition.id != null" >
	         and t.id like CONCAT('%',#{condition.id}, '%')
	      	</if>
	      	<if test="condition.name != null" >
	         and t.name like CONCAT('%', CONCAT(#{condition.name}, '%'))
	      	</if>
	      	<if test="condition.shortcode != null" >
	         and t.shortcode like CONCAT(#{condition.shortcode}, '%')
	      	</if>
	      	<if test="condition.salesarea != null" >
	         and t.salesarea = #{condition.salesarea}
	      	</if>
	      	<if test="condition.type == 1" >
	      		and t.salesarea like CONCAT(#{condition.sortarea}, '%')
	      	</if>
	      	<if test="condition.type == 2" >
	      		and t.customersort like CONCAT(#{condition.sortarea}, '%')
	      	</if>
	      	<if test="condition.salesuserid != null" >
	         and t.salesuserid = #{condition.salesuserid}
	      	</if>
	      	<if test="condition.salesman != null">
	      		and (t1.personid = #{condition.salesman} or t2.personid = #{condition.salesman} or t.salesuserid = #{condition.salesman})
	      	</if>
            <choose>
                <when test="condition.location == 1" >
                    and exists(select 1 from t_base_sales_customer_location l where l.customerid = t.id and l.accuracy = '1')
                </when>
                <when test="condition.location == 2" >
                    and exists(select 1 from t_base_sales_customer_location l where l.customerid = t.id and l.accuracy = '2')
                </when>
                <when test="condition.location == 3" >
                    and not exists(select 1 from t_base_sales_customer_location l where l.customerid = t.id)
                </when>
                <otherwise>

                </otherwise>
            </choose>
		</trim>
  	)z
  </select>
  <select id="getCustomerListForCustomerprice" parameterType="com.hd.agent.common.util.PageMap" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List2" /> from t_base_sales_customer t
  	<trim prefix="where" prefixOverrides="and|or" >
  		<include refid="common.Page_querySql"/>
		<include refid="common.Page_dataSql"/>
		<if test="condition.customerid != null">
		 and t.id != #{condition.customerid}
		</if>
		<if test="condition.id != null" >
         and t.id like CONCAT('%',#{condition.id}, '%')
      	</if>
      	<if test="condition.shortcode != null" >
         and t.shortcode like CONCAT(#{condition.shortcode}, '%')
      	</if>
      	<if test="condition.salesareasql != null" >
         and (${condition.salesareasql})
      	</if>
      	<if test="condition.customersortsql != null" >
         and (${condition.customersortsql})
      	</if>
      	<if test="condition.pid != null" >
      	 and FIND_IN_SET(t.pid,#{condition.pid})
      	</if>
	</trim>
	<include refid="common.Page_limit"/>
  </select>
  <select id="getCustomerCountForCustomerprice" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	select count(1) from (
  		select <include refid="Base_Column_List2" /> from t_base_sales_customer t
	  	<trim prefix="where" prefixOverrides="and|or" >
	  		<include refid="common.Page_querySql"/>
			<include refid="common.Page_dataSql"/>
			<if test="condition.customerid != null">
			 and t.id != #{condition.customerid}
			</if>
			<if test="condition.id != null" >
	         and t.id like CONCAT('%',#{condition.id}, '%')
	      	</if>
	      	<if test="condition.shortcode != null" >
	         and t.shortcode like CONCAT(#{condition.shortcode}, '%')
	      	</if>
	      	<if test="condition.salesareasql != null" >
	         and (${condition.salesareasql})
	      	</if>
	      	<if test="condition.customersortsql != null" >
	         and (${condition.customersortsql})
	      	</if>
	      	<if test="condition.pid != null" >
	      	 and FIND_IN_SET(t.pid,#{condition.pid})
	      	</if>
		</trim>
  	)z
  </select>
  <select id="getCustomerListCountBySalesuserid" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_sales_customer
  	where salesuserid = #{salesuserid}
  </select>
  <select id="getCustomerListForPact" resultMap="BaseResultMap" parameterType="com.hd.agent.common.util.PageMap">
    <choose>
        <when test="condition.type == 'settletype'">
            select DISTINCT t.customerid, a.id, a.name,a.pinyin, a.thisid, a.pid, a.state, a.remark, a.shortname, a.shortcode,a.pricesort,a.settletype,a.settleday
            from t_base_sales_customer_brand_settletype t
            INNER JOIN t_base_sales_customer a ON t.customerid = a.id
        </when>
        <when test="condition.type == 'pricesort'">
            select DISTINCT t.customerid, a.id, a.name,a.pinyin, a.thisid, a.pid, a.state, a.remark, a.shortname, a.shortcode,a.pricesort,a.settletype,a.settleday
            from t_base_sales_customer_brand_pricesort t
            INNER JOIN t_base_sales_customer a ON t.customerid = a.id
        </when>
        <when test="condition.type == 'priceandgoods'">
            SELECT a.id, a.name,a.pinyin, a.thisid, a.pid, a.state, a.remark, a.shortname, a.shortcode,a.pricesort,a.settletype,a.settleday
            FROM t_base_sales_customer a
        </when>
    </choose>
  	<trim prefix="where" prefixOverrides="and|or" >
  		<include refid="common.Page_querySql"/>
		<include refid="common.Page_dataSql"/>
        <if test="1 == 1">
            and a.state = '1'
        </if>
		<if test="condition.id != null" >
        	and a.id like CONCAT('%', CONCAT(#{condition.id}, '%'))
      	</if>
      	<if test="condition.name != null" >
         	and a.name like CONCAT('%', CONCAT(#{condition.name}, '%'))
      	</if>
      	<if test="condition.customersort != null">
      		and a.customersort = #{condition.customersort}
      	</if>
      	<if test="condition.salesarea != null">
      		and a.salesarea like '${condition.salesarea}%'
      	</if>
      	<if test="condition.goodsid != null" >
         	and EXISTS( SELECT p.customerid FROM t_base_sales_customer_price p WHERE p.goodsid=#{condition.goodsid} AND p.customerid=a.id)
      	</if>
      	<if test="condition.brandpricesort != null" >
         	and EXISTS( SELECT b.customerid FROM t_base_sales_customer_brand_pricesort b WHERE b.brandid=#{condition.brandpricesort} AND b.customerid=a.id)
      	</if>
        <if test="condition.brandsettletype != null" >
            and EXISTS( SELECT s.customerid FROM t_base_sales_customer_brand_settletype s WHERE s.brandid=#{condition.brandsettletype} AND s.customerid=a.id)
        </if>
	</trim>
	<include refid="common.Page_limit"/>
  </select>
  <select id="getCustomerCountForPact" resultType="java.lang.Integer" parameterType="com.hd.agent.common.util.PageMap">
  	select count(1) from (
      <choose>
          <when test="condition.type == 'settletype'">
              select DISTINCT t.customerid, a.id, a.name,a.pinyin, a.thisid, a.pid, a.state, a.remark, a.shortname, a.shortcode,a.pricesort,a.settletype,a.settleday
              from t_base_sales_customer_brand_settletype t
              INNER JOIN t_base_sales_customer a ON t.customerid = a.id
          </when>
          <when test="condition.type == 'pricesort'">
              select DISTINCT t.customerid, a.id, a.name,a.pinyin, a.thisid, a.pid, a.state, a.remark, a.shortname, a.shortcode,a.pricesort,a.settletype,a.settleday
              from t_base_sales_customer_brand_pricesort t
              INNER JOIN t_base_sales_customer a ON t.customerid = a.id
          </when>
          <when test="condition.type == 'priceandgoods'">
              SELECT a.id, a.name,a.pinyin, a.thisid, a.pid, a.state, a.remark, a.shortname, a.shortcode,a.pricesort,a.settletype,a.settleday
              FROM t_base_sales_customer a
          </when>
      </choose>
	  	<trim prefix="where" prefixOverrides="and|or" >
			<include refid="common.Page_querySql"/>
			<include refid="common.Page_dataSql"/>
            <if test="1 == 1">
                and a.state = '1'
            </if>
			<if test="condition.id != null" >
	        	and a.id like CONCAT('%', CONCAT(#{condition.id}, '%'))
	      	</if>
	      	<if test="condition.name != null" >
	         	and a.name like CONCAT('%', CONCAT(#{condition.name}, '%'))
	      	</if>
	      	<if test="condition.customersort != null">
	      		and a.customersort = #{condition.customersort}
	      	</if>
	      	<if test="condition.salesarea != null">
	     		and a.salesarea like '${condition.salesarea}%'
	     	</if>
	      	<if test="condition.goodsid != null" >
	         	and EXISTS( SELECT p.customerid FROM t_base_sales_customer_price p WHERE p.goodsid=#{condition.goodsid} AND p.customerid=a.id)
	      	</if>
	      	<if test="condition.brandpricesort != null" >
	        	and EXISTS( SELECT b.customerid FROM t_base_sales_customer_brand_pricesort b WHERE b.brandid=#{condition.brandpricesort} AND b.customerid=a.id)
	     	</if>
            <if test="condition.brandsettletype != null" >
                and EXISTS( SELECT s.customerid FROM t_base_sales_customer_brand_settletype s WHERE s.brandid=#{condition.brandsettletype} AND s.customerid=a.id)
            </if>
		</trim>
	)z
  </select>
  <select id="getCustomerInfoLimitOne" resultMap="BaseResultMap" parameterType="java.lang.String">
  	select * from t_base_sales_customer where shortcode = #{shortcode} limit 1
  </select>
  <select id="getCustomerInfoByShopno" resultMap="BaseResultMap" parameterType="java.lang.String">
  	select * from t_base_sales_customer where pid = #{pid} and shopno = #{shopno}
  </select>
  <select id="getCustomerBySalesman" resultMap="BaseResultMap" parameterType="java.lang.String">
  	select a.id, a.name, a.shortcode, a.settletype, a.paytype, a.billtype, a.pricesort from t_base_sales_customer a, t_sys_user b where a.salesuserid = b.personnelid and b.username = #{username} and a.state = '1'
  </select>
  <select id="getCustomerBySalesmanId" resultMap="BaseResultMap" parameterType="java.lang.String">
  	select a.id, a.pid, a.name, a.pinyin, a.shortcode, a.settletype, a.paytype, a.billtype, a.pricesort, a.islast from t_base_sales_customer a, t_sys_user b where a.salesuserid = b.personnelid and b.userid = #{userId} and a.state = '1'
  </select>
<select id="getCustomerByPersonid" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select * from t_base_sales_customer a
    inner join t_base_personnel_supplier_customer b on a.id = b.customerid
    where b.personid = #{pid}
</select>
  <!-- 获取品牌业务品客户 -->
  <select id="getBrandSalerCustomer" resultMap="BaseResultMap" parameterType="java.lang.String">
  	SELECT a.id, a.pid, a.name, a.pinyin, a.shortcode, a.settletype, a.paytype, a.billtype, a.pricesort, a.islast FROM t_base_sales_customer a 
  	INNER JOIN t_base_personnel_customer b ON a.id = customerid 
  	INNER JOIN t_sys_user c ON b.personid = c.personnelid WHERE c.userid = #{0} and a.state = '1'
  </select>
  <select id="getCustomerPriceList" resultType="com.hd.agent.basefiles.model.CustomerPrice">
      <!-- 设置GROUP_CONCAT 最大长度限制-->
      SET SESSION group_concat_max_len=204800;
      select z.goodsid,z.price,GROUP_CONCAT(z.customerid) as customerid from (
          select DISTINCT a.customerid, a.goodsid, a.price from t_base_sales_customer_price a
          INNER JOIN t_base_sales_customer t on (a.customerid = t.id or a.customerid=t.pid)
          <choose>
            <when test="isBrandUser != null">INNER JOIN t_base_personnel_customer pc on t.id=pc.customerid
            </when>
            <when test="isSupplierUser !=null">
                INNER JOIN t_base_personnel_supplier_customer pc on t.id=pc.customerid
            </when>
        </choose>
        <trim prefix="where" prefixOverrides="and|or">
            <choose>
                <when test="isBrandUser != null">
                     <if test="datasql != null" >
                         and (${datasql} or pc.personid=#{personnelid})
                     </if>
                     <if test="datasql == null" >
                         and  pc.personid=#{personnelid}
                     </if>
                </when>
                <when test="isSupplierUser != null">
                     <if test="datasql != null" >
                         and (${datasql} or pc.personid=#{personnelid})
                     </if>
                     <if test="datasql == null" >
                         and  pc.personid=#{personnelid}
                     </if>
                </when>
                <otherwise>
                    <if test="datasql != null" >
                     and ${datasql}
                    </if>
                </otherwise>
            </choose>
            <if test="syncdate != null">
                and (a.addtime > #{syncdate}
                <if test="isBrandUser != null or isSupplierUser != null">
                    or pc.addtime > #{syncdate}
                </if>
                )
            </if>
            <if test="1==1">
                and t.state = '1'
            </if>
        </trim>
      ) z
      GROUP BY z.goodsid,z.price
      <if test="startNum != null">
        limit #{startNum} , #{rows}
      </if>
  </select>
  <select id="getCustomerPriceListCount" resultType="int">
      select count(1) from (
      select z.goodsid,z.price,GROUP_CONCAT(z.customerid) as customerid from (
      select DISTINCT a.customerid, a.goodsid, a.price from t_base_sales_customer_price a
      INNER JOIN t_base_sales_customer t on (a.customerid = t.id or a.customerid=t.pid)
      <choose>
          <when test="isBrandUser != null">INNER JOIN t_base_personnel_customer pc on t.id=pc.customerid
          </when>
          <when test="isSupplierUser !=null">
              INNER JOIN t_base_personnel_supplier_customer pc on t.id=pc.customerid
          </when>
      </choose>
      <trim prefix="where" prefixOverrides="and|or">
          <choose>
              <when test="isBrandUser != null">
                  <if test="datasql != null" >
                      and (${datasql} or pc.personid=#{personnelid})
                  </if>
                  <if test="datasql == null" >
                      and  pc.personid=#{personnelid}
                  </if>
              </when>
              <when test="isSupplierUser != null">
                  <if test="datasql != null" >
                      and (${datasql} or pc.personid=#{personnelid})
                  </if>
                  <if test="datasql == null" >
                      and  pc.personid=#{personnelid}
                  </if>
              </when>
              <otherwise>
                  <if test="datasql != null" >
                      and ${datasql}
                  </if>
              </otherwise>
          </choose>
          <if test="syncdate != null">
              and (a.addtime > #{syncdate}
              <if test="isBrandUser != null or isSupplierUser != null">
                  or pc.addtime > #{syncdate}
              </if>
              )
          </if>
          <if test="1==1">
              and t.state = '1'
          </if>
      </trim>
      ) z
      GROUP BY z.goodsid,z.price) x
  </select>
  <select id="getCustomerPriceListByBrands" resultType="com.hd.agent.basefiles.model.CustomerPrice" parameterType="java.lang.String">
  	select a.customerid, a.goodsid, a.price from t_base_sales_customer_price a, t_base_sales_customer b, t_base_goods_info g
  	where a.customerid = b.id and a.goodsid = g.id and FIND_IN_SET(g.brand,#{brands}) and b.state = '1'
  </select>
  <select id="getCustomerPriceCount" resultType="int">
  	select count(1) from t_base_sales_customer_price a, t_base_sales_customer b, t_sys_user c 
  	where a.customerid = b.id and b.salesuserid = c.personnelid and c.userid = #{0} and b.state = '1'
  </select>
  <select id="getBrandSalerCustomerPriceList" resultType="com.hd.agent.basefiles.model.CustomerPrice" parameterType="java.lang.String">
  	SELECT a.customerid, a.goodsid, a.price FROM t_base_sales_customer_price a 
  	INNER JOIN t_base_personnel_customer b ON a.customerid = b.customerid 
  	INNER JOIN t_sys_user c ON b.personid = c.personnelid WHERE c.userid = #{0}
  </select>
  <select id="getBrandSalerCustomerPriceCount" resultType="int">
  	SELECT count(1) FROM t_base_sales_customer_price a 
  	INNER JOIN t_base_personnel_customer b ON a.customerid = b.customerid 
  	INNER JOIN t_sys_user c ON b.personid = c.personnelid WHERE c.userid = #{0}
  </select>
  <select id="getStorageCustomerPriceList" resultType="com.hd.agent.basefiles.model.CustomerPrice" parameterType="java.lang.String">
  	SELECT a.customerid, a.goodsid, a.price FROM t_base_sales_customer_price a 
	INNER JOIN t_storage_summary b ON a.goodsid = b.goodsid and b.existingnum>0
	INNER JOIN t_base_storage_info c on b.storageid=c.id and c.carsaleuser=#{0}
  </select>
  <select id="getAllCustomerPriceList" resultType="com.hd.agent.basefiles.model.CustomerPrice" parameterType="java.lang.String">
  	SELECT a.customerid, a.goodsid, a.price FROM t_base_sales_customer_price a 
  	limit #{startnum} , #{rows}
  </select>
  <select id="getAllCustomerPriceCount" resultType="int" parameterType="java.lang.String">
  	select count(1) from t_base_sales_customer_price
  </select>
  <select id="getSalerCustomerGoodsList" resultType="com.hd.agent.basefiles.model.CustomerGoods">
      <!-- 设置GROUP_CONCAT 最大长度限制-->
    SET SESSION group_concat_max_len=204800;
    select z.customerid,GROUP_CONCAT(z.goodsid) as goodsid from (select DISTINCT a.customerid, a.goodsid from t_base_sales_customer_goods a
      INNER JOIN t_base_sales_customer t on a.customerid = t.id
      <choose>
          <when test="isBrandUser != null">
              INNER JOIN t_base_personnel_customer pc on t.id=pc.customerid
          </when>
          <when test="isSupplierUser != null">
              INNER JOIN t_base_personnel_supplier_customer pc on t.id=pc.customerid
          </when>
      </choose>
      <trim prefix="where" prefixOverrides="and|or">
          <choose>
              <when test="isBrandUser != null">
                  <if test="datasql != null" >
                      and (${datasql} or pc.personid=#{personnelid})
                  </if>
                  <if test="datasql == null" >
                      and  pc.personid=#{personnelid}
                  </if>
              </when>
              <when test="isSupplierUser != null">
                  <if test="datasql != null" >
                      and (${datasql} or pc.personid=#{personnelid})
                  </if>
                  <if test="datasql == null" >
                      and  pc.personid=#{personnelid}
                  </if>
              </when>
              <otherwise>
                  <if test="datasql != null" >
                      and ${datasql}
                  </if>
              </otherwise>
          </choose>
          <if test="syncdate != null">
              and (a.lastdate > #{syncdate}
              <if test="isBrandUser != null or isSupplierUser != null">
                  or pc.addtime > #{syncdate}
              </if>
              )
          </if>
          <if test="1==1">
              and t.state = '1'
          </if>
      </trim>
      )z
      GROUP by z.customerid
      <if test="startNum != null">
          limit #{startNum} , #{rows}
      </if>
  </select>
    <select id="getSalerCustomerGoodsListCount" resultType="int">
        select count(1) from (
        select z.customerid,GROUP_CONCAT(z.goodsid) as goodsid from (select DISTINCT a.customerid, a.goodsid from t_base_sales_customer_goods a
        INNER JOIN t_base_sales_customer t on a.customerid = t.id
        <choose>
            <when test="isBrandUser != null">
                INNER JOIN t_base_personnel_customer pc on t.id=pc.customerid
            </when>
            <when test="isSupplierUser != null">
                INNER JOIN t_base_personnel_supplier_customer pc on t.id=pc.customerid
            </when>
        </choose>
        <trim prefix="where" prefixOverrides="and|or">
            <choose>
                <when test="isBrandUser != null">
                    <if test="datasql != null" >
                        and (${datasql} or pc.personid=#{personnelid})
                    </if>
                    <if test="datasql == null" >
                        and  pc.personid=#{personnelid}
                    </if>
                </when>
                <when test="isSupplierUser != null">
                    <if test="datasql != null" >
                        and (${datasql} or pc.personid=#{personnelid})
                    </if>
                    <if test="datasql == null" >
                        and  pc.personid=#{personnelid}
                    </if>
                </when>
                <otherwise>
                    <if test="datasql != null" >
                        and ${datasql}
                    </if>
                </otherwise>
            </choose>
            <if test="syncdate != null">
                and (a.lastdate > #{syncdate}
                <if test="isBrandUser != null or isSupplierUser != null">
                    or pc.addtime > #{syncdate}
                </if>
                )
            </if>
            <if test="1==1">
                and t.state = '1'
            </if>
        </trim>
        )z
        GROUP by z.customerid
        )x
    </select>
  <select id="getCustomerBrandPricesort" resultType="com.hd.agent.basefiles.model.CustomerBrandPricesort">
  	select DISTINCT a.customerid, a.brandid,a.pricesort 
  	from t_base_sales_customer_brand_pricesort a
  	INNER JOIN t_base_sales_customer t on a.customerid = t.id
  	INNER JOIN t_base_goods_brand t1 on a.brandid=t1.id
    <choose>
    	<when test="isBrandUser != null">
    		INNER JOIN t_base_personnel_customer pc on t.id=pc.customerid 
    		INNER JOIN t_base_personnel_brand pc on t1.id=pc.brandid 
    	</when>
    	<when test="isSupplierUser != null">
    		INNER JOIN t_base_personnel_supplier_customer pc on t.id=pc.customerid 
    		INNER JOIN t_base_personnel_supplier_brand pc on t1.id=pc.brandid 
    	</when>
    </choose>
  	<trim prefix="where" prefixOverrides="and|or">
  		<choose>
	    	<when test="isBrandUser != null">
	    		 <if test="datasql != null" >
			         and (${datasql} or pc.personid=#{personnelid})
			     </if>
			     <if test="datasql == null" >
			         and  pc.personid=#{personnelid}
			     </if>
	    	</when>
	    	<when test="isSupplierUser != null">
	    		 <if test="datasql != null" >
			         and (${datasql} or pc.personid=#{personnelid})
			     </if>
			     <if test="datasql == null" >
			         and  pc.personid=#{personnelid}
			     </if>
	    	</when>
	    	<otherwise>
	    		<if test="datasql != null" >
		         and ${datasql}
		      	</if>
	    	</otherwise>
	    </choose>
  		<if test="1==1">
  			and t.state = '1'
  		</if>
  	</trim>
  </select>
  <select id="getSalerCustomerGoodsListByBrand" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.CustomerGoods">
  	select a.customerid, a.goodsid from t_base_sales_customer_goods a, t_base_sales_customer b, t_base_goods_info g 
  	where a.customerid = b.id and a.goodsid = g.id and FIND_IN_SET(g.brand,#{brands}) and b.state = '1'
  </select>
  <select id="getBrandSalerCustomerGoodsList" resultType="com.hd.agent.basefiles.model.CustomerGoods" parameterType="java.lang.String">
  	SELECT a.customerid, a.goodsid FROM t_base_sales_customer_goods a 
  	INNER JOIN t_base_personnel_customer b ON a.customerid = b.customerid 
  	INNER JOIN t_sys_user c ON b.personid = c.personnelid WHERE c.userid = #{0}
  </select>
  <select id="getStorageCustomerGoodsList" resultType="com.hd.agent.basefiles.model.CustomerGoods" parameterType="java.lang.String">
  	SELECT a.customerid, a.goodsid FROM t_base_sales_customer_goods a 
	INNER JOIN t_storage_summary b ON a.goodsid = b.goodsid and b.existingnum>0
	INNER JOIN t_base_storage_info c on b.storageid=c.id and c.carsaleuser=#{0}
  </select>
  <select id="getAllCustomerGoodsList" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.CustomerGoods">
  	SELECT * FROM t_base_sales_customer_goods
  </select>
  
  <select id="getCustomerInfo" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Customer">
  	select * from t_base_sales_customer where id = #{id}
  </select>
  <select id="getCustomerOpenCountByPid" resultType="java.lang.Integer" parameterType="java.lang.String">
  	select count(1) from t_base_sales_customer where pid = #{id} and state = '1'
  </select>
  <select id="getCustomerParentAllChildren" resultMap="BaseResultMap" parameterType="com.hd.agent.common.util.PageMap">
  	 select 
    <include refid="Base_Column_List" />
    from t_base_sales_customer
  	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="condition.id != null">
        	id like CONCAT(#{condition.id}, '%')
        </if>
		<include refid="common.Page_dataSql"/>
	</trim>
  </select>	
  <select id="getCustomerBySalesuserid" parameterType="java.lang.String" resultMap="BaseResultMap">
  	select * from t_base_sales_customer where salesuserid = #{salesuserid}
  </select>
    <update id="editClearCustomerSalesuser" parameterType="java.lang.String">
        update t_base_sales_customer set salesuserid = '' and salesusername = '' where salesuserid = #{salesuserid}
    </update>
  <select id="getCustomerDetail" resultMap="BaseResultMap" parameterType="map" >
    select id, name,pinyin, thisid, pid,shopno, state, remark, adduserid, addusername, adddeptid, adddeptname, 
    addtime, modifyuserid, modifyusername, modifytime, openuserid, openusername, opentime, 
    closeuserid, closeusername, closetime, shortname, shortcode, abclevel, telphone, 
    faxno, email, mobile, website, person, nature, fund, setupdate, staffnum, turnoveryear, 
    firstbusinessdate, salesarea, customersort, contact, address,promotionsort, zip, taxno, bank, cardno, 
    credit, creditdate, salesmonth, settlement, settletype, settleday, paytype, billing, 
    billtype, overcontrol, overgracedate, canceltype, salesdeptid, salesdeptname, salesuserid, 
    salesusername, indoorstaff,payeeid, pricesort, tallyuserid, tallyusername, supplier, margin, allsalessum, 
    allcollectionsum, duefromsum, otherpayablesum, allsalessumyear, allcollectionsumyear, 
    newsalesdate, newsalessum, newcollectdate, newcollectsum, salessummonth, field01, islast,
    field02, field03, field04, field05, field06, field07, field08, field09, field10, field11, field12,
    caraccount,storearea,reconciliationdate,billingdate,iscash,islongterm,countylevel,villagetown,ischain,tickettype,
	checker,checkmobile,checkemail,payer,payermobile,payeremail,shopmanager,shopmanagermobile,gsreceipter,gsreceiptermobile,
	arrivalamountdate,personmobile,personcard,creditrating,targetsales,yearback,monthback,dispatchingamount,sixone,issendminimum
    from t_base_sales_customer
    where id = #{id}
  </select>
    <select id="getCustomerDetailNoCache" resultMap="BaseResultMap" parameterType="java.lang.String" useCache="false">
        select id, name,pinyin, thisid, pid,shopno, state, remark, adduserid, addusername, adddeptid, adddeptname,
        addtime, modifyuserid, modifyusername, modifytime, openuserid, openusername, opentime,
        closeuserid, closeusername, closetime, shortname, shortcode, abclevel, telphone,
        faxno, email, mobile, website, person, nature, fund, setupdate, staffnum, turnoveryear,
        firstbusinessdate, salesarea, customersort, contact, address,promotionsort, zip, taxno, bank, cardno,
        credit, creditdate, salesmonth, settlement, settletype, settleday, paytype, billing,
        billtype, overcontrol, overgracedate, canceltype, salesdeptid, salesdeptname, salesuserid,
        salesusername, indoorstaff,payeeid, pricesort, tallyuserid, tallyusername, supplier, margin, allsalessum,
        allcollectionsum, duefromsum, otherpayablesum, allsalessumyear, allcollectionsumyear,
        newsalesdate, newsalessum, newcollectdate, newcollectsum, salessummonth, field01, islast,
        field02, field03, field04, field05, field06, field07, field08, field09, field10, field11, field12,
        caraccount,storearea,reconciliationdate,billingdate,iscash,islongterm,countylevel,villagetown,ischain,tickettype,
        checker,checkmobile,checkemail,payer,payermobile,payeremail,shopmanager,shopmanagermobile,gsreceipter,gsreceiptermobile,
        arrivalamountdate,personmobile,personcard,creditrating,targetsales,yearback,monthback,dispatchingamount,sixone,issendminimum
        from t_base_sales_customer
        where id = #{id}
    </select>


  <select id="getCustomerBack" resultType="com.hd.agent.basefiles.model.Customer" parameterType="java.lang.String" >
    select 
    allsalessum, allcollectionsum, duefromsum, otherpayablesum, allsalessumyear, allcollectionsumyear,  
	newsalesdate, newsalessum, newcollectdate, newcollectsum, salessummonth 
    from t_base_sales_customer
    where id = #{id}
  </select>
  <select id="getCustomerPriceInfo" resultType="java.lang.String"  parameterType="java.lang.String">
  	select pricesort from t_base_sales_customer where id = #{id}
  </select>
  <delete id="deleteCustomer" parameterType="java.lang.String" >
    delete from t_base_sales_customer
    where id = #{id}
  </delete>
  <insert id="addCustomer" parameterType="com.hd.agent.basefiles.model.Customer" >
    insert into t_base_sales_customer
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="pinyin != null" >
        pinyin,
      </if>
      <if test="thisid != null" >
        thisid,
      </if>
      <if test="pid != null" >
        pid,
      </if>
      <if test="islast != null" >
        islast,
      </if>
      <if test="shopno != null" >
        shopno,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="adduserid != null" >
        adduserid,
      </if>
      <if test="addusername != null" >
        addusername,
      </if>
      <if test="adddeptid != null" >
        adddeptid,
      </if>
      <if test="adddeptname != null" >
        adddeptname,
      </if>
        addtime,
      <if test="modifyuserid != null" >
        modifyuserid,
      </if>
      <if test="modifyusername != null" >
        modifyusername,
      </if>
      <if test="modifytime != null" >
        modifytime,
      </if>
      <if test="openuserid != null" >
        openuserid,
      </if>
      <if test="openusername != null" >
        openusername,
      </if>
      <if test="opentime != null" >
        opentime,
      </if>
      <if test="closeuserid != null" >
        closeuserid,
      </if>
      <if test="closeusername != null" >
        closeusername,
      </if>
      <if test="closetime != null" >
        closetime,
      </if>
      <if test="shortname != null" >
        shortname,
      </if>
      <if test="shortcode != null" >
        shortcode,
      </if>
      <if test="abclevel != null" >
        abclevel,
      </if>
      <if test="telphone != null" >
        telphone,
      </if>
      <if test="faxno != null" >
        faxno,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="mobile != null" >
        mobile,
      </if>
      <if test="website != null" >
        website,
      </if>
      <if test="person != null" >
        person,
      </if>
      <if test="nature != null" >
        nature,
      </if>
      <if test="fund != null" >
        fund,
      </if>
      <if test="setupdate != null" >
        setupdate,
      </if>
      <if test="staffnum != null" >
        staffnum,
      </if>
      <if test="turnoveryear != null" >
        turnoveryear,
      </if>
      <if test="firstbusinessdate != null" >
        firstbusinessdate,
      </if>
      <if test="salesarea != null" >
        salesarea,
      </if>
      <if test="customersort != null" >
        customersort,
      </if>
      <if test="contact != null" >
        contact,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="promotionsort != null" >
        promotionsort,
      </if>
      <if test="zip != null" >
        zip,
      </if>
      <if test="taxno != null" >
        taxno,
      </if>
      <if test="bank != null" >
        bank,
      </if>
      <if test="cardno != null" >
        cardno,
      </if>
      <if test="credit != null" >
        credit,
      </if>
      <if test="creditdate != null" >
        creditdate,
      </if>
      <if test="salesmonth != null" >
        salesmonth,
      </if>
      <if test="settlement != null" >
        settlement,
      </if>
      <if test="settletype != null" >
        settletype,
      </if>
      <if test="settleday != null" >
        settleday,
      </if>
      <if test="paytype != null" >
        paytype,
      </if>
      <if test="billing != null" >
        billing,
      </if>
      <if test="billtype != null" >
        billtype,
      </if>
      <if test="overcontrol != null" >
        overcontrol,
      </if>
      <if test="overgracedate != null" >
        overgracedate,
      </if>
      <if test="canceltype != null" >
        canceltype,
      </if>
      <if test="salesdeptid != null" >
        salesdeptid,
      </if>
      <if test="salesdeptname != null" >
        salesdeptname,
      </if>
      <if test="salesuserid != null" >
        salesuserid,
      </if>
      <if test="salesusername != null" >
        salesusername,
      </if>
      <if test="indoorstaff != null" >
        indoorstaff,
      </if>
      <if test="payeeid != null" >
        payeeid,
      </if>
      <if test="pricesort != null" >
        pricesort,
      </if>
      <if test="tallyuserid != null" >
        tallyuserid,
      </if>
      <if test="tallyusername != null" >
        tallyusername,
      </if>
      <if test="supplier != null" >
        supplier,
      </if>
      <if test="margin != null" >
        margin,
      </if>
      <if test="allsalessum != null" >
        allsalessum,
      </if>
      <if test="allcollectionsum != null" >
        allcollectionsum,
      </if>
      <if test="duefromsum != null" >
        duefromsum,
      </if>
      <if test="otherpayablesum != null" >
        otherpayablesum,
      </if>
      <if test="allsalessumyear != null" >
        allsalessumyear,
      </if>
      <if test="allcollectionsumyear != null" >
        allcollectionsumyear,
      </if>
      <if test="newsalesdate != null" >
        newsalesdate,
      </if>
      <if test="newsalessum != null" >
        newsalessum,
      </if>
      <if test="newcollectdate != null" >
        newcollectdate,
      </if>
      <if test="newcollectsum != null" >
        newcollectsum,
      </if>
      <if test="salessummonth != null" >
        salessummonth,
      </if>
      <if test="field01 != null" >
        field01,
      </if>
      <if test="field02 != null" >
        field02,
      </if>
      <if test="field03 != null" >
        field03,
      </if>
      <if test="field04 != null" >
        field04,
      </if>
      <if test="field05 != null" >
        field05,
      </if>
      <if test="field06 != null" >
        field06,
      </if>
      <if test="field07 != null" >
        field07,
      </if>
      <if test="field08 != null" >
        field08,
      </if>
      <if test="field09 != null" >
        field09,
      </if>
      <if test="field10 != null" >
        field10,
      </if>
      <if test="field11 != null" >
        field11,
      </if>
      <if test="field12 != null" >
        field12,
      </if>
      <if test="caraccount != null" >
        caraccount,
      </if>
      <if test="storearea != null and storearea != ''" >
        storearea,
      </if>
      <if test="reconciliationdate != null" >
        reconciliationdate,
      </if>
      <if test="billingdate != null" >
        billingdate,
      </if>
      <if test="iscash != null" >
        iscash,
      </if>
      <if test="islongterm != null" >
        islongterm,
      </if>
      <if test="countylevel != null" >
        countylevel,
      </if>
      <if test="villagetown != null" >
        villagetown,
      </if>
      <if test="ischain != null" >
        ischain,
      </if>
      <if test="checker != null" >
        checker,
      </if>
      <if test="checkmobile != null" >
        checkmobile,
      </if>
      <if test="checkemail != null" >
        checkemail,
      </if>
      <if test="payer != null" >
        payer,
      </if>
      <if test="payermobile != null" >
        payermobile,
      </if>
      <if test="payeremail != null" >
        payeremail,
      </if>
      <if test="shopmanager != null" >
        shopmanager,
      </if>
      <if test="shopmanagermobile != null" >
        shopmanagermobile,
      </if>
      <if test="gsreceipter != null" >
        gsreceipter,
      </if>
      <if test="gsreceiptermobile != null" >
        gsreceiptermobile,
      </if>
      <if test="tickettype != null" >
        tickettype,
      </if>
      <if test="arrivalamountdate != null" >
        arrivalamountdate,
      </if>
      <if test="personmobile != null" >
        personmobile,
      </if>
      <if test="personcard != null" >
        personcard,
      </if>
      <if test="creditrating != null" >
        creditrating,
      </if>
      <if test="targetsales != null" >
        targetsales,
      </if>
      <if test="yearback != null" >
        yearback,
      </if>
      <if test="monthback != null" >
        monthback,
      </if>
      <if test="dispatchingamount != null" >
        dispatchingamount,
      </if>
      <if test="sixone != null" >
        sixone,
      </if>
      <if test="issendminimum != null" >
        issendminimum,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id},
      </if>
      <if test="name != null" >
        #{name},
      </if>
      <if test="pinyin != null" >
        #{pinyin},
      </if>
      <if test="thisid != null" >
        #{thisid},
      </if>
      <if test="pid != null" >
        #{pid},
      </if>
      <if test="islast != null" >
        #{islast},
      </if>
      <if test="shopno != null" >
        #{shopno},
      </if>
      <if test="state != null" >
        #{state},
      </if>
      <if test="remark != null" >
        #{remark},
      </if>
      <if test="adduserid != null" >
        #{adduserid},
      </if>
      <if test="addusername != null" >
        #{addusername},
      </if>
      <if test="adddeptid != null" >
        #{adddeptid},
      </if>
      <if test="adddeptname != null" >
        #{adddeptname},
      </if>
		now(),
      <if test="modifyuserid != null" >
        #{modifyuserid},
      </if>
      <if test="modifyusername != null" >
        #{modifyusername},
      </if>
      <if test="modifytime != null" >
        #{modifytime},
      </if>
      <if test="openuserid != null" >
        #{openuserid},
      </if>
      <if test="openusername != null" >
        #{openusername},
      </if>
      <if test="opentime != null" >
        #{opentime},
      </if>
      <if test="closeuserid != null" >
        #{closeuserid},
      </if>
      <if test="closeusername != null" >
        #{closeusername},
      </if>
      <if test="closetime != null" >
        #{closetime},
      </if>
      <if test="shortname != null" >
        #{shortname},
      </if>
      <if test="shortcode != null" >
        #{shortcode},
      </if>
      <if test="abclevel != null" >
        #{abclevel},
      </if>
      <if test="telphone != null" >
        #{telphone},
      </if>
      <if test="faxno != null" >
        #{faxno},
      </if>
      <if test="email != null" >
        #{email},
      </if>
      <if test="mobile != null" >
        #{mobile},
      </if>
      <if test="website != null" >
        #{website},
      </if>
      <if test="person != null" >
        #{person},
      </if>
      <if test="nature != null" >
        #{nature},
      </if>
      <if test="fund != null" >
        #{fund},
      </if>
      <if test="setupdate != null" >
        #{setupdate},
      </if>
      <if test="staffnum != null" >
        #{staffnum},
      </if>
      <if test="turnoveryear != null" >
        #{turnoveryear},
      </if>
      <if test="firstbusinessdate != null" >
        #{firstbusinessdate},
      </if>
      <if test="salesarea != null" >
        #{salesarea},
      </if>
      <if test="customersort != null" >
        #{customersort},
      </if>
      <if test="contact != null" >
        #{contact},
      </if>
      <if test="address != null" >
        #{address},
      </if>
      <if test="promotionsort != null" >
        #{promotionsort},
      </if>
      <if test="zip != null" >
        #{zip},
      </if>
      <if test="taxno != null" >
        #{taxno},
      </if>
      <if test="bank != null" >
        #{bank},
      </if>
      <if test="cardno != null" >
        #{cardno},
      </if>
      <if test="credit != null" >
        #{credit},
      </if>
      <if test="creditdate != null" >
        #{creditdate},
      </if>
      <if test="salesmonth != null" >
        #{salesmonth},
      </if>
      <if test="settlement != null" >
        #{settlement},
      </if>
      <if test="settletype != null" >
        #{settletype},
      </if>
      <if test="settleday != null" >
        #{settleday},
      </if>
      <if test="paytype != null" >
        #{paytype},
      </if>
      <if test="billing != null" >
        #{billing},
      </if>
      <if test="billtype != null" >
        #{billtype},
      </if>
      <if test="overcontrol != null" >
        #{overcontrol},
      </if>
      <if test="overgracedate != null" >
        #{overgracedate},
      </if>
      <if test="canceltype != null" >
        #{canceltype},
      </if>
      <if test="salesdeptid != null" >
        #{salesdeptid},
      </if>
      <if test="salesdeptname != null" >
        #{salesdeptname},
      </if>
      <if test="salesuserid != null" >
        #{salesuserid},
      </if>
      <if test="salesusername != null" >
        #{salesusername},
      </if>
      <if test="indoorstaff != null" >
        #{indoorstaff},
      </if>
      <if test="payeeid != null" >
        #{payeeid},
      </if>
      <if test="pricesort != null" >
        #{pricesort},
      </if>
      <if test="tallyuserid != null" >
        #{tallyuserid},
      </if>
      <if test="tallyusername != null" >
        #{tallyusername},
      </if>
      <if test="supplier != null" >
        #{supplier},
      </if>
      <if test="margin != null" >
        #{margin},
      </if>
      <if test="allsalessum != null" >
        #{allsalessum},
      </if>
      <if test="allcollectionsum != null" >
        #{allcollectionsum},
      </if>
      <if test="duefromsum != null" >
        #{duefromsum},
      </if>
      <if test="otherpayablesum != null" >
        #{otherpayablesum},
      </if>
      <if test="allsalessumyear != null" >
        #{allsalessumyear},
      </if>
      <if test="allcollectionsumyear != null" >
        #{allcollectionsumyear},
      </if>
      <if test="newsalesdate != null" >
        #{newsalesdate},
      </if>
      <if test="newsalessum != null" >
        #{newsalessum},
      </if>
      <if test="newcollectdate != null" >
        #{newcollectdate},
      </if>
      <if test="newcollectsum != null" >
        #{newcollectsum},
      </if>
      <if test="salessummonth != null" >
        #{salessummonth},
      </if>
      <if test="field01 != null" >
        #{field01},
      </if>
      <if test="field02 != null" >
        #{field02},
      </if>
      <if test="field03 != null" >
        #{field03},
      </if>
      <if test="field04 != null" >
        #{field04},
      </if>
      <if test="field05 != null" >
        #{field05},
      </if>
      <if test="field06 != null" >
        #{field06},
      </if>
      <if test="field07 != null" >
        #{field07},
      </if>
      <if test="field08 != null" >
        #{field08},
      </if>
      <if test="field09 != null" >
        #{field09},
      </if>
      <if test="field10 != null" >
        #{field10},
      </if>
      <if test="field11 != null" >
        #{field11},
      </if>
      <if test="field12 != null" >
        #{field12},
      </if>
      <if test="caraccount != null" >
        #{caraccount},
      </if>
      <if test="storearea != null and storearea != ''" >
        #{storearea},
      </if>
      <if test="reconciliationdate != null" >
        #{reconciliationdate},
      </if>
      <if test="billingdate != null" >
        #{billingdate},
      </if>
      <if test="iscash != null" >
        #{iscash},
      </if>
      <if test="islongterm != null" >
        #{islongterm},
      </if>
      <if test="countylevel != null" >
        #{countylevel},
      </if>
      <if test="villagetown != null" >
        #{villagetown},
      </if>
      <if test="ischain != null" >
        #{ischain},
      </if>
      <if test="checker != null" >
        #{checker},
      </if>
      <if test="checkmobile != null" >
        #{checkmobile},
      </if>
      <if test="checkemail != null" >
        #{checkemail},
      </if>
      <if test="payer != null" >
        #{payer},
      </if>
      <if test="payermobile != null" >
        #{payermobile},
      </if>
      <if test="payeremail != null" >
        #{payeremail},
      </if>
      <if test="shopmanager != null" >
        #{shopmanager},
      </if>
      <if test="shopmanagermobile != null" >
        #{shopmanagermobile},
      </if>
      <if test="gsreceipter != null" >
        #{gsreceipter},
      </if>
      <if test="gsreceiptermobile != null" >
        #{gsreceiptermobile},
      </if>
      <if test="tickettype != null" >
        #{tickettype},
      </if>
      <if test="arrivalamountdate != null" >
        #{arrivalamountdate},
      </if>
      <if test="personmobile != null" >
        #{personmobile},
      </if>
      <if test="personcard != null" >
        #{personcard},
      </if>
      <if test="creditrating != null" >
        #{creditrating},
      </if>
      <if test="targetsales != null" >
        #{targetsales},
      </if>
      <if test="yearback != null" >
        #{yearback},
      </if>
      <if test="monthback != null" >
        #{monthback},
      </if>
      <if test="dispatchingamount != null" >
        #{dispatchingamount},
      </if>
      <if test="sixone != null" >
        #{sixone},
      </if>
      <if test="issendminimum != null" >
        #{issendminimum},
      </if>
    </trim>
  </insert>
  <update id="updateCustomer" parameterType="com.hd.agent.basefiles.model.Customer" >
    update t_base_sales_customer
    <set >
      <if test="id != null" >
        id = #{id},
      </if>
      <if test="name != null" >
        name = #{name},
      </if>
      <if test="pinyin != null" >
        pinyin = #{pinyin},
      </if>
      <if test="thisid != null" >
        thisid = #{thisid},
      </if>
      <if test="pid != null" >
        pid = #{pid},
      </if>
      <if test="islast != null" >
        islast = #{islast},
      </if>
      <if test="shopno != null" >
        shopno = #{shopno},
      </if>
      <if test="state != null" >
        state = #{state},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
      <if test="modifyuserid != null" >
        modifyuserid = #{modifyuserid},
      </if>
      <if test="modifyusername != null" >
        modifyusername = #{modifyusername},
      </if>
        modifytime = now(),
      <if test="openuserid != null" >
        openuserid = #{openuserid},
      </if>
      <if test="openusername != null" >
        openusername = #{openusername},
      </if>
      <if test="opentime != null" >
        opentime = #{opentime},
      </if>
      <if test="closeuserid != null" >
        closeuserid = #{closeuserid},
      </if>
      <if test="closeusername != null" >
        closeusername = #{closeusername},
      </if>
      <if test="closetime != null" >
        closetime = #{closetime},
      </if>
      <if test="shortname != null" >
        shortname = #{shortname},
      </if>
      <if test="shortcode != null" >
        shortcode = #{shortcode},
      </if>
      <if test="abclevel != null" >
        abclevel = #{abclevel},
      </if>
      <if test="telphone != null" >
        telphone = #{telphone},
      </if>
      <if test="faxno != null" >
        faxno = #{faxno},
      </if>
      <if test="email != null" >
        email = #{email},
      </if>
      <if test="mobile != null" >
        mobile = #{mobile},
      </if>
      <if test="website != null" >
        website = #{website},
      </if>
      <if test="person != null" >
        person = #{person},
      </if>
      <if test="nature != null" >
        nature = #{nature},
      </if>
      <if test="fund != null" >
        fund = #{fund},
      </if>
      <if test="setupdate != null" >
        setupdate = #{setupdate},
      </if>
      <if test="staffnum != null" >
        staffnum = #{staffnum},
      </if>
      <if test="turnoveryear != null" >
        turnoveryear = #{turnoveryear},
      </if>
      <if test="firstbusinessdate != null" >
        firstbusinessdate = #{firstbusinessdate},
      </if>
      <if test="salesarea != null" >
        salesarea = #{salesarea},
      </if>
      <if test="customersort != null" >
        customersort = #{customersort},
      </if>
      <if test="contact != null" >
        contact = #{contact},
      </if>
      <if test="address != null" >
        address = #{address},
      </if>
      <if test="promotionsort != null" >
        promotionsort = #{promotionsort},
      </if>
      <if test="zip != null" >
        zip = #{zip},
      </if>
      <if test="taxno != null" >
        taxno = #{taxno},
      </if>
      <if test="bank != null" >
        bank = #{bank},
      </if>
      <if test="cardno != null" >
        cardno = #{cardno},
      </if>
      <if test="credit != null" >
        credit = #{credit},
      </if>
      <if test="creditdate != null" >
        creditdate = #{creditdate},
      </if>
      <if test="salesmonth != null" >
        salesmonth = #{salesmonth},
      </if>
      <if test="settlement != null" >
        settlement = #{settlement},
      </if>
      <if test="settletype != null" >
        settletype = #{settletype},
      </if>
      <if test="settleday != null" >
        settleday = #{settleday},
      </if>
      <if test="paytype != null" >
        paytype = #{paytype},
      </if>
      <if test="billing != null" >
        billing = #{billing},
      </if>
      <if test="billtype != null" >
        billtype = #{billtype},
      </if>
      <if test="overcontrol != null" >
        overcontrol = #{overcontrol},
      </if>
      overgracedate = #{overgracedate},
      <if test="canceltype != null" >
        canceltype = #{canceltype},
      </if>
      <if test="salesdeptid != null" >
        salesdeptid = #{salesdeptid},
      </if>
      <if test="salesdeptname != null" >
        salesdeptname = #{salesdeptname},
      </if>
      <if test="salesuserid != null" >
        salesuserid = #{salesuserid},
      </if>
      <if test="salesusername != null" >
        salesusername = #{salesusername},
      </if>
      <if test="indoorstaff != null" >
        indoorstaff = #{indoorstaff},
      </if>
      <if test="payeeid != null" >
        payeeid = #{payeeid},
      </if>
      <if test="pricesort != null" >
        pricesort = #{pricesort},
      </if>
      <if test="tallyuserid != null" >
        tallyuserid = #{tallyuserid},
      </if>
      <if test="tallyusername != null" >
        tallyusername = #{tallyusername},
      </if>
      <if test="supplier != null" >
        supplier = #{supplier},
      </if>
      <if test="margin != null" >
        margin = #{margin},
      </if>
      <if test="allsalessum != null" >
        allsalessum = #{allsalessum},
      </if>
      <if test="allcollectionsum != null" >
        allcollectionsum = #{allcollectionsum},
      </if>
      <if test="duefromsum != null" >
        duefromsum = #{duefromsum},
      </if>
      <if test="otherpayablesum != null" >
        otherpayablesum = #{otherpayablesum},
      </if>
      <if test="allsalessumyear != null" >
        allsalessumyear = #{allsalessumyear},
      </if>
      <if test="allcollectionsumyear != null" >
        allcollectionsumyear = #{allcollectionsumyear},
      </if>
      <if test="newsalesdate != null" >
        newsalesdate = #{newsalesdate},
      </if>
      <if test="newsalessum != null" >
        newsalessum = #{newsalessum},
      </if>
      <if test="newcollectdate != null" >
        newcollectdate = #{newcollectdate},
      </if>
      <if test="newcollectsum != null" >
        newcollectsum = #{newcollectsum},
      </if>
      <if test="salessummonth != null" >
        salessummonth = #{salessummonth},
      </if>
      <if test="field01 != null" >
        field01 = #{field01},
      </if>
      <if test="field02 != null" >
        field02 = #{field02},
      </if>
      <if test="field03 != null" >
        field03 = #{field03},
      </if>
      <if test="field04 != null" >
        field04 = #{field04},
      </if>
      <if test="field05 != null" >
        field05 = #{field05},
      </if>
      <if test="field06 != null" >
        field06 = #{field06},
      </if>
      <if test="field07 != null" >
        field07 = #{field07},
      </if>
      <if test="field08 != null" >
        field08 = #{field08},
      </if>
      <if test="field09 != null" >
        field09 = #{field09},
      </if>
      <if test="field10 != null" >
        field10 = #{field10},
      </if>
      <if test="field11 != null" >
        field11 = #{field11},
      </if>
      <if test="field12 != null" >
        field12 = #{field12},
      </if>
      <if test="caraccount != null" >
        caraccount = #{caraccount},
      </if>
      <if test="storearea != null and storearea != ''" >
        storearea = #{storearea},
      </if>
      <if test="reconciliationdate != null" >
        reconciliationdate = #{reconciliationdate},
      </if>
      <if test="billingdate != null" >
        billingdate = #{billingdate},
      </if>
      <if test="iscash != null" >
        iscash = #{iscash},
      </if>
      <if test="islongterm != null" >
        islongterm = #{islongterm},
      </if>
      <if test="countylevel != null" >
        countylevel = #{countylevel},
      </if>
      <if test="villagetown != null" >
        villagetown = #{villagetown},
      </if>
      <if test="ischain != null" >
        ischain = #{ischain},
      </if>
      <if test="checker != null" >
        checker = #{checker},
      </if>
      <if test="checkmobile != null" >
        checkmobile = #{checkmobile},
      </if>
      <if test="checkemail != null" >
        checkemail = #{checkemail},
      </if>
      <if test="payer != null" >
        payer = #{payer},
      </if>
      <if test="payermobile != null" >
        payermobile = #{payermobile},
      </if>
      <if test="payeremail != null" >
        payeremail = #{payeremail},
      </if>
      <if test="shopmanager != null" >
        shopmanager = #{shopmanager},
      </if>
      <if test="shopmanagermobile != null" >
        shopmanagermobile = #{shopmanagermobile},
      </if>
      <if test="gsreceipter != null" >
        gsreceipter = #{gsreceipter},
      </if>
      <if test="gsreceiptermobile != null" >
        gsreceiptermobile = #{gsreceiptermobile},
      </if>
      <if test="tickettype != null" >
        tickettype = #{tickettype},
      </if>
      <if test="arrivalamountdate != null" >
        arrivalamountdate = #{arrivalamountdate},
      </if>
      <if test="personmobile != null" >
        personmobile = #{personmobile},
      </if>
      <if test="personcard != null" >
        personcard = #{personcard},
      </if>
      <if test="creditrating != null" >
        creditrating = #{creditrating},
      </if>
      <if test="targetsales != null" >
        targetsales = #{targetsales},
      </if>
      <if test="yearback != null" >
        yearback = #{yearback},
      </if>
      <if test="monthback != null" >
        monthback = #{monthback},
      </if>
      <if test="dispatchingamount != null" >
        dispatchingamount = #{dispatchingamount},
      </if>
      <if test="sixone != null" >
        sixone = #{sixone},
      </if>
      <if test="issendminimum != null" >
        issendminimum = #{issendminimum},
      </if>
    </set>
    where id = #{oldid}
  </update>
  <update id="updateCustomerBack" parameterType="com.hd.agent.basefiles.model.Customer" >
    update t_base_sales_customer
    <set >
      <if test="allsalessum != null" >
        allsalessum = #{allsalessum},
      </if>
      <if test="allcollectionsum != null" >
        allcollectionsum = #{allcollectionsum},
      </if>
      <if test="duefromsum != null" >
        duefromsum = #{duefromsum},
      </if>
      <if test="otherpayablesum != null" >
        otherpayablesum = #{otherpayablesum},
      </if>
      <if test="allsalessumyear != null" >
        allsalessumyear = #{allsalessumyear},
      </if>
      <if test="allcollectionsumyear != null" >
        allcollectionsumyear = #{allcollectionsumyear},
      </if>
      <if test="newsalesdate != null" >
        newsalesdate = #{newsalesdate},
      </if>
      <if test="newsalessum != null" >
        newsalessum = #{newsalessum},
      </if>
      <if test="newcollectdate != null" >
        newcollectdate = #{newcollectdate},
      </if>
      <if test="newcollectsum != null" >
        newcollectsum = #{newcollectsum},
      </if>
      <if test="salessummonth != null" >
        salessummonth = #{salessummonth},
      </if>
    </set>
    where id = #{id}
  </update>
  <update id="updateCustomerOpen" parameterType="com.hd.agent.basefiles.model.Customer" >
    update t_base_sales_customer
    set openuserid = #{openuserid},
    	openusername = #{openusername},
      state = '1',
      opentime = now()
    where id = #{id}
  </update>
  <update id="updateCustomerClose" parameterType="com.hd.agent.basefiles.model.Customer" >
    update t_base_sales_customer
    set closeuserid = #{closeuserid},
      closeusername = #{closeusername},
      state = '0',
      closetime = now()
    where id = #{id}
  </update>
  <update id="updateCustomerLast" parameterType="java.lang.String">
  	update t_base_sales_customer set islast = #{0} where id = #{1}
  </update>
  <select id="customerNameNoUsed" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_sales_customer where name = #{name}
  </select>
  <select id="getCustomerListByCustomerids" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Customer">
  	select * from t_base_sales_customer where FIND_IN_SET(id,#{customerids}) ORDER BY id
  </select>
  <select id="getCustomerListByPid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Customer">
  	select * from t_base_sales_customer where pid=#{pid}
  	ORDER BY id
  </select>
  <select id="getCustomerListPidNull" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.Customer">
  	SELECT * FROM t_base_sales_customer
  	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="condition.id != null">
        	and id = #{condition.id}
        </if>
        <if test="1 == 1">
        	and islast = '1'
        </if>
	</trim>
  	order by id
	<include refid="common.Page_limit"/>
  </select>
  <select id="getCustomerCountPidNull" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	SELECT count(1) FROM t_base_sales_customer
  	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="condition.id != null">
        	and id = #{condition.id}
        </if>
        <if test="1 == 1">
        	and islast = '1'
        </if>
	</trim>
  </select>
  <select id="getCustomerListPidNoNull" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.Customer">
  	SELECT * FROM t_base_sales_customer
  	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="condition.id != null">
        	and id = #{condition.id}
        </if>
        <if test="1 == 1"> 
        	and islast = '0'
        </if>
	</trim>
  	order by id
	<include refid="common.Page_limit"/>
  </select>
  <select id="getCustomerCountPidNoNull" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	SELECT count(1) FROM t_base_sales_customer
  	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="condition.id != null">
        	and id = #{condition.id}
        </if>
        <if test="1 == 1">
        	and islast = '0'
        </if>
	</trim>
  </select>
  
  <select id="getCustomerPrice" resultType="com.hd.agent.basefiles.model.CustomerPrice" parameterType="java.lang.String" >
    select *
    from t_base_sales_customer_price
    where id = #{id}
  </select>
  <select id="getCustomerPriceListByCustomer" resultType="com.hd.agent.basefiles.model.CustomerPrice" parameterType="java.lang.String">
  	select *
    from t_base_sales_customer_price
    where customerid = #{id}
  </select>
  <select id="getCustomerPriceListByMap" parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.CustomerPrice">
  	select * from t_base_sales_customer_price
  	<trim prefix="where" prefixOverrides="and|or">
  		<if test="customerids != null">
  			and FIND_IN_SET(customerid,#{customerids})
  		</if>
  		<if test="goodsid != null">
  			and goodsid = #{goodsid}
  		</if>
  		<if test="idArr != null">
  			and id in
  			<foreach collection="idArr" index="index" item="item" separator="," open="(" close=")">
  				#{item}
  			</foreach>
  		</if>
  	</trim>
  </select>
  <select id="getCustomerPriceListByMapAloneCst"  parameterType="java.util.Map" resultType="com.hd.agent.basefiles.model.CustomerPrice">
  	select * from t_base_sales_customer_price
  	<trim prefix="where" prefixOverrides="and|or">
  		<if test="customerid != null">
  			and customerid = #{customerid}
  		</if>
  		<if test="goodsidArr != null">
  			and goodsid in
  			<foreach collection="goodsidArr" index="index" item="item" separator="," open="(" close=")">
  				#{item}
  			</foreach>
  		</if>
  	</trim>
  </select>
  <select id="getPriceListByPageMap" resultType="com.hd.agent.basefiles.model.CustomerPrice" parameterType="com.hd.agent.common.util.PageMap" useCache="false">
  	select a.id,a.shopid as initshopid,a.shopid,a.customerid,a.goodsid,a.barcode,a.taxrate,a.taxprice,
  		a.price as initprice,a.price,a.ctcboxprice as initctcboxprice,a.ctcboxprice,a.noprice as initnoprice,a.noprice,a.remark
  	from t_base_sales_customer_price a
  	left join t_base_goods_info b on b.id = a.goodsid
  	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="condition.customerid != null">
        	and a.customerid = #{condition.customerid}
        </if>
        <if test="condition.goodsid != null">
        	and a.goodsid = #{condition.goodsid}
        </if>
        <if test="condition.brandid != null">
        	and b.brand = #{condition.brandid}
        </if>
        <if test="condition.shopid != null">
            and a.shopid = #{condition.shopid}
        </if>
        <if test="condition.goodssort != null">
        	and b.defaultsort like '${condition.goodssort}%'
        </if>
	</trim>
  	<include refid="common.Page_limit"/>
  </select>
  <select id="getPriceCountByPageMap" resultType="int" parameterType="com.hd.agent.common.util.PageMap" useCache="false">
  	select count(1) from (
		select a.id,a.shopid as initshopid,a.shopid,a.customerid,a.goodsid,a.barcode,a.taxrate,a.taxprice,
  		a.price as initprice,a.price,a.ctcboxprice as initctcboxprice,a.ctcboxprice,a.noprice as initnoprice,a.noprice,a.remark
		from t_base_sales_customer_price a
	  	left join t_base_goods_info b on b.id = a.goodsid
	  	<trim prefix="where" prefixOverrides="and|or" >
	  		<if test="condition.customerid != null">
	        	and customerid = #{condition.customerid}
	        </if>
	        <if test="condition.goodsid != null">
	        	and goodsid = #{condition.goodsid}
	        </if>
            <if test="condition.shopid != null">
                and a.shopid = #{condition.shopid}
            </if>
	        <if test="condition.brandid != null">
	        	and b.brand = #{condition.brandid}
	        </if>
	        <if test="condition.goodssort != null">
	        	and b.defaultsort like '${condition.goodssort}%'
	        </if>
		</trim>
	)z
  </select>
  <select id="checkCustomerPrice" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_sales_customer_price
  	where customerid = #{customerid} and goodsid = #{goodsid}
  </select>
  <select id="getCustomerPriceByCustomerAndGoodsid" resultType="com.hd.agent.basefiles.model.CustomerPrice" parameterType="java.lang.String" useCache="false">
  	select *
    from t_base_sales_customer_price
    where customerid = #{customerid} and goodsid = #{goodsid}
  </select>
  <select id="getCustoemrPriceList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.CustomerPrice" useCache="false">
  	select * from t_base_sales_customer_price
  	<trim prefix="where" prefixOverrides="and|or" >
        <choose>
        	<when test="condition.exportids == null">
        		<if test="condition.customerid != null">
		        	customerid = #{condition.customerid}
		        </if>
        	</when>
        	<otherwise>
        		and FIND_IN_SET(id,#{condition.exportids})
        	</otherwise>
        </choose>
	</trim>
	order by goodsid
  </select>
  <select id="getCustoemrPriceCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int" useCache="false">
  	select count(1) from t_base_sales_customer_price
  	<trim prefix="where" prefixOverrides="and|or" >
  		<choose>
        	<when test="condition.exportids == null">
        		<if test="condition.customerid != null">
		        	customerid = #{condition.customerid}
		        </if>
        	</when>
        	<otherwise>
        		and FIND_IN_SET(id,#{condition.exportids})
        	</otherwise>
        </choose>
	</trim>
  </select>
  <select id="getCustomerPriceByCustomerAndGoods" resultType="com.hd.agent.basefiles.model.CustomerPrice" parameterType="java.lang.String" useCache="false">
  	select *
    from t_base_sales_customer_price
    where customerid = #{customerid} and goodsid = #{goodsid}
  </select>
  <select id="getCustomerPriceByCustomerAndShopid" resultType="com.hd.agent.basefiles.model.CustomerPrice" parameterType="java.lang.String">
  	select *
    from t_base_sales_customer_price
    where customerid = #{customerid} and shopid = #{shopid} limit 1
  </select>
  <delete id="deleteCustomerPriceByCustomer" parameterType="java.lang.String">
  	delete from t_base_sales_customer_price
    where customerid = #{id}
  </delete>
  <delete id="deleteCustomerPriceByGoods" parameterType="java.lang.String">
  	delete from t_base_sales_customer_price
    where goodsid = #{goodsid}
  </delete>
  <delete id="deleteCustomerPriceById" parameterType="java.lang.String">
  	delete from t_base_sales_customer_price
  	where id = #{id}
  </delete>
  <delete id="deleteCustomerPrices" parameterType="java.lang.String">
  	delete from t_base_sales_customer_price
  	where id = #{id}
  </delete>
  <insert id="addCustomerPrice" parameterType="com.hd.agent.basefiles.model.CustomerPrice" >
    insert into t_base_sales_customer_price
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="customerid != null" >
        customerid,
      </if>
      <if test="goodsid != null" >
        goodsid,
      </if>
      <if test="barcode != null" >
        barcode,
      </if>
      <if test="shopid != null" >
        shopid,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="ctcboxprice != null" >
        ctcboxprice,
      </if>
      <if test="noprice != null" >
        noprice,
      </if>
      <if test="remark != null" >
        remark,
      </if>
        addtime,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id},
      </if>
      <if test="customerid != null" >
        #{customerid},
      </if>
      <if test="goodsid != null" >
        #{goodsid},
      </if>
      <if test="barcode != null" >
        #{barcode},
      </if>
       <if test="shopid != null" >
        #{shopid},
      </if>
      <if test="price != null" >
        #{price},
      </if>
      <if test="ctcboxprice != null" >
        #{ctcboxprice},
      </if>
      <if test="noprice != null" >
        #{noprice},
      </if>
      <if test="remark != null" >
        #{remark},
      </if>
        now(),
    </trim>
  </insert>
  <!-- 批量新增客户合同商品 -->
  <insert id="addCustomerPriceMore" parameterType="java.util.List">
  	insert into t_base_sales_customer_price (customerid,goodsid,barcode,shopid,price,ctcboxprice,noprice,remark,addtime)
    values
  	<foreach collection="list" item="item" index="index" separator="," >
  	  (#{item.customerid},#{item.goodsid},#{item.barcode},#{item.shopid},#{item.price},#{item.ctcboxprice},#{item.noprice},#{item.remark},now())
  	</foreach>
  </insert>
  <!-- 批量新增完整客户合同商品信息 -->
  <insert id="addCustomerPriceMoreTotal" parameterType="java.util.List">
  	insert into t_base_sales_customer_price (customerid,goodsid,barcode,shopid,taxrate,taxprice,price,ctcboxprice,noprice,remark,addtime)
    values
  	<foreach collection="list" item="item" index="index" separator="," >
  	  (#{item.customerid},#{item.goodsid},#{item.barcode},#{item.shopid},#{item.taxrate},#{item.taxprice},#{item.price},#{item.ctcboxprice},#{item.noprice},#{item.remark},now())
  	</foreach>
  </insert>
  <select id="doCheckIsExistCustomerPrice" parameterType="java.util.Map" resultType="int">
  	select count(1) from (
  		select * from t_base_sales_customer_price
  		<trim prefix="where" prefixOverrides="and|or">
  			<if test="customerid != null">
  				and customerid = #{customerid}
  			</if>
  			<if test="goodsid != null">
  				and goodsid = #{goodsid}
  			</if>
  			<if test="goodsidArr != null">
  				and goodsid in 
  				<foreach collection="goodsidArr" index="index" item="item" separator="," open="(" close=")">
  					#{item}
  				</foreach>
  			</if>
  		</trim>
  	)z
  </select>
  <delete id="deleteExistCustomerPrice" parameterType="java.util.Map">
  	delete from t_base_sales_customer_price
  	<trim prefix="where" prefixOverrides="and|or">
		<if test="customerid != null">
			and customerid = #{customerid}
		</if>
		<if test="goodsidArr != null">
			and goodsid in 
			<foreach collection="goodsidArr" index="index" item="item" separator="," open="(" close=")">
				#{item}
			</foreach>
		</if>
	</trim>
  </delete>
  <select id="getCustomerPriceListByGoodsid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.CustomerPrice">
  	select * from t_base_sales_customer_price where goodsid = #{goodsid}
  </select>
  
  <update id="updateCustomerPrice" parameterType="com.hd.agent.basefiles.model.CustomerPrice" >
    update t_base_sales_customer_price
    <set >
      <if test="customerid != null" >
        customerid = #{customerid},
      </if>
      <if test="goodsid != null" >
        goodsid = #{goodsid},
      </if>
      <if test="barcode != null" >
        barcode = #{barcode},
      </if>
      <if test="shopid != null" >
        shopid = #{shopid},
      </if>
      <if test="price != null" >
        price = #{price},
      </if>
      <if test="ctcboxprice != null" >
        ctcboxprice = #{ctcboxprice},
      </if>
      <if test="noprice != null" >
        noprice = #{noprice},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
        <if test="1==1" >
            addtime = now(),
        </if>
    </set>
    where id = #{id}
  </update>
  <update id="updateCustomerPriceByParam" parameterType="com.hd.agent.basefiles.model.CustomerPrice">
  	update t_base_sales_customer_price
    <set >
      <if test="barcode != null" >
        barcode = #{barcode},
      </if>
      <if test="shopid != null" >
        shopid = #{shopid},
      </if>
      <if test="price != null" >
        price = #{price},
      </if>
      <if test="ctcboxprice != null" >
        ctcboxprice = #{ctcboxprice},
      </if>
      <if test="noprice != null" >
        noprice = #{noprice},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
    </set>
    where customerid = #{customerid} and goodsid = #{goodsid}
  </update>
  
  <select id="getCustomerListForCombobox" parameterType="com.hd.agent.common.util.PageMap" resultMap="BaseResultMap">
  	SELECT a.id,a.NAME,a.pid,a.salesdeptid,a.salesuserid,
		CASE WHEN a.shortname IS NULL THEN a.NAME ELSE a.shortname END shortname,
		a.thisid,a.settletype,a.paytype,a.salesarea, a.contact,a.customersort
	FROM t_base_sales_customer a
	<trim prefix="where" prefixOverrides="and|or">
		<if test="1 == 1">
			and a.state = '1'
		</if>
		<if test="1 == 1">
			and a.islast = '1'
		</if>
		<if test="condition.list != null">
  			and a.id NOT in
  			<foreach collection="condition.list" index="index" item="item" open="(" separator="," close=")">
  				#{item}
  			</foreach>
  		</if>
  		<if test="condition.name != null">
			and a.name like CONCAT('%',#{condition.name}, '%')
		</if>
		<if test="condition.id != null">
			and a.id = #{condition.id}
		</if>
		<if test="condition.customersort != null">
			and ( ${condition.customersort} )
		</if>
		<if test="condition.salesarea != null">
			and FIND_IN_SET(a.salesarea,#{condition.salesarea})
		</if>
		<if test="condition.salesuserid != null">
			and a.salesuserid = #{condition.salesuserid}
		</if>
	</trim>
	ORDER BY id ASC
	<include refid="common.Page_limit"/>
  </select>
  <select id="getCustomerListForComboboxCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	select count(1) from (
  		SELECT a.id,a.NAME,a.pid,a.salesdeptid,a.salesuserid,
			CASE WHEN a.shortname IS NULL THEN a.NAME ELSE a.shortname END shortname,
			a.thisid,a.settletype,a.paytype,a.salesarea, a.contact,a.customersort
		FROM t_base_sales_customer a
		<trim prefix="where" prefixOverrides="and|or">
			<if test="1 == 1">
				and a.state = '1'
			</if>
			<if test="1 == 1">
				and a.islast = '1'
			</if>
			<if test="condition.list != null">
	  			and a.id NOT in
	  			<foreach collection="condition.list" index="index" item="item" open="(" separator="," close=")">
	  				#{item}
	  			</foreach>
	  		</if>
	  		<if test="condition.name != null">
				and a.name like CONCAT('%',#{condition.name}, '%')
			</if>
			<if test="condition.id != null">
				and a.id = #{condition.id}
			</if>
			<if test="condition.customersort != null">
				and ( ${condition.customersort} )
			</if>
			<if test="condition.salesarea != null">
				and FIND_IN_SET(a.salesarea,#{condition.salesarea})
			</if>
			<if test="condition.salesuserid != null">
				and a.salesuserid = #{condition.salesuserid}
			</if>
		</trim>
		ORDER BY id ASC
  	)t
  </select>
  <select id="getCustomerSelectListData" parameterType="com.hd.agent.common.util.PageMap" resultMap="BaseResultMap">
  	select t.id, t.name,t.pinyin, t.thisid, t.pid,t.shopno, t.state, t.remark, t.shortname, t.shortcode, t.abclevel, t.telphone, 
		    t.salesarea, t.customersort, t.contact, t.address,t.bank, t.cardno, 
		    t.credit, t.creditdate, t.salesmonth, t.settlement, t.settletype, t.settleday, t.paytype, billing, 
		    t.salesdeptid, t.salesdeptname,t.salesuserid,t.salesusername, t.indoorstaff,t.payeeid, t.pricesort,t.islast
    from t_base_sales_customer t
    <choose>
    	<when test="condition.isBrandUser != null">
    		LEFT JOIN t_base_personnel_customer pc on t.id=pc.customerid and pc.personid=#{condition.personnelid}
    	</when>
    	<when test="condition.isSupplierUser !=null">
    		LEFT JOIN t_base_personnel_supplier_customer pc on t.id=pc.customerid and pc.personid=#{condition.personnelid}
    	</when>
    </choose>
  	<trim prefix="where" prefixOverrides="and|or">
  		<choose>
	    	<when test="condition.isBrandUser != null">
	    		 <if test="condition.datasql != null" >
			         and (${condition.datasql} or pc.personid=#{condition.personnelid})
			     </if>
			     <if test="condition.datasql == null" >
			         and  pc.personid=#{condition.personnelid}
			     </if>
	    	</when>
	    	<when test="condition.isSupplierUser != null">
	    		 <if test="condition.datasql != null" >
			         and (${condition.datasql} or pc.personid=#{condition.personnelid})
			     </if>
			     <if test="condition.datasql == null" >
			         and  pc.personid=#{condition.personnelid}
			     </if>
	    	</when>
	    	<otherwise>
	    		<if test="condition.datasql != null" >
		         and ${condition.datasql}
		      	</if>
	    	</otherwise>
	    </choose>
  		<if test="condition.paramRuleSql != null">and ${condition.paramRuleSql}</if>
      	<if test="condition.id != null" >
      		and (t.address like '%${condition.id}%' or t.pinyin like '%${condition.id}%' or t.name like '%${condition.id}%' or t.shortcode like '${condition.id}%'
         	or t.id like '${condition.id}%'
            <if test="condition.con != null">
                or (
                <trim prefix="" prefixOverrides="and|or">
                    <foreach collection="condition.con" index="index" item="item">
                        and t.name like '%${item}%'
                    </foreach>
                </trim>
                )
            </if>
            )
      	</if>
      	<if test="condition.ishead != null and condition.ishead==2" >
      		and (t.pid='' or t.pid is null)
      	</if>
      	<if test="condition.ishead != null and condition.ishead==1" >
      		and t.islast='1'
      	</if>
      	<choose>
	      	<when test="condition.isopen==0">
	      		and (t.state = '1' or t.state='0')
	      	</when>
	      	<when test="condition.isopen==1">
	      		and t.state = '1'
	      	</when>
	      	<otherwise>
	      		and t.state = '1'
	      	</otherwise>
      	</choose>
	</trim>
	order by id
	<include refid="common.Page_limit"/>
  </select>
  <select id="getCustomerSelectListDataCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	select count(1)
    from t_base_sales_customer t
  	<choose>
    	<when test="condition.isBrandUser != null">
    		LEFT JOIN t_base_personnel_customer pc on t.id=pc.customerid and pc.personid=#{condition.personnelid}
    	</when>
    	<when test="condition.isSupplierUser !=null">
    		LEFT JOIN t_base_personnel_supplier_customer pc on t.id=pc.customerid and pc.personid=#{condition.personnelid}
    	</when>
    </choose>
  	<trim prefix="where" prefixOverrides="and|or">
  		<choose>
	    	<when test="condition.isBrandUser != null">
	    		 <if test="condition.datasql != null" >
			         and (${condition.datasql} or pc.personid=#{condition.personnelid})
			     </if>
			     <if test="condition.datasql == null" >
			         and  pc.personid=#{condition.personnelid}
			     </if>
	    	</when>
	    	<when test="condition.isSupplierUser != null">
	    		 <if test="condition.datasql != null" >
			         and (${condition.datasql} or pc.personid=#{condition.personnelid})
			     </if>
			     <if test="condition.datasql == null" >
			         and  pc.personid=#{condition.personnelid}
			     </if>
	    	</when>
	    	<otherwise>
	    		<if test="condition.datasql != null" >
		         and ${condition.datasql}
		      	</if>
	    	</otherwise>
	    </choose>
  		<if test="condition.paramRuleSql != null">and ${condition.paramRuleSql}</if>
      	<if test="condition.id != null" >
      		and (t.address like '%${condition.id}%' or t.pinyin like '%${condition.id}%' or t.name like '%${condition.id}%' or t.shortcode like '${condition.id}%'
         	or t.id like '${condition.id}%'
            <if test="condition.con != null">
                or (
                <trim prefix="" prefixOverrides="and|or">
                    <foreach collection="condition.con" index="index" item="item">
                        and t.name like '%${item}%'
                    </foreach>
                </trim>
                )
            </if>
            )
      	</if>
      	<if test="condition.ishead != null and condition.ishead==2" >
      		and (t.pid='' or t.pid is null)
      	</if>
      	<if test="condition.ishead != null and condition.ishead==1" >
      		and t.islast='1'
      	</if>
      	<choose>
	      	<when test="condition.isopen==0">
	      		and (t.state = '1' or t.state='0')
	      	</when>
	      	<when test="condition.isopen==1">
	      		and t.state = '1'
	      	</when>
	      	<otherwise>
	      		and t.state = '1'
	      	</otherwise>
      	</choose>
	</trim>
  </select>
  <update id="editMoreCustomer" parameterType="com.hd.agent.basefiles.model.Customer" >
    update t_base_sales_customer
    <set >
      <if test="id != null and id != ''" >
        id = #{id},
      </if>
      <if test="name != null" >
        name = #{name},
      </if>
      <if test="state != null" >
        state = #{state},
      </if>
      <if test="modifyuserid != null" >
        modifyuserid = #{modifyuserid},
      </if>
      <if test="modifyusername != null" >
        modifyusername = #{modifyusername},
      </if>
        modifytime = now(),
      <if test="customersort != null and customersort != ''" >
        customersort = #{customersort},
      </if>
      <if test="contact != null" >
        contact = #{contact},
      </if>
      <if test="settletype != null and settletype != ''" >
        settletype = #{settletype},
      </if>
      <if test="settleday != null and settleday != ''" >
        settleday = #{settleday},
      </if>
      <if test="paytype != null and paytype != ''" >
        paytype = #{paytype},
      </if>
      <if test="billing != null and billing != ''" >
        billing = #{billing},
      </if>
      <if test="billtype != null and billtype != ''" >
        billtype = #{billtype},
      </if>
      <if test="canceltype != null and canceltype != ''" >
        canceltype = #{canceltype},
      </if>
      <if test="salesdeptid != null and salesdeptid != ''" >
        salesdeptid = #{salesdeptid},
      </if>
      <if test="salesdeptname != null" >
        salesdeptname = #{salesdeptname},
      </if>
      <if test="salesuserid != null and salesuserid != ''" >
        salesuserid = #{salesuserid},
      </if>
      <if test="salesusername != null" >
        salesusername = #{salesusername},
      </if>
      <if test="indoorstaff != null and indoorstaff != ''" >
        indoorstaff = #{indoorstaff},
      </if>
      <if test="payeeid != null and payeeid != ''" >
        payeeid = #{payeeid},
      </if>
      <if test="pricesort != null and pricesort != ''" >
        pricesort = #{pricesort},
      </if>
      <if test="tallyuserid != null and tallyuserid != ''" >
        tallyuserid = #{tallyuserid},
      </if>
      <if test="tallyusername != null" >
        tallyusername = #{tallyusername},
      </if>
      <if test="salesarea != null and salesarea != ''" >
        salesarea = #{salesarea},
      </if>
      <if test="credit != null" >
        credit = #{credit},
      </if>
    </set>
    where id = #{oldid}
  </update>
  <select id="getCustoemrPriceListByCustomerid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.CustomerPrice">
  	select * from t_base_sales_customer_price
  	where customerid = #{customerid}
  </select>
  <update id="updateSalesdeptname">
      update t_base_sales_customer t,t_base_department t1
      set t.salesdeptname = t1.name
      where t.salesdeptid = t1.id
  </update>

  <!-- customer-goods -->
  <insert id="addCustomerGoods" parameterType="com.hd.agent.basefiles.model.CustomerGoods" >
    insert into t_base_sales_customer_goods
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="customerid != null" >
        customerid,
      </if>
      <if test="goodsid != null" >
        goodsid,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="1==1" >
        lastdate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="customerid != null" >
        #{customerid},
      </if>
      <if test="goodsid != null" >
        #{goodsid},
      </if>
      <if test="price != null" >
        #{price},
      </if>
      <if test="remark != null" >
        #{remark},
      </if>
      <if test="1==1" >
        now(),
      </if>
    </trim>
  </insert>
  <select id="getCustomerGoodsByCustomerAndGoodsid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.CustomerGoods">
  	select * from t_base_sales_customer_goods where customerid = #{customerid} and goodsid = #{goodsid} limit 1
  </select>
  <select id="checkCustomerGoods" parameterType="java.lang.String" resultType="int">
  	select count(1) from t_base_sales_customer_goods where customerid = #{customerid} and goodsid = #{goodsid}
  </select>
  <update id="updateCustomerGoods" parameterType="com.hd.agent.basefiles.model.CustomerGoods" >
    update t_base_sales_customer_goods
    <set >
      <if test="customerid != null" >
        customerid = #{customerid},
      </if>
      <if test="goodsid != null" >
        goodsid = #{goodsid},
      </if>
      <if test="price != null" >
        price = #{price},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
      <if test="1==1" >
        lastdate = now(),
      </if>
    </set>
    where id = #{id}
  </update>
  <select id="getCustomerGoodsList" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.CustomerGoods">
  	select a.* from t_base_sales_customer_goods a
  	<if test="condition.brandid != null">
  		left join t_base_goods_info b on b.id = a.goodsid
  	</if>
  	<trim prefix="where" prefixOverrides="and|or" >
      	<if test="condition.customerid != null">
      		and customerid = #{condition.customerid}
      	</if>
      	<if test="condition.customergoodsid != null" >
      		and goodsid = #{condition.customergoodsid}
      	</if>
      	<if test="condition.brandid != null" >
      		and b.brand = #{condition.brandid}
      	</if>
	</trim>
  	<include refid="common.Page_limit"/>
  </select>
  <select id="getCustomerGoodsCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int">
  	select count(1) from (
  	select a.* from t_base_sales_customer_goods a
  	<if test="condition.brandid != null">
  		left join t_base_goods_info b on b.id = a.goodsid
  	</if>
  	<trim prefix="where" prefixOverrides="and|or" >
      	<if test="condition.customerid != null">
      		and a.customerid = #{condition.customerid}
      	</if>
      	<if test="condition.customergoodsid != null" >
      		and a.goodsid = #{condition.customergoodsid}
      	</if>
      	<if test="condition.brandid != null" >
      		and b.brand = #{condition.brandid}
      	</if>
	</trim>
	)z
  </select>
  <select id="getCustomerByName" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Customer">
  	select * from t_base_sales_customer where name = #{name}
  </select>
  <select id="getAllCustomer" resultType="com.hd.agent.basefiles.model.Customer">
  	select * from t_base_sales_customer
  	limit 1 , 10
  </select>
  <select id="getAllCustomerWithoutPcustomer" resultType="com.hd.agent.basefiles.model.Customer" useCache="false">
  	select t.* from t_base_sales_customer t
    <choose>
    	<when test="isBrandUser != null">
    		LEFT JOIN t_base_personnel_customer pc on t.id=pc.customerid and pc.personid=#{personnelid}
    	</when>
    	<when test="isSupplierUser !=null">
    		LEFT JOIN t_base_personnel_supplier_customer pc on t.id=pc.customerid and pc.personid=#{personnelid}
    	</when>
    </choose>
  	<trim prefix="where" prefixOverrides="and|or">
  		<choose>
	    	<when test="isBrandUser != null">
	    		 <if test="datasql != null" >
			         and (${datasql} or pc.personid=#{personnelid})
			     </if>
			     <if test="datasql == null" >
			         and  pc.personid=#{personnelid}
			     </if>
	    	</when>
	    	<when test="isSupplierUser != null">
	    		 <if test="datasql != null" >
			         and (${datasql} or pc.personid=#{personnelid})
			     </if>
			     <if test="datasql == null" >
			         and  pc.personid=#{personnelid}
			     </if>
	    	</when>
	    	<otherwise>
	    		<if test="datasql != null" >
		         and ${datasql}
		      	</if>
	    	</otherwise>
	    </choose>
        <if test="syncdate != null">
            and (t.addtime > #{syncdate} or t.modifytime> #{syncdate} or t.opentime>#{syncdate}
            <if test="isBrandUser != null or isSupplierUser != null">
                or pc.addtime > #{syncdate}
            </if>)
        </if>
  		<if test="1==1">
  			and t.state='1' and t.islast='1'
  		</if>
  	</trim>
  </select>
  <!-- 修改人：zhanghh 20150923 修改内容：查询sql修改并添加 useCache="false"  -->
  <select id="getCustomerListForPhone" parameterType="com.hd.agent.common.util.PageMap" resultType="com.hd.agent.basefiles.model.Customer" useCache="false">
  	select t.id,t.name,t.address,count(1) as stime
  	from t_base_sales_customer t
    left join t_storage_saleout t1 on t.id=t1.customerid
    <choose>
    	<when test="condition.isBrandUser != null">
    		LEFT JOIN t_base_personnel_customer pc on t.id=pc.customerid and pc.personid=#{condition.personnelid}
    	</when>
    	<when test="condition.isSupplierUser !=null">
    		LEFT JOIN t_base_personnel_supplier_customer pc on t.id=pc.customerid and pc.personid=#{condition.personnelid}
    	</when>
    </choose>
  	<trim prefix="where" prefixOverrides="and|or">
  		<choose>
	    	<when test="condition.isBrandUser != null">
	    		 <if test="condition.datasql != null" >
			         and (${condition.datasql} or pc.personid=#{condition.personnelid})
			     </if>
			     <if test="condition.datasql == null" >
			         and  pc.personid=#{condition.personnelid}
			     </if>
	    	</when>
	    	<when test="condition.isSupplierUser != null">
	    		 <if test="condition.datasql != null" >
			         and (${condition.datasql} or pc.personid=#{condition.personnelid})
			     </if>
			     <if test="condition.datasql == null" >
			         and  pc.personid=#{condition.personnelid}
			     </if>
	    	</when>
	    	<otherwise>
	    		<if test="condition.datasql != null" >
		         and ${condition.datasql}
		      	</if>
	    	</otherwise>
	    </choose>
        <if test="condition.con != null">
        	and (t.address like '%${condition.con}%' or t.pinyin like '%${condition.con}%' or t.name like '%${condition.con}%' or t.shortcode like '${condition.con}%'
         	or t.id like '${condition.con}%'
            <if test="condition.conarr != null">
                or (
                <trim prefix="" prefixOverrides="and|or">
                    <foreach collection="condition.conarr" index="index" item="item">
                        and t.name like '%${item}%'
                    </foreach>
                </trim>
                )
            </if>
            )
        </if>
  		<if test="1==1">
  			and t.state='1' and t.islast='1'
  			GROUP BY t.id
			ORDER BY stime desc
  		</if>
  	</trim>
      <include refid="common.Page_limit"/>
  </select>
    <select id="getCustomerListForPhoneCount" parameterType="com.hd.agent.common.util.PageMap" resultType="int" useCache="false">
        select count(1)
        from t_base_sales_customer t
        <choose>
            <when test="condition.isBrandUser != null">
                LEFT JOIN t_base_personnel_customer pc on t.id=pc.customerid and pc.personid=#{condition.personnelid}
            </when>
            <when test="condition.isSupplierUser !=null">
                LEFT JOIN t_base_personnel_supplier_customer pc on t.id=pc.customerid and pc.personid=#{condition.personnelid}
            </when>
        </choose>
        <trim prefix="where" prefixOverrides="and|or">
            <choose>
                <when test="condition.isBrandUser != null">
                    <if test="condition.datasql != null" >
                        and (${condition.datasql} or pc.personid=#{condition.personnelid})
                    </if>
                    <if test="condition.datasql == null" >
                        and  pc.personid=#{condition.personnelid}
                    </if>
                </when>
                <when test="condition.isSupplierUser != null">
                    <if test="condition.datasql != null" >
                        and (${condition.datasql} or pc.personid=#{condition.personnelid})
                    </if>
                    <if test="condition.datasql == null" >
                        and  pc.personid=#{condition.personnelid}
                    </if>
                </when>
                <otherwise>
                    <if test="condition.datasql != null" >
                        and ${condition.datasql}
                    </if>
                </otherwise>
            </choose>
            <if test="condition.con != null">
                and (t.address like '%${condition.con}%' or t.pinyin like '%${condition.con}%' or t.name like '%${condition.con}%' or t.shortcode like '${condition.con}%'
                or t.id like '${condition.con}%'
                <if test="condition.conarr != null">
                    or (
                    <trim prefix="" prefixOverrides="and|or">
                        <foreach collection="condition.conarr" index="index" item="item">
                            and t.name like '%${item}%'
                        </foreach>
                    </trim>
                    )
                </if>
                )
            </if>
            <if test="1==1">
                and t.state='1' and t.islast='1'
            </if>
        </trim>
    </select>
  <update id="updateCustomerNewsaledate" parameterType="java.lang.String">
    UPDATE t_base_sales_customer SET newsalesdate = #{businessdate} WHERE id = #{customerid};
  </update>
  <update id="editBranduserAfterDoData" parameterType="java.util.Map">
  	call p_sales_branduser_customer(#{customerid},#{brandid},#{personid},#{businessdate1},#{businessdate2},#{editnum})
  </update>
  
  <!-- 客户档案修改后更新相关单据 -->
  <update id="editCustomerSalesDemand" parameterType="com.hd.agent.basefiles.model.Customer">
	UPDATE t_sales_demand SET 
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		salesarea = #{salesarea},
		indooruserid = #{indoorstaff},
		customersort = #{customersort}
	WHERE customerid = #{id}
  </update>
  <update id="editCustomerSalesOrder" parameterType="com.hd.agent.basefiles.model.Customer">
	UPDATE t_sales_order SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id}
  </update>
  <update id="editCustomerSalesOrderCar" parameterType="com.hd.agent.basefiles.model.Customer">
	UPDATE t_sales_order_car SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id}
  </update>
  <update id="editCustomerSalesDispatchbill" parameterType="com.hd.agent.basefiles.model.Customer">
	UPDATE t_sales_dispatchbill SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id}
  </update>
  <update id="editCustomerSalesReceipt" parameterType="com.hd.agent.basefiles.model.Customer">
	UPDATE t_sales_receipt SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id}
  </update>
  <update id="editCustomerSalesRejectbill" parameterType="com.hd.agent.basefiles.model.Customer">
	UPDATE t_sales_rejectbill SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id}
  </update>
  <update id="editCustomerSalesSaleout" parameterType="com.hd.agent.basefiles.model.Customer">
	UPDATE t_storage_saleout SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id}
  </update>
  <update id="editCustomerSalesInvoice" parameterType="com.hd.agent.basefiles.model.Customer">
	UPDATE t_account_sales_invoice SET
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		pcustomerid = #{pid}
	WHERE customerid = #{id}
  </update>
  <update id="editCustomerSalesInvoiceDetail" parameterType="com.hd.agent.basefiles.model.Customer">
	UPDATE t_account_sales_invoice_detail SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id}
  </update>
    <update id="editCustomerSalesInvoiceBill" parameterType="com.hd.agent.basefiles.model.Customer">
        UPDATE t_account_sales_invoicebill SET
        salesdept = #{salesdeptid},
        salesuser = #{salesuserid},
        pcustomerid = #{pid}
        WHERE customerid = #{id}
    </update>
    <update id="editCustomerSalesInvoiceBillDetail" parameterType="com.hd.agent.basefiles.model.Customer">
        UPDATE t_account_sales_invoicebill_detail SET
        salesarea = #{salesarea},
        salesdept = #{salesdeptid},
        salesuser = #{salesuserid},
        customersort = #{customersort},
        pcustomerid = #{pid}
        WHERE customerid = #{id}
    </update>
  <update id="editCustomerSalesSalerejectEnter" parameterType="com.hd.agent.basefiles.model.Customer">
	UPDATE t_storage_salereject_enter SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id}
  </update>
  <update id="editCustomerSalesPushBalance" parameterType="com.hd.agent.basefiles.model.Customer">
	UPDATE t_account_customer_push_balance SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id}
  </update>
    <update id="editCustomerSalesBeginAmount" parameterType="com.hd.agent.basefiles.model.Customer">
        UPDATE t_account_begin_amount SET
        salesarea = #{salesarea},
        salesdept = #{salesdeptid},
        salesuser = #{salesuserid},
        customersort = #{customersort},
        pcustomerid = #{pid}
        WHERE customerid = #{id}
    </update>

  <update id="editCustomerChangeBill" parameterType="com.hd.agent.basefiles.model.Customer">
  	UPDATE t_sales_demand SET 
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		salesarea = #{salesarea},
		indooruserid = #{indoorstaff},
		customersort = #{customersort}
	WHERE customerid = #{id};
	UPDATE t_sales_order SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id};
	UPDATE t_sales_order_car SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id};
	UPDATE t_sales_dispatchbill SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id};
	UPDATE t_sales_receipt SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id};
	UPDATE t_sales_rejectbill SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id};
	UPDATE t_storage_saleout SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id};
	UPDATE t_account_sales_invoice SET
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		pcustomerid = #{pid}
	WHERE chlidcustomerid = #{id};
	UPDATE t_account_sales_invoice_detail SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id};
	UPDATE t_storage_salereject_enter SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		indooruserid = #{indoorstaff},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id};
	UPDATE t_account_customer_push_balance SET
		salesarea = #{salesarea},
		salesdept = #{salesdeptid},
		salesuser = #{salesuserid},
		customersort = #{customersort},
		pcustomerid = #{pid}
	WHERE customerid = #{id};
  </update>
  
  <!-- 品牌业务员修改后更新相关单据 -->
  <update id="editOrderDispatchbill" parameterType="java.util.Map">
 	UPDATE t_sales_dispatchbill_detail t1,t_sales_dispatchbill t
 		<set>
 			<if test="personid != null">
 				t1.branduser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.billid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.branduser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editOrderCar" parameterType="java.util.Map">
  	UPDATE t_sales_order_car_detail t1,t_sales_order_car t
  		<set>
 			<if test="personid != null">
 				t1.branduser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.orderid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.branduser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editOrder" parameterType="java.util.Map">
  	UPDATE t_sales_order_detail t1,t_sales_order t
  		<set>
 			<if test="personid != null">
 				t1.branduser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.orderid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.branduser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editOrderReceipt" parameterType="java.util.Map">
  	UPDATE t_sales_receipt_detail t1,t_sales_receipt t
  		<set>
 			<if test="personid != null">
 				t1.branduser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.billid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.branduser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editOrderRejectbill" parameterType="java.util.Map">
  	UPDATE t_sales_rejectbill_detail t1,t_sales_rejectbill t
  		<set>
 			<if test="personid != null">
 				t1.branduser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.billid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.branduser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editOrderSaleout" parameterType="java.util.Map">
  	UPDATE t_storage_saleout_detail t1,t_storage_saleout t
  		<set>
 			<if test="personid != null">
 				t1.branduser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.saleoutid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.branduser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editOrderSalerejectEnter" parameterType="java.util.Map">
  	UPDATE t_storage_salereject_enter_detail t1,t_storage_salereject_enter t
  		<set>
 			<if test="personid != null">
 				t1.branduser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.salerejectid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.branduser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editOrderInvoice" parameterType="java.util.Map">
  	UPDATE t_account_sales_invoice_detail
  		<set>
 			<if test="personid != null">
 				branduser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
        <if test="brandid != null">
        	AND brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and branduser = #{initpersonid}
        </if>
	</trim>
  </update>
    <update id="editOrderInvoiceBill" parameterType="java.util.Map">
        UPDATE t_account_sales_invoicebill_detail
        <set>
            <if test="personid != null">
                branduser = #{personid}
            </if>
        </set>
        <trim prefix="where" prefixOverrides="and|or" >
            <if test="brandid != null">
                AND brandid = #{brandid}
            </if>
            <if test="customerid != null">
                AND customerid = #{customerid}
            </if>
            <if test="initpersonid != null">
                and branduser = #{initpersonid}
            </if>
        </trim>
    </update>
  <update id="editOrderPushBalance" parameterType="java.util.Map">
  	UPDATE t_account_customer_push_balance
  		<set>
 			<if test="personid != null">
 				branduser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
        <if test="brandid != null">
        	AND brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and branduser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editOrderAllData" parameterType="java.util.Map">
  	UPDATE t_report_sales_all_data
		SET branduser = #{personid}
	WHERE brandid = #{brandid} AND customerid = #{customerid}
  </update>
  
  <update id="editBranduserChangeBill" parameterType="java.util.Map">
  	UPDATE t_sales_dispatchbill_detail t1,t_sales_dispatchbill t
		SET t1.branduser = #{personid}
	WHERE t1.billid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_sales_order_car_detail t1,t_sales_order_car t
		SET t1.branduser = #{personid}
	WHERE t1.orderid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_sales_order_detail t1,t_sales_order t
		SET t1.branduser = #{personid}
	WHERE t1.orderid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_sales_receipt_detail t1,t_sales_receipt t
		SET t1.branduser = #{personid}
	WHERE t1.billid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_sales_rejectbill_detail t1,t_sales_rejectbill t
		SET t1.branduser = #{personid}
	WHERE t1.billid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_storage_saleout_detail t1,t_storage_saleout t
		SET t1.branduser = #{personid}
	WHERE t1.saleoutid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_storage_salereject_enter_detail t1,t_storage_salereject_enter t
		SET t1.branduser = #{personid}
	WHERE t1.salerejectid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_account_sales_invoice_detail
		SET branduser = #{personid}
	WHERE brandid = #{brandid} AND customerid = #{customerid};
	UPDATE t_account_customer_push_balance
		SET branduser = #{personid}
	WHERE brandid = #{brandid} AND customerid = #{customerid};
  </update>


    <update id="editOrderDemandBC" parameterType="java.util.Map">
        UPDATE t_sales_demand_detail t1,t_sales_demand t2,t_base_personnel_brandandcustomer t,t_base_goods_info g
        SET t1.branduser = t.personid
        WHERE t1.orderid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editOrderDispatchbillBC" parameterType="java.util.Map">
        UPDATE t_sales_dispatchbill_detail t1,t_sales_dispatchbill t2,t_base_personnel_brandandcustomer t,t_base_goods_info g
        SET t1.branduser = t.personid
        WHERE t1.billid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editOrderCarBC" parameterType="java.util.Map">
        UPDATE t_sales_order_car_detail t1,t_sales_order_car t2,t_base_personnel_brandandcustomer t,t_base_goods_info g
        SET t1.branduser = t.personid
        WHERE t1.orderid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editOrderBC" parameterType="java.util.Map">
        UPDATE t_sales_order_detail t1,t_sales_order t2,t_base_personnel_brandandcustomer t,t_base_goods_info g
        SET t1.branduser = t.personid
        WHERE t1.orderid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editOrderReceiptBC" parameterType="java.util.Map">
        UPDATE t_sales_receipt_detail t1,t_sales_receipt t2,t_base_personnel_brandandcustomer t,t_base_goods_info g
        SET t1.branduser = t.personid
        WHERE t1.billid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editOrderRejectbillBC" parameterType="java.util.Map">
        UPDATE t_sales_rejectbill_detail t1,t_sales_rejectbill t2,t_base_personnel_brandandcustomer t,t_base_goods_info g
        SET t1.branduser = t.personid
        WHERE t1.billid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editOrderSaleoutBC" parameterType="java.util.Map">
        UPDATE t_storage_saleout_detail t1,t_storage_saleout t2,t_base_personnel_brandandcustomer t,t_base_goods_info g
        SET t1.branduser = t.personid
        WHERE t1.saleoutid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editOrderSalerejectEnterBC" parameterType="java.util.Map">
        UPDATE t_storage_salereject_enter_detail t1,t_storage_salereject_enter t2,t_base_personnel_brandandcustomer t,t_base_goods_info g
        SET t1.branduser = t.personid
        WHERE t1.salerejectid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editOrderInvoiceBC" parameterType="java.util.Map">
        UPDATE t_account_sales_invoice_detail t1,t_base_personnel_brandandcustomer t,t_base_goods_info g
        SET t1.branduser = t.personid
        WHERE t1.goodsid = g.id and t1.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editOrderInvoiceBillBC" parameterType="java.util.Map">
        UPDATE t_account_sales_invoicebill_detail t1,t_base_personnel_brandandcustomer t,t_base_goods_info g
        SET t1.branduser = t.personid
        WHERE t1.goodsid = g.id and t1.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editOrderPushBalanceBC" parameterType="java.util.Map">
        UPDATE t_account_customer_push_balance t1,t_base_personnel_brandandcustomer t,t_base_goods_info g
        SET t1.branduser = t.personid
        WHERE t1.brandid = g.brand and t1.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>;
    </update>
  
  <!-- 删除人员对应品牌对应客户更新单据 -->
    <select id="getBillDetailsNum" resultType="map">
        SELECT SUM(z.demandbillnum) as demandbillnum,SUM(z.dispatchbillnum) as dispatchbillnum,sum(z.ordercarnum) as ordercarnum,SUM(z.ordernum) as ordernum,SUM(z.receiptnum) as receiptnum,
            SUM(z.rejectbillnum) as rejectbillnum,SUM(z.saleoutnum) as saleoutnum,SUM(z.salerejectenternum) as salerejectenternum,
            SUM(z.salesinvoicenum) as salesinvoicenum,SUM(z.salesinvoicebillnum) as salesinvoicebillnum,
            SUM(z.arrivalordernum) as arrivalordernum,SUM(z.purchaseenternum) as purchaseenternum,sum(z.purchaserejectoutnum) as purchaserejectoutnum,
            SUM(z.storagedaynum) as storagedaynum,SUM(z.storagemonthnum) as storagemonthnum,SUM(z.storagerealdaynum) as storagerealdaynum,SUM(z.storagerealmonthnum) as storagerealmonthnum
        from (
        SELECT MAX(id) as demandbillnum,0 as dispatchbillnum, 0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_sales_demand_detail
        UNION ALL
        SELECT 0 as demandbillnum,MAX(id) as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_sales_dispatchbill_detail
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,MAX(id) as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_sales_order_car_detail
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,MAX(id) as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_sales_order_detail
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,MAX(id) as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_sales_receipt_detail
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,MAX(id) as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_sales_rejectbill_detail
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,MAX(id) as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_storage_saleout_detail
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,MAX(id) as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_storage_salereject_enter_detail
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,MAX(id) as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_account_sales_invoice_detail
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,MAX(id) as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_account_sales_invoicebill_detail
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,MAX(id) as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_purchase_arrivalorder_detail
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,MAX(id) as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_storage_purchase_enter_detail
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,MAX(id) as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_storage_purchasereject_out_detail
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,MAX(id) as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_report_storage_day
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,MAX(id) as storagemonthnum,0 as storagerealdaynum,0 as storagerealmonthnum from t_report_storage_month
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,MAX(id) as storagerealdaynum,0 as storagerealmonthnum from t_report_storage_day_real
        UNION ALL
        SELECT 0 as demandbillnum,0 as dispatchbillnum,0 as ordercarnum,0 as ordernum,0 as receiptnum,0 as rejectbillnum,0 as saleoutnum,0 as salerejectenternum,0 as salesinvoicenum,0 as pushbalancenum,0 as salesinvoicebillnum,0 as arrivalordernum,0 as purchaseenternum,0 as purchaserejectoutnum,0 as purchaseinvoicenum,0 as storagedaynum,0 as storagemonthnum,0 as storagerealdaynum,MAX(id) as storagerealmonthnum from t_report_storage_month_real
        )z
    </select>
    <update id="editOrderDemandBCDel" parameterType="map">
        UPDATE t_sales_demand_detail t1,t_sales_demand t,t_base_personnel_no_brandandcustomer t2
        SET t1.branduser = ''
        where t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '3'
        and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t1.id > #{startnum} and <![CDATA[t1.id <= #{endnum}]]> );
    </update>
  <update id="editOrderDispatchbillBCDel" parameterType="map">
  	UPDATE t_sales_dispatchbill_detail t1,t_sales_dispatchbill t,t_base_personnel_no_brandandcustomer t2
		SET t1.branduser = ''
	where t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '3'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[t1.id <= #{endnum}]]> );
  </update>
  <update id="editOrderCarBCDel" parameterType="map">
  	UPDATE t_sales_order_car_detail t1,t_sales_order_car t,t_base_personnel_no_brandandcustomer t2
		SET t1.branduser = ''
	where t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '3'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editOrderBCDel" parameterType="map">
  	UPDATE t_sales_order_detail t1,t_sales_order t,t_base_personnel_no_brandandcustomer t2
		SET t1.branduser = ''
	where t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '3'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editOrderReceiptBCDel" parameterType="map">
  	UPDATE t_sales_receipt_detail t1,t_sales_receipt t,t_base_personnel_no_brandandcustomer t2
		SET t1.branduser = ''
	where t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '3'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editOrderRejectbillBCDel" parameterType="map">
  	UPDATE t_sales_rejectbill_detail t1,t_sales_rejectbill t,t_base_personnel_no_brandandcustomer t2
		SET t1.branduser = ''
	where t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '3'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editOrderSaleoutBCDel" parameterType="map">
  	UPDATE t_storage_saleout_detail t1,t_storage_saleout t,t_base_personnel_no_brandandcustomer t2
		SET t1.branduser = ''
	where t1.saleoutid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '3'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editOrderSalerejectEnterBCDel" parameterType="map">
  	UPDATE t_storage_salereject_enter_detail t1,t_storage_salereject_enter t,t_base_personnel_no_brandandcustomer t2
		SET t1.branduser = ''
	where t1.salerejectid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '3'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editOrderInvoiceBCDel" parameterType="map">
  	UPDATE t_account_sales_invoice_detail t,t_base_personnel_no_brandandcustomer t2
  		SET t.branduser = ''
  	where t.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '3'
  	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
  	and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
  </update>
    <update id="editOrderInvoiceBillBCDel" parameterType="map">
        UPDATE t_account_sales_invoicebill_detail t,t_base_personnel_no_brandandcustomer t2
        SET t.branduser = ''
        where t.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '3'
        and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
  <update id="editOrderPushBalanceBCDel" parameterType="map">
  	UPDATE t_account_customer_push_balance t,t_base_personnel_no_brandandcustomer t2
		SET t.branduser = ''
	where t.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '3'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day);
  </update>
  <!-- 厂家业务员修改后更新相关单据 -->
  <update id="editSupplieruserChangeDispatchbill" parameterType="java.util.Map">
  	UPDATE t_sales_dispatchbill_detail t1,t_sales_dispatchbill t
  		<set>
 			<if test="personid != null">
 				t1.supplieruser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.billid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.supplieruser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editSupplieruserChangeOrderCar" parameterType="java.util.Map">
  	UPDATE t_sales_order_car_detail t1,t_sales_order_car t
  		<set>
 			<if test="personid != null">
 				t1.supplieruser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.orderid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.supplieruser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editSupplieruserChangeOrder" parameterType="java.util.Map">
  	UPDATE t_sales_order_detail t1,t_sales_order t
  		<set>
 			<if test="personid != null">
 				t1.supplieruser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.orderid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.supplieruser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editSupplieruserChangeReceipt" parameterType="java.util.Map">
  	UPDATE t_sales_receipt_detail t1,t_sales_receipt t
  		<set>
 			<if test="personid != null">
 				t1.supplieruser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.billid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.supplieruser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editSupplieruserChangeRejectbill" parameterType="java.util.Map">
  	UPDATE t_sales_rejectbill_detail t1,t_sales_rejectbill t
  		<set>
 			<if test="personid != null">
 				t1.supplieruser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.billid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.supplieruser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editSupplieruserChangeSaleout" parameterType="java.util.Map">
  	UPDATE t_storage_saleout_detail t1,t_storage_saleout t
  		<set>
 			<if test="personid != null">
 				t1.supplieruser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.saleoutid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.supplieruser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editSupplieruserChangeSaleRejectEnter" parameterType="java.util.Map">
  	UPDATE t_storage_salereject_enter_detail t1,t_storage_salereject_enter t
  		<set>
 			<if test="personid != null">
 				t1.supplieruser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
  		<if test="1 == 1">
        	and t1.salerejectid = t.id
        </if>
        <if test="brandid != null">
        	AND t1.brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND t.customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and t1.supplieruser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editSupplieruserChangeInvoice" parameterType="java.util.Map">
  	UPDATE t_account_sales_invoice_detail
  		<set>
 			<if test="personid != null">
 				supplieruser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
        <if test="brandid != null">
        	AND brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and supplieruser = #{initpersonid}
        </if>
	</trim>
  </update>
    <update id="editSupplieruserChangeInvoiceBill" parameterType="java.util.Map">
        UPDATE t_account_sales_invoicebill_detail
        <set>
            <if test="personid != null">
                supplieruser = #{personid}
            </if>
        </set>
        <trim prefix="where" prefixOverrides="and|or" >
            <if test="brandid != null">
                AND brandid = #{brandid}
            </if>
            <if test="customerid != null">
                AND customerid = #{customerid}
            </if>
            <if test="initpersonid != null">
                and supplieruser = #{initpersonid}
            </if>
        </trim>
    </update>
  <update id="editSupplieruserChangePushBalance" parameterType="java.util.Map">
  	UPDATE t_account_customer_push_balance
  		<set>
 			<if test="personid != null">
 				supplieruser = #{personid}
 			</if>
 		</set>
 	<trim prefix="where" prefixOverrides="and|or" >
        <if test="brandid != null">
        	AND brandid = #{brandid}
        </if>
        <if test="customerid != null">
        	AND customerid = #{customerid}
        </if>
        <if test="initpersonid != null">
        	and supplieruser = #{initpersonid}
        </if>
	</trim>
  </update>
  <update id="editSupplieruserChangeBill" parameterType="java.util.Map">
  	UPDATE t_sales_dispatchbill_detail t1,t_sales_dispatchbill t
		SET t1.supplieruser = #{personid}
	WHERE t1.billid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_sales_order_car_detail t1,t_sales_order_car t
		SET t1.supplieruser = #{personid}
	WHERE t1.orderid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_sales_order_detail t1,t_sales_order t
		SET t1.supplieruser = #{personid}
	WHERE t1.orderid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_sales_receipt_detail t1,t_sales_receipt t
		SET t1.supplieruser = #{personid}
	WHERE t1.billid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_sales_rejectbill_detail t1,t_sales_rejectbill t
		SET t1.supplieruser = #{personid}
	WHERE t1.billid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_storage_saleout_detail t1,t_storage_saleout t
		SET t1.supplieruser = #{personid}
	WHERE t1.saleoutid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_storage_salereject_enter_detail t1,t_storage_salereject_enter t
		SET t1.supplieruser = #{personid}
	WHERE t1.salerejectid = t.id AND t1.brandid = #{brandid} AND t.customerid = #{customerid};
	UPDATE t_account_sales_invoice_detail
		SET supplieruser = #{personid}
	WHERE brandid = #{brandid} AND customerid = #{customerid};
	UPDATE t_account_customer_push_balance
		SET supplieruser = #{personid}
	WHERE brandid = #{brandid} AND customerid = #{customerid};
  </update>

    <update id="editSupplieruserChangeDemandBC" parameterType="java.util.Map">
        UPDATE t_sales_demand_detail t1,t_sales_demand t2,t_base_personnel_supplier_brandcustomer t,t_base_goods_info g
        SET t1.supplieruser = t.personid
        WHERE t1.orderid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editSupplieruserChangeDispatchbillBC" parameterType="java.util.Map">
        UPDATE t_sales_dispatchbill_detail t1,t_sales_dispatchbill t2,t_base_personnel_supplier_brandcustomer t,t_base_goods_info g
        SET t1.supplieruser = t.personid
        WHERE t1.billid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editSupplieruserChangeOrderCarBC" parameterType="java.util.Map">
        UPDATE t_sales_order_car_detail t1,t_sales_order_car t2,t_base_personnel_supplier_brandcustomer t,t_base_goods_info g
        SET t1.supplieruser = t.personid
        WHERE t1.orderid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editSupplieruserChangeOrderBC" parameterType="java.util.Map">
        UPDATE t_sales_order_detail t1,t_sales_order t2,t_base_personnel_supplier_brandcustomer t,t_base_goods_info g
        SET t1.supplieruser = t.personid
        WHERE t1.orderid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editSupplieruserChangeReceiptBC" parameterType="java.util.Map">
        UPDATE t_sales_receipt_detail t1,t_sales_receipt t2,t_base_personnel_supplier_brandcustomer t,t_base_goods_info g
        SET t1.supplieruser = t.personid
        WHERE t1.billid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editSupplieruserChangeRejectbillBC" parameterType="java.util.Map">
        UPDATE t_sales_rejectbill_detail t1,t_sales_rejectbill t2,t_base_personnel_supplier_brandcustomer t,t_base_goods_info g
        SET t1.supplieruser = t.personid
        WHERE t1.billid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editSupplieruserChangeSaleoutBC" parameterType="java.util.Map">
        UPDATE t_storage_saleout_detail t1,t_storage_saleout t2,t_base_personnel_supplier_brandcustomer t,t_base_goods_info g
        SET t1.supplieruser = t.personid
        WHERE t1.saleoutid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editSupplieruserChangeSaleRejectEnterBC" parameterType="java.util.Map">
        UPDATE t_storage_salereject_enter_detail t1,t_storage_salereject_enter t2,t_base_personnel_supplier_brandcustomer t,t_base_goods_info g
        SET t1.supplieruser = t.personid
        WHERE t1.salerejectid = t2.id and t1.goodsid = g.id and t2.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editSupplieruserChangeInvoiceBC" parameterType="java.util.Map">
        UPDATE t_account_sales_invoice_detail t1,t_base_personnel_supplier_brandcustomer t,t_base_goods_info g
        SET t1.supplieruser = t.personid
        WHERE t1.goodsid = g.id and t1.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editSupplieruserChangeInvoiceBillBC" parameterType="java.util.Map">
        UPDATE t_account_sales_invoicebill_detail t1,t_base_personnel_supplier_brandcustomer t,t_base_goods_info g
        SET t1.supplieruser = t.personid
        WHERE t1.goodsid = g.id and t1.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editSupplieruserChangePushBalanceBC" parameterType="java.util.Map">
        UPDATE t_account_customer_push_balance t1,t_base_personnel_supplier_brandcustomer t,t_base_goods_info g
        SET t1.supplieruser = t.personid
        WHERE t1.brandid = g.brand and t1.customerid = t.customerid and t1.brandid = t.brandid and t.brandid = g.brand
        and g.modifytime >= #{startdate} and <![CDATA[g.modifytime <= DATE_ADD(STR_TO_DATE(#{enddate},'%Y-%m-%d'),INTERVAL '1' day)]]>;
    </update>
  
  <!-- 删除人员对应品牌对应客户更新单据 -->
    <update id="editSupplieruserChangeDemandDel" parameterType="java.util.Map">
        UPDATE t_sales_demand_detail t1,t_sales_demand t,t_base_personnel_no_brandandcustomer t2
        SET t1.supplieruser = ''
        where t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '7'
        and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
  <update id="editSupplieruserChangeDispatchbillDel" parameterType="java.util.Map">
  	UPDATE t_sales_dispatchbill_detail t1,t_sales_dispatchbill t,t_base_personnel_no_brandandcustomer t2
		SET t1.supplieruser = ''
	where t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '7'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editSupplieruserChangeOrderCarDel" parameterType="java.util.Map">
  	UPDATE t_sales_order_car_detail t1,t_sales_order_car t,t_base_personnel_no_brandandcustomer t2
		SET t1.supplieruser = ''
	where t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '7'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editSupplieruserChangeOrderDel" parameterType="java.util.Map">
  	UPDATE t_sales_order_detail t1,t_sales_order t,t_base_personnel_no_brandandcustomer t2
		SET t1.supplieruser = ''
	where t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '7'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
    and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editSupplieruserChangeReceiptDel" parameterType="java.util.Map">
  	UPDATE t_sales_receipt_detail t1,t_sales_receipt t,t_base_personnel_no_brandandcustomer t2
		SET t1.supplieruser = ''
	where t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '7'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editSupplieruserChangeRejectbillDel" parameterType="java.util.Map">
  	UPDATE t_sales_rejectbill_detail t1,t_sales_rejectbill t,t_base_personnel_no_brandandcustomer t2
		SET t1.supplieruser = ''
	where t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '7'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editSupplieruserChangeSaleoutDel" parameterType="java.util.Map">
  	UPDATE t_storage_saleout_detail t1,t_storage_saleout t,t_base_personnel_no_brandandcustomer t2
		SET t1.supplieruser = ''
	where t1.saleoutid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '7'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editSupplieruserChangeSaleRejectEnterDel" parameterType="java.util.Map">
  	UPDATE t_storage_salereject_enter_detail t1,t_storage_salereject_enter t,t_base_personnel_no_brandandcustomer t2
		SET t1.supplieruser = ''
	where t1.salerejectid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '7'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
  </update>
  <update id="editSupplieruserChangeInvoiceDel" parameterType="java.util.Map">
  	UPDATE t_account_sales_invoice_detail t,t_base_personnel_no_brandandcustomer t2
  		SET t.supplieruser = ''
  	where t.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '7'
  	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
  	and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
  </update>
    <update id="editSupplieruserChangeInvoiceBillDel" parameterType="java.util.Map">
        UPDATE t_account_sales_invoicebill_detail t,t_base_personnel_no_brandandcustomer t2
        SET t.supplieruser = ''
        where t.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '7'
        and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
  <update id="editSupplieruserChangePushBalanceDel" parameterType="java.util.Map">
  	UPDATE t_account_customer_push_balance t,t_base_personnel_no_brandandcustomer t2
		SET t.supplieruser = ''
	where t.brandid = t2.brandid AND t.customerid = t2.customerid and t2.employetype = '7'
	and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day);
  </update>
  
  <!-- 根据联系人编码获取客户数据 -->
  <select id="getCustomerListByContact" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Customer">
  	select * from t_base_sales_customer where contact = #{contact}
  </select>
  <select id="getCustomerListByidArr" resultType="com.hd.agent.basefiles.model.Customer">
  	select * from t_base_sales_customer where id in
  	<foreach collection="array" index="index" item="item" open="(" separator="," close=")">
  		#{item}
  	</foreach>
  </select>
  <!-- 根据条件 提供客户品牌价格套 客户列表 -->
  <select id="getCustomerListWithBrandPricesort" parameterType="map" resultType="com.hd.agent.basefiles.model.Customer">
	  select 
	    <include refid="Base_Column_List" />
	    from t_base_sales_customer
	  	<trim prefix="where" prefixOverrides="and|or" >
			<if test="customerid != null" >
	         and FIND_IN_SET(id,#{customerid})
	      	</if>
	      	<if test="pcustomerid != null" >
	         and FIND_IN_SET(id,#{pcustomerid})
	      	</if>
	      	<if test="salesarea != null" >
	         and FIND_IN_SET(salesarea,#{salesarea})
	      	</if>
	      	<if test="customersort != null" >
	         and FIND_IN_SET(customersort,#{customersort})
	      	</if>
		</trim>
  </select>
  <delete id="detleCustomerBrandPricesortByCustomeridAndBrandid" parameterType="java.lang.String">
  	delete from t_base_sales_customer_brand_pricesort 
  	where FIND_IN_SET(brandid,#{brandids}) and customerid=#{customerid} 
  </delete>
  <insert id="addCustomerBrandPricesort" parameterType="java.lang.String">
  	insert into t_base_sales_customer_brand_pricesort (customerid,brandid,pricesort,remark,addtime)
  	values (#{customerid},#{brandid},#{pricesort},#{remark},now())
  </insert>
  <select id="showCustomerBrandPricesort" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.CustomerBrandPricesort">
  	select id,customerid,brandid,pricesort,pricesort as initpricesort,remark,addtime from t_base_sales_customer_brand_pricesort
  	where customerid=#{customerid}
  	order by brandid
  </select>
  <select id="getCustomerPriceInfoByCustomeridAndBrandid" parameterType="java.lang.String" resultType="java.lang.String">
  	select pricesort from t_base_sales_customer_brand_pricesort
  	where customerid=#{customerid} and brandid=#{brandid}
  </select>
  <select id="getCustomerPriceInfoByPCustomeridAndBrandid" parameterType="java.lang.String" resultType="java.lang.String">
  	select t.pricesort from t_base_sales_customer_brand_pricesort t,t_base_sales_customer t1
	where t.customerid=t1.pid and t1.id=#{customerid} and t.brandid=#{brandid}
  </select>
  <update id="editCustomerBrandPricesort" parameterType="com.hd.agent.basefiles.model.CustomerBrandPricesort">
  	update t_base_sales_customer_brand_pricesort
  	<set >
      <if test="customerid != null" >
        customerid = #{customerid},
      </if>
      <if test="brandid != null" >
        brandid = #{brandid},
      </if>
      <if test="pricesort != null" >
        pricesort = #{pricesort},
      </if>
      <if test="remark != null" >
        remark = #{remark},
      </if>
    </set>
    where id = #{id}
  </update>
  <delete id="deleteCustomerBrandPricesorts" parameterType="java.lang.String">
  	delete from t_base_sales_customer_brand_pricesort
  	where id = #{id}
  </delete>
  <select id="getCustomerBrandPricesortInfo" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.CustomerBrandPricesort">
  	select * from t_base_sales_customer_brand_pricesort
  	where id = #{id}
  </select>
  <select id="getShopnoIsRepeatFlag" parameterType="java.lang.String" resultType="int">
      select count(1) from t_base_sales_customer
      where pid = #{pcustomerid} and shopno = #{shopno}
  </select>
  <select id="getCustomerById" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.Customer">
    SELECT a.id,a.name,a.pid,a.islast, e.name AS pname,a.shortcode,a.shortname,a.shopno,a.taxno,a.bank,a.cardno,a.caraccount,a.fund,a.storearea, a.contact, a.creditrating,
    b.name AS contactname,a.mobile,a.faxno,a.nature,a.ischain,a.countylevel,a.villagetown,a.address, a.settletype, c.name AS settletypename,
    a.settleday,a.paytype, d.name AS paytypename,a.iscash,a.islongterm,a.overgracedate,a.credit,a.reconciliationdate,a.billingdate,a.arrivalamountdate,
    a.tickettype,a.canceltype,a.pricesort,a.promotionsort,a.salesarea,f.thisname AS salesareaname,a.customersort,m.thisname AS customersortname,
    a.abclevel,a.salesdeptid,a.salesdeptname,a.salesuserid,a.salesusername,a.tallyuserid,a.tallyusername,a.indoorstaff,n.name AS indoorstaffname,a.payeeid,
    a.checker,a.checkmobile,a.checkemail,a.payer,a.payermobile,a.payeremail,a.shopmanager,a.shopmanagermobile,a.gsreceipter,a.gsreceiptermobile,
    a.state,a.addusername,a.remark,a.person,a.personmobile,a.personcard,a.setupdate,a.overcontrol,a.creditrating,a.creditdate,a.targetsales,
    a.yearback,a.monthback,a.dispatchingamount,a.sixone
    FROM t_base_sales_customer a
    LEFT JOIN t_base_sales_customer e ON a.pid = e.id
    LEFT JOIN t_base_linkman_info b ON a.contact = b.id
    LEFT JOIN t_base_finance_settlement c ON a.settletype = c.id
    LEFT JOIN t_base_finance_payment d ON a.paytype = d.id
    LEFT JOIN t_base_sales_area f ON a.salesarea = f.id
    LEFT JOIN t_base_sales_customersort m ON a.customersort = m.id
    LEFT JOIN t_base_personnel n ON a.indoorstaff = n.id
    where a.id = #{id}
   </select>
    <select id="getCustomerBrandSettletypeList" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.CustomerBrandSettletype">
        select id,customerid,brandid,settletype,settletype as initsettletype,settleday,settleday as initsettleday,addtime from t_base_sales_customer_brand_settletype
        where customerid=#{customerid}
        order by brandid
    </select>
    <delete id="detleCustomerBrandSettletypeByCustomeridAndBrandid" parameterType="java.lang.String">
        delete from t_base_sales_customer_brand_settletype
  	    where FIND_IN_SET(brandid,#{brandids}) and customerid=#{customerid}
    </delete>
    <insert id="addCustomerBrandSettletype" parameterType="com.hd.agent.basefiles.model.CustomerBrandSettletype">
        INSERT into t_base_sales_customer_brand_settletype
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="customerid != null" >
                customerid,
            </if>
            <if test="brandid != null" >
                brandid,
            </if>
            <if test="settletype != null" >
                settletype,
            </if>
            <if test="settleday != null" >
                settleday,
            </if>
            <if test="1 == 1" >
                addtime,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="customerid != null" >
                #{customerid},
            </if>
            <if test="brandid != null" >
                #{brandid},
            </if>
            <if test="settletype != null" >
                #{settletype},
            </if>
            <if test="settleday != null" >
                #{settleday},
            </if>
            <if test="1 == 1" >
                now(),
            </if>
        </trim>
    </insert>
    <select id="getCustomerBrandSettletypeByCustomeridAndBrandid" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.CustomerBrandSettletype">
        SELECT id,customerid,brandid,settletype,settleday from t_base_sales_customer_brand_settletype
        where brandid = #{brandid} and customerid = #{customerid}
    </select>
    <update id="editCustomerBrandSettletype" parameterType="com.hd.agent.basefiles.model.CustomerBrandSettletype">
        update t_base_sales_customer_brand_settletype
        <set >
            <if test="customerid != null" >
                customerid = #{customerid},
            </if>
            <if test="brandid != null" >
                brandid = #{brandid},
            </if>
            <if test="settletype != null" >
                settletype = #{settletype},
            </if>
            <if test="settleday != null" >
                settleday = #{settleday},
            </if>
        </set>
        where id = #{id}
    </update>
    <select id="getCustomerBrandSettletypeInfo" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.CustomerBrandSettletype">
        SELECT id,customerid,brandid,settletype,settleday from t_base_sales_customer_brand_settletype
        where id = #{id}
    </select>
    <delete id="deleteCustomerBrandSettletype" parameterType="java.lang.String">
        delete from t_base_sales_customer_brand_settletype
        where id = #{id}
    </delete>
    <delete id="deleteCustomerBrandSettletypeByCustomeridAndBrandid" parameterType="java.lang.String">
        DELETE from t_base_sales_customer_brand_settletype
        where brandid = #{brandid} and customerid = #{customerid}
    </delete>

    <update id="editGlobalOrderDemandBC" parameterType="map">
        UPDATE t_sales_demand_detail t1,t_sales_demand t,t_base_personnel_brandandcustomer t2
        SET t1.branduser = t2.personid
        WHERE t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
        and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalOrderDispatchbillBC" parameterType="map">
        UPDATE t_sales_dispatchbill_detail t1,t_sales_dispatchbill t,t_base_personnel_brandandcustomer t2
          SET t1.branduser = t2.personid
        WHERE t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
        and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalOrderCarBC" parameterType="map">
        UPDATE t_sales_order_car_detail t1,t_sales_order_car t,t_base_personnel_brandandcustomer t2
		  SET t1.branduser = t2.personid
	    WHERE t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	    and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	    and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalOrderBC" parameterType="map">
      UPDATE t_sales_order_detail t1,t_sales_order t,t_base_personnel_brandandcustomer t2
	    SET t1.branduser = t2.personid
	  WHERE t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	  and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalOrderReceiptBC" parameterType="map">
      UPDATE t_sales_receipt_detail t1,t_sales_receipt t,t_base_personnel_brandandcustomer t2
		SET t1.branduser = t2.personid
	  WHERE t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	  and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalOrderRejectbillBC" parameterType="map">
      UPDATE t_sales_rejectbill_detail t1,t_sales_rejectbill t,t_base_personnel_brandandcustomer t2
		SET t1.branduser = t2.personid
	  WHERE t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	  and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalOrderSaleoutBC" parameterType="map">
      UPDATE t_storage_saleout_detail t1,t_storage_saleout t,t_base_personnel_brandandcustomer t2
		SET t1.branduser = t2.personid
	  WHERE t1.saleoutid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	  and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalOrderSalerejectEnterBC" parameterType="map">
      UPDATE t_storage_salereject_enter_detail t1,t_storage_salereject_enter t,t_base_personnel_brandandcustomer t2
		SET t1.branduser = t2.personid
	  WHERE t1.salerejectid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	  and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalOrderInvoiceBC" parameterType="map">
      UPDATE t_account_sales_invoice_detail t,t_base_personnel_brandandcustomer t2
        SET t.branduser = t2.personid
      WHERE t.brandid = t2.brandid AND t.customerid = t2.customerid
      and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
      and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalOrderInvoiceBillBC" parameterType="map">
        UPDATE t_account_sales_invoicebill_detail t,t_base_personnel_brandandcustomer t2
        SET t.branduser = t2.personid
        WHERE t.brandid = t2.brandid AND t.customerid = t2.customerid
        and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalOrderPushBalanceBC" parameterType="map">
      UPDATE t_account_customer_push_balance t,t_base_personnel_brandandcustomer t2
        SET t.branduser = t2.personid
	  WHERE t.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day);
    </update>

    <update id="editGlobalSupplieruserChangeDemandBC" parameterType="map">
        UPDATE t_sales_demand_detail t1,t_sales_demand t,t_base_personnel_supplier_brandcustomer t2
        SET t1.supplieruser = t2.personid
        WHERE t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
        and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalSupplieruserChangeDispatchbillBC" parameterType="map">
      UPDATE t_sales_dispatchbill_detail t1,t_sales_dispatchbill t,t_base_personnel_supplier_brandcustomer t2
        SET t1.supplieruser = t2.personid
	  WHERE t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	  and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalSupplieruserChangeOrderCarBC" parameterType="map">
      UPDATE t_sales_order_car_detail t1,t_sales_order_car t,t_base_personnel_supplier_brandcustomer t2
		SET t1.supplieruser = t2.personid
	  WHERE t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
      and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalSupplieruserChangeOrderBC" parameterType="map">
      UPDATE t_sales_order_detail t1,t_sales_order t,t_base_personnel_supplier_brandcustomer t2
		SET t1.supplieruser = t2.personid
	  WHERE t1.orderid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	  and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalSupplieruserChangeReceiptBC" parameterType="map">
      UPDATE t_sales_receipt_detail t1,t_sales_receipt t,t_base_personnel_supplier_brandcustomer t2
		SET t1.supplieruser = t2.personid
	  WHERE t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	  and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalSupplieruserChangeRejectbillBC" parameterType="map">
      UPDATE t_sales_rejectbill_detail t1,t_sales_rejectbill t,t_base_personnel_supplier_brandcustomer t2
		SET t1.supplieruser = t2.personid
	  WHERE t1.billid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	 and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	  and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalSupplieruserChangeSaleoutBC" parameterType="map">
      UPDATE t_storage_saleout_detail t1,t_storage_saleout t,t_base_personnel_supplier_brandcustomer t2
		SET t1.supplieruser = t2.personid
	  WHERE t1.saleoutid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	  and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalSupplieruserChangeSaleRejectEnterBC" parameterType="map">
      UPDATE t_storage_salereject_enter_detail t1,t_storage_salereject_enter t,t_base_personnel_supplier_brandcustomer t2
		SET t1.supplieruser = t2.personid
	  WHERE t1.salerejectid = t.id AND t1.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	  and (t1.id > #{startnum} and <![CDATA[ t1.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalSupplieruserChangeInvoiceBC" parameterType="map">
      UPDATE t_account_sales_invoice_detail t,t_base_personnel_supplier_brandcustomer t2
		SET t.supplieruser = t2.personid
	  WHERE t.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
	  and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalSupplieruserChangeInvoiceBillBC" parameterType="map">
        UPDATE t_account_sales_invoicebill_detail t,t_base_personnel_supplier_brandcustomer t2
        SET t.supplieruser = t2.personid
        WHERE t.brandid = t2.brandid AND t.customerid = t2.customerid
        and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day)
        and (t.id > #{startnum} and <![CDATA[ t.id <= #{endnum}]]> );
    </update>
    <update id="editGlobalSupplieruserChangePushBalanceBC" parameterType="map">
      UPDATE t_account_customer_push_balance t,t_base_personnel_supplier_brandcustomer t2
        SET t.supplieruser = t2.personid
	  WHERE t.brandid = t2.brandid AND t.customerid = t2.customerid
	  and t2.addtime >= DATE_ADD(STR_TO_DATE('${startdate}','%Y-%m-%d'),INTERVAL '-1' day);
    </update>
    <select id="getCustomerLocationList" resultType="java.util.Map">
        select l.customerid, l.location, substring_index(l.location, ',', 1) lng, substring_index(l.location, ',', -1) lat, c.name, s.thisname salesarea, cs.thisname customersort, p.name salesusername
        from t_base_sales_customer_location l
        left join t_base_sales_customer c on l.customerid = c.id
        left join t_base_sales_area s on c.salesarea = s.id
        left join t_base_sales_customersort cs on c.customersort = cs.id
        left join t_base_personnel p on c.salesuserid = p.id
        <if test="customerids != null">
            <foreach collection="customerids" item="customerid" open=" where l.customerid in ( '', " close=")" separator=",">
                #{customerid }
            </foreach>
        </if>
    </select>
    <insert id="insertCustomerLocation" parameterType="com.hd.agent.basefiles.model.CustomerLocation" >
        insert into t_base_sales_customer_location
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="customerid != null" >
                customerid,
            </if>
            <if test="location != null" >
                location,
            </if>
            <if test="address != null" >
                address,
            </if>
            <if test="remark != null" >
                remark,
            </if>
            addtime,
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="customerid != null" >
                #{customerid},
            </if>
            <if test="location != null" >
                #{location},
            </if>
            <if test="address != null" >
                #{address},
            </if>
            <if test="remark != null" >
                #{remark},
            </if>
            now(),
        </trim>
    </insert>
    <select id="selectCustomerLocation" parameterType="java.lang.String" resultType="com.hd.agent.basefiles.model.CustomerLocation">
        select customerid, location, address, remark, addtime
        from t_base_sales_customer_location
        where customerid = #{customerid }
    </select>
    <delete id="deleteCustomerLocation" parameterType="java.lang.String">
        delete from t_base_sales_customer_location
        where customerid = #{customerid }
    </delete>
    <select id="selectUnlocatedCustomerList" resultType="java.util.Map">
        select t1.id, concat(t2.longitude, ',', t2.latitude) location
        from t_base_sales_customer t1
        left join v_base_customer_location t2 on t1.id = t2.customerid
        where not exists(select 1 from t_base_sales_customer_location t2 where t1.id = t2.customerid)
        and t2.latitude is not null
    </select>
    <select id="getCustomerListForMecshop" parameterType="java.util.Date" resultType="com.hd.agent.basefiles.model.Customer">
        select
            id, name,pinyin, thisid, pid,shopno, state, remark, adduserid, addusername, adddeptid, adddeptname,
            addtime, modifyuserid, modifyusername, modifytime, openuserid, openusername, opentime,
            closeuserid, closeusername, closetime, shortname, shortcode, abclevel, telphone,
            faxno, email, mobile, website, person, nature, fund, setupdate, staffnum, turnoveryear,
            firstbusinessdate, salesarea, customersort, contact, address,promotionsort, zip, taxno, bank, cardno,
            credit, creditdate, salesmonth, settlement, settletype, settleday, paytype, billing,
            billtype, overcontrol, overgracedate, canceltype, salesdeptid, salesdeptname, salesuserid,
            salesusername, indoorstaff,payeeid, pricesort, tallyuserid, tallyusername, supplier, margin, allsalessum,
            allcollectionsum, duefromsum, otherpayablesum, allsalessumyear, allcollectionsumyear,
            newsalesdate, newsalessum, newcollectdate, newcollectsum, salessummonth, field01, islast,
            field02, field03, field04, field05, field06, field07, field08, field09, field10, field11, field12,
            caraccount,storearea,reconciliationdate,billingdate,iscash,islongterm,countylevel,villagetown,ischain,tickettype,
            checker,checkmobile,checkemail,payer,payermobile,payeremail,shopmanager,shopmanagermobile,gsreceipter,gsreceiptermobile,
            arrivalamountdate,personmobile,personcard,creditrating,targetsales,yearback,monthback,dispatchingamount,sixone,issendminimum
        from t_base_sales_customer
        <trim prefix="where" prefixOverrides="and|or">
            <if test="time != null">
                and (addtime > #{time } or modifytime > #{time })
            </if>
        </trim>
    </select>
    <select id="getCustomerPriceListForMecshop" parameterType="int" resultType="java.util.Map">
        select customerid, goodsid, taxrate, taxprice, price, ctcboxprice, noprice
        from t_base_sales_customer_price
        limit #{offset }, #{rows }
    </select>
</mapper>
